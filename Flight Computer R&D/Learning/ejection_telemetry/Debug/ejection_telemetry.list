
ejection_telemetry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab9c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  0800ad40  0800ad40  0001ad40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2c0  0800b2c0  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800b2c0  0800b2c0  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b2c0  0800b2c0  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2c0  0800b2c0  0001b2c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2c4  0800b2c4  0001b2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800b2c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bc4  200001fc  0800b4c4  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001dc0  0800b4c4  00021dc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae2a  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000328b  00000000  00000000  0003b056  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014f8  00000000  00000000  0003e2e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013c0  00000000  00000000  0003f7e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004a3b  00000000  00000000  00040ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011dbf  00000000  00000000  000455db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5a4e  00000000  00000000  0005739a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012cde8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068a4  00000000  00000000  0012ce64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ad24 	.word	0x0800ad24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	0800ad24 	.word	0x0800ad24

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c5c:	f001 f936 	bl	8001ecc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c60:	f000 f826 	bl	8000cb0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c64:	f000 f8b2 	bl	8000dcc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000c68:	f000 f880 	bl	8000d6c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000c6c:	f003 fe9a 	bl	80049a4 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of ejection */
	ejectionHandle = osThreadNew(StartEjection, NULL, &ejection_attributes);
 8000c70:	4a09      	ldr	r2, [pc, #36]	; (8000c98 <main+0x40>)
 8000c72:	2100      	movs	r1, #0
 8000c74:	4809      	ldr	r0, [pc, #36]	; (8000c9c <main+0x44>)
 8000c76:	f003 fefd 	bl	8004a74 <osThreadNew>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <main+0x48>)
 8000c7e:	601a      	str	r2, [r3, #0]

	/* creation of telemetry */
	telemetryHandle = osThreadNew(StartTelemetry, NULL, &telemetry_attributes);
 8000c80:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <main+0x4c>)
 8000c82:	2100      	movs	r1, #0
 8000c84:	4808      	ldr	r0, [pc, #32]	; (8000ca8 <main+0x50>)
 8000c86:	f003 fef5 	bl	8004a74 <osThreadNew>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <main+0x54>)
 8000c8e:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000c90:	f003 febc 	bl	8004a0c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000c94:	e7fe      	b.n	8000c94 <main+0x3c>
 8000c96:	bf00      	nop
 8000c98:	0800af38 	.word	0x0800af38
 8000c9c:	08001685 	.word	0x08001685
 8000ca0:	20001b40 	.word	0x20001b40
 8000ca4:	0800af5c 	.word	0x0800af5c
 8000ca8:	080016a1 	.word	0x080016a1
 8000cac:	20001c98 	.word	0x20001c98

08000cb0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b0a6      	sub	sp, #152	; 0x98
 8000cb4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000cba:	2228      	movs	r2, #40	; 0x28
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f006 fdcf 	bl	8007862 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2258      	movs	r2, #88	; 0x58
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f006 fdc1 	bl	8007862 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce8:	2310      	movs	r3, #16
 8000cea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cf8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cfc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 fbb8 	bl	8002484 <HAL_RCC_OscConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0x6e>
	{
		Error_Handler();
 8000d1a:	f000 ff11 	bl	8001b40 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1e:	230f      	movs	r3, #15
 8000d20:	65fb      	str	r3, [r7, #92]	; 0x5c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d22:	2302      	movs	r3, #2
 8000d24:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d2e:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d34:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d38:	2102      	movs	r1, #2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f002 fab8 	bl	80032b0 <HAL_RCC_ClockConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000d46:	f000 fefb 	bl	8001b40 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	4618      	mov	r0, r3
 8000d56:	f002 fd13 	bl	8003780 <HAL_RCCEx_PeriphCLKConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <SystemClock_Config+0xb4>
	{
		Error_Handler();
 8000d60:	f000 feee 	bl	8001b40 <Error_Handler>
	}
}
 8000d64:	bf00      	nop
 8000d66:	3798      	adds	r7, #152	; 0x98
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000d72:	4a15      	ldr	r2, [pc, #84]	; (8000dc8 <MX_USART2_UART_Init+0x5c>)
 8000d74:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 8000d76:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000d78:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000d7c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000d92:	220c      	movs	r2, #12
 8000d94:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000db0:	f003 f9da 	bl	8004168 <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8000dba:	f000 fec1 	bl	8001b40 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20001ca0 	.word	0x20001ca0
 8000dc8:	40004400 	.word	0x40004400

08000dcc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000de2:	4b3b      	ldr	r3, [pc, #236]	; (8000ed0 <MX_GPIO_Init+0x104>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	4a3a      	ldr	r2, [pc, #232]	; (8000ed0 <MX_GPIO_Init+0x104>)
 8000de8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dec:	6153      	str	r3, [r2, #20]
 8000dee:	4b38      	ldr	r3, [pc, #224]	; (8000ed0 <MX_GPIO_Init+0x104>)
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000dfa:	4b35      	ldr	r3, [pc, #212]	; (8000ed0 <MX_GPIO_Init+0x104>)
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	4a34      	ldr	r2, [pc, #208]	; (8000ed0 <MX_GPIO_Init+0x104>)
 8000e00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e04:	6153      	str	r3, [r2, #20]
 8000e06:	4b32      	ldr	r3, [pc, #200]	; (8000ed0 <MX_GPIO_Init+0x104>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <MX_GPIO_Init+0x104>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	4a2e      	ldr	r2, [pc, #184]	; (8000ed0 <MX_GPIO_Init+0x104>)
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1c:	6153      	str	r3, [r2, #20]
 8000e1e:	4b2c      	ldr	r3, [pc, #176]	; (8000ed0 <MX_GPIO_Init+0x104>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	4b29      	ldr	r3, [pc, #164]	; (8000ed0 <MX_GPIO_Init+0x104>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	4a28      	ldr	r2, [pc, #160]	; (8000ed0 <MX_GPIO_Init+0x104>)
 8000e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e34:	6153      	str	r3, [r2, #20]
 8000e36:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <MX_GPIO_Init+0x104>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, buzzer_Pin|LED_Pin|main1_Pin|main2_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	21f0      	movs	r1, #240	; 0xf0
 8000e46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4a:	f001 fb03 	bl	8002454 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, drogue1_Pin|drogue2_Pin, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2130      	movs	r1, #48	; 0x30
 8000e52:	4820      	ldr	r0, [pc, #128]	; (8000ed4 <MX_GPIO_Init+0x108>)
 8000e54:	f001 fafe 	bl	8002454 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000e58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e5c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <MX_GPIO_Init+0x10c>)
 8000e60:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4819      	ldr	r0, [pc, #100]	; (8000ed4 <MX_GPIO_Init+0x108>)
 8000e6e:	f001 f967 	bl	8002140 <HAL_GPIO_Init>

	/*Configure GPIO pins : buzzer_Pin LED_Pin main1_Pin main2_Pin */
	GPIO_InitStruct.Pin = buzzer_Pin|LED_Pin|main1_Pin|main2_Pin;
 8000e72:	23f0      	movs	r3, #240	; 0xf0
 8000e74:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8c:	f001 f958 	bl	8002140 <HAL_GPIO_Init>

	/*Configure GPIO pins : drogue1_Pin drogue2_Pin */
	GPIO_InitStruct.Pin = drogue1_Pin|drogue2_Pin;
 8000e90:	2330      	movs	r3, #48	; 0x30
 8000e92:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480b      	ldr	r0, [pc, #44]	; (8000ed4 <MX_GPIO_Init+0x108>)
 8000ea8:	f001 f94a 	bl	8002140 <HAL_GPIO_Init>

	/*Configure GPIO pins : in22_Pin in21_Pin in12_Pin in11_Pin */
	GPIO_InitStruct.Pin = in22_Pin|in21_Pin|in12_Pin|in11_Pin;
 8000eac:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000eb0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec4:	f001 f93c 	bl	8002140 <HAL_GPIO_Init>

}
 8000ec8:	bf00      	nop
 8000eca:	3728      	adds	r7, #40	; 0x28
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	48000800 	.word	0x48000800
 8000ed8:	10210000 	.word	0x10210000

08000edc <begin>:

/* USER CODE BEGIN 4 */
int begin(void){
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
	return 1;
 8000ee0:	2301      	movs	r3, #1
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <readAltitude>:

float readAltitude(float local_pressure){
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	ed87 0a01 	vstr	s0, [r7, #4]
	return local_pressure;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	ee07 3a90 	vmov	s15, r3
}
 8000efc:	eeb0 0a67 	vmov.f32	s0, s15
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	0000      	movs	r0, r0
 8000f0c:	0000      	movs	r0, r0
	...

08000f10 <setup>:

///Empty functions end here
#define false 0
#define true 1

void setup() {
 8000f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(drogue1_GPIO_Port, drogue1_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2110      	movs	r1, #16
 8000f1a:	485d      	ldr	r0, [pc, #372]	; (8001090 <setup+0x180>)
 8000f1c:	f001 fa9a 	bl	8002454 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(drogue2_GPIO_Port, drogue2_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2120      	movs	r1, #32
 8000f24:	485a      	ldr	r0, [pc, #360]	; (8001090 <setup+0x180>)
 8000f26:	f001 fa95 	bl	8002454 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(main1_GPIO_Port, main1_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2140      	movs	r1, #64	; 0x40
 8000f2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f32:	f001 fa8f 	bl	8002454 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(main2_GPIO_Port, main2_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2180      	movs	r1, #128	; 0x80
 8000f3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3e:	f001 fa89 	bl	8002454 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2110      	movs	r1, #16
 8000f46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4a:	f001 fa83 	bl	8002454 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2120      	movs	r1, #32
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f001 fa7d 	bl	8002454 <HAL_GPIO_WritePin>

	if (!begin()){
 8000f5a:	f7ff ffbf 	bl	8000edc <begin>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d136      	bne.n	8000fd2 <setup+0xc2>
		///printf("\r\nCould not find a valid BME280 sensor, check wiring!");
		size = sprintf((char *)Data, "Could not find a valid BME280 sensor, check wiring\n");
 8000f64:	4b4b      	ldr	r3, [pc, #300]	; (8001094 <setup+0x184>)
 8000f66:	4a4c      	ldr	r2, [pc, #304]	; (8001098 <setup+0x188>)
 8000f68:	4614      	mov	r4, r2
 8000f6a:	469c      	mov	ip, r3
 8000f6c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000f70:	4665      	mov	r5, ip
 8000f72:	4626      	mov	r6, r4
 8000f74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f76:	6028      	str	r0, [r5, #0]
 8000f78:	6069      	str	r1, [r5, #4]
 8000f7a:	60aa      	str	r2, [r5, #8]
 8000f7c:	60eb      	str	r3, [r5, #12]
 8000f7e:	3410      	adds	r4, #16
 8000f80:	f10c 0c10 	add.w	ip, ip, #16
 8000f84:	4574      	cmp	r4, lr
 8000f86:	d1f3      	bne.n	8000f70 <setup+0x60>
 8000f88:	4663      	mov	r3, ip
 8000f8a:	4622      	mov	r2, r4
 8000f8c:	6810      	ldr	r0, [r2, #0]
 8000f8e:	6018      	str	r0, [r3, #0]
 8000f90:	2333      	movs	r3, #51	; 0x33
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	4b41      	ldr	r3, [pc, #260]	; (800109c <setup+0x18c>)
 8000f96:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, Data, size, 1000);
 8000f98:	4b40      	ldr	r3, [pc, #256]	; (800109c <setup+0x18c>)
 8000f9a:	881a      	ldrh	r2, [r3, #0]
 8000f9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa0:	493c      	ldr	r1, [pc, #240]	; (8001094 <setup+0x184>)
 8000fa2:	483f      	ldr	r0, [pc, #252]	; (80010a0 <setup+0x190>)
 8000fa4:	f003 f92e 	bl	8004204 <HAL_UART_Transmit>
		HAL_Delay(2000);
 8000fa8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fac:	f000 ffc4 	bl	8001f38 <HAL_Delay>

		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2110      	movs	r1, #16
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb8:	f001 fa4c 	bl	8002454 <HAL_GPIO_WritePin>

		HAL_Delay(5000);
 8000fbc:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fc0:	f000 ffba 	bl	8001f38 <HAL_Delay>
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2110      	movs	r1, #16
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fcc:	f001 fa42 	bl	8002454 <HAL_GPIO_WritePin>
		while (1);
 8000fd0:	e7fe      	b.n	8000fd0 <setup+0xc0>
	} else {
		int i;
		for (i = 0 ; i < 3; i++){
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	e014      	b.n	8001002 <setup+0xf2>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2110      	movs	r1, #16
 8000fdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe0:	f001 fa38 	bl	8002454 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000fe4:	2064      	movs	r0, #100	; 0x64
 8000fe6:	f000 ffa7 	bl	8001f38 <HAL_Delay>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2110      	movs	r1, #16
 8000fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff2:	f001 fa2f 	bl	8002454 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000ff6:	2064      	movs	r0, #100	; 0x64
 8000ff8:	f000 ff9e 	bl	8001f38 <HAL_Delay>
		for (i = 0 ; i < 3; i++){
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3301      	adds	r3, #1
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b02      	cmp	r3, #2
 8001006:	dde7      	ble.n	8000fd8 <setup+0xc8>
		}
	}

	for (int i = 0; i < 500; i++){
 8001008:	2300      	movs	r3, #0
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	e017      	b.n	800103e <setup+0x12e>
		ground_alt += readAltitude(local_pressure/100.0); //takes sea-level pressure and reads alt 500 times
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <setup+0x194>)
 8001010:	edd3 7a00 	vldr	s15, [r3]
 8001014:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80010a8 <setup+0x198>
 8001018:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800101c:	eeb0 0a66 	vmov.f32	s0, s13
 8001020:	f7ff ff64 	bl	8000eec <readAltitude>
 8001024:	eeb0 7a40 	vmov.f32	s14, s0
 8001028:	4b20      	ldr	r3, [pc, #128]	; (80010ac <setup+0x19c>)
 800102a:	edd3 7a00 	vldr	s15, [r3]
 800102e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001032:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <setup+0x19c>)
 8001034:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 500; i++){
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	3301      	adds	r3, #1
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001044:	dbe3      	blt.n	800100e <setup+0xfe>
	}
	ground_alt = ground_alt/500.0; //average of alt readings
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <setup+0x19c>)
 8001048:	ed93 7a00 	vldr	s14, [r3]
 800104c:	eddf 6a18 	vldr	s13, [pc, #96]	; 80010b0 <setup+0x1a0>
 8001050:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <setup+0x19c>)
 8001056:	edc3 7a00 	vstr	s15, [r3]
	a = 2*3.14159*a;
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <setup+0x1a4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fa7a 	bl	8000558 <__aeabi_f2d>
 8001064:	a308      	add	r3, pc, #32	; (adr r3, 8001088 <setup+0x178>)
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	f7ff facd 	bl	8000608 <__aeabi_dmul>
 800106e:	4603      	mov	r3, r0
 8001070:	460c      	mov	r4, r1
 8001072:	4618      	mov	r0, r3
 8001074:	4621      	mov	r1, r4
 8001076:	f7ff fd9f 	bl	8000bb8 <__aeabi_d2f>
 800107a:	4602      	mov	r2, r0
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <setup+0x1a4>)
 800107e:	601a      	str	r2, [r3, #0]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001088:	f01b866e 	.word	0xf01b866e
 800108c:	401921f9 	.word	0x401921f9
 8001090:	48000800 	.word	0x48000800
 8001094:	20001b90 	.word	0x20001b90
 8001098:	0800ad58 	.word	0x0800ad58
 800109c:	20001c94 	.word	0x20001c94
 80010a0:	20001ca0 	.word	0x20001ca0
 80010a4:	20000000 	.word	0x20000000
 80010a8:	42c80000 	.word	0x42c80000
 80010ac:	20000218 	.word	0x20000218
 80010b0:	43fa0000 	.word	0x43fa0000
 80010b4:	20000014 	.word	0x20000014

080010b8 <loop>:

void loop() {
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
	if (main_deployed == false){
 80010be:	4b9c      	ldr	r3, [pc, #624]	; (8001330 <loop+0x278>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f040 815c 	bne.w	8001380 <loop+0x2c8>
		T = (HAL_GetTick() - t_previous_loop)/1000; //millis() = time since program start running T running time of curr loop (s)
 80010c8:	f000 ff2a 	bl	8001f20 <HAL_GetTick>
 80010cc:	ee07 0a90 	vmov	s15, r0
 80010d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010d4:	4b97      	ldr	r3, [pc, #604]	; (8001334 <loop+0x27c>)
 80010d6:	edd3 7a00 	vldr	s15, [r3]
 80010da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010de:	eddf 6a96 	vldr	s13, [pc, #600]	; 8001338 <loop+0x280>
 80010e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e6:	4b95      	ldr	r3, [pc, #596]	; (800133c <loop+0x284>)
 80010e8:	edc3 7a00 	vstr	s15, [r3]
		t_previous_loop = HAL_GetTick(); //total time
 80010ec:	f000 ff18 	bl	8001f20 <HAL_GetTick>
 80010f0:	ee07 0a90 	vmov	s15, r0
 80010f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010f8:	4b8e      	ldr	r3, [pc, #568]	; (8001334 <loop+0x27c>)
 80010fa:	edc3 7a00 	vstr	s15, [r3]

		alt_meas = (readAltitude(local_pressure/100) - ground_alt)*3.28084; //Measures AGL altitude in feet
 80010fe:	4b90      	ldr	r3, [pc, #576]	; (8001340 <loop+0x288>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8001344 <loop+0x28c>
 8001108:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800110c:	eeb0 0a66 	vmov.f32	s0, s13
 8001110:	f7ff feec 	bl	8000eec <readAltitude>
 8001114:	eeb0 7a40 	vmov.f32	s14, s0
 8001118:	4b8b      	ldr	r3, [pc, #556]	; (8001348 <loop+0x290>)
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001122:	ee17 0a90 	vmov	r0, s15
 8001126:	f7ff fa17 	bl	8000558 <__aeabi_f2d>
 800112a:	a37f      	add	r3, pc, #508	; (adr r3, 8001328 <loop+0x270>)
 800112c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001130:	f7ff fa6a 	bl	8000608 <__aeabi_dmul>
 8001134:	4603      	mov	r3, r0
 8001136:	460c      	mov	r4, r1
 8001138:	4618      	mov	r0, r3
 800113a:	4621      	mov	r1, r4
 800113c:	f7ff fd3c 	bl	8000bb8 <__aeabi_d2f>
 8001140:	4602      	mov	r2, r0
 8001142:	4b82      	ldr	r3, [pc, #520]	; (800134c <loop+0x294>)
 8001144:	601a      	str	r2, [r3, #0]

		// Low-pass filter - rocket at high speeds pressure fluctuates and affects altitude reading, usaully at a high frequency, so low pass filter filters those high freuqency changes out
		//and keeps just the overall, low frequency changes (caused by altitude change)
		alt_filtered = (1 - T * a) * alt_previous[num_meas-1] + a * T * alt_meas;
 8001146:	4b7d      	ldr	r3, [pc, #500]	; (800133c <loop+0x284>)
 8001148:	ed93 7a00 	vldr	s14, [r3]
 800114c:	4b80      	ldr	r3, [pc, #512]	; (8001350 <loop+0x298>)
 800114e:	edd3 7a00 	vldr	s15, [r3]
 8001152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001156:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800115a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800115e:	4b7d      	ldr	r3, [pc, #500]	; (8001354 <loop+0x29c>)
 8001160:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001164:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001168:	4b79      	ldr	r3, [pc, #484]	; (8001350 <loop+0x298>)
 800116a:	edd3 6a00 	vldr	s13, [r3]
 800116e:	4b73      	ldr	r3, [pc, #460]	; (800133c <loop+0x284>)
 8001170:	edd3 7a00 	vldr	s15, [r3]
 8001174:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001178:	4b74      	ldr	r3, [pc, #464]	; (800134c <loop+0x294>)
 800117a:	edd3 7a00 	vldr	s15, [r3]
 800117e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001182:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001186:	4b74      	ldr	r3, [pc, #464]	; (8001358 <loop+0x2a0>)
 8001188:	edc3 7a00 	vstr	s15, [r3]

		// Slide window of 10 measurement history.
		for (int i = 0; i < num_meas-1; i++){
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	e00d      	b.n	80011ae <loop+0xf6>
			alt_previous[i] = alt_previous[i+1];
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3301      	adds	r3, #1
 8001196:	4a6f      	ldr	r2, [pc, #444]	; (8001354 <loop+0x29c>)
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	496d      	ldr	r1, [pc, #436]	; (8001354 <loop+0x29c>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	440b      	add	r3, r1
 80011a6:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < num_meas-1; i++){
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3301      	adds	r3, #1
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	ddee      	ble.n	8001192 <loop+0xda>
		}
		alt_previous[num_meas-1] = alt_filtered;
 80011b4:	4b68      	ldr	r3, [pc, #416]	; (8001358 <loop+0x2a0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a66      	ldr	r2, [pc, #408]	; (8001354 <loop+0x29c>)
 80011ba:	6253      	str	r3, [r2, #36]	; 0x24

		// Launch Detection
		if (alt_filtered > 150 && launched == false){
 80011bc:	4b66      	ldr	r3, [pc, #408]	; (8001358 <loop+0x2a0>)
 80011be:	edd3 7a00 	vldr	s15, [r3]
 80011c2:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800135c <loop+0x2a4>
 80011c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ce:	dd06      	ble.n	80011de <loop+0x126>
 80011d0:	4b63      	ldr	r3, [pc, #396]	; (8001360 <loop+0x2a8>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d102      	bne.n	80011de <loop+0x126>
			launched = true;
 80011d8:	4b61      	ldr	r3, [pc, #388]	; (8001360 <loop+0x2a8>)
 80011da:	2201      	movs	r2, #1
 80011dc:	601a      	str	r2, [r3, #0]
		}

		//Average gradient of 10 past measurements.
		average_gradient = 0;
 80011de:	4b61      	ldr	r3, [pc, #388]	; (8001364 <loop+0x2ac>)
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < num_meas-1; i++){
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	e019      	b.n	8001220 <loop+0x168>
			average_gradient += (alt_previous[i+1]- alt_previous[i]);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	3301      	adds	r3, #1
 80011f0:	4a58      	ldr	r2, [pc, #352]	; (8001354 <loop+0x29c>)
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	ed93 7a00 	vldr	s14, [r3]
 80011fa:	4a56      	ldr	r2, [pc, #344]	; (8001354 <loop+0x29c>)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	edd3 7a00 	vldr	s15, [r3]
 8001206:	ee37 7a67 	vsub.f32	s14, s14, s15
 800120a:	4b56      	ldr	r3, [pc, #344]	; (8001364 <loop+0x2ac>)
 800120c:	edd3 7a00 	vldr	s15, [r3]
 8001210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001214:	4b53      	ldr	r3, [pc, #332]	; (8001364 <loop+0x2ac>)
 8001216:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < num_meas-1; i++){
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	3301      	adds	r3, #1
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	2b08      	cmp	r3, #8
 8001224:	dde2      	ble.n	80011ec <loop+0x134>
		}
		if (T>0){
 8001226:	4b45      	ldr	r3, [pc, #276]	; (800133c <loop+0x284>)
 8001228:	edd3 7a00 	vldr	s15, [r3]
 800122c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001234:	dd09      	ble.n	800124a <loop+0x192>
			average_gradient /= (num_meas);
 8001236:	4b4b      	ldr	r3, [pc, #300]	; (8001364 <loop+0x2ac>)
 8001238:	ed93 7a00 	vldr	s14, [r3]
 800123c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001240:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001244:	4b47      	ldr	r3, [pc, #284]	; (8001364 <loop+0x2ac>)
 8001246:	edc3 7a00 	vstr	s15, [r3]
		}

		// Apogee detection
		if (alt_filtered > threshold_altitude && launched && apogee_reached == false){
 800124a:	4b43      	ldr	r3, [pc, #268]	; (8001358 <loop+0x2a0>)
 800124c:	ed93 7a00 	vldr	s14, [r3]
 8001250:	4b45      	ldr	r3, [pc, #276]	; (8001368 <loop+0x2b0>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800125a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125e:	dd2d      	ble.n	80012bc <loop+0x204>
 8001260:	4b3f      	ldr	r3, [pc, #252]	; (8001360 <loop+0x2a8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d029      	beq.n	80012bc <loop+0x204>
 8001268:	4b40      	ldr	r3, [pc, #256]	; (800136c <loop+0x2b4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d125      	bne.n	80012bc <loop+0x204>

			if (average_gradient < -2){ //what is the purpose of this -2?
 8001270:	4b3c      	ldr	r3, [pc, #240]	; (8001364 <loop+0x2ac>)
 8001272:	edd3 7a00 	vldr	s15, [r3]
 8001276:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800127a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800127e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001282:	d51b      	bpl.n	80012bc <loop+0x204>
				apogee_reached = true;
 8001284:	4b39      	ldr	r3, [pc, #228]	; (800136c <loop+0x2b4>)
 8001286:	2201      	movs	r2, #1
 8001288:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(drogue1_GPIO_Port, drogue1_Pin, GPIO_PIN_SET);
 800128a:	2201      	movs	r2, #1
 800128c:	2110      	movs	r1, #16
 800128e:	4838      	ldr	r0, [pc, #224]	; (8001370 <loop+0x2b8>)
 8001290:	f001 f8e0 	bl	8002454 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(drogue2_GPIO_Port, drogue2_Pin, GPIO_PIN_SET);
 8001294:	2201      	movs	r2, #1
 8001296:	2120      	movs	r1, #32
 8001298:	4835      	ldr	r0, [pc, #212]	; (8001370 <loop+0x2b8>)
 800129a:	f001 f8db 	bl	8002454 <HAL_GPIO_WritePin>
				HAL_Delay(drogue_delay);
 800129e:	4b35      	ldr	r3, [pc, #212]	; (8001374 <loop+0x2bc>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 fe48 	bl	8001f38 <HAL_Delay>
					time12 = HAL_GetTick();
				}
				 */


				HAL_GPIO_WritePin(drogue1_GPIO_Port, drogue1_Pin, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2110      	movs	r1, #16
 80012ac:	4830      	ldr	r0, [pc, #192]	; (8001370 <loop+0x2b8>)
 80012ae:	f001 f8d1 	bl	8002454 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(drogue2_GPIO_Port, drogue2_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2120      	movs	r1, #32
 80012b6:	482e      	ldr	r0, [pc, #184]	; (8001370 <loop+0x2b8>)
 80012b8:	f001 f8cc 	bl	8002454 <HAL_GPIO_WritePin>
			}
		}

		// Main Deployment detection
		if (apogee_reached && alt_filtered < main_deployment && main_deployed == false){
 80012bc:	4b2b      	ldr	r3, [pc, #172]	; (800136c <loop+0x2b4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d071      	beq.n	80013a8 <loop+0x2f0>
 80012c4:	4b24      	ldr	r3, [pc, #144]	; (8001358 <loop+0x2a0>)
 80012c6:	ed93 7a00 	vldr	s14, [r3]
 80012ca:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <loop+0x2c0>)
 80012cc:	edd3 7a00 	vldr	s15, [r3]
 80012d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d8:	d566      	bpl.n	80013a8 <loop+0x2f0>
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <loop+0x278>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d162      	bne.n	80013a8 <loop+0x2f0>
			main_deployed = true;
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <loop+0x278>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(main1_GPIO_Port, main1_Pin, GPIO_PIN_SET);
 80012e8:	2201      	movs	r2, #1
 80012ea:	2140      	movs	r1, #64	; 0x40
 80012ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f0:	f001 f8b0 	bl	8002454 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(main2_GPIO_Port, main2_Pin, GPIO_PIN_SET);
 80012f4:	2201      	movs	r2, #1
 80012f6:	2180      	movs	r1, #128	; 0x80
 80012f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fc:	f001 f8aa 	bl	8002454 <HAL_GPIO_WritePin>
			HAL_Delay(main_delay);
 8001300:	4b1e      	ldr	r3, [pc, #120]	; (800137c <loop+0x2c4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fe17 	bl	8001f38 <HAL_Delay>
			}if(R22){
				time22 = HAL_GetTick();
			}
			 */

			HAL_GPIO_WritePin(main1_GPIO_Port, main1_Pin, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	2140      	movs	r1, #64	; 0x40
 800130e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001312:	f001 f89f 	bl	8002454 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(main2_GPIO_Port, main2_Pin, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	2180      	movs	r1, #128	; 0x80
 800131a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131e:	f001 f899 	bl	8002454 <HAL_GPIO_WritePin>
 8001322:	e041      	b.n	80013a8 <loop+0x2f0>
 8001324:	f3af 8000 	nop.w
 8001328:	0abb44e5 	.word	0x0abb44e5
 800132c:	400a3f29 	.word	0x400a3f29
 8001330:	20000224 	.word	0x20000224
 8001334:	20001b54 	.word	0x20001b54
 8001338:	447a0000 	.word	0x447a0000
 800133c:	20001b58 	.word	0x20001b58
 8001340:	20000000 	.word	0x20000000
 8001344:	42c80000 	.word	0x42c80000
 8001348:	20000218 	.word	0x20000218
 800134c:	20001b48 	.word	0x20001b48
 8001350:	20000014 	.word	0x20000014
 8001354:	20001b5c 	.word	0x20001b5c
 8001358:	20001d24 	.word	0x20001d24
 800135c:	43160000 	.word	0x43160000
 8001360:	20000220 	.word	0x20000220
 8001364:	20001d28 	.word	0x20001d28
 8001368:	20000004 	.word	0x20000004
 800136c:	2000021c 	.word	0x2000021c
 8001370:	48000800 	.word	0x48000800
 8001374:	2000000c 	.word	0x2000000c
 8001378:	20000008 	.word	0x20000008
 800137c:	20000010 	.word	0x20000010


	}
	else{ //Longer buzz to indicate program completion

		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);
 8001380:	2201      	movs	r2, #1
 8001382:	2110      	movs	r1, #16
 8001384:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001388:	f001 f864 	bl	8002454 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800138c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001390:	f000 fdd2 	bl	8001f38 <HAL_Delay>
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	2110      	movs	r1, #16
 8001398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139c:	f001 f85a 	bl	8002454 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80013a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013a4:	f000 fdc8 	bl	8001f38 <HAL_Delay>

	}
	//Just for debuggging.
	// printf("alt_meas = %d,  average_gradient = %d, alt_filtered = %d",alt_meas,average_gradient,alt_filtered);

	size = sprintf((char *)Data,", alt_meas: %.2d\n", alt_meas);
 80013a8:	4b28      	ldr	r3, [pc, #160]	; (800144c <loop+0x394>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f8d3 	bl	8000558 <__aeabi_f2d>
 80013b2:	4603      	mov	r3, r0
 80013b4:	460c      	mov	r4, r1
 80013b6:	461a      	mov	r2, r3
 80013b8:	4623      	mov	r3, r4
 80013ba:	4925      	ldr	r1, [pc, #148]	; (8001450 <loop+0x398>)
 80013bc:	4825      	ldr	r0, [pc, #148]	; (8001454 <loop+0x39c>)
 80013be:	f006 ff6d 	bl	800829c <siprintf>
 80013c2:	4603      	mov	r3, r0
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	4b24      	ldr	r3, [pc, #144]	; (8001458 <loop+0x3a0>)
 80013c8:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, Data, size, 1000);
 80013ca:	4b23      	ldr	r3, [pc, #140]	; (8001458 <loop+0x3a0>)
 80013cc:	881a      	ldrh	r2, [r3, #0]
 80013ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d2:	4920      	ldr	r1, [pc, #128]	; (8001454 <loop+0x39c>)
 80013d4:	4821      	ldr	r0, [pc, #132]	; (800145c <loop+0x3a4>)
 80013d6:	f002 ff15 	bl	8004204 <HAL_UART_Transmit>

	size = sprintf((char *)Data,", average_gradient: %.2d\n", average_gradient);
 80013da:	4b21      	ldr	r3, [pc, #132]	; (8001460 <loop+0x3a8>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f8ba 	bl	8000558 <__aeabi_f2d>
 80013e4:	4603      	mov	r3, r0
 80013e6:	460c      	mov	r4, r1
 80013e8:	461a      	mov	r2, r3
 80013ea:	4623      	mov	r3, r4
 80013ec:	491d      	ldr	r1, [pc, #116]	; (8001464 <loop+0x3ac>)
 80013ee:	4819      	ldr	r0, [pc, #100]	; (8001454 <loop+0x39c>)
 80013f0:	f006 ff54 	bl	800829c <siprintf>
 80013f4:	4603      	mov	r3, r0
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	4b17      	ldr	r3, [pc, #92]	; (8001458 <loop+0x3a0>)
 80013fa:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, Data, size, 1000);
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <loop+0x3a0>)
 80013fe:	881a      	ldrh	r2, [r3, #0]
 8001400:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001404:	4913      	ldr	r1, [pc, #76]	; (8001454 <loop+0x39c>)
 8001406:	4815      	ldr	r0, [pc, #84]	; (800145c <loop+0x3a4>)
 8001408:	f002 fefc 	bl	8004204 <HAL_UART_Transmit>

	size = sprintf((char *)Data,", alt_filtered: %.2d\n", alt_filtered);
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <loop+0x3b0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f8a1 	bl	8000558 <__aeabi_f2d>
 8001416:	4603      	mov	r3, r0
 8001418:	460c      	mov	r4, r1
 800141a:	461a      	mov	r2, r3
 800141c:	4623      	mov	r3, r4
 800141e:	4913      	ldr	r1, [pc, #76]	; (800146c <loop+0x3b4>)
 8001420:	480c      	ldr	r0, [pc, #48]	; (8001454 <loop+0x39c>)
 8001422:	f006 ff3b 	bl	800829c <siprintf>
 8001426:	4603      	mov	r3, r0
 8001428:	b29a      	uxth	r2, r3
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <loop+0x3a0>)
 800142c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, Data, size, 1000);
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <loop+0x3a0>)
 8001430:	881a      	ldrh	r2, [r3, #0]
 8001432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001436:	4907      	ldr	r1, [pc, #28]	; (8001454 <loop+0x39c>)
 8001438:	4808      	ldr	r0, [pc, #32]	; (800145c <loop+0x3a4>)
 800143a:	f002 fee3 	bl	8004204 <HAL_UART_Transmit>

	HAL_Delay(5);
 800143e:	2005      	movs	r0, #5
 8001440:	f000 fd7a 	bl	8001f38 <HAL_Delay>
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	bd90      	pop	{r4, r7, pc}
 800144c:	20001b48 	.word	0x20001b48
 8001450:	0800ad8c 	.word	0x0800ad8c
 8001454:	20001b90 	.word	0x20001b90
 8001458:	20001c94 	.word	0x20001c94
 800145c:	20001ca0 	.word	0x20001ca0
 8001460:	20001d28 	.word	0x20001d28
 8001464:	0800ada0 	.word	0x0800ada0
 8001468:	20001d24 	.word	0x20001d24
 800146c:	0800adbc 	.word	0x0800adbc

08001470 <bmp_Begin>:

int XTENDSerial_Begin(int x){
	return x;
}
int bmp_Begin(void){
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
	return true;
 8001474:	2301      	movs	r3, #1
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <bno_Begin>:
int bno_Begin(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
	return true;
 8001484:	2301      	movs	r3, #1
}
 8001486:	4618      	mov	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <myGPS_Begin>:
int myGPS_Begin(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
	return true;
 8001494:	2301      	movs	r3, #1
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <SD_Begin>:
int SD_Begin(int x){
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	return x;
 80014a8:	687b      	ldr	r3, [r7, #4]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <RTC_Begin>:
int RTC_Begin(void){
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
	return true;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <RTC_initialized>:
int RTC_initialized(void){
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
	return true;
 80014ca:	2301      	movs	r3, #1
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <SD_Exist>:

int SD_Exist(char *name){
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
	return false;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <SD_remove>:
void SD_remove(char *name){
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	return;
 80014f4:	bf00      	nop
}
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <SD_Open>:
FILE * SD_Open(char *name, char *mode){
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
	return NULL;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <RTC_Adjust>:
void RTC_Adjust(/*Date time*/){
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
	return;
 800151c:	bf00      	nop
}
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <getDateTime>:

char * getDateTime(void){
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
	return "date_time";
 800152c:	4b02      	ldr	r3, [pc, #8]	; (8001538 <getDateTime+0x10>)
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	0800add4 	.word	0x0800add4

0800153c <bno_getAccelerometer_getX>:

float bno_getAccelerometer_getX(){
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
	return 10;
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <bno_getAccelerometer_getX+0x18>)
 8001542:	ee07 3a90 	vmov	s15, r3
}
 8001546:	eeb0 0a67 	vmov.f32	s0, s15
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	41200000 	.word	0x41200000

08001558 <bno_getAccelerometer_getY>:
float bno_getAccelerometer_getY(){
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
	return 10;
 800155c:	4b04      	ldr	r3, [pc, #16]	; (8001570 <bno_getAccelerometer_getY+0x18>)
 800155e:	ee07 3a90 	vmov	s15, r3
}
 8001562:	eeb0 0a67 	vmov.f32	s0, s15
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	41200000 	.word	0x41200000

08001574 <bno_getAccelerometer_getZ>:
float bno_getAccelerometer_getZ(){
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
	return 10;
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <bno_getAccelerometer_getZ+0x18>)
 800157a:	ee07 3a90 	vmov	s15, r3
}
 800157e:	eeb0 0a67 	vmov.f32	s0, s15
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	41200000 	.word	0x41200000

08001590 <bno_getEuler_getX>:

float bno_getEuler_getX(){
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
	return 10;
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <bno_getEuler_getX+0x18>)
 8001596:	ee07 3a90 	vmov	s15, r3
}
 800159a:	eeb0 0a67 	vmov.f32	s0, s15
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	41200000 	.word	0x41200000

080015ac <bno_getEuler_getY>:
float bno_getEuler_getY(){
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
	return 10;
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <bno_getEuler_getY+0x18>)
 80015b2:	ee07 3a90 	vmov	s15, r3
}
 80015b6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	41200000 	.word	0x41200000

080015c8 <bno_getEuler_getZ>:
float bno_getEuler_getZ(){
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
	return 10;
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <bno_getEuler_getZ+0x18>)
 80015ce:	ee07 3a90 	vmov	s15, r3
}
 80015d2:	eeb0 0a67 	vmov.f32	s0, s15
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	41200000 	.word	0x41200000

080015e4 <bmp_readTemperature>:

float bmp_readTemperature(){
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
	return 10;
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <bmp_readTemperature+0x18>)
 80015ea:	ee07 3a90 	vmov	s15, r3
}
 80015ee:	eeb0 0a67 	vmov.f32	s0, s15
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	41200000 	.word	0x41200000

08001600 <bmp_readPressure>:
float bmp_readPressure(){
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
	return 10;
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <bmp_readPressure+0x18>)
 8001606:	ee07 3a90 	vmov	s15, r3
}
 800160a:	eeb0 0a67 	vmov.f32	s0, s15
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	41200000 	.word	0x41200000

0800161c <GPS_getLatitude>:

float GPS_getLatitude(){
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
	return 10;
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <GPS_getLatitude+0x18>)
 8001622:	ee07 3a90 	vmov	s15, r3
}
 8001626:	eeb0 0a67 	vmov.f32	s0, s15
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	41200000 	.word	0x41200000

08001638 <GPS_getLongitude>:
float GPS_getLongitude(){
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
	return 10;
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <GPS_getLongitude+0x18>)
 800163e:	ee07 3a90 	vmov	s15, r3
}
 8001642:	eeb0 0a67 	vmov.f32	s0, s15
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	41200000 	.word	0x41200000

08001654 <GPS_getAltitude>:
float GPS_getAltitude(){
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
	return 10;
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <GPS_getAltitude+0x18>)
 800165a:	ee07 3a90 	vmov	s15, r3
}
 800165e:	eeb0 0a67 	vmov.f32	s0, s15
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	41200000 	.word	0x41200000

08001670 <XTENDSerial_print>:

void XTENDSerial_print(char * str){
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	return;
 8001678:	bf00      	nop
}
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <StartEjection>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEjection */
void StartEjection(void *argument)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		setup();
 800168c:	f7ff fc40 	bl	8000f10 <setup>
		loop();
 8001690:	f7ff fd12 	bl	80010b8 <loop>
		osDelay(500);
 8001694:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001698:	f003 fa96 	bl	8004bc8 <osDelay>
		setup();
 800169c:	e7f6      	b.n	800168c <StartEjection+0x8>
	...

080016a0 <StartTelemetry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTelemetry */
void StartTelemetry(void *argument)
{
 80016a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016a4:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80016a8:	af0e      	add	r7, sp, #56	; 0x38
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	6018      	str	r0, [r3, #0]
		char msg[500];

		//TODO sensor initialisation
			struct FILE *myFile;
			float temp, pressure, real_altitude, accel_x, accel_y, accel_z, pitch, roll, yaw;
			int seaLevelhPa = 102540;
 80016b0:	4b5e      	ldr	r3, [pc, #376]	; (800182c <StartTelemetry+0x18c>)
 80016b2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

			sprintf(msg, "All sensor test\n");
 80016b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ba:	4a5d      	ldr	r2, [pc, #372]	; (8001830 <StartTelemetry+0x190>)
 80016bc:	461c      	mov	r4, r3
 80016be:	4615      	mov	r5, r2
 80016c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c4:	682b      	ldr	r3, [r5, #0]
 80016c6:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80016c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe fd87 	bl	80001e0 <strlen>
 80016d2:	4603      	mov	r3, r0
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
 80016de:	4855      	ldr	r0, [pc, #340]	; (8001834 <StartTelemetry+0x194>)
 80016e0:	f002 fd90 	bl	8004204 <HAL_UART_Transmit>

			// Check BMP
			  if (!bmp_Begin()) {
 80016e4:	f7ff fec4 	bl	8001470 <bmp_Begin>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d11c      	bne.n	8001728 <StartTelemetry+0x88>
			    sprintf(msg, "BMP280 initialization failed!\n");
 80016ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f2:	4a51      	ldr	r2, [pc, #324]	; (8001838 <StartTelemetry+0x198>)
 80016f4:	461c      	mov	r4, r3
 80016f6:	4615      	mov	r5, r2
 80016f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001700:	c407      	stmia	r4!, {r0, r1, r2}
 8001702:	8023      	strh	r3, [r4, #0]
 8001704:	3402      	adds	r4, #2
 8001706:	0c1b      	lsrs	r3, r3, #16
 8001708:	7023      	strb	r3, [r4, #0]
			    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800170a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe fd66 	bl	80001e0 <strlen>
 8001714:	4603      	mov	r3, r0
 8001716:	b29a      	uxth	r2, r3
 8001718:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800171c:	f04f 33ff 	mov.w	r3, #4294967295
 8001720:	4844      	ldr	r0, [pc, #272]	; (8001834 <StartTelemetry+0x194>)
 8001722:	f002 fd6f 	bl	8004204 <HAL_UART_Transmit>
			    while (1);
 8001726:	e7fe      	b.n	8001726 <StartTelemetry+0x86>
			  }

			  // Check BNO
			  if (!bno_Begin())
 8001728:	f7ff feaa 	bl	8001480 <bno_Begin>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d11c      	bne.n	800176c <StartTelemetry+0xcc>
			  {
				sprintf(msg, "BNO055 initialization failed!\n");
 8001732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001736:	4a41      	ldr	r2, [pc, #260]	; (800183c <StartTelemetry+0x19c>)
 8001738:	461c      	mov	r4, r3
 800173a:	4615      	mov	r5, r2
 800173c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800173e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001740:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001744:	c407      	stmia	r4!, {r0, r1, r2}
 8001746:	8023      	strh	r3, [r4, #0]
 8001748:	3402      	adds	r4, #2
 800174a:	0c1b      	lsrs	r3, r3, #16
 800174c:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800174e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe fd44 	bl	80001e0 <strlen>
 8001758:	4603      	mov	r3, r0
 800175a:	b29a      	uxth	r2, r3
 800175c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001760:	f04f 33ff 	mov.w	r3, #4294967295
 8001764:	4833      	ldr	r0, [pc, #204]	; (8001834 <StartTelemetry+0x194>)
 8001766:	f002 fd4d 	bl	8004204 <HAL_UART_Transmit>
			    while (1);
 800176a:	e7fe      	b.n	800176a <StartTelemetry+0xca>
			  }

			  // Check GPS
			  if (myGPS_Begin() == 0) //Connect to the Ublox module using Wire port
 800176c:	f7ff fe90 	bl	8001490 <myGPS_Begin>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d119      	bne.n	80017aa <StartTelemetry+0x10a>
			  {
			    sprintf(msg, "GPS initialization failed!\n");
 8001776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177a:	4a31      	ldr	r2, [pc, #196]	; (8001840 <StartTelemetry+0x1a0>)
 800177c:	461c      	mov	r4, r3
 800177e:	4615      	mov	r5, r2
 8001780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001784:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001788:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800178c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fd25 	bl	80001e0 <strlen>
 8001796:	4603      	mov	r3, r0
 8001798:	b29a      	uxth	r2, r3
 800179a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	4824      	ldr	r0, [pc, #144]	; (8001834 <StartTelemetry+0x194>)
 80017a4:	f002 fd2e 	bl	8004204 <HAL_UART_Transmit>
			    while (1);
 80017a8:	e7fe      	b.n	80017a8 <StartTelemetry+0x108>
			  }

			  // Check SD Card
			  if (!SD_Begin(10)) {
 80017aa:	200a      	movs	r0, #10
 80017ac:	f7ff fe78 	bl	80014a0 <SD_Begin>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d119      	bne.n	80017ea <StartTelemetry+0x14a>
			    sprintf(msg, "SD card initialization failed!\n");
 80017b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ba:	4a22      	ldr	r2, [pc, #136]	; (8001844 <StartTelemetry+0x1a4>)
 80017bc:	461c      	mov	r4, r3
 80017be:	4615      	mov	r5, r2
 80017c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80017c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80017cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fd05 	bl	80001e0 <strlen>
 80017d6:	4603      	mov	r3, r0
 80017d8:	b29a      	uxth	r2, r3
 80017da:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	4814      	ldr	r0, [pc, #80]	; (8001834 <StartTelemetry+0x194>)
 80017e4:	f002 fd0e 	bl	8004204 <HAL_UART_Transmit>
 80017e8:	e178      	b.n	8001adc <StartTelemetry+0x43c>
			    return;
			  }

			  // Check RTC
			  if (! RTC_Begin()) {
 80017ea:	f7ff fe64 	bl	80014b6 <RTC_Begin>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d12b      	bne.n	800184c <StartTelemetry+0x1ac>
			    sprintf(msg, "Couldn't find RTC\n");
 80017f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f8:	4a13      	ldr	r2, [pc, #76]	; (8001848 <StartTelemetry+0x1a8>)
 80017fa:	461c      	mov	r4, r3
 80017fc:	4615      	mov	r5, r2
 80017fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001802:	682b      	ldr	r3, [r5, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	8022      	strh	r2, [r4, #0]
 8001808:	3402      	adds	r4, #2
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	7023      	strb	r3, [r4, #0]
			    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800180e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fce4 	bl	80001e0 <strlen>
 8001818:	4603      	mov	r3, r0
 800181a:	b29a      	uxth	r2, r3
 800181c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
 8001824:	4803      	ldr	r0, [pc, #12]	; (8001834 <StartTelemetry+0x194>)
 8001826:	f002 fced 	bl	8004204 <HAL_UART_Transmit>
			    while (1);
 800182a:	e7fe      	b.n	800182a <StartTelemetry+0x18a>
 800182c:	0001908c 	.word	0x0001908c
 8001830:	0800ade0 	.word	0x0800ade0
 8001834:	20001ca0 	.word	0x20001ca0
 8001838:	0800adf4 	.word	0x0800adf4
 800183c:	0800ae14 	.word	0x0800ae14
 8001840:	0800ae34 	.word	0x0800ae34
 8001844:	0800ae50 	.word	0x0800ae50
 8001848:	0800ae70 	.word	0x0800ae70
			  }

			  if(SD_Exist("example.txt")){
 800184c:	48ac      	ldr	r0, [pc, #688]	; (8001b00 <StartTelemetry+0x460>)
 800184e:	f7ff fe42 	bl	80014d6 <SD_Exist>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d002      	beq.n	800185e <StartTelemetry+0x1be>
			  	SD_remove("example.txt");
 8001858:	48a9      	ldr	r0, [pc, #676]	; (8001b00 <StartTelemetry+0x460>)
 800185a:	f7ff fe47 	bl	80014ec <SD_remove>
			  }

			  myFile = SD_Open("example.txt", "wt");
 800185e:	49a9      	ldr	r1, [pc, #676]	; (8001b04 <StartTelemetry+0x464>)
 8001860:	48a7      	ldr	r0, [pc, #668]	; (8001b00 <StartTelemetry+0x460>)
 8001862:	f7ff fe4d 	bl	8001500 <SD_Open>
 8001866:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
			  fclose(myFile);
 800186a:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 800186e:	f005 fdf5 	bl	800745c <fclose>

			   if (! RTC_initialized()) {
 8001872:	f7ff fe28 	bl	80014c6 <RTC_initialized>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d118      	bne.n	80018ae <StartTelemetry+0x20e>
			     sprintf(msg, "RTC is NOT running!");
 800187c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001880:	4aa1      	ldr	r2, [pc, #644]	; (8001b08 <StartTelemetry+0x468>)
 8001882:	461c      	mov	r4, r3
 8001884:	4615      	mov	r5, r2
 8001886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800188a:	682b      	ldr	r3, [r5, #0]
 800188c:	6023      	str	r3, [r4, #0]
			     HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800188e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fca4 	bl	80001e0 <strlen>
 8001898:	4603      	mov	r3, r0
 800189a:	b29a      	uxth	r2, r3
 800189c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
 80018a4:	4899      	ldr	r0, [pc, #612]	; (8001b0c <StartTelemetry+0x46c>)
 80018a6:	f002 fcad 	bl	8004204 <HAL_UART_Transmit>
			     // following line sets the RTC to the date & time this sketch was compiled
			     RTC_Adjust(/*TODO date and time format*/);
 80018aa:	f7ff fe35 	bl	8001518 <RTC_Adjust>



	for(;;)
	{
		accel_x = bno_getAccelerometer_getX();
 80018ae:	f7ff fe45 	bl	800153c <bno_getAccelerometer_getX>
 80018b2:	ed87 0a91 	vstr	s0, [r7, #580]	; 0x244
			  accel_y = bno_getAccelerometer_getY();
 80018b6:	f7ff fe4f 	bl	8001558 <bno_getAccelerometer_getY>
 80018ba:	ed87 0a90 	vstr	s0, [r7, #576]	; 0x240
			  accel_z = bno_getAccelerometer_getZ();
 80018be:	f7ff fe59 	bl	8001574 <bno_getAccelerometer_getZ>
 80018c2:	ed87 0a8f 	vstr	s0, [r7, #572]	; 0x23c

			  yaw = bno_getEuler_getX();
 80018c6:	f7ff fe63 	bl	8001590 <bno_getEuler_getX>
 80018ca:	ed87 0a8e 	vstr	s0, [r7, #568]	; 0x238
			  pitch = bno_getEuler_getY();
 80018ce:	f7ff fe6d 	bl	80015ac <bno_getEuler_getY>
 80018d2:	ed87 0a8d 	vstr	s0, [r7, #564]	; 0x234
			  roll = bno_getEuler_getZ();
 80018d6:	f7ff fe77 	bl	80015c8 <bno_getEuler_getZ>
 80018da:	ed87 0a8c 	vstr	s0, [r7, #560]	; 0x230

			  temp = bmp_readTemperature();
 80018de:	f7ff fe81 	bl	80015e4 <bmp_readTemperature>
 80018e2:	ed87 0a8b 	vstr	s0, [r7, #556]	; 0x22c
			  pressure = bmp_readPressure();
 80018e6:	f7ff fe8b 	bl	8001600 <bmp_readPressure>
 80018ea:	ed87 0a8a 	vstr	s0, [r7, #552]	; 0x228

			  real_altitude = 44330 * (1.0 - pow(pressure / seaLevelhPa, 0.190295));
 80018ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018fa:	ed97 7a8a 	vldr	s14, [r7, #552]	; 0x228
 80018fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001902:	ee16 0a90 	vmov	r0, s13
 8001906:	f7fe fe27 	bl	8000558 <__aeabi_f2d>
 800190a:	4603      	mov	r3, r0
 800190c:	460c      	mov	r4, r1
 800190e:	ed9f 1b76 	vldr	d1, [pc, #472]	; 8001ae8 <StartTelemetry+0x448>
 8001912:	ec44 3b10 	vmov	d0, r3, r4
 8001916:	f008 f9af 	bl	8009c78 <pow>
 800191a:	ec54 3b10 	vmov	r3, r4, d0
 800191e:	461a      	mov	r2, r3
 8001920:	4623      	mov	r3, r4
 8001922:	f04f 0000 	mov.w	r0, #0
 8001926:	497a      	ldr	r1, [pc, #488]	; (8001b10 <StartTelemetry+0x470>)
 8001928:	f7fe fcb6 	bl	8000298 <__aeabi_dsub>
 800192c:	4603      	mov	r3, r0
 800192e:	460c      	mov	r4, r1
 8001930:	4618      	mov	r0, r3
 8001932:	4621      	mov	r1, r4
 8001934:	a36e      	add	r3, pc, #440	; (adr r3, 8001af0 <StartTelemetry+0x450>)
 8001936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193a:	f7fe fe65 	bl	8000608 <__aeabi_dmul>
 800193e:	4603      	mov	r3, r0
 8001940:	460c      	mov	r4, r1
 8001942:	4618      	mov	r0, r3
 8001944:	4621      	mov	r1, r4
 8001946:	f7ff f937 	bl	8000bb8 <__aeabi_d2f>
 800194a:	4603      	mov	r3, r0
 800194c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224

			  long latitude = GPS_getLatitude();
 8001950:	f7ff fe64 	bl	800161c <GPS_getLatitude>
 8001954:	eef0 7a40 	vmov.f32	s15, s0
 8001958:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800195c:	ee17 3a90 	vmov	r3, s15
 8001960:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
			  latitude /= pow(10,7);
 8001964:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8001968:	f7fe fde4 	bl	8000534 <__aeabi_i2d>
 800196c:	a362      	add	r3, pc, #392	; (adr r3, 8001af8 <StartTelemetry+0x458>)
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001972:	f7fe ff73 	bl	800085c <__aeabi_ddiv>
 8001976:	4603      	mov	r3, r0
 8001978:	460c      	mov	r4, r1
 800197a:	4618      	mov	r0, r3
 800197c:	4621      	mov	r1, r4
 800197e:	f7ff f8f3 	bl	8000b68 <__aeabi_d2iz>
 8001982:	4603      	mov	r3, r0
 8001984:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220

			  long longitude = GPS_getLongitude();
 8001988:	f7ff fe56 	bl	8001638 <GPS_getLongitude>
 800198c:	eef0 7a40 	vmov.f32	s15, s0
 8001990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001994:	ee17 3a90 	vmov	r3, s15
 8001998:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
			  longitude /= pow(10,7);
 800199c:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 80019a0:	f7fe fdc8 	bl	8000534 <__aeabi_i2d>
 80019a4:	a354      	add	r3, pc, #336	; (adr r3, 8001af8 <StartTelemetry+0x458>)
 80019a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019aa:	f7fe ff57 	bl	800085c <__aeabi_ddiv>
 80019ae:	4603      	mov	r3, r0
 80019b0:	460c      	mov	r4, r1
 80019b2:	4618      	mov	r0, r3
 80019b4:	4621      	mov	r1, r4
 80019b6:	f7ff f8d7 	bl	8000b68 <__aeabi_d2iz>
 80019ba:	4603      	mov	r3, r0
 80019bc:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

			  long gpsAltitude = GPS_getAltitude();
 80019c0:	f7ff fe48 	bl	8001654 <GPS_getAltitude>
 80019c4:	eef0 7a40 	vmov.f32	s15, s0
 80019c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019cc:	ee17 3a90 	vmov	r3, s15
 80019d0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
			  gpsAltitude /= pow(10,3);
 80019d4:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 80019d8:	f7fe fdac 	bl	8000534 <__aeabi_i2d>
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	4b4c      	ldr	r3, [pc, #304]	; (8001b14 <StartTelemetry+0x474>)
 80019e2:	f7fe ff3b 	bl	800085c <__aeabi_ddiv>
 80019e6:	4603      	mov	r3, r0
 80019e8:	460c      	mov	r4, r1
 80019ea:	4618      	mov	r0, r3
 80019ec:	4621      	mov	r1, r4
 80019ee:	f7ff f8bb 	bl	8000b68 <__aeabi_d2iz>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

			 sprintf(msg, "Temp:%f,Pressure:%f,Altitude(BMP,m):%f,Pitch:%f,Roll:%f,Yaw:%f,Latitude:%f,Longitude:%f,Altitude(GPS,m):%f,Time:%s\n\n\n",
 80019f8:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 80019fc:	f7fe fdac 	bl	8000558 <__aeabi_f2d>
 8001a00:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001a04:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 8001a08:	f7fe fda6 	bl	8000558 <__aeabi_f2d>
 8001a0c:	4680      	mov	r8, r0
 8001a0e:	4689      	mov	r9, r1
 8001a10:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 8001a14:	f7fe fda0 	bl	8000558 <__aeabi_f2d>
 8001a18:	4682      	mov	sl, r0
 8001a1a:	468b      	mov	fp, r1
 8001a1c:	f8d7 0234 	ldr.w	r0, [r7, #564]	; 0x234
 8001a20:	f7fe fd9a 	bl	8000558 <__aeabi_f2d>
 8001a24:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001a28:	f8d7 0230 	ldr.w	r0, [r7, #560]	; 0x230
 8001a2c:	f7fe fd94 	bl	8000558 <__aeabi_f2d>
 8001a30:	e9c7 0100 	strd	r0, r1, [r7]
 8001a34:	f8d7 0238 	ldr.w	r0, [r7, #568]	; 0x238
 8001a38:	f7fe fd8e 	bl	8000558 <__aeabi_f2d>
 8001a3c:	4604      	mov	r4, r0
 8001a3e:	460d      	mov	r5, r1
 8001a40:	f7ff fd72 	bl	8001528 <getDateTime>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001a4a:	930d      	str	r3, [sp, #52]	; 0x34
 8001a4c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001a50:	930c      	str	r3, [sp, #48]	; 0x30
 8001a52:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001a56:	930b      	str	r3, [sp, #44]	; 0x2c
 8001a58:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001a5c:	930a      	str	r3, [sp, #40]	; 0x28
 8001a5e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001a62:	ed97 7b00 	vldr	d7, [r7]
 8001a66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001a6a:	ed97 7b02 	vldr	d7, [r7, #8]
 8001a6e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001a72:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001a76:	e9cd 8900 	strd	r8, r9, [sp]
 8001a7a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a7e:	4926      	ldr	r1, [pc, #152]	; (8001b18 <StartTelemetry+0x478>)
 8001a80:	f006 fc0c 	bl	800829c <siprintf>
					 temp, pressure, real_altitude, pitch, roll, yaw, latitude, longitude, gpsAltitude, getDateTime());
			  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fba9 	bl	80001e0 <strlen>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9a:	481c      	ldr	r0, [pc, #112]	; (8001b0c <StartTelemetry+0x46c>)
 8001a9c:	f002 fbb2 	bl	8004204 <HAL_UART_Transmit>

			  myFile = SD_Open("example.txt", "wt");
 8001aa0:	4918      	ldr	r1, [pc, #96]	; (8001b04 <StartTelemetry+0x464>)
 8001aa2:	4817      	ldr	r0, [pc, #92]	; (8001b00 <StartTelemetry+0x460>)
 8001aa4:	f7ff fd2c 	bl	8001500 <SD_Open>
 8001aa8:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
			  fputs(msg, myFile);
 8001aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab0:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f005 fe7f 	bl	80077b8 <fputs>
			  fclose(myFile);
 8001aba:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8001abe:	f005 fccd 	bl	800745c <fclose>
			  XTENDSerial_print(msg);
 8001ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fdd2 	bl	8001670 <XTENDSerial_print>
			  HAL_Delay(1000);
 8001acc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ad0:	f000 fa32 	bl	8001f38 <HAL_Delay>
		osDelay(1);
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f003 f877 	bl	8004bc8 <osDelay>
	{
 8001ada:	e6e8      	b.n	80018ae <StartTelemetry+0x20e>
	}
	free(myFile);
	/* USER CODE END StartTelemetry */
}
 8001adc:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ae6:	bf00      	nop
 8001ae8:	28cbd124 	.word	0x28cbd124
 8001aec:	3fc85b96 	.word	0x3fc85b96
 8001af0:	00000000 	.word	0x00000000
 8001af4:	40e5a540 	.word	0x40e5a540
 8001af8:	00000000 	.word	0x00000000
 8001afc:	416312d0 	.word	0x416312d0
 8001b00:	0800ae84 	.word	0x0800ae84
 8001b04:	0800ae90 	.word	0x0800ae90
 8001b08:	0800ae94 	.word	0x0800ae94
 8001b0c:	20001ca0 	.word	0x20001ca0
 8001b10:	3ff00000 	.word	0x3ff00000
 8001b14:	408f4000 	.word	0x408f4000
 8001b18:	0800aea8 	.word	0x0800aea8

08001b1c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d101      	bne.n	8001b32 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001b2e:	f000 f9e3 	bl	8001ef8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40001000 	.word	0x40001000

08001b40 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b44:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001b46:	e7fe      	b.n	8001b46 <Error_Handler+0x6>

08001b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	4a10      	ldr	r2, [pc, #64]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6193      	str	r3, [r2, #24]
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b70:	61d3      	str	r3, [r2, #28]
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	210f      	movs	r1, #15
 8001b82:	f06f 0001 	mvn.w	r0, #1
 8001b86:	f000 fab1 	bl	80020ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000

08001b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a17      	ldr	r2, [pc, #92]	; (8001c14 <HAL_UART_MspInit+0x7c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d128      	bne.n	8001c0c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bba:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_UART_MspInit+0x80>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <HAL_UART_MspInit+0x80>)
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc4:	61d3      	str	r3, [r2, #28]
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_UART_MspInit+0x80>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <HAL_UART_MspInit+0x80>)
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	4a10      	ldr	r2, [pc, #64]	; (8001c18 <HAL_UART_MspInit+0x80>)
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bdc:	6153      	str	r3, [r2, #20]
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <HAL_UART_MspInit+0x80>)
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bea:	230c      	movs	r3, #12
 8001bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bfa:	2307      	movs	r3, #7
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c08:	f000 fa9a 	bl	8002140 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c0c:	bf00      	nop
 8001c0e:	3728      	adds	r7, #40	; 0x28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40004400 	.word	0x40004400
 8001c18:	40021000 	.word	0x40021000

08001c1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08c      	sub	sp, #48	; 0x30
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	2036      	movs	r0, #54	; 0x36
 8001c32:	f000 fa5b 	bl	80020ec <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c36:	2036      	movs	r0, #54	; 0x36
 8001c38:	f000 fa74 	bl	8002124 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c3c:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <HAL_InitTick+0xa0>)
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	4a1e      	ldr	r2, [pc, #120]	; (8001cbc <HAL_InitTick+0xa0>)
 8001c42:	f043 0310 	orr.w	r3, r3, #16
 8001c46:	61d3      	str	r3, [r2, #28]
 8001c48:	4b1c      	ldr	r3, [pc, #112]	; (8001cbc <HAL_InitTick+0xa0>)
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c54:	f107 0210 	add.w	r2, r7, #16
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f001 fd5c 	bl	800371c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001c64:	f001 fd16 	bl	8003694 <HAL_RCC_GetPCLK1Freq>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c70:	4a13      	ldr	r2, [pc, #76]	; (8001cc0 <HAL_InitTick+0xa4>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	0c9b      	lsrs	r3, r3, #18
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_InitTick+0xa8>)
 8001c7e:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <HAL_InitTick+0xac>)
 8001c80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c82:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <HAL_InitTick+0xa8>)
 8001c84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c88:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c8a:	4a0e      	ldr	r2, [pc, #56]	; (8001cc4 <HAL_InitTick+0xa8>)
 8001c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <HAL_InitTick+0xa8>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_InitTick+0xa8>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001c9c:	4809      	ldr	r0, [pc, #36]	; (8001cc4 <HAL_InitTick+0xa8>)
 8001c9e:	f001 ff8d 	bl	8003bbc <HAL_TIM_Base_Init>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d104      	bne.n	8001cb2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001ca8:	4806      	ldr	r0, [pc, #24]	; (8001cc4 <HAL_InitTick+0xa8>)
 8001caa:	f001 ffe9 	bl	8003c80 <HAL_TIM_Base_Start_IT>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	e000      	b.n	8001cb4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3730      	adds	r7, #48	; 0x30
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	431bde83 	.word	0x431bde83
 8001cc4:	20001d2c 	.word	0x20001d2c
 8001cc8:	40001000 	.word	0x40001000

08001ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <NMI_Handler+0x4>

08001cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd6:	e7fe      	b.n	8001cd6 <HardFault_Handler+0x4>

08001cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <MemManage_Handler+0x4>

08001cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce2:	e7fe      	b.n	8001ce2 <BusFault_Handler+0x4>

08001ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <UsageFault_Handler+0x4>

08001cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <TIM6_DAC_IRQHandler+0x10>)
 8001cfe:	f002 f82f 	bl	8003d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20001d2c 	.word	0x20001d2c

08001d0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	e00a      	b.n	8001d34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d1e:	f3af 8000 	nop.w
 8001d22:	4601      	mov	r1, r0
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	60ba      	str	r2, [r7, #8]
 8001d2a:	b2ca      	uxtb	r2, r1
 8001d2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	3301      	adds	r3, #1
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	dbf0      	blt.n	8001d1e <_read+0x12>
	}

return len;
 8001d3c:	687b      	ldr	r3, [r7, #4]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	60f8      	str	r0, [r7, #12]
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	e009      	b.n	8001d6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	60ba      	str	r2, [r7, #8]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	dbf1      	blt.n	8001d58 <_write+0x12>
	}
	return len;
 8001d74:	687b      	ldr	r3, [r7, #4]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <_close>:

int _close(int file)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
	return -1;
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001da6:	605a      	str	r2, [r3, #4]
	return 0;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <_isatty>:

int _isatty(int file)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
	return 1;
 8001dbe:	2301      	movs	r3, #1
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
	return 0;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df0:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <_sbrk+0x5c>)
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <_sbrk+0x60>)
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <_sbrk+0x64>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d102      	bne.n	8001e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <_sbrk+0x64>)
 8001e06:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <_sbrk+0x68>)
 8001e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <_sbrk+0x64>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d207      	bcs.n	8001e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e18:	f005 fac8 	bl	80073ac <__errno>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	230c      	movs	r3, #12
 8001e20:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295
 8001e26:	e009      	b.n	8001e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <_sbrk+0x64>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <_sbrk+0x64>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	4a05      	ldr	r2, [pc, #20]	; (8001e4c <_sbrk+0x64>)
 8001e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20010000 	.word	0x20010000
 8001e48:	00000400 	.word	0x00000400
 8001e4c:	20000228 	.word	0x20000228
 8001e50:	20001dc0 	.word	0x20001dc0

08001e54 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <SystemInit+0x20>)
 8001e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5e:	4a05      	ldr	r2, [pc, #20]	; (8001e74 <SystemInit+0x20>)
 8001e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eb0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e7c:	480d      	ldr	r0, [pc, #52]	; (8001eb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e7e:	490e      	ldr	r1, [pc, #56]	; (8001eb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e80:	4a0e      	ldr	r2, [pc, #56]	; (8001ebc <LoopForever+0xe>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e84:	e002      	b.n	8001e8c <LoopCopyDataInit>

08001e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e8a:	3304      	adds	r3, #4

08001e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e90:	d3f9      	bcc.n	8001e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e92:	4a0b      	ldr	r2, [pc, #44]	; (8001ec0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e94:	4c0b      	ldr	r4, [pc, #44]	; (8001ec4 <LoopForever+0x16>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e98:	e001      	b.n	8001e9e <LoopFillZerobss>

08001e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e9c:	3204      	adds	r2, #4

08001e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea0:	d3fb      	bcc.n	8001e9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ea2:	f7ff ffd7 	bl	8001e54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ea6:	f005 fcad 	bl	8007804 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eaa:	f7fe fed5 	bl	8000c58 <main>

08001eae <LoopForever>:

LoopForever:
    b LoopForever
 8001eae:	e7fe      	b.n	8001eae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001eb0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb8:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001ebc:	0800b2c8 	.word	0x0800b2c8
  ldr r2, =_sbss
 8001ec0:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8001ec4:	20001dc0 	.word	0x20001dc0

08001ec8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ec8:	e7fe      	b.n	8001ec8 <ADC1_2_IRQHandler>
	...

08001ecc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed0:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <HAL_Init+0x28>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a07      	ldr	r2, [pc, #28]	; (8001ef4 <HAL_Init+0x28>)
 8001ed6:	f043 0310 	orr.w	r3, r3, #16
 8001eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001edc:	2003      	movs	r0, #3
 8001ede:	f000 f8fa 	bl	80020d6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f7ff fe9a 	bl	8001c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee8:	f7ff fe2e 	bl	8001b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40022000 	.word	0x40022000

08001ef8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_IncTick+0x20>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_IncTick+0x24>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	4a04      	ldr	r2, [pc, #16]	; (8001f1c <HAL_IncTick+0x24>)
 8001f0a:	6013      	str	r3, [r2, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	20000020 	.word	0x20000020
 8001f1c:	20001d78 	.word	0x20001d78

08001f20 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return uwTick;  
 8001f24:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <HAL_GetTick+0x14>)
 8001f26:	681b      	ldr	r3, [r3, #0]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20001d78 	.word	0x20001d78

08001f38 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f40:	f7ff ffee 	bl	8001f20 <HAL_GetTick>
 8001f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f50:	d005      	beq.n	8001f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f52:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <HAL_Delay+0x40>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001f5e:	bf00      	nop
 8001f60:	f7ff ffde 	bl	8001f20 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d8f7      	bhi.n	8001f60 <HAL_Delay+0x28>
  {
  }
}
 8001f70:	bf00      	nop
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000020 	.word	0x20000020

08001f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fae:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	60d3      	str	r3, [r2, #12]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <__NVIC_GetPriorityGrouping+0x18>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	0a1b      	lsrs	r3, r3, #8
 8001fce:	f003 0307 	and.w	r3, r3, #7
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	db0b      	blt.n	800200a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	f003 021f 	and.w	r2, r3, #31
 8001ff8:	4907      	ldr	r1, [pc, #28]	; (8002018 <__NVIC_EnableIRQ+0x38>)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	2001      	movs	r0, #1
 8002002:	fa00 f202 	lsl.w	r2, r0, r2
 8002006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000e100 	.word	0xe000e100

0800201c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	6039      	str	r1, [r7, #0]
 8002026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202c:	2b00      	cmp	r3, #0
 800202e:	db0a      	blt.n	8002046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	b2da      	uxtb	r2, r3
 8002034:	490c      	ldr	r1, [pc, #48]	; (8002068 <__NVIC_SetPriority+0x4c>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	0112      	lsls	r2, r2, #4
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	440b      	add	r3, r1
 8002040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002044:	e00a      	b.n	800205c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4908      	ldr	r1, [pc, #32]	; (800206c <__NVIC_SetPriority+0x50>)
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	3b04      	subs	r3, #4
 8002054:	0112      	lsls	r2, r2, #4
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	440b      	add	r3, r1
 800205a:	761a      	strb	r2, [r3, #24]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000e100 	.word	0xe000e100
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f1c3 0307 	rsb	r3, r3, #7
 800208a:	2b04      	cmp	r3, #4
 800208c:	bf28      	it	cs
 800208e:	2304      	movcs	r3, #4
 8002090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3304      	adds	r3, #4
 8002096:	2b06      	cmp	r3, #6
 8002098:	d902      	bls.n	80020a0 <NVIC_EncodePriority+0x30>
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3b03      	subs	r3, #3
 800209e:	e000      	b.n	80020a2 <NVIC_EncodePriority+0x32>
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	401a      	ands	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b8:	f04f 31ff 	mov.w	r1, #4294967295
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43d9      	mvns	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	4313      	orrs	r3, r2
         );
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3724      	adds	r7, #36	; 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff ff4c 	bl	8001f7c <__NVIC_SetPriorityGrouping>
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020fe:	f7ff ff61 	bl	8001fc4 <__NVIC_GetPriorityGrouping>
 8002102:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	68b9      	ldr	r1, [r7, #8]
 8002108:	6978      	ldr	r0, [r7, #20]
 800210a:	f7ff ffb1 	bl	8002070 <NVIC_EncodePriority>
 800210e:	4602      	mov	r2, r0
 8002110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002114:	4611      	mov	r1, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff ff80 	bl	800201c <__NVIC_SetPriority>
}
 800211c:	bf00      	nop
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ff54 	bl	8001fe0 <__NVIC_EnableIRQ>
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214e:	e160      	b.n	8002412 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	2101      	movs	r1, #1
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	fa01 f303 	lsl.w	r3, r1, r3
 800215c:	4013      	ands	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 8152 	beq.w	800240c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d00b      	beq.n	8002188 <HAL_GPIO_Init+0x48>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d007      	beq.n	8002188 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800217c:	2b11      	cmp	r3, #17
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b12      	cmp	r3, #18
 8002186:	d130      	bne.n	80021ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021be:	2201      	movs	r2, #1
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4013      	ands	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	091b      	lsrs	r3, r3, #4
 80021d4:	f003 0201 	and.w	r2, r3, #1
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	2203      	movs	r2, #3
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0xea>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b12      	cmp	r3, #18
 8002228:	d123      	bne.n	8002272 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	08da      	lsrs	r2, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3208      	adds	r2, #8
 8002232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002236:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	220f      	movs	r2, #15
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	691a      	ldr	r2, [r3, #16]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4313      	orrs	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	08da      	lsrs	r2, r3, #3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3208      	adds	r2, #8
 800226c:	6939      	ldr	r1, [r7, #16]
 800226e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	2203      	movs	r2, #3
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4013      	ands	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 0203 	and.w	r2, r3, #3
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 80ac 	beq.w	800240c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b4:	4b5e      	ldr	r3, [pc, #376]	; (8002430 <HAL_GPIO_Init+0x2f0>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	4a5d      	ldr	r2, [pc, #372]	; (8002430 <HAL_GPIO_Init+0x2f0>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6193      	str	r3, [r2, #24]
 80022c0:	4b5b      	ldr	r3, [pc, #364]	; (8002430 <HAL_GPIO_Init+0x2f0>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022cc:	4a59      	ldr	r2, [pc, #356]	; (8002434 <HAL_GPIO_Init+0x2f4>)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	089b      	lsrs	r3, r3, #2
 80022d2:	3302      	adds	r3, #2
 80022d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	220f      	movs	r2, #15
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022f6:	d025      	beq.n	8002344 <HAL_GPIO_Init+0x204>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a4f      	ldr	r2, [pc, #316]	; (8002438 <HAL_GPIO_Init+0x2f8>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d01f      	beq.n	8002340 <HAL_GPIO_Init+0x200>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a4e      	ldr	r2, [pc, #312]	; (800243c <HAL_GPIO_Init+0x2fc>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d019      	beq.n	800233c <HAL_GPIO_Init+0x1fc>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a4d      	ldr	r2, [pc, #308]	; (8002440 <HAL_GPIO_Init+0x300>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d013      	beq.n	8002338 <HAL_GPIO_Init+0x1f8>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a4c      	ldr	r2, [pc, #304]	; (8002444 <HAL_GPIO_Init+0x304>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d00d      	beq.n	8002334 <HAL_GPIO_Init+0x1f4>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a4b      	ldr	r2, [pc, #300]	; (8002448 <HAL_GPIO_Init+0x308>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d007      	beq.n	8002330 <HAL_GPIO_Init+0x1f0>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a4a      	ldr	r2, [pc, #296]	; (800244c <HAL_GPIO_Init+0x30c>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d101      	bne.n	800232c <HAL_GPIO_Init+0x1ec>
 8002328:	2306      	movs	r3, #6
 800232a:	e00c      	b.n	8002346 <HAL_GPIO_Init+0x206>
 800232c:	2307      	movs	r3, #7
 800232e:	e00a      	b.n	8002346 <HAL_GPIO_Init+0x206>
 8002330:	2305      	movs	r3, #5
 8002332:	e008      	b.n	8002346 <HAL_GPIO_Init+0x206>
 8002334:	2304      	movs	r3, #4
 8002336:	e006      	b.n	8002346 <HAL_GPIO_Init+0x206>
 8002338:	2303      	movs	r3, #3
 800233a:	e004      	b.n	8002346 <HAL_GPIO_Init+0x206>
 800233c:	2302      	movs	r3, #2
 800233e:	e002      	b.n	8002346 <HAL_GPIO_Init+0x206>
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <HAL_GPIO_Init+0x206>
 8002344:	2300      	movs	r3, #0
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	f002 0203 	and.w	r2, r2, #3
 800234c:	0092      	lsls	r2, r2, #2
 800234e:	4093      	lsls	r3, r2
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002356:	4937      	ldr	r1, [pc, #220]	; (8002434 <HAL_GPIO_Init+0x2f4>)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	089b      	lsrs	r3, r3, #2
 800235c:	3302      	adds	r3, #2
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002364:	4b3a      	ldr	r3, [pc, #232]	; (8002450 <HAL_GPIO_Init+0x310>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	43db      	mvns	r3, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002388:	4a31      	ldr	r2, [pc, #196]	; (8002450 <HAL_GPIO_Init+0x310>)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800238e:	4b30      	ldr	r3, [pc, #192]	; (8002450 <HAL_GPIO_Init+0x310>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	43db      	mvns	r3, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023b2:	4a27      	ldr	r2, [pc, #156]	; (8002450 <HAL_GPIO_Init+0x310>)
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023b8:	4b25      	ldr	r3, [pc, #148]	; (8002450 <HAL_GPIO_Init+0x310>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4313      	orrs	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023dc:	4a1c      	ldr	r2, [pc, #112]	; (8002450 <HAL_GPIO_Init+0x310>)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e2:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <HAL_GPIO_Init+0x310>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002406:	4a12      	ldr	r2, [pc, #72]	; (8002450 <HAL_GPIO_Init+0x310>)
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	3301      	adds	r3, #1
 8002410:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	fa22 f303 	lsr.w	r3, r2, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	f47f ae97 	bne.w	8002150 <HAL_GPIO_Init+0x10>
  }
}
 8002422:	bf00      	nop
 8002424:	371c      	adds	r7, #28
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40021000 	.word	0x40021000
 8002434:	40010000 	.word	0x40010000
 8002438:	48000400 	.word	0x48000400
 800243c:	48000800 	.word	0x48000800
 8002440:	48000c00 	.word	0x48000c00
 8002444:	48001000 	.word	0x48001000
 8002448:	48001400 	.word	0x48001400
 800244c:	48001800 	.word	0x48001800
 8002450:	40010400 	.word	0x40010400

08002454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	807b      	strh	r3, [r7, #2]
 8002460:	4613      	mov	r3, r2
 8002462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002464:	787b      	ldrb	r3, [r7, #1]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800246a:	887a      	ldrh	r2, [r7, #2]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002470:	e002      	b.n	8002478 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002472:	887a      	ldrh	r2, [r7, #2]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800248a:	af00      	add	r7, sp, #0
 800248c:	1d3b      	adds	r3, r7, #4
 800248e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002490:	1d3b      	adds	r3, r7, #4
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d102      	bne.n	800249e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	f000 bf01 	b.w	80032a0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800249e:	1d3b      	adds	r3, r7, #4
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 8160 	beq.w	800276e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80024ae:	4bae      	ldr	r3, [pc, #696]	; (8002768 <HAL_RCC_OscConfig+0x2e4>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d00c      	beq.n	80024d4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024ba:	4bab      	ldr	r3, [pc, #684]	; (8002768 <HAL_RCC_OscConfig+0x2e4>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d159      	bne.n	800257a <HAL_RCC_OscConfig+0xf6>
 80024c6:	4ba8      	ldr	r3, [pc, #672]	; (8002768 <HAL_RCC_OscConfig+0x2e4>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80024ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d2:	d152      	bne.n	800257a <HAL_RCC_OscConfig+0xf6>
 80024d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024d8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80024e0:	fa93 f3a3 	rbit	r3, r3
 80024e4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024e8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ec:	fab3 f383 	clz	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d102      	bne.n	8002506 <HAL_RCC_OscConfig+0x82>
 8002500:	4b99      	ldr	r3, [pc, #612]	; (8002768 <HAL_RCC_OscConfig+0x2e4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	e015      	b.n	8002532 <HAL_RCC_OscConfig+0xae>
 8002506:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800250a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800251a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800251e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002522:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002526:	fa93 f3a3 	rbit	r3, r3
 800252a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800252e:	4b8e      	ldr	r3, [pc, #568]	; (8002768 <HAL_RCC_OscConfig+0x2e4>)
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002536:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800253a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800253e:	fa92 f2a2 	rbit	r2, r2
 8002542:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002546:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800254a:	fab2 f282 	clz	r2, r2
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	f042 0220 	orr.w	r2, r2, #32
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	f002 021f 	and.w	r2, r2, #31
 800255a:	2101      	movs	r1, #1
 800255c:	fa01 f202 	lsl.w	r2, r1, r2
 8002560:	4013      	ands	r3, r2
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 8102 	beq.w	800276c <HAL_RCC_OscConfig+0x2e8>
 8002568:	1d3b      	adds	r3, r7, #4
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	f040 80fc 	bne.w	800276c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	f000 be93 	b.w	80032a0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002584:	d106      	bne.n	8002594 <HAL_RCC_OscConfig+0x110>
 8002586:	4b78      	ldr	r3, [pc, #480]	; (8002768 <HAL_RCC_OscConfig+0x2e4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a77      	ldr	r2, [pc, #476]	; (8002768 <HAL_RCC_OscConfig+0x2e4>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e030      	b.n	80025f6 <HAL_RCC_OscConfig+0x172>
 8002594:	1d3b      	adds	r3, r7, #4
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x134>
 800259e:	4b72      	ldr	r3, [pc, #456]	; (8002768 <HAL_RCC_OscConfig+0x2e4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a71      	ldr	r2, [pc, #452]	; (8002768 <HAL_RCC_OscConfig+0x2e4>)
 80025a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b6f      	ldr	r3, [pc, #444]	; (8002768 <HAL_RCC_OscConfig+0x2e4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a6e      	ldr	r2, [pc, #440]	; (8002768 <HAL_RCC_OscConfig+0x2e4>)
 80025b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e01e      	b.n	80025f6 <HAL_RCC_OscConfig+0x172>
 80025b8:	1d3b      	adds	r3, r7, #4
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025c2:	d10c      	bne.n	80025de <HAL_RCC_OscConfig+0x15a>
 80025c4:	4b68      	ldr	r3, [pc, #416]	; (8002768 <HAL_RCC_OscConfig+0x2e4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a67      	ldr	r2, [pc, #412]	; (8002768 <HAL_RCC_OscConfig+0x2e4>)
 80025ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	4b65      	ldr	r3, [pc, #404]	; (8002768 <HAL_RCC_OscConfig+0x2e4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a64      	ldr	r2, [pc, #400]	; (8002768 <HAL_RCC_OscConfig+0x2e4>)
 80025d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	e00b      	b.n	80025f6 <HAL_RCC_OscConfig+0x172>
 80025de:	4b62      	ldr	r3, [pc, #392]	; (8002768 <HAL_RCC_OscConfig+0x2e4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a61      	ldr	r2, [pc, #388]	; (8002768 <HAL_RCC_OscConfig+0x2e4>)
 80025e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	4b5f      	ldr	r3, [pc, #380]	; (8002768 <HAL_RCC_OscConfig+0x2e4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a5e      	ldr	r2, [pc, #376]	; (8002768 <HAL_RCC_OscConfig+0x2e4>)
 80025f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025f4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d059      	beq.n	80026b4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7ff fc8e 	bl	8001f20 <HAL_GetTick>
 8002604:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800260a:	f7ff fc89 	bl	8001f20 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	; 0x64
 8002618:	d902      	bls.n	8002620 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	f000 be40 	b.w	80032a0 <HAL_RCC_OscConfig+0xe1c>
 8002620:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002624:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002634:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002638:	fab3 f383 	clz	r3, r3
 800263c:	b2db      	uxtb	r3, r3
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	b2db      	uxtb	r3, r3
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d102      	bne.n	8002652 <HAL_RCC_OscConfig+0x1ce>
 800264c:	4b46      	ldr	r3, [pc, #280]	; (8002768 <HAL_RCC_OscConfig+0x2e4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	e015      	b.n	800267e <HAL_RCC_OscConfig+0x1fa>
 8002652:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002656:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002666:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800266a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800266e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800267a:	4b3b      	ldr	r3, [pc, #236]	; (8002768 <HAL_RCC_OscConfig+0x2e4>)
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002682:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002686:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800268a:	fa92 f2a2 	rbit	r2, r2
 800268e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002692:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002696:	fab2 f282 	clz	r2, r2
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	f042 0220 	orr.w	r2, r2, #32
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	f002 021f 	and.w	r2, r2, #31
 80026a6:	2101      	movs	r1, #1
 80026a8:	fa01 f202 	lsl.w	r2, r1, r2
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0ab      	beq.n	800260a <HAL_RCC_OscConfig+0x186>
 80026b2:	e05c      	b.n	800276e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7ff fc34 	bl	8001f20 <HAL_GetTick>
 80026b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026bc:	e00a      	b.n	80026d4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026be:	f7ff fc2f 	bl	8001f20 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b64      	cmp	r3, #100	; 0x64
 80026cc:	d902      	bls.n	80026d4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	f000 bde6 	b.w	80032a0 <HAL_RCC_OscConfig+0xe1c>
 80026d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026d8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80026e8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ec:	fab3 f383 	clz	r3, r3
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	095b      	lsrs	r3, r3, #5
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d102      	bne.n	8002706 <HAL_RCC_OscConfig+0x282>
 8002700:	4b19      	ldr	r3, [pc, #100]	; (8002768 <HAL_RCC_OscConfig+0x2e4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	e015      	b.n	8002732 <HAL_RCC_OscConfig+0x2ae>
 8002706:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800270a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800271a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800271e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002722:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <HAL_RCC_OscConfig+0x2e4>)
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002736:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800273a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800273e:	fa92 f2a2 	rbit	r2, r2
 8002742:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002746:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800274a:	fab2 f282 	clz	r2, r2
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	f042 0220 	orr.w	r2, r2, #32
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	f002 021f 	and.w	r2, r2, #31
 800275a:	2101      	movs	r1, #1
 800275c:	fa01 f202 	lsl.w	r2, r1, r2
 8002760:	4013      	ands	r3, r2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1ab      	bne.n	80026be <HAL_RCC_OscConfig+0x23a>
 8002766:	e002      	b.n	800276e <HAL_RCC_OscConfig+0x2ea>
 8002768:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 8170 	beq.w	8002a5e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800277e:	4bd0      	ldr	r3, [pc, #832]	; (8002ac0 <HAL_RCC_OscConfig+0x63c>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00c      	beq.n	80027a4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800278a:	4bcd      	ldr	r3, [pc, #820]	; (8002ac0 <HAL_RCC_OscConfig+0x63c>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b08      	cmp	r3, #8
 8002794:	d16d      	bne.n	8002872 <HAL_RCC_OscConfig+0x3ee>
 8002796:	4bca      	ldr	r3, [pc, #808]	; (8002ac0 <HAL_RCC_OscConfig+0x63c>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800279e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027a2:	d166      	bne.n	8002872 <HAL_RCC_OscConfig+0x3ee>
 80027a4:	2302      	movs	r3, #2
 80027a6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80027ae:	fa93 f3a3 	rbit	r3, r3
 80027b2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80027b6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	095b      	lsrs	r3, r3, #5
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d102      	bne.n	80027d4 <HAL_RCC_OscConfig+0x350>
 80027ce:	4bbc      	ldr	r3, [pc, #752]	; (8002ac0 <HAL_RCC_OscConfig+0x63c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	e013      	b.n	80027fc <HAL_RCC_OscConfig+0x378>
 80027d4:	2302      	movs	r3, #2
 80027d6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80027e6:	2302      	movs	r3, #2
 80027e8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80027ec:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80027f8:	4bb1      	ldr	r3, [pc, #708]	; (8002ac0 <HAL_RCC_OscConfig+0x63c>)
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	2202      	movs	r2, #2
 80027fe:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002802:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002806:	fa92 f2a2 	rbit	r2, r2
 800280a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800280e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002812:	fab2 f282 	clz	r2, r2
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	f042 0220 	orr.w	r2, r2, #32
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	f002 021f 	and.w	r2, r2, #31
 8002822:	2101      	movs	r1, #1
 8002824:	fa01 f202 	lsl.w	r2, r1, r2
 8002828:	4013      	ands	r3, r2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d007      	beq.n	800283e <HAL_RCC_OscConfig+0x3ba>
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d002      	beq.n	800283e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	f000 bd31 	b.w	80032a0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283e:	4ba0      	ldr	r3, [pc, #640]	; (8002ac0 <HAL_RCC_OscConfig+0x63c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002846:	1d3b      	adds	r3, r7, #4
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	21f8      	movs	r1, #248	; 0xf8
 800284e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002856:	fa91 f1a1 	rbit	r1, r1
 800285a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800285e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002862:	fab1 f181 	clz	r1, r1
 8002866:	b2c9      	uxtb	r1, r1
 8002868:	408b      	lsls	r3, r1
 800286a:	4995      	ldr	r1, [pc, #596]	; (8002ac0 <HAL_RCC_OscConfig+0x63c>)
 800286c:	4313      	orrs	r3, r2
 800286e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002870:	e0f5      	b.n	8002a5e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002872:	1d3b      	adds	r3, r7, #4
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 8085 	beq.w	8002988 <HAL_RCC_OscConfig+0x504>
 800287e:	2301      	movs	r3, #1
 8002880:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002884:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002888:	fa93 f3a3 	rbit	r3, r3
 800288c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002890:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002894:	fab3 f383 	clz	r3, r3
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800289e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	461a      	mov	r2, r3
 80028a6:	2301      	movs	r3, #1
 80028a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028aa:	f7ff fb39 	bl	8001f20 <HAL_GetTick>
 80028ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028b4:	f7ff fb34 	bl	8001f20 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d902      	bls.n	80028ca <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	f000 bceb 	b.w	80032a0 <HAL_RCC_OscConfig+0xe1c>
 80028ca:	2302      	movs	r3, #2
 80028cc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80028dc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e0:	fab3 f383 	clz	r3, r3
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d102      	bne.n	80028fa <HAL_RCC_OscConfig+0x476>
 80028f4:	4b72      	ldr	r3, [pc, #456]	; (8002ac0 <HAL_RCC_OscConfig+0x63c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	e013      	b.n	8002922 <HAL_RCC_OscConfig+0x49e>
 80028fa:	2302      	movs	r3, #2
 80028fc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800290c:	2302      	movs	r3, #2
 800290e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002912:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002916:	fa93 f3a3 	rbit	r3, r3
 800291a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800291e:	4b68      	ldr	r3, [pc, #416]	; (8002ac0 <HAL_RCC_OscConfig+0x63c>)
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	2202      	movs	r2, #2
 8002924:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002928:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800292c:	fa92 f2a2 	rbit	r2, r2
 8002930:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002934:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002938:	fab2 f282 	clz	r2, r2
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	f042 0220 	orr.w	r2, r2, #32
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	f002 021f 	and.w	r2, r2, #31
 8002948:	2101      	movs	r1, #1
 800294a:	fa01 f202 	lsl.w	r2, r1, r2
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0af      	beq.n	80028b4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002954:	4b5a      	ldr	r3, [pc, #360]	; (8002ac0 <HAL_RCC_OscConfig+0x63c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800295c:	1d3b      	adds	r3, r7, #4
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	21f8      	movs	r1, #248	; 0xf8
 8002964:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002968:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800296c:	fa91 f1a1 	rbit	r1, r1
 8002970:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002974:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002978:	fab1 f181 	clz	r1, r1
 800297c:	b2c9      	uxtb	r1, r1
 800297e:	408b      	lsls	r3, r1
 8002980:	494f      	ldr	r1, [pc, #316]	; (8002ac0 <HAL_RCC_OscConfig+0x63c>)
 8002982:	4313      	orrs	r3, r2
 8002984:	600b      	str	r3, [r1, #0]
 8002986:	e06a      	b.n	8002a5e <HAL_RCC_OscConfig+0x5da>
 8002988:	2301      	movs	r3, #1
 800298a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800299a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	461a      	mov	r2, r3
 80029b0:	2300      	movs	r3, #0
 80029b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7ff fab4 	bl	8001f20 <HAL_GetTick>
 80029b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029bc:	e00a      	b.n	80029d4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029be:	f7ff faaf 	bl	8001f20 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d902      	bls.n	80029d4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	f000 bc66 	b.w	80032a0 <HAL_RCC_OscConfig+0xe1c>
 80029d4:	2302      	movs	r3, #2
 80029d6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80029e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ea:	fab3 f383 	clz	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	095b      	lsrs	r3, r3, #5
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d102      	bne.n	8002a04 <HAL_RCC_OscConfig+0x580>
 80029fe:	4b30      	ldr	r3, [pc, #192]	; (8002ac0 <HAL_RCC_OscConfig+0x63c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	e013      	b.n	8002a2c <HAL_RCC_OscConfig+0x5a8>
 8002a04:	2302      	movs	r3, #2
 8002a06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002a0e:	fa93 f3a3 	rbit	r3, r3
 8002a12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002a16:	2302      	movs	r3, #2
 8002a18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002a1c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002a20:	fa93 f3a3 	rbit	r3, r3
 8002a24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002a28:	4b25      	ldr	r3, [pc, #148]	; (8002ac0 <HAL_RCC_OscConfig+0x63c>)
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002a32:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002a36:	fa92 f2a2 	rbit	r2, r2
 8002a3a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002a3e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002a42:	fab2 f282 	clz	r2, r2
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	f042 0220 	orr.w	r2, r2, #32
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	f002 021f 	and.w	r2, r2, #31
 8002a52:	2101      	movs	r1, #1
 8002a54:	fa01 f202 	lsl.w	r2, r1, r2
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1af      	bne.n	80029be <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a5e:	1d3b      	adds	r3, r7, #4
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 80da 	beq.w	8002c22 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a6e:	1d3b      	adds	r3, r7, #4
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d069      	beq.n	8002b4c <HAL_RCC_OscConfig+0x6c8>
 8002a78:	2301      	movs	r3, #1
 8002a7a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002a8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <HAL_RCC_OscConfig+0x640>)
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa2:	f7ff fa3d 	bl	8001f20 <HAL_GetTick>
 8002aa6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aaa:	e00d      	b.n	8002ac8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aac:	f7ff fa38 	bl	8001f20 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d905      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e3ef      	b.n	80032a0 <HAL_RCC_OscConfig+0xe1c>
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	10908120 	.word	0x10908120
 8002ac8:	2302      	movs	r3, #2
 8002aca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ad2:	fa93 f2a3 	rbit	r2, r3
 8002ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	fa93 f2a3 	rbit	r2, r3
 8002aee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002af8:	2202      	movs	r2, #2
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	fa93 f2a3 	rbit	r2, r3
 8002b06:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002b0a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b0c:	4ba4      	ldr	r3, [pc, #656]	; (8002da0 <HAL_RCC_OscConfig+0x91c>)
 8002b0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b10:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002b14:	2102      	movs	r1, #2
 8002b16:	6019      	str	r1, [r3, #0]
 8002b18:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	fa93 f1a3 	rbit	r1, r3
 8002b22:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002b26:	6019      	str	r1, [r3, #0]
  return result;
 8002b28:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	2101      	movs	r1, #1
 8002b40:	fa01 f303 	lsl.w	r3, r1, r3
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0b0      	beq.n	8002aac <HAL_RCC_OscConfig+0x628>
 8002b4a:	e06a      	b.n	8002c22 <HAL_RCC_OscConfig+0x79e>
 8002b4c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b50:	2201      	movs	r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	fa93 f2a3 	rbit	r2, r3
 8002b5e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002b62:	601a      	str	r2, [r3, #0]
  return result;
 8002b64:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002b68:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b8c      	ldr	r3, [pc, #560]	; (8002da4 <HAL_RCC_OscConfig+0x920>)
 8002b74:	4413      	add	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	461a      	mov	r2, r3
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7e:	f7ff f9cf 	bl	8001f20 <HAL_GetTick>
 8002b82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b86:	e009      	b.n	8002b9c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b88:	f7ff f9ca 	bl	8001f20 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e381      	b.n	80032a0 <HAL_RCC_OscConfig+0xe1c>
 8002b9c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	fa93 f2a3 	rbit	r2, r3
 8002bae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002bb8:	2202      	movs	r2, #2
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	fa93 f2a3 	rbit	r2, r3
 8002bc6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	fa93 f2a3 	rbit	r2, r3
 8002bde:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002be2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be4:	4b6e      	ldr	r3, [pc, #440]	; (8002da0 <HAL_RCC_OscConfig+0x91c>)
 8002be6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bec:	2102      	movs	r1, #2
 8002bee:	6019      	str	r1, [r3, #0]
 8002bf0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	fa93 f1a3 	rbit	r1, r3
 8002bfa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002bfe:	6019      	str	r1, [r3, #0]
  return result;
 8002c00:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	2101      	movs	r1, #1
 8002c18:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1b2      	bne.n	8002b88 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c22:	1d3b      	adds	r3, r7, #4
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 8157 	beq.w	8002ee0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c38:	4b59      	ldr	r3, [pc, #356]	; (8002da0 <HAL_RCC_OscConfig+0x91c>)
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d112      	bne.n	8002c6a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c44:	4b56      	ldr	r3, [pc, #344]	; (8002da0 <HAL_RCC_OscConfig+0x91c>)
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	4a55      	ldr	r2, [pc, #340]	; (8002da0 <HAL_RCC_OscConfig+0x91c>)
 8002c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	61d3      	str	r3, [r2, #28]
 8002c50:	4b53      	ldr	r3, [pc, #332]	; (8002da0 <HAL_RCC_OscConfig+0x91c>)
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002c58:	f107 030c 	add.w	r3, r7, #12
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	f107 030c 	add.w	r3, r7, #12
 8002c62:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c64:	2301      	movs	r3, #1
 8002c66:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6a:	4b4f      	ldr	r3, [pc, #316]	; (8002da8 <HAL_RCC_OscConfig+0x924>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d11a      	bne.n	8002cac <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c76:	4b4c      	ldr	r3, [pc, #304]	; (8002da8 <HAL_RCC_OscConfig+0x924>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a4b      	ldr	r2, [pc, #300]	; (8002da8 <HAL_RCC_OscConfig+0x924>)
 8002c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c80:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c82:	f7ff f94d 	bl	8001f20 <HAL_GetTick>
 8002c86:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8a:	e009      	b.n	8002ca0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c8c:	f7ff f948 	bl	8001f20 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b64      	cmp	r3, #100	; 0x64
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e2ff      	b.n	80032a0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca0:	4b41      	ldr	r3, [pc, #260]	; (8002da8 <HAL_RCC_OscConfig+0x924>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0ef      	beq.n	8002c8c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cac:	1d3b      	adds	r3, r7, #4
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d106      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x840>
 8002cb6:	4b3a      	ldr	r3, [pc, #232]	; (8002da0 <HAL_RCC_OscConfig+0x91c>)
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	4a39      	ldr	r2, [pc, #228]	; (8002da0 <HAL_RCC_OscConfig+0x91c>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6213      	str	r3, [r2, #32]
 8002cc2:	e02f      	b.n	8002d24 <HAL_RCC_OscConfig+0x8a0>
 8002cc4:	1d3b      	adds	r3, r7, #4
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x864>
 8002cce:	4b34      	ldr	r3, [pc, #208]	; (8002da0 <HAL_RCC_OscConfig+0x91c>)
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	4a33      	ldr	r2, [pc, #204]	; (8002da0 <HAL_RCC_OscConfig+0x91c>)
 8002cd4:	f023 0301 	bic.w	r3, r3, #1
 8002cd8:	6213      	str	r3, [r2, #32]
 8002cda:	4b31      	ldr	r3, [pc, #196]	; (8002da0 <HAL_RCC_OscConfig+0x91c>)
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	4a30      	ldr	r2, [pc, #192]	; (8002da0 <HAL_RCC_OscConfig+0x91c>)
 8002ce0:	f023 0304 	bic.w	r3, r3, #4
 8002ce4:	6213      	str	r3, [r2, #32]
 8002ce6:	e01d      	b.n	8002d24 <HAL_RCC_OscConfig+0x8a0>
 8002ce8:	1d3b      	adds	r3, r7, #4
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2b05      	cmp	r3, #5
 8002cf0:	d10c      	bne.n	8002d0c <HAL_RCC_OscConfig+0x888>
 8002cf2:	4b2b      	ldr	r3, [pc, #172]	; (8002da0 <HAL_RCC_OscConfig+0x91c>)
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	4a2a      	ldr	r2, [pc, #168]	; (8002da0 <HAL_RCC_OscConfig+0x91c>)
 8002cf8:	f043 0304 	orr.w	r3, r3, #4
 8002cfc:	6213      	str	r3, [r2, #32]
 8002cfe:	4b28      	ldr	r3, [pc, #160]	; (8002da0 <HAL_RCC_OscConfig+0x91c>)
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	4a27      	ldr	r2, [pc, #156]	; (8002da0 <HAL_RCC_OscConfig+0x91c>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	6213      	str	r3, [r2, #32]
 8002d0a:	e00b      	b.n	8002d24 <HAL_RCC_OscConfig+0x8a0>
 8002d0c:	4b24      	ldr	r3, [pc, #144]	; (8002da0 <HAL_RCC_OscConfig+0x91c>)
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	4a23      	ldr	r2, [pc, #140]	; (8002da0 <HAL_RCC_OscConfig+0x91c>)
 8002d12:	f023 0301 	bic.w	r3, r3, #1
 8002d16:	6213      	str	r3, [r2, #32]
 8002d18:	4b21      	ldr	r3, [pc, #132]	; (8002da0 <HAL_RCC_OscConfig+0x91c>)
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	4a20      	ldr	r2, [pc, #128]	; (8002da0 <HAL_RCC_OscConfig+0x91c>)
 8002d1e:	f023 0304 	bic.w	r3, r3, #4
 8002d22:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d24:	1d3b      	adds	r3, r7, #4
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d06a      	beq.n	8002e04 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d2e:	f7ff f8f7 	bl	8001f20 <HAL_GetTick>
 8002d32:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d36:	e00b      	b.n	8002d50 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d38:	f7ff f8f2 	bl	8001f20 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e2a7      	b.n	80032a0 <HAL_RCC_OscConfig+0xe1c>
 8002d50:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d54:	2202      	movs	r2, #2
 8002d56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	fa93 f2a3 	rbit	r2, r3
 8002d62:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	fa93 f2a3 	rbit	r2, r3
 8002d7a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002d7e:	601a      	str	r2, [r3, #0]
  return result;
 8002d80:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002d84:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d86:	fab3 f383 	clz	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	095b      	lsrs	r3, r3, #5
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	f043 0302 	orr.w	r3, r3, #2
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d108      	bne.n	8002dac <HAL_RCC_OscConfig+0x928>
 8002d9a:	4b01      	ldr	r3, [pc, #4]	; (8002da0 <HAL_RCC_OscConfig+0x91c>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	e013      	b.n	8002dc8 <HAL_RCC_OscConfig+0x944>
 8002da0:	40021000 	.word	0x40021000
 8002da4:	10908120 	.word	0x10908120
 8002da8:	40007000 	.word	0x40007000
 8002dac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002db0:	2202      	movs	r2, #2
 8002db2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	fa93 f2a3 	rbit	r2, r3
 8002dbe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	4bc0      	ldr	r3, [pc, #768]	; (80030c8 <HAL_RCC_OscConfig+0xc44>)
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002dcc:	2102      	movs	r1, #2
 8002dce:	6011      	str	r1, [r2, #0]
 8002dd0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002dd4:	6812      	ldr	r2, [r2, #0]
 8002dd6:	fa92 f1a2 	rbit	r1, r2
 8002dda:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002dde:	6011      	str	r1, [r2, #0]
  return result;
 8002de0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002de4:	6812      	ldr	r2, [r2, #0]
 8002de6:	fab2 f282 	clz	r2, r2
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	f002 021f 	and.w	r2, r2, #31
 8002df6:	2101      	movs	r1, #1
 8002df8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d09a      	beq.n	8002d38 <HAL_RCC_OscConfig+0x8b4>
 8002e02:	e063      	b.n	8002ecc <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e04:	f7ff f88c 	bl	8001f20 <HAL_GetTick>
 8002e08:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e0c:	e00b      	b.n	8002e26 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e0e:	f7ff f887 	bl	8001f20 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e23c      	b.n	80032a0 <HAL_RCC_OscConfig+0xe1c>
 8002e26:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	fa93 f2a3 	rbit	r2, r3
 8002e38:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e42:	2202      	movs	r2, #2
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	fa93 f2a3 	rbit	r2, r3
 8002e50:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002e54:	601a      	str	r2, [r3, #0]
  return result;
 8002e56:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002e5a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e5c:	fab3 f383 	clz	r3, r3
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	095b      	lsrs	r3, r3, #5
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	f043 0302 	orr.w	r3, r3, #2
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d102      	bne.n	8002e76 <HAL_RCC_OscConfig+0x9f2>
 8002e70:	4b95      	ldr	r3, [pc, #596]	; (80030c8 <HAL_RCC_OscConfig+0xc44>)
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	e00d      	b.n	8002e92 <HAL_RCC_OscConfig+0xa0e>
 8002e76:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	fa93 f2a3 	rbit	r2, r3
 8002e88:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	4b8e      	ldr	r3, [pc, #568]	; (80030c8 <HAL_RCC_OscConfig+0xc44>)
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002e96:	2102      	movs	r1, #2
 8002e98:	6011      	str	r1, [r2, #0]
 8002e9a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	fa92 f1a2 	rbit	r1, r2
 8002ea4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002ea8:	6011      	str	r1, [r2, #0]
  return result;
 8002eaa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002eae:	6812      	ldr	r2, [r2, #0]
 8002eb0:	fab2 f282 	clz	r2, r2
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	f002 021f 	and.w	r2, r2, #31
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1a0      	bne.n	8002e0e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ecc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d105      	bne.n	8002ee0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed4:	4b7c      	ldr	r3, [pc, #496]	; (80030c8 <HAL_RCC_OscConfig+0xc44>)
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	4a7b      	ldr	r2, [pc, #492]	; (80030c8 <HAL_RCC_OscConfig+0xc44>)
 8002eda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ede:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ee0:	1d3b      	adds	r3, r7, #4
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 81d9 	beq.w	800329e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eec:	4b76      	ldr	r3, [pc, #472]	; (80030c8 <HAL_RCC_OscConfig+0xc44>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 030c 	and.w	r3, r3, #12
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	f000 81a6 	beq.w	8003246 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002efa:	1d3b      	adds	r3, r7, #4
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	f040 811e 	bne.w	8003142 <HAL_RCC_OscConfig+0xcbe>
 8002f06:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002f0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	fa93 f2a3 	rbit	r2, r3
 8002f1a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002f1e:	601a      	str	r2, [r3, #0]
  return result;
 8002f20:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002f24:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	461a      	mov	r2, r3
 8002f38:	2300      	movs	r3, #0
 8002f3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fff0 	bl	8001f20 <HAL_GetTick>
 8002f40:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f44:	e009      	b.n	8002f5a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f46:	f7fe ffeb 	bl	8001f20 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e1a2      	b.n	80032a0 <HAL_RCC_OscConfig+0xe1c>
 8002f5a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f64:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	fa93 f2a3 	rbit	r2, r3
 8002f6e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002f72:	601a      	str	r2, [r3, #0]
  return result;
 8002f74:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002f78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f7a:	fab3 f383 	clz	r3, r3
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	095b      	lsrs	r3, r3, #5
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d102      	bne.n	8002f94 <HAL_RCC_OscConfig+0xb10>
 8002f8e:	4b4e      	ldr	r3, [pc, #312]	; (80030c8 <HAL_RCC_OscConfig+0xc44>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	e01b      	b.n	8002fcc <HAL_RCC_OscConfig+0xb48>
 8002f94:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	fa93 f2a3 	rbit	r2, r3
 8002fa8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002fb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	fa93 f2a3 	rbit	r2, r3
 8002fc2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	4b3f      	ldr	r3, [pc, #252]	; (80030c8 <HAL_RCC_OscConfig+0xc44>)
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002fd0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fd4:	6011      	str	r1, [r2, #0]
 8002fd6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002fda:	6812      	ldr	r2, [r2, #0]
 8002fdc:	fa92 f1a2 	rbit	r1, r2
 8002fe0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002fe4:	6011      	str	r1, [r2, #0]
  return result;
 8002fe6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	fab2 f282 	clz	r2, r2
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	f042 0220 	orr.w	r2, r2, #32
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	f002 021f 	and.w	r2, r2, #31
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8003002:	4013      	ands	r3, r2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d19e      	bne.n	8002f46 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003008:	4b2f      	ldr	r3, [pc, #188]	; (80030c8 <HAL_RCC_OscConfig+0xc44>)
 800300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300c:	f023 020f 	bic.w	r2, r3, #15
 8003010:	1d3b      	adds	r3, r7, #4
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	492c      	ldr	r1, [pc, #176]	; (80030c8 <HAL_RCC_OscConfig+0xc44>)
 8003018:	4313      	orrs	r3, r2
 800301a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800301c:	4b2a      	ldr	r3, [pc, #168]	; (80030c8 <HAL_RCC_OscConfig+0xc44>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003024:	1d3b      	adds	r3, r7, #4
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6a19      	ldr	r1, [r3, #32]
 800302a:	1d3b      	adds	r3, r7, #4
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	430b      	orrs	r3, r1
 8003032:	4925      	ldr	r1, [pc, #148]	; (80030c8 <HAL_RCC_OscConfig+0xc44>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
 8003038:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800303c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003040:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	fa93 f2a3 	rbit	r2, r3
 800304c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003050:	601a      	str	r2, [r3, #0]
  return result;
 8003052:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003056:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003058:	fab3 f383 	clz	r3, r3
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003062:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	461a      	mov	r2, r3
 800306a:	2301      	movs	r3, #1
 800306c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306e:	f7fe ff57 	bl	8001f20 <HAL_GetTick>
 8003072:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003076:	e009      	b.n	800308c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003078:	f7fe ff52 	bl	8001f20 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e109      	b.n	80032a0 <HAL_RCC_OscConfig+0xe1c>
 800308c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003090:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003094:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003096:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	fa93 f2a3 	rbit	r2, r3
 80030a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80030a4:	601a      	str	r2, [r3, #0]
  return result;
 80030a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80030aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030ac:	fab3 f383 	clz	r3, r3
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d105      	bne.n	80030cc <HAL_RCC_OscConfig+0xc48>
 80030c0:	4b01      	ldr	r3, [pc, #4]	; (80030c8 <HAL_RCC_OscConfig+0xc44>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	e01e      	b.n	8003104 <HAL_RCC_OscConfig+0xc80>
 80030c6:	bf00      	nop
 80030c8:	40021000 	.word	0x40021000
 80030cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80030d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	fa93 f2a3 	rbit	r2, r3
 80030e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80030ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	fa93 f2a3 	rbit	r2, r3
 80030fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	4b6a      	ldr	r3, [pc, #424]	; (80032ac <HAL_RCC_OscConfig+0xe28>)
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003108:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800310c:	6011      	str	r1, [r2, #0]
 800310e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	fa92 f1a2 	rbit	r1, r2
 8003118:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800311c:	6011      	str	r1, [r2, #0]
  return result;
 800311e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	fab2 f282 	clz	r2, r2
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	f042 0220 	orr.w	r2, r2, #32
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	f002 021f 	and.w	r2, r2, #31
 8003134:	2101      	movs	r1, #1
 8003136:	fa01 f202 	lsl.w	r2, r1, r2
 800313a:	4013      	ands	r3, r2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d09b      	beq.n	8003078 <HAL_RCC_OscConfig+0xbf4>
 8003140:	e0ad      	b.n	800329e <HAL_RCC_OscConfig+0xe1a>
 8003142:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003146:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800314a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	fa93 f2a3 	rbit	r2, r3
 8003156:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800315a:	601a      	str	r2, [r3, #0]
  return result;
 800315c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003160:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003162:	fab3 f383 	clz	r3, r3
 8003166:	b2db      	uxtb	r3, r3
 8003168:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800316c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	461a      	mov	r2, r3
 8003174:	2300      	movs	r3, #0
 8003176:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7fe fed2 	bl	8001f20 <HAL_GetTick>
 800317c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003180:	e009      	b.n	8003196 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003182:	f7fe fecd 	bl	8001f20 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e084      	b.n	80032a0 <HAL_RCC_OscConfig+0xe1c>
 8003196:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800319a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800319e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	fa93 f2a3 	rbit	r2, r3
 80031aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031ae:	601a      	str	r2, [r3, #0]
  return result;
 80031b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031b6:	fab3 f383 	clz	r3, r3
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	095b      	lsrs	r3, r3, #5
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d102      	bne.n	80031d0 <HAL_RCC_OscConfig+0xd4c>
 80031ca:	4b38      	ldr	r3, [pc, #224]	; (80032ac <HAL_RCC_OscConfig+0xe28>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	e01b      	b.n	8003208 <HAL_RCC_OscConfig+0xd84>
 80031d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	fa93 f2a3 	rbit	r2, r3
 80031e4:	f107 0320 	add.w	r3, r7, #32
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	f107 031c 	add.w	r3, r7, #28
 80031ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	f107 031c 	add.w	r3, r7, #28
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	fa93 f2a3 	rbit	r2, r3
 80031fe:	f107 0318 	add.w	r3, r7, #24
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	4b29      	ldr	r3, [pc, #164]	; (80032ac <HAL_RCC_OscConfig+0xe28>)
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	f107 0214 	add.w	r2, r7, #20
 800320c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003210:	6011      	str	r1, [r2, #0]
 8003212:	f107 0214 	add.w	r2, r7, #20
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	fa92 f1a2 	rbit	r1, r2
 800321c:	f107 0210 	add.w	r2, r7, #16
 8003220:	6011      	str	r1, [r2, #0]
  return result;
 8003222:	f107 0210 	add.w	r2, r7, #16
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	fab2 f282 	clz	r2, r2
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	f042 0220 	orr.w	r2, r2, #32
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	f002 021f 	and.w	r2, r2, #31
 8003238:	2101      	movs	r1, #1
 800323a:	fa01 f202 	lsl.w	r2, r1, r2
 800323e:	4013      	ands	r3, r2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d19e      	bne.n	8003182 <HAL_RCC_OscConfig+0xcfe>
 8003244:	e02b      	b.n	800329e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003246:	1d3b      	adds	r3, r7, #4
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e025      	b.n	80032a0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003254:	4b15      	ldr	r3, [pc, #84]	; (80032ac <HAL_RCC_OscConfig+0xe28>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800325c:	4b13      	ldr	r3, [pc, #76]	; (80032ac <HAL_RCC_OscConfig+0xe28>)
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003264:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003268:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800326c:	1d3b      	adds	r3, r7, #4
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	429a      	cmp	r2, r3
 8003274:	d111      	bne.n	800329a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003276:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800327a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800327e:	1d3b      	adds	r3, r7, #4
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003284:	429a      	cmp	r2, r3
 8003286:	d108      	bne.n	800329a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003288:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800328c:	f003 020f 	and.w	r2, r3, #15
 8003290:	1d3b      	adds	r3, r7, #4
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003296:	429a      	cmp	r2, r3
 8003298:	d001      	beq.n	800329e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40021000 	.word	0x40021000

080032b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b09e      	sub	sp, #120	; 0x78
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e162      	b.n	800358e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032c8:	4b90      	ldr	r3, [pc, #576]	; (800350c <HAL_RCC_ClockConfig+0x25c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d910      	bls.n	80032f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d6:	4b8d      	ldr	r3, [pc, #564]	; (800350c <HAL_RCC_ClockConfig+0x25c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f023 0207 	bic.w	r2, r3, #7
 80032de:	498b      	ldr	r1, [pc, #556]	; (800350c <HAL_RCC_ClockConfig+0x25c>)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e6:	4b89      	ldr	r3, [pc, #548]	; (800350c <HAL_RCC_ClockConfig+0x25c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d001      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e14a      	b.n	800358e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003304:	4b82      	ldr	r3, [pc, #520]	; (8003510 <HAL_RCC_ClockConfig+0x260>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	497f      	ldr	r1, [pc, #508]	; (8003510 <HAL_RCC_ClockConfig+0x260>)
 8003312:	4313      	orrs	r3, r2
 8003314:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 80dc 	beq.w	80034dc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d13c      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xf6>
 800332c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003330:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003334:	fa93 f3a3 	rbit	r3, r3
 8003338:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800333a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333c:	fab3 f383 	clz	r3, r3
 8003340:	b2db      	uxtb	r3, r3
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	b2db      	uxtb	r3, r3
 8003346:	f043 0301 	orr.w	r3, r3, #1
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b01      	cmp	r3, #1
 800334e:	d102      	bne.n	8003356 <HAL_RCC_ClockConfig+0xa6>
 8003350:	4b6f      	ldr	r3, [pc, #444]	; (8003510 <HAL_RCC_ClockConfig+0x260>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	e00f      	b.n	8003376 <HAL_RCC_ClockConfig+0xc6>
 8003356:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800335a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800335e:	fa93 f3a3 	rbit	r3, r3
 8003362:	667b      	str	r3, [r7, #100]	; 0x64
 8003364:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003368:	663b      	str	r3, [r7, #96]	; 0x60
 800336a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800336c:	fa93 f3a3 	rbit	r3, r3
 8003370:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003372:	4b67      	ldr	r3, [pc, #412]	; (8003510 <HAL_RCC_ClockConfig+0x260>)
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800337a:	65ba      	str	r2, [r7, #88]	; 0x58
 800337c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800337e:	fa92 f2a2 	rbit	r2, r2
 8003382:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003384:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003386:	fab2 f282 	clz	r2, r2
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	f042 0220 	orr.w	r2, r2, #32
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	f002 021f 	and.w	r2, r2, #31
 8003396:	2101      	movs	r1, #1
 8003398:	fa01 f202 	lsl.w	r2, r1, r2
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d17b      	bne.n	800349a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e0f3      	b.n	800358e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d13c      	bne.n	8003428 <HAL_RCC_ClockConfig+0x178>
 80033ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80033bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033be:	fab3 f383 	clz	r3, r3
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	095b      	lsrs	r3, r3, #5
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d102      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x128>
 80033d2:	4b4f      	ldr	r3, [pc, #316]	; (8003510 <HAL_RCC_ClockConfig+0x260>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	e00f      	b.n	80033f8 <HAL_RCC_ClockConfig+0x148>
 80033d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033e0:	fa93 f3a3 	rbit	r3, r3
 80033e4:	647b      	str	r3, [r7, #68]	; 0x44
 80033e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033ea:	643b      	str	r3, [r7, #64]	; 0x40
 80033ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ee:	fa93 f3a3 	rbit	r3, r3
 80033f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033f4:	4b46      	ldr	r3, [pc, #280]	; (8003510 <HAL_RCC_ClockConfig+0x260>)
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033fc:	63ba      	str	r2, [r7, #56]	; 0x38
 80033fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003400:	fa92 f2a2 	rbit	r2, r2
 8003404:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003408:	fab2 f282 	clz	r2, r2
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	f042 0220 	orr.w	r2, r2, #32
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	f002 021f 	and.w	r2, r2, #31
 8003418:	2101      	movs	r1, #1
 800341a:	fa01 f202 	lsl.w	r2, r1, r2
 800341e:	4013      	ands	r3, r2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d13a      	bne.n	800349a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0b2      	b.n	800358e <HAL_RCC_ClockConfig+0x2de>
 8003428:	2302      	movs	r3, #2
 800342a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342e:	fa93 f3a3 	rbit	r3, r3
 8003432:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003436:	fab3 f383 	clz	r3, r3
 800343a:	b2db      	uxtb	r3, r3
 800343c:	095b      	lsrs	r3, r3, #5
 800343e:	b2db      	uxtb	r3, r3
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b01      	cmp	r3, #1
 8003448:	d102      	bne.n	8003450 <HAL_RCC_ClockConfig+0x1a0>
 800344a:	4b31      	ldr	r3, [pc, #196]	; (8003510 <HAL_RCC_ClockConfig+0x260>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	e00d      	b.n	800346c <HAL_RCC_ClockConfig+0x1bc>
 8003450:	2302      	movs	r3, #2
 8003452:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003456:	fa93 f3a3 	rbit	r3, r3
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
 800345c:	2302      	movs	r3, #2
 800345e:	623b      	str	r3, [r7, #32]
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	fa93 f3a3 	rbit	r3, r3
 8003466:	61fb      	str	r3, [r7, #28]
 8003468:	4b29      	ldr	r3, [pc, #164]	; (8003510 <HAL_RCC_ClockConfig+0x260>)
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	2202      	movs	r2, #2
 800346e:	61ba      	str	r2, [r7, #24]
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	fa92 f2a2 	rbit	r2, r2
 8003476:	617a      	str	r2, [r7, #20]
  return result;
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	fab2 f282 	clz	r2, r2
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	f042 0220 	orr.w	r2, r2, #32
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	f002 021f 	and.w	r2, r2, #31
 800348a:	2101      	movs	r1, #1
 800348c:	fa01 f202 	lsl.w	r2, r1, r2
 8003490:	4013      	ands	r3, r2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e079      	b.n	800358e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800349a:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <HAL_RCC_ClockConfig+0x260>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f023 0203 	bic.w	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	491a      	ldr	r1, [pc, #104]	; (8003510 <HAL_RCC_ClockConfig+0x260>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034ac:	f7fe fd38 	bl	8001f20 <HAL_GetTick>
 80034b0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b2:	e00a      	b.n	80034ca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b4:	f7fe fd34 	bl	8001f20 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e061      	b.n	800358e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ca:	4b11      	ldr	r3, [pc, #68]	; (8003510 <HAL_RCC_ClockConfig+0x260>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f003 020c 	and.w	r2, r3, #12
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	429a      	cmp	r2, r3
 80034da:	d1eb      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034dc:	4b0b      	ldr	r3, [pc, #44]	; (800350c <HAL_RCC_ClockConfig+0x25c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d214      	bcs.n	8003514 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ea:	4b08      	ldr	r3, [pc, #32]	; (800350c <HAL_RCC_ClockConfig+0x25c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 0207 	bic.w	r2, r3, #7
 80034f2:	4906      	ldr	r1, [pc, #24]	; (800350c <HAL_RCC_ClockConfig+0x25c>)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fa:	4b04      	ldr	r3, [pc, #16]	; (800350c <HAL_RCC_ClockConfig+0x25c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d005      	beq.n	8003514 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e040      	b.n	800358e <HAL_RCC_ClockConfig+0x2de>
 800350c:	40022000 	.word	0x40022000
 8003510:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003520:	4b1d      	ldr	r3, [pc, #116]	; (8003598 <HAL_RCC_ClockConfig+0x2e8>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	491a      	ldr	r1, [pc, #104]	; (8003598 <HAL_RCC_ClockConfig+0x2e8>)
 800352e:	4313      	orrs	r3, r2
 8003530:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d009      	beq.n	8003552 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800353e:	4b16      	ldr	r3, [pc, #88]	; (8003598 <HAL_RCC_ClockConfig+0x2e8>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4912      	ldr	r1, [pc, #72]	; (8003598 <HAL_RCC_ClockConfig+0x2e8>)
 800354e:	4313      	orrs	r3, r2
 8003550:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003552:	f000 f829 	bl	80035a8 <HAL_RCC_GetSysClockFreq>
 8003556:	4601      	mov	r1, r0
 8003558:	4b0f      	ldr	r3, [pc, #60]	; (8003598 <HAL_RCC_ClockConfig+0x2e8>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003560:	22f0      	movs	r2, #240	; 0xf0
 8003562:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	fa92 f2a2 	rbit	r2, r2
 800356a:	60fa      	str	r2, [r7, #12]
  return result;
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	fab2 f282 	clz	r2, r2
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	40d3      	lsrs	r3, r2
 8003576:	4a09      	ldr	r2, [pc, #36]	; (800359c <HAL_RCC_ClockConfig+0x2ec>)
 8003578:	5cd3      	ldrb	r3, [r2, r3]
 800357a:	fa21 f303 	lsr.w	r3, r1, r3
 800357e:	4a08      	ldr	r2, [pc, #32]	; (80035a0 <HAL_RCC_ClockConfig+0x2f0>)
 8003580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003582:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <HAL_RCC_ClockConfig+0x2f4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f7fe fb48 	bl	8001c1c <HAL_InitTick>
  
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3778      	adds	r7, #120	; 0x78
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40021000 	.word	0x40021000
 800359c:	0800af80 	.word	0x0800af80
 80035a0:	20000018 	.word	0x20000018
 80035a4:	2000001c 	.word	0x2000001c

080035a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b08b      	sub	sp, #44	; 0x2c
 80035ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61fb      	str	r3, [r7, #28]
 80035b2:	2300      	movs	r3, #0
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	2300      	movs	r3, #0
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80035c2:	4b2a      	ldr	r3, [pc, #168]	; (800366c <HAL_RCC_GetSysClockFreq+0xc4>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d002      	beq.n	80035d8 <HAL_RCC_GetSysClockFreq+0x30>
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d003      	beq.n	80035de <HAL_RCC_GetSysClockFreq+0x36>
 80035d6:	e03f      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035d8:	4b25      	ldr	r3, [pc, #148]	; (8003670 <HAL_RCC_GetSysClockFreq+0xc8>)
 80035da:	623b      	str	r3, [r7, #32]
      break;
 80035dc:	e03f      	b.n	800365e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80035e4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80035e8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	fa92 f2a2 	rbit	r2, r2
 80035f0:	607a      	str	r2, [r7, #4]
  return result;
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	fab2 f282 	clz	r2, r2
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	40d3      	lsrs	r3, r2
 80035fc:	4a1d      	ldr	r2, [pc, #116]	; (8003674 <HAL_RCC_GetSysClockFreq+0xcc>)
 80035fe:	5cd3      	ldrb	r3, [r2, r3]
 8003600:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003602:	4b1a      	ldr	r3, [pc, #104]	; (800366c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	220f      	movs	r2, #15
 800360c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	fa92 f2a2 	rbit	r2, r2
 8003614:	60fa      	str	r2, [r7, #12]
  return result;
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	fab2 f282 	clz	r2, r2
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	40d3      	lsrs	r3, r2
 8003620:	4a15      	ldr	r2, [pc, #84]	; (8003678 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003622:	5cd3      	ldrb	r3, [r2, r3]
 8003624:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d008      	beq.n	8003642 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003630:	4a0f      	ldr	r2, [pc, #60]	; (8003670 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	fbb2 f2f3 	udiv	r2, r2, r3
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	fb02 f303 	mul.w	r3, r2, r3
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
 8003640:	e007      	b.n	8003652 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003642:	4a0b      	ldr	r2, [pc, #44]	; (8003670 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	fbb2 f2f3 	udiv	r2, r2, r3
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	fb02 f303 	mul.w	r3, r2, r3
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	623b      	str	r3, [r7, #32]
      break;
 8003656:	e002      	b.n	800365e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003658:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_RCC_GetSysClockFreq+0xc8>)
 800365a:	623b      	str	r3, [r7, #32]
      break;
 800365c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800365e:	6a3b      	ldr	r3, [r7, #32]
}
 8003660:	4618      	mov	r0, r3
 8003662:	372c      	adds	r7, #44	; 0x2c
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	40021000 	.word	0x40021000
 8003670:	007a1200 	.word	0x007a1200
 8003674:	0800af98 	.word	0x0800af98
 8003678:	0800afa8 	.word	0x0800afa8

0800367c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003680:	4b03      	ldr	r3, [pc, #12]	; (8003690 <HAL_RCC_GetHCLKFreq+0x14>)
 8003682:	681b      	ldr	r3, [r3, #0]
}
 8003684:	4618      	mov	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	20000018 	.word	0x20000018

08003694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800369a:	f7ff ffef 	bl	800367c <HAL_RCC_GetHCLKFreq>
 800369e:	4601      	mov	r1, r0
 80036a0:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036a8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80036ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	fa92 f2a2 	rbit	r2, r2
 80036b4:	603a      	str	r2, [r7, #0]
  return result;
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	fab2 f282 	clz	r2, r2
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	40d3      	lsrs	r3, r2
 80036c0:	4a04      	ldr	r2, [pc, #16]	; (80036d4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80036c2:	5cd3      	ldrb	r3, [r2, r3]
 80036c4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80036c8:	4618      	mov	r0, r3
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40021000 	.word	0x40021000
 80036d4:	0800af90 	.word	0x0800af90

080036d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80036de:	f7ff ffcd 	bl	800367c <HAL_RCC_GetHCLKFreq>
 80036e2:	4601      	mov	r1, r0
 80036e4:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80036ec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80036f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	fa92 f2a2 	rbit	r2, r2
 80036f8:	603a      	str	r2, [r7, #0]
  return result;
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	fab2 f282 	clz	r2, r2
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	40d3      	lsrs	r3, r2
 8003704:	4a04      	ldr	r2, [pc, #16]	; (8003718 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003706:	5cd3      	ldrb	r3, [r2, r3]
 8003708:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40021000 	.word	0x40021000
 8003718:	0800af90 	.word	0x0800af90

0800371c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	220f      	movs	r2, #15
 800372a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800372c:	4b12      	ldr	r3, [pc, #72]	; (8003778 <HAL_RCC_GetClockConfig+0x5c>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f003 0203 	and.w	r2, r3, #3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003738:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <HAL_RCC_GetClockConfig+0x5c>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003744:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <HAL_RCC_GetClockConfig+0x5c>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003750:	4b09      	ldr	r3, [pc, #36]	; (8003778 <HAL_RCC_GetClockConfig+0x5c>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	08db      	lsrs	r3, r3, #3
 8003756:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800375e:	4b07      	ldr	r3, [pc, #28]	; (800377c <HAL_RCC_GetClockConfig+0x60>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0207 	and.w	r2, r3, #7
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	601a      	str	r2, [r3, #0]
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40021000 	.word	0x40021000
 800377c:	40022000 	.word	0x40022000

08003780 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b092      	sub	sp, #72	; 0x48
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003790:	2300      	movs	r3, #0
 8003792:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 80d4 	beq.w	800394c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037a4:	4b4e      	ldr	r3, [pc, #312]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10e      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b0:	4b4b      	ldr	r3, [pc, #300]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	4a4a      	ldr	r2, [pc, #296]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ba:	61d3      	str	r3, [r2, #28]
 80037bc:	4b48      	ldr	r3, [pc, #288]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037c8:	2301      	movs	r3, #1
 80037ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ce:	4b45      	ldr	r3, [pc, #276]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d118      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037da:	4b42      	ldr	r3, [pc, #264]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a41      	ldr	r2, [pc, #260]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037e6:	f7fe fb9b 	bl	8001f20 <HAL_GetTick>
 80037ea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ec:	e008      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ee:	f7fe fb97 	bl	8001f20 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b64      	cmp	r3, #100	; 0x64
 80037fa:	d901      	bls.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e1d6      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003800:	4b38      	ldr	r3, [pc, #224]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0f0      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800380c:	4b34      	ldr	r3, [pc, #208]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003814:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 8084 	beq.w	8003926 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003826:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003828:	429a      	cmp	r2, r3
 800382a:	d07c      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800382c:	4b2c      	ldr	r3, [pc, #176]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003834:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003836:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800383a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383e:	fa93 f3a3 	rbit	r3, r3
 8003842:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003846:	fab3 f383 	clz	r3, r3
 800384a:	b2db      	uxtb	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	4b26      	ldr	r3, [pc, #152]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	461a      	mov	r2, r3
 8003856:	2301      	movs	r3, #1
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800385e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003862:	fa93 f3a3 	rbit	r3, r3
 8003866:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800386a:	fab3 f383 	clz	r3, r3
 800386e:	b2db      	uxtb	r3, r3
 8003870:	461a      	mov	r2, r3
 8003872:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	461a      	mov	r2, r3
 800387a:	2300      	movs	r3, #0
 800387c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800387e:	4a18      	ldr	r2, [pc, #96]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003882:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d04b      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388e:	f7fe fb47 	bl	8001f20 <HAL_GetTick>
 8003892:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003894:	e00a      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003896:	f7fe fb43 	bl	8001f20 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d901      	bls.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e180      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80038ac:	2302      	movs	r3, #2
 80038ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b2:	fa93 f3a3 	rbit	r3, r3
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
 80038b8:	2302      	movs	r3, #2
 80038ba:	623b      	str	r3, [r7, #32]
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	fa93 f3a3 	rbit	r3, r3
 80038c2:	61fb      	str	r3, [r7, #28]
  return result;
 80038c4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c6:	fab3 f383 	clz	r3, r3
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	f043 0302 	orr.w	r3, r3, #2
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d108      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80038da:	4b01      	ldr	r3, [pc, #4]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	e00d      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80038e0:	40021000 	.word	0x40021000
 80038e4:	40007000 	.word	0x40007000
 80038e8:	10908100 	.word	0x10908100
 80038ec:	2302      	movs	r3, #2
 80038ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	fa93 f3a3 	rbit	r3, r3
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	4ba0      	ldr	r3, [pc, #640]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	2202      	movs	r2, #2
 80038fe:	613a      	str	r2, [r7, #16]
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	fa92 f2a2 	rbit	r2, r2
 8003906:	60fa      	str	r2, [r7, #12]
  return result;
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	fab2 f282 	clz	r2, r2
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	f002 021f 	and.w	r2, r2, #31
 800391a:	2101      	movs	r1, #1
 800391c:	fa01 f202 	lsl.w	r2, r1, r2
 8003920:	4013      	ands	r3, r2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0b7      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003926:	4b95      	ldr	r3, [pc, #596]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	4992      	ldr	r1, [pc, #584]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003934:	4313      	orrs	r3, r2
 8003936:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003938:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800393c:	2b01      	cmp	r3, #1
 800393e:	d105      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003940:	4b8e      	ldr	r3, [pc, #568]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	4a8d      	ldr	r2, [pc, #564]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800394a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003958:	4b88      	ldr	r3, [pc, #544]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800395a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395c:	f023 0203 	bic.w	r2, r3, #3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	4985      	ldr	r1, [pc, #532]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003966:	4313      	orrs	r3, r2
 8003968:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d008      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003976:	4b81      	ldr	r3, [pc, #516]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	497e      	ldr	r1, [pc, #504]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003984:	4313      	orrs	r3, r2
 8003986:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003994:	4b79      	ldr	r3, [pc, #484]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003998:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	4976      	ldr	r1, [pc, #472]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d008      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039b2:	4b72      	ldr	r3, [pc, #456]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	f023 0210 	bic.w	r2, r3, #16
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	496f      	ldr	r1, [pc, #444]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80039d0:	4b6a      	ldr	r3, [pc, #424]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039dc:	4967      	ldr	r1, [pc, #412]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d008      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039ee:	4b63      	ldr	r3, [pc, #396]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	f023 0220 	bic.w	r2, r3, #32
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	4960      	ldr	r1, [pc, #384]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d008      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a0c:	4b5b      	ldr	r3, [pc, #364]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a10:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	4958      	ldr	r1, [pc, #352]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d008      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a2a:	4b54      	ldr	r3, [pc, #336]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	4951      	ldr	r1, [pc, #324]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0310 	and.w	r3, r3, #16
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a48:	4b4c      	ldr	r3, [pc, #304]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	4949      	ldr	r1, [pc, #292]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d008      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a66:	4b45      	ldr	r3, [pc, #276]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	4942      	ldr	r1, [pc, #264]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a84:	4b3d      	ldr	r3, [pc, #244]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a90:	493a      	ldr	r1, [pc, #232]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d008      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003aa2:	4b36      	ldr	r3, [pc, #216]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aae:	4933      	ldr	r1, [pc, #204]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ac0:	4b2e      	ldr	r3, [pc, #184]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003acc:	492b      	ldr	r1, [pc, #172]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d008      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003ade:	4b27      	ldr	r3, [pc, #156]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	4924      	ldr	r1, [pc, #144]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003afc:	4b1f      	ldr	r3, [pc, #124]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	491c      	ldr	r1, [pc, #112]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d008      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003b1a:	4b18      	ldr	r3, [pc, #96]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b26:	4915      	ldr	r1, [pc, #84]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d008      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003b38:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b44:	490d      	ldr	r1, [pc, #52]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d008      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003b56:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b62:	4906      	ldr	r1, [pc, #24]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00c      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003b74:	4b01      	ldr	r3, [pc, #4]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	e002      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003b7a:	bf00      	nop
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b88:	490b      	ldr	r1, [pc, #44]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d008      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003b9a:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba6:	4904      	ldr	r1, [pc, #16]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3748      	adds	r7, #72	; 0x48
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40021000 	.word	0x40021000

08003bbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e049      	b.n	8003c62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f841 	bl	8003c6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	f000 f9f8 	bl	8003ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
	...

08003c80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d001      	beq.n	8003c98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e04f      	b.n	8003d38 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a23      	ldr	r2, [pc, #140]	; (8003d44 <HAL_TIM_Base_Start_IT+0xc4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d01d      	beq.n	8003cf6 <HAL_TIM_Base_Start_IT+0x76>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc2:	d018      	beq.n	8003cf6 <HAL_TIM_Base_Start_IT+0x76>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a1f      	ldr	r2, [pc, #124]	; (8003d48 <HAL_TIM_Base_Start_IT+0xc8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d013      	beq.n	8003cf6 <HAL_TIM_Base_Start_IT+0x76>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1e      	ldr	r2, [pc, #120]	; (8003d4c <HAL_TIM_Base_Start_IT+0xcc>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00e      	beq.n	8003cf6 <HAL_TIM_Base_Start_IT+0x76>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a1c      	ldr	r2, [pc, #112]	; (8003d50 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d009      	beq.n	8003cf6 <HAL_TIM_Base_Start_IT+0x76>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a1b      	ldr	r2, [pc, #108]	; (8003d54 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d004      	beq.n	8003cf6 <HAL_TIM_Base_Start_IT+0x76>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a19      	ldr	r2, [pc, #100]	; (8003d58 <HAL_TIM_Base_Start_IT+0xd8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d115      	bne.n	8003d22 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	4b17      	ldr	r3, [pc, #92]	; (8003d5c <HAL_TIM_Base_Start_IT+0xdc>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2b06      	cmp	r3, #6
 8003d06:	d015      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0xb4>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d0e:	d011      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d20:	e008      	b.n	8003d34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0201 	orr.w	r2, r2, #1
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	e000      	b.n	8003d36 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	40012c00 	.word	0x40012c00
 8003d48:	40000400 	.word	0x40000400
 8003d4c:	40000800 	.word	0x40000800
 8003d50:	40013400 	.word	0x40013400
 8003d54:	40014000 	.word	0x40014000
 8003d58:	40015000 	.word	0x40015000
 8003d5c:	00010007 	.word	0x00010007

08003d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d122      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d11b      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0202 	mvn.w	r2, #2
 8003d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f905 	bl	8003fb2 <HAL_TIM_IC_CaptureCallback>
 8003da8:	e005      	b.n	8003db6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f8f7 	bl	8003f9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f908 	bl	8003fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d122      	bne.n	8003e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d11b      	bne.n	8003e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0204 	mvn.w	r2, #4
 8003de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2202      	movs	r2, #2
 8003de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f8db 	bl	8003fb2 <HAL_TIM_IC_CaptureCallback>
 8003dfc:	e005      	b.n	8003e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f8cd 	bl	8003f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f8de 	bl	8003fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d122      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d11b      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0208 	mvn.w	r2, #8
 8003e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2204      	movs	r2, #4
 8003e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f8b1 	bl	8003fb2 <HAL_TIM_IC_CaptureCallback>
 8003e50:	e005      	b.n	8003e5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f8a3 	bl	8003f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f8b4 	bl	8003fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	2b10      	cmp	r3, #16
 8003e70:	d122      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	2b10      	cmp	r3, #16
 8003e7e:	d11b      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0210 	mvn.w	r2, #16
 8003e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2208      	movs	r2, #8
 8003e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f887 	bl	8003fb2 <HAL_TIM_IC_CaptureCallback>
 8003ea4:	e005      	b.n	8003eb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f879 	bl	8003f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f88a 	bl	8003fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d10e      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d107      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0201 	mvn.w	r2, #1
 8003edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fd fe1c 	bl	8001b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eee:	2b80      	cmp	r3, #128	; 0x80
 8003ef0:	d10e      	bne.n	8003f10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efc:	2b80      	cmp	r3, #128	; 0x80
 8003efe:	d107      	bne.n	8003f10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f918 	bl	8004140 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f1e:	d10e      	bne.n	8003f3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2a:	2b80      	cmp	r3, #128	; 0x80
 8003f2c:	d107      	bne.n	8003f3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f90b 	bl	8004154 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f48:	2b40      	cmp	r3, #64	; 0x40
 8003f4a:	d10e      	bne.n	8003f6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f56:	2b40      	cmp	r3, #64	; 0x40
 8003f58:	d107      	bne.n	8003f6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f838 	bl	8003fda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	f003 0320 	and.w	r3, r3, #32
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	d10e      	bne.n	8003f96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b20      	cmp	r3, #32
 8003f84:	d107      	bne.n	8003f96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f06f 0220 	mvn.w	r2, #32
 8003f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f8cb 	bl	800412c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f96:	bf00      	nop
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
	...

08003ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a42      	ldr	r2, [pc, #264]	; (800410c <TIM_Base_SetConfig+0x11c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d013      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400e:	d00f      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a3f      	ldr	r2, [pc, #252]	; (8004110 <TIM_Base_SetConfig+0x120>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00b      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a3e      	ldr	r2, [pc, #248]	; (8004114 <TIM_Base_SetConfig+0x124>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d007      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a3d      	ldr	r2, [pc, #244]	; (8004118 <TIM_Base_SetConfig+0x128>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d003      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a3c      	ldr	r2, [pc, #240]	; (800411c <TIM_Base_SetConfig+0x12c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d108      	bne.n	8004042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a31      	ldr	r2, [pc, #196]	; (800410c <TIM_Base_SetConfig+0x11c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d01f      	beq.n	800408a <TIM_Base_SetConfig+0x9a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004050:	d01b      	beq.n	800408a <TIM_Base_SetConfig+0x9a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a2e      	ldr	r2, [pc, #184]	; (8004110 <TIM_Base_SetConfig+0x120>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d017      	beq.n	800408a <TIM_Base_SetConfig+0x9a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a2d      	ldr	r2, [pc, #180]	; (8004114 <TIM_Base_SetConfig+0x124>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d013      	beq.n	800408a <TIM_Base_SetConfig+0x9a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a2c      	ldr	r2, [pc, #176]	; (8004118 <TIM_Base_SetConfig+0x128>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00f      	beq.n	800408a <TIM_Base_SetConfig+0x9a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a2c      	ldr	r2, [pc, #176]	; (8004120 <TIM_Base_SetConfig+0x130>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00b      	beq.n	800408a <TIM_Base_SetConfig+0x9a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a2b      	ldr	r2, [pc, #172]	; (8004124 <TIM_Base_SetConfig+0x134>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d007      	beq.n	800408a <TIM_Base_SetConfig+0x9a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a2a      	ldr	r2, [pc, #168]	; (8004128 <TIM_Base_SetConfig+0x138>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d003      	beq.n	800408a <TIM_Base_SetConfig+0x9a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a25      	ldr	r2, [pc, #148]	; (800411c <TIM_Base_SetConfig+0x12c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d108      	bne.n	800409c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4313      	orrs	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a12      	ldr	r2, [pc, #72]	; (800410c <TIM_Base_SetConfig+0x11c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d013      	beq.n	80040f0 <TIM_Base_SetConfig+0x100>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a13      	ldr	r2, [pc, #76]	; (8004118 <TIM_Base_SetConfig+0x128>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00f      	beq.n	80040f0 <TIM_Base_SetConfig+0x100>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a13      	ldr	r2, [pc, #76]	; (8004120 <TIM_Base_SetConfig+0x130>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00b      	beq.n	80040f0 <TIM_Base_SetConfig+0x100>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a12      	ldr	r2, [pc, #72]	; (8004124 <TIM_Base_SetConfig+0x134>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d007      	beq.n	80040f0 <TIM_Base_SetConfig+0x100>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a11      	ldr	r2, [pc, #68]	; (8004128 <TIM_Base_SetConfig+0x138>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d003      	beq.n	80040f0 <TIM_Base_SetConfig+0x100>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a0c      	ldr	r2, [pc, #48]	; (800411c <TIM_Base_SetConfig+0x12c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d103      	bne.n	80040f8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	615a      	str	r2, [r3, #20]
}
 80040fe:	bf00      	nop
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40012c00 	.word	0x40012c00
 8004110:	40000400 	.word	0x40000400
 8004114:	40000800 	.word	0x40000800
 8004118:	40013400 	.word	0x40013400
 800411c:	40015000 	.word	0x40015000
 8004120:	40014000 	.word	0x40014000
 8004124:	40014400 	.word	0x40014400
 8004128:	40014800 	.word	0x40014800

0800412c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e040      	b.n	80041fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800417e:	2b00      	cmp	r3, #0
 8004180:	d106      	bne.n	8004190 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fd fd04 	bl	8001b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2224      	movs	r2, #36	; 0x24
 8004194:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0201 	bic.w	r2, r2, #1
 80041a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f8c0 	bl	800432c <UART_SetConfig>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e022      	b.n	80041fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d002      	beq.n	80041c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fa88 	bl	80046d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689a      	ldr	r2, [r3, #8]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 fb0f 	bl	8004818 <UART_CheckIdleState>
 80041fa:	4603      	mov	r3, r0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08a      	sub	sp, #40	; 0x28
 8004208:	af02      	add	r7, sp, #8
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	4613      	mov	r3, r2
 8004212:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004218:	2b20      	cmp	r3, #32
 800421a:	f040 8082 	bne.w	8004322 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <HAL_UART_Transmit+0x26>
 8004224:	88fb      	ldrh	r3, [r7, #6]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e07a      	b.n	8004324 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_UART_Transmit+0x38>
 8004238:	2302      	movs	r3, #2
 800423a:	e073      	b.n	8004324 <HAL_UART_Transmit+0x120>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2221      	movs	r2, #33	; 0x21
 8004250:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004252:	f7fd fe65 	bl	8001f20 <HAL_GetTick>
 8004256:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	88fa      	ldrh	r2, [r7, #6]
 800425c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	88fa      	ldrh	r2, [r7, #6]
 8004264:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004270:	d108      	bne.n	8004284 <HAL_UART_Transmit+0x80>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d104      	bne.n	8004284 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	61bb      	str	r3, [r7, #24]
 8004282:	e003      	b.n	800428c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004288:	2300      	movs	r3, #0
 800428a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004294:	e02d      	b.n	80042f2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2200      	movs	r2, #0
 800429e:	2180      	movs	r1, #128	; 0x80
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 fb02 	bl	80048aa <UART_WaitOnFlagUntilTimeout>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e039      	b.n	8004324 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10b      	bne.n	80042ce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	881a      	ldrh	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042c2:	b292      	uxth	r2, r2
 80042c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	3302      	adds	r3, #2
 80042ca:	61bb      	str	r3, [r7, #24]
 80042cc:	e008      	b.n	80042e0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	781a      	ldrb	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	b292      	uxth	r2, r2
 80042d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	3301      	adds	r3, #1
 80042de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1cb      	bne.n	8004296 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2200      	movs	r2, #0
 8004306:	2140      	movs	r1, #64	; 0x40
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 face 	bl	80048aa <UART_WaitOnFlagUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e005      	b.n	8004324 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2220      	movs	r2, #32
 800431c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	e000      	b.n	8004324 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004322:	2302      	movs	r3, #2
  }
}
 8004324:	4618      	mov	r0, r3
 8004326:	3720      	adds	r7, #32
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b088      	sub	sp, #32
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	431a      	orrs	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	4313      	orrs	r3, r2
 800434e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	4baa      	ldr	r3, [pc, #680]	; (8004600 <UART_SetConfig+0x2d4>)
 8004358:	4013      	ands	r3, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6812      	ldr	r2, [r2, #0]
 800435e:	6979      	ldr	r1, [r7, #20]
 8004360:	430b      	orrs	r3, r1
 8004362:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	430a      	orrs	r2, r1
 800439c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a98      	ldr	r2, [pc, #608]	; (8004604 <UART_SetConfig+0x2d8>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d121      	bne.n	80043ec <UART_SetConfig+0xc0>
 80043a8:	4b97      	ldr	r3, [pc, #604]	; (8004608 <UART_SetConfig+0x2dc>)
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	f003 0303 	and.w	r3, r3, #3
 80043b0:	2b03      	cmp	r3, #3
 80043b2:	d817      	bhi.n	80043e4 <UART_SetConfig+0xb8>
 80043b4:	a201      	add	r2, pc, #4	; (adr r2, 80043bc <UART_SetConfig+0x90>)
 80043b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ba:	bf00      	nop
 80043bc:	080043cd 	.word	0x080043cd
 80043c0:	080043d9 	.word	0x080043d9
 80043c4:	080043df 	.word	0x080043df
 80043c8:	080043d3 	.word	0x080043d3
 80043cc:	2301      	movs	r3, #1
 80043ce:	77fb      	strb	r3, [r7, #31]
 80043d0:	e0b2      	b.n	8004538 <UART_SetConfig+0x20c>
 80043d2:	2302      	movs	r3, #2
 80043d4:	77fb      	strb	r3, [r7, #31]
 80043d6:	e0af      	b.n	8004538 <UART_SetConfig+0x20c>
 80043d8:	2304      	movs	r3, #4
 80043da:	77fb      	strb	r3, [r7, #31]
 80043dc:	e0ac      	b.n	8004538 <UART_SetConfig+0x20c>
 80043de:	2308      	movs	r3, #8
 80043e0:	77fb      	strb	r3, [r7, #31]
 80043e2:	e0a9      	b.n	8004538 <UART_SetConfig+0x20c>
 80043e4:	2310      	movs	r3, #16
 80043e6:	77fb      	strb	r3, [r7, #31]
 80043e8:	bf00      	nop
 80043ea:	e0a5      	b.n	8004538 <UART_SetConfig+0x20c>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a86      	ldr	r2, [pc, #536]	; (800460c <UART_SetConfig+0x2e0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d123      	bne.n	800443e <UART_SetConfig+0x112>
 80043f6:	4b84      	ldr	r3, [pc, #528]	; (8004608 <UART_SetConfig+0x2dc>)
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004402:	d012      	beq.n	800442a <UART_SetConfig+0xfe>
 8004404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004408:	d802      	bhi.n	8004410 <UART_SetConfig+0xe4>
 800440a:	2b00      	cmp	r3, #0
 800440c:	d007      	beq.n	800441e <UART_SetConfig+0xf2>
 800440e:	e012      	b.n	8004436 <UART_SetConfig+0x10a>
 8004410:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004414:	d00c      	beq.n	8004430 <UART_SetConfig+0x104>
 8004416:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800441a:	d003      	beq.n	8004424 <UART_SetConfig+0xf8>
 800441c:	e00b      	b.n	8004436 <UART_SetConfig+0x10a>
 800441e:	2300      	movs	r3, #0
 8004420:	77fb      	strb	r3, [r7, #31]
 8004422:	e089      	b.n	8004538 <UART_SetConfig+0x20c>
 8004424:	2302      	movs	r3, #2
 8004426:	77fb      	strb	r3, [r7, #31]
 8004428:	e086      	b.n	8004538 <UART_SetConfig+0x20c>
 800442a:	2304      	movs	r3, #4
 800442c:	77fb      	strb	r3, [r7, #31]
 800442e:	e083      	b.n	8004538 <UART_SetConfig+0x20c>
 8004430:	2308      	movs	r3, #8
 8004432:	77fb      	strb	r3, [r7, #31]
 8004434:	e080      	b.n	8004538 <UART_SetConfig+0x20c>
 8004436:	2310      	movs	r3, #16
 8004438:	77fb      	strb	r3, [r7, #31]
 800443a:	bf00      	nop
 800443c:	e07c      	b.n	8004538 <UART_SetConfig+0x20c>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a73      	ldr	r2, [pc, #460]	; (8004610 <UART_SetConfig+0x2e4>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d123      	bne.n	8004490 <UART_SetConfig+0x164>
 8004448:	4b6f      	ldr	r3, [pc, #444]	; (8004608 <UART_SetConfig+0x2dc>)
 800444a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004450:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004454:	d012      	beq.n	800447c <UART_SetConfig+0x150>
 8004456:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800445a:	d802      	bhi.n	8004462 <UART_SetConfig+0x136>
 800445c:	2b00      	cmp	r3, #0
 800445e:	d007      	beq.n	8004470 <UART_SetConfig+0x144>
 8004460:	e012      	b.n	8004488 <UART_SetConfig+0x15c>
 8004462:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004466:	d00c      	beq.n	8004482 <UART_SetConfig+0x156>
 8004468:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800446c:	d003      	beq.n	8004476 <UART_SetConfig+0x14a>
 800446e:	e00b      	b.n	8004488 <UART_SetConfig+0x15c>
 8004470:	2300      	movs	r3, #0
 8004472:	77fb      	strb	r3, [r7, #31]
 8004474:	e060      	b.n	8004538 <UART_SetConfig+0x20c>
 8004476:	2302      	movs	r3, #2
 8004478:	77fb      	strb	r3, [r7, #31]
 800447a:	e05d      	b.n	8004538 <UART_SetConfig+0x20c>
 800447c:	2304      	movs	r3, #4
 800447e:	77fb      	strb	r3, [r7, #31]
 8004480:	e05a      	b.n	8004538 <UART_SetConfig+0x20c>
 8004482:	2308      	movs	r3, #8
 8004484:	77fb      	strb	r3, [r7, #31]
 8004486:	e057      	b.n	8004538 <UART_SetConfig+0x20c>
 8004488:	2310      	movs	r3, #16
 800448a:	77fb      	strb	r3, [r7, #31]
 800448c:	bf00      	nop
 800448e:	e053      	b.n	8004538 <UART_SetConfig+0x20c>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a5f      	ldr	r2, [pc, #380]	; (8004614 <UART_SetConfig+0x2e8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d123      	bne.n	80044e2 <UART_SetConfig+0x1b6>
 800449a:	4b5b      	ldr	r3, [pc, #364]	; (8004608 <UART_SetConfig+0x2dc>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80044a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044a6:	d012      	beq.n	80044ce <UART_SetConfig+0x1a2>
 80044a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ac:	d802      	bhi.n	80044b4 <UART_SetConfig+0x188>
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d007      	beq.n	80044c2 <UART_SetConfig+0x196>
 80044b2:	e012      	b.n	80044da <UART_SetConfig+0x1ae>
 80044b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044b8:	d00c      	beq.n	80044d4 <UART_SetConfig+0x1a8>
 80044ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044be:	d003      	beq.n	80044c8 <UART_SetConfig+0x19c>
 80044c0:	e00b      	b.n	80044da <UART_SetConfig+0x1ae>
 80044c2:	2300      	movs	r3, #0
 80044c4:	77fb      	strb	r3, [r7, #31]
 80044c6:	e037      	b.n	8004538 <UART_SetConfig+0x20c>
 80044c8:	2302      	movs	r3, #2
 80044ca:	77fb      	strb	r3, [r7, #31]
 80044cc:	e034      	b.n	8004538 <UART_SetConfig+0x20c>
 80044ce:	2304      	movs	r3, #4
 80044d0:	77fb      	strb	r3, [r7, #31]
 80044d2:	e031      	b.n	8004538 <UART_SetConfig+0x20c>
 80044d4:	2308      	movs	r3, #8
 80044d6:	77fb      	strb	r3, [r7, #31]
 80044d8:	e02e      	b.n	8004538 <UART_SetConfig+0x20c>
 80044da:	2310      	movs	r3, #16
 80044dc:	77fb      	strb	r3, [r7, #31]
 80044de:	bf00      	nop
 80044e0:	e02a      	b.n	8004538 <UART_SetConfig+0x20c>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a4c      	ldr	r2, [pc, #304]	; (8004618 <UART_SetConfig+0x2ec>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d123      	bne.n	8004534 <UART_SetConfig+0x208>
 80044ec:	4b46      	ldr	r3, [pc, #280]	; (8004608 <UART_SetConfig+0x2dc>)
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80044f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044f8:	d012      	beq.n	8004520 <UART_SetConfig+0x1f4>
 80044fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044fe:	d802      	bhi.n	8004506 <UART_SetConfig+0x1da>
 8004500:	2b00      	cmp	r3, #0
 8004502:	d007      	beq.n	8004514 <UART_SetConfig+0x1e8>
 8004504:	e012      	b.n	800452c <UART_SetConfig+0x200>
 8004506:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800450a:	d00c      	beq.n	8004526 <UART_SetConfig+0x1fa>
 800450c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004510:	d003      	beq.n	800451a <UART_SetConfig+0x1ee>
 8004512:	e00b      	b.n	800452c <UART_SetConfig+0x200>
 8004514:	2300      	movs	r3, #0
 8004516:	77fb      	strb	r3, [r7, #31]
 8004518:	e00e      	b.n	8004538 <UART_SetConfig+0x20c>
 800451a:	2302      	movs	r3, #2
 800451c:	77fb      	strb	r3, [r7, #31]
 800451e:	e00b      	b.n	8004538 <UART_SetConfig+0x20c>
 8004520:	2304      	movs	r3, #4
 8004522:	77fb      	strb	r3, [r7, #31]
 8004524:	e008      	b.n	8004538 <UART_SetConfig+0x20c>
 8004526:	2308      	movs	r3, #8
 8004528:	77fb      	strb	r3, [r7, #31]
 800452a:	e005      	b.n	8004538 <UART_SetConfig+0x20c>
 800452c:	2310      	movs	r3, #16
 800452e:	77fb      	strb	r3, [r7, #31]
 8004530:	bf00      	nop
 8004532:	e001      	b.n	8004538 <UART_SetConfig+0x20c>
 8004534:	2310      	movs	r3, #16
 8004536:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004540:	d16e      	bne.n	8004620 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004542:	7ffb      	ldrb	r3, [r7, #31]
 8004544:	2b08      	cmp	r3, #8
 8004546:	d828      	bhi.n	800459a <UART_SetConfig+0x26e>
 8004548:	a201      	add	r2, pc, #4	; (adr r2, 8004550 <UART_SetConfig+0x224>)
 800454a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454e:	bf00      	nop
 8004550:	08004575 	.word	0x08004575
 8004554:	0800457d 	.word	0x0800457d
 8004558:	08004585 	.word	0x08004585
 800455c:	0800459b 	.word	0x0800459b
 8004560:	0800458b 	.word	0x0800458b
 8004564:	0800459b 	.word	0x0800459b
 8004568:	0800459b 	.word	0x0800459b
 800456c:	0800459b 	.word	0x0800459b
 8004570:	08004593 	.word	0x08004593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004574:	f7ff f88e 	bl	8003694 <HAL_RCC_GetPCLK1Freq>
 8004578:	61b8      	str	r0, [r7, #24]
        break;
 800457a:	e013      	b.n	80045a4 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800457c:	f7ff f8ac 	bl	80036d8 <HAL_RCC_GetPCLK2Freq>
 8004580:	61b8      	str	r0, [r7, #24]
        break;
 8004582:	e00f      	b.n	80045a4 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004584:	4b25      	ldr	r3, [pc, #148]	; (800461c <UART_SetConfig+0x2f0>)
 8004586:	61bb      	str	r3, [r7, #24]
        break;
 8004588:	e00c      	b.n	80045a4 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800458a:	f7ff f80d 	bl	80035a8 <HAL_RCC_GetSysClockFreq>
 800458e:	61b8      	str	r0, [r7, #24]
        break;
 8004590:	e008      	b.n	80045a4 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004596:	61bb      	str	r3, [r7, #24]
        break;
 8004598:	e004      	b.n	80045a4 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	77bb      	strb	r3, [r7, #30]
        break;
 80045a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 8086 	beq.w	80046b8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	005a      	lsls	r2, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	085b      	lsrs	r3, r3, #1
 80045b6:	441a      	add	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b0f      	cmp	r3, #15
 80045c8:	d916      	bls.n	80045f8 <UART_SetConfig+0x2cc>
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d0:	d212      	bcs.n	80045f8 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	f023 030f 	bic.w	r3, r3, #15
 80045da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	085b      	lsrs	r3, r3, #1
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	89fb      	ldrh	r3, [r7, #14]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	89fa      	ldrh	r2, [r7, #14]
 80045f4:	60da      	str	r2, [r3, #12]
 80045f6:	e05f      	b.n	80046b8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	77bb      	strb	r3, [r7, #30]
 80045fc:	e05c      	b.n	80046b8 <UART_SetConfig+0x38c>
 80045fe:	bf00      	nop
 8004600:	efff69f3 	.word	0xefff69f3
 8004604:	40013800 	.word	0x40013800
 8004608:	40021000 	.word	0x40021000
 800460c:	40004400 	.word	0x40004400
 8004610:	40004800 	.word	0x40004800
 8004614:	40004c00 	.word	0x40004c00
 8004618:	40005000 	.word	0x40005000
 800461c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8004620:	7ffb      	ldrb	r3, [r7, #31]
 8004622:	2b08      	cmp	r3, #8
 8004624:	d827      	bhi.n	8004676 <UART_SetConfig+0x34a>
 8004626:	a201      	add	r2, pc, #4	; (adr r2, 800462c <UART_SetConfig+0x300>)
 8004628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462c:	08004651 	.word	0x08004651
 8004630:	08004659 	.word	0x08004659
 8004634:	08004661 	.word	0x08004661
 8004638:	08004677 	.word	0x08004677
 800463c:	08004667 	.word	0x08004667
 8004640:	08004677 	.word	0x08004677
 8004644:	08004677 	.word	0x08004677
 8004648:	08004677 	.word	0x08004677
 800464c:	0800466f 	.word	0x0800466f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004650:	f7ff f820 	bl	8003694 <HAL_RCC_GetPCLK1Freq>
 8004654:	61b8      	str	r0, [r7, #24]
        break;
 8004656:	e013      	b.n	8004680 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004658:	f7ff f83e 	bl	80036d8 <HAL_RCC_GetPCLK2Freq>
 800465c:	61b8      	str	r0, [r7, #24]
        break;
 800465e:	e00f      	b.n	8004680 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004660:	4b1b      	ldr	r3, [pc, #108]	; (80046d0 <UART_SetConfig+0x3a4>)
 8004662:	61bb      	str	r3, [r7, #24]
        break;
 8004664:	e00c      	b.n	8004680 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004666:	f7fe ff9f 	bl	80035a8 <HAL_RCC_GetSysClockFreq>
 800466a:	61b8      	str	r0, [r7, #24]
        break;
 800466c:	e008      	b.n	8004680 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800466e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004672:	61bb      	str	r3, [r7, #24]
        break;
 8004674:	e004      	b.n	8004680 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	77bb      	strb	r3, [r7, #30]
        break;
 800467e:	bf00      	nop
    }

    if (pclk != 0U)
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d018      	beq.n	80046b8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	085a      	lsrs	r2, r3, #1
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	441a      	add	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	fbb2 f3f3 	udiv	r3, r2, r3
 8004698:	b29b      	uxth	r3, r3
 800469a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	2b0f      	cmp	r3, #15
 80046a0:	d908      	bls.n	80046b4 <UART_SetConfig+0x388>
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a8:	d204      	bcs.n	80046b4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	60da      	str	r2, [r3, #12]
 80046b2:	e001      	b.n	80046b8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80046c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3720      	adds	r7, #32
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	007a1200 	.word	0x007a1200

080046d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	f003 0310 	and.w	r3, r3, #16
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	f003 0320 	and.w	r3, r3, #32
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01a      	beq.n	80047ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047d2:	d10a      	bne.n	80047ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	605a      	str	r2, [r3, #4]
  }
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af02      	add	r7, sp, #8
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004828:	f7fd fb7a 	bl	8001f20 <HAL_GetTick>
 800482c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b08      	cmp	r3, #8
 800483a:	d10e      	bne.n	800485a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800483c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f82d 	bl	80048aa <UART_WaitOnFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e023      	b.n	80048a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b04      	cmp	r3, #4
 8004866:	d10e      	bne.n	8004886 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004868:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f817 	bl	80048aa <UART_WaitOnFlagUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e00d      	b.n	80048a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2220      	movs	r2, #32
 800488a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2220      	movs	r2, #32
 8004890:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	603b      	str	r3, [r7, #0]
 80048b6:	4613      	mov	r3, r2
 80048b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ba:	e05e      	b.n	800497a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c2:	d05a      	beq.n	800497a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c4:	f7fd fb2c 	bl	8001f20 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d302      	bcc.n	80048da <UART_WaitOnFlagUntilTimeout+0x30>
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d11b      	bne.n	8004912 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0201 	bic.w	r2, r2, #1
 80048f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2220      	movs	r2, #32
 80048fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2220      	movs	r2, #32
 8004904:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e043      	b.n	800499a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b00      	cmp	r3, #0
 800491e:	d02c      	beq.n	800497a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800492a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800492e:	d124      	bne.n	800497a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004938:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004948:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0201 	bic.w	r2, r2, #1
 8004958:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2220      	movs	r2, #32
 800495e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2220      	movs	r2, #32
 8004964:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2220      	movs	r2, #32
 800496a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e00f      	b.n	800499a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69da      	ldr	r2, [r3, #28]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4013      	ands	r3, r2
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	429a      	cmp	r2, r3
 8004988:	bf0c      	ite	eq
 800498a:	2301      	moveq	r3, #1
 800498c:	2300      	movne	r3, #0
 800498e:	b2db      	uxtb	r3, r3
 8004990:	461a      	mov	r2, r3
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	429a      	cmp	r2, r3
 8004996:	d091      	beq.n	80048bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049aa:	f3ef 8305 	mrs	r3, IPSR
 80049ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80049b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10f      	bne.n	80049d6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049b6:	f3ef 8310 	mrs	r3, PRIMASK
 80049ba:	607b      	str	r3, [r7, #4]
  return(result);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d109      	bne.n	80049d6 <osKernelInitialize+0x32>
 80049c2:	4b11      	ldr	r3, [pc, #68]	; (8004a08 <osKernelInitialize+0x64>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d109      	bne.n	80049de <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049ca:	f3ef 8311 	mrs	r3, BASEPRI
 80049ce:	603b      	str	r3, [r7, #0]
  return(result);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80049d6:	f06f 0305 	mvn.w	r3, #5
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	e00c      	b.n	80049f8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80049de:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <osKernelInitialize+0x64>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d105      	bne.n	80049f2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80049e6:	4b08      	ldr	r3, [pc, #32]	; (8004a08 <osKernelInitialize+0x64>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	e002      	b.n	80049f8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80049f2:	f04f 33ff 	mov.w	r3, #4294967295
 80049f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80049f8:	68fb      	ldr	r3, [r7, #12]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	2000022c 	.word	0x2000022c

08004a0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a12:	f3ef 8305 	mrs	r3, IPSR
 8004a16:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a18:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10f      	bne.n	8004a3e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a22:	607b      	str	r3, [r7, #4]
  return(result);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d109      	bne.n	8004a3e <osKernelStart+0x32>
 8004a2a:	4b11      	ldr	r3, [pc, #68]	; (8004a70 <osKernelStart+0x64>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d109      	bne.n	8004a46 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a32:	f3ef 8311 	mrs	r3, BASEPRI
 8004a36:	603b      	str	r3, [r7, #0]
  return(result);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004a3e:	f06f 0305 	mvn.w	r3, #5
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	e00e      	b.n	8004a64 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004a46:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <osKernelStart+0x64>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d107      	bne.n	8004a5e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004a4e:	4b08      	ldr	r3, [pc, #32]	; (8004a70 <osKernelStart+0x64>)
 8004a50:	2202      	movs	r2, #2
 8004a52:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004a54:	f001 f86a 	bl	8005b2c <vTaskStartScheduler>
      stat = osOK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	e002      	b.n	8004a64 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004a64:	68fb      	ldr	r3, [r7, #12]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	2000022c 	.word	0x2000022c

08004a74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b092      	sub	sp, #72	; 0x48
 8004a78:	af04      	add	r7, sp, #16
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004a80:	2300      	movs	r3, #0
 8004a82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a84:	f3ef 8305 	mrs	r3, IPSR
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f040 8094 	bne.w	8004bba <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a92:	f3ef 8310 	mrs	r3, PRIMASK
 8004a96:	623b      	str	r3, [r7, #32]
  return(result);
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f040 808d 	bne.w	8004bba <osThreadNew+0x146>
 8004aa0:	4b48      	ldr	r3, [pc, #288]	; (8004bc4 <osThreadNew+0x150>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d106      	bne.n	8004ab6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004aa8:	f3ef 8311 	mrs	r3, BASEPRI
 8004aac:	61fb      	str	r3, [r7, #28]
  return(result);
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f040 8082 	bne.w	8004bba <osThreadNew+0x146>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d07e      	beq.n	8004bba <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004abc:	2380      	movs	r3, #128	; 0x80
 8004abe:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004ac0:	2318      	movs	r3, #24
 8004ac2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004ac8:	f107 031b 	add.w	r3, r7, #27
 8004acc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004ace:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d045      	beq.n	8004b66 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d002      	beq.n	8004ae8 <osThreadNew+0x74>
        name = attr->name;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d002      	beq.n	8004af6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d008      	beq.n	8004b0e <osThreadNew+0x9a>
 8004afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afe:	2b38      	cmp	r3, #56	; 0x38
 8004b00:	d805      	bhi.n	8004b0e <osThreadNew+0x9a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <osThreadNew+0x9e>
        return (NULL);
 8004b0e:	2300      	movs	r3, #0
 8004b10:	e054      	b.n	8004bbc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	089b      	lsrs	r3, r3, #2
 8004b20:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00e      	beq.n	8004b48 <osThreadNew+0xd4>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	2b5b      	cmp	r3, #91	; 0x5b
 8004b30:	d90a      	bls.n	8004b48 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d006      	beq.n	8004b48 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <osThreadNew+0xd4>
        mem = 1;
 8004b42:	2301      	movs	r3, #1
 8004b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b46:	e010      	b.n	8004b6a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10c      	bne.n	8004b6a <osThreadNew+0xf6>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d108      	bne.n	8004b6a <osThreadNew+0xf6>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d104      	bne.n	8004b6a <osThreadNew+0xf6>
          mem = 0;
 8004b60:	2300      	movs	r3, #0
 8004b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b64:	e001      	b.n	8004b6a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004b66:	2300      	movs	r3, #0
 8004b68:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d110      	bne.n	8004b92 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b78:	9202      	str	r2, [sp, #8]
 8004b7a:	9301      	str	r3, [sp, #4]
 8004b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 fe08 	bl	800579c <xTaskCreateStatic>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	e013      	b.n	8004bba <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d110      	bne.n	8004bba <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	f107 0314 	add.w	r3, r7, #20
 8004ba0:	9301      	str	r3, [sp, #4]
 8004ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 fe4f 	bl	800584e <xTaskCreate>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d001      	beq.n	8004bba <osThreadNew+0x146>
          hTask = NULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004bba:	697b      	ldr	r3, [r7, #20]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3738      	adds	r7, #56	; 0x38
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	2000022c 	.word	0x2000022c

08004bc8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bd0:	f3ef 8305 	mrs	r3, IPSR
 8004bd4:	613b      	str	r3, [r7, #16]
  return(result);
 8004bd6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10f      	bne.n	8004bfc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8004be0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d109      	bne.n	8004bfc <osDelay+0x34>
 8004be8:	4b0d      	ldr	r3, [pc, #52]	; (8004c20 <osDelay+0x58>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d109      	bne.n	8004c04 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bf0:	f3ef 8311 	mrs	r3, BASEPRI
 8004bf4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <osDelay+0x3c>
    stat = osErrorISR;
 8004bfc:	f06f 0305 	mvn.w	r3, #5
 8004c00:	617b      	str	r3, [r7, #20]
 8004c02:	e007      	b.n	8004c14 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004c04:	2300      	movs	r3, #0
 8004c06:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d002      	beq.n	8004c14 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 ff58 	bl	8005ac4 <vTaskDelay>
    }
  }

  return (stat);
 8004c14:	697b      	ldr	r3, [r7, #20]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	2000022c 	.word	0x2000022c

08004c24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4a07      	ldr	r2, [pc, #28]	; (8004c50 <vApplicationGetIdleTaskMemory+0x2c>)
 8004c34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	4a06      	ldr	r2, [pc, #24]	; (8004c54 <vApplicationGetIdleTaskMemory+0x30>)
 8004c3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2280      	movs	r2, #128	; 0x80
 8004c40:	601a      	str	r2, [r3, #0]
}
 8004c42:	bf00      	nop
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	20000230 	.word	0x20000230
 8004c54:	2000028c 	.word	0x2000028c

08004c58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4a07      	ldr	r2, [pc, #28]	; (8004c84 <vApplicationGetTimerTaskMemory+0x2c>)
 8004c68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	4a06      	ldr	r2, [pc, #24]	; (8004c88 <vApplicationGetTimerTaskMemory+0x30>)
 8004c6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c76:	601a      	str	r2, [r3, #0]
}
 8004c78:	bf00      	nop
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	2000048c 	.word	0x2000048c
 8004c88:	200004e8 	.word	0x200004e8

08004c8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f103 0208 	add.w	r2, r3, #8
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f103 0208 	add.w	r2, r3, #8
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f103 0208 	add.w	r2, r3, #8
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b085      	sub	sp, #20
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	601a      	str	r2, [r3, #0]
}
 8004d22:	bf00      	nop
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b085      	sub	sp, #20
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d44:	d103      	bne.n	8004d4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	e00c      	b.n	8004d68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3308      	adds	r3, #8
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	e002      	b.n	8004d5c <vListInsert+0x2e>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d2f6      	bcs.n	8004d56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	601a      	str	r2, [r3, #0]
}
 8004d94:	bf00      	nop
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6892      	ldr	r2, [r2, #8]
 8004db6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6852      	ldr	r2, [r2, #4]
 8004dc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d103      	bne.n	8004dd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	1e5a      	subs	r2, r3, #1
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d109      	bne.n	8004e1c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	60bb      	str	r3, [r7, #8]
 8004e1a:	e7fe      	b.n	8004e1a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004e1c:	f001 ffd6 	bl	8006dcc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e28:	68f9      	ldr	r1, [r7, #12]
 8004e2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e2c:	fb01 f303 	mul.w	r3, r1, r3
 8004e30:	441a      	add	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	68f9      	ldr	r1, [r7, #12]
 8004e50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e52:	fb01 f303 	mul.w	r3, r1, r3
 8004e56:	441a      	add	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	22ff      	movs	r2, #255	; 0xff
 8004e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	22ff      	movs	r2, #255	; 0xff
 8004e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d114      	bne.n	8004e9c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d01a      	beq.n	8004eb0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3310      	adds	r3, #16
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f001 f8da 	bl	8006038 <xTaskRemoveFromEventList>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d012      	beq.n	8004eb0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ec0 <xQueueGenericReset+0xcc>)
 8004e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	e009      	b.n	8004eb0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	3310      	adds	r3, #16
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff fef3 	bl	8004c8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	3324      	adds	r3, #36	; 0x24
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff feee 	bl	8004c8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004eb0:	f001 ffba 	bl	8006e28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004eb4:	2301      	movs	r3, #1
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	e000ed04 	.word	0xe000ed04

08004ec4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08e      	sub	sp, #56	; 0x38
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d109      	bne.n	8004eec <xQueueGenericCreateStatic+0x28>
 8004ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eea:	e7fe      	b.n	8004eea <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d109      	bne.n	8004f06 <xQueueGenericCreateStatic+0x42>
 8004ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	627b      	str	r3, [r7, #36]	; 0x24
 8004f04:	e7fe      	b.n	8004f04 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <xQueueGenericCreateStatic+0x4e>
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <xQueueGenericCreateStatic+0x52>
 8004f12:	2301      	movs	r3, #1
 8004f14:	e000      	b.n	8004f18 <xQueueGenericCreateStatic+0x54>
 8004f16:	2300      	movs	r3, #0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d109      	bne.n	8004f30 <xQueueGenericCreateStatic+0x6c>
 8004f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f20:	f383 8811 	msr	BASEPRI, r3
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	623b      	str	r3, [r7, #32]
 8004f2e:	e7fe      	b.n	8004f2e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d102      	bne.n	8004f3c <xQueueGenericCreateStatic+0x78>
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <xQueueGenericCreateStatic+0x7c>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e000      	b.n	8004f42 <xQueueGenericCreateStatic+0x7e>
 8004f40:	2300      	movs	r3, #0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d109      	bne.n	8004f5a <xQueueGenericCreateStatic+0x96>
 8004f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	61fb      	str	r3, [r7, #28]
 8004f58:	e7fe      	b.n	8004f58 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f5a:	2350      	movs	r3, #80	; 0x50
 8004f5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2b50      	cmp	r3, #80	; 0x50
 8004f62:	d009      	beq.n	8004f78 <xQueueGenericCreateStatic+0xb4>
 8004f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	e7fe      	b.n	8004f76 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00d      	beq.n	8004f9e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	4613      	mov	r3, r2
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 f805 	bl	8004fa8 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3730      	adds	r7, #48	; 0x30
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d103      	bne.n	8004fc4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	e002      	b.n	8004fca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	69b8      	ldr	r0, [r7, #24]
 8004fda:	f7ff ff0b 	bl	8004df4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	78fa      	ldrb	r2, [r7, #3]
 8004fe2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004fe6:	bf00      	nop
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08e      	sub	sp, #56	; 0x38
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ffe:	2300      	movs	r3, #0
 8005000:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	2b00      	cmp	r3, #0
 800500a:	d109      	bne.n	8005020 <xQueueGenericSend+0x30>
 800500c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005010:	f383 8811 	msr	BASEPRI, r3
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	62bb      	str	r3, [r7, #40]	; 0x28
 800501e:	e7fe      	b.n	800501e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d103      	bne.n	800502e <xQueueGenericSend+0x3e>
 8005026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <xQueueGenericSend+0x42>
 800502e:	2301      	movs	r3, #1
 8005030:	e000      	b.n	8005034 <xQueueGenericSend+0x44>
 8005032:	2300      	movs	r3, #0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d109      	bne.n	800504c <xQueueGenericSend+0x5c>
 8005038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	627b      	str	r3, [r7, #36]	; 0x24
 800504a:	e7fe      	b.n	800504a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b02      	cmp	r3, #2
 8005050:	d103      	bne.n	800505a <xQueueGenericSend+0x6a>
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005056:	2b01      	cmp	r3, #1
 8005058:	d101      	bne.n	800505e <xQueueGenericSend+0x6e>
 800505a:	2301      	movs	r3, #1
 800505c:	e000      	b.n	8005060 <xQueueGenericSend+0x70>
 800505e:	2300      	movs	r3, #0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d109      	bne.n	8005078 <xQueueGenericSend+0x88>
 8005064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	623b      	str	r3, [r7, #32]
 8005076:	e7fe      	b.n	8005076 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005078:	f001 f99a 	bl	80063b0 <xTaskGetSchedulerState>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d102      	bne.n	8005088 <xQueueGenericSend+0x98>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <xQueueGenericSend+0x9c>
 8005088:	2301      	movs	r3, #1
 800508a:	e000      	b.n	800508e <xQueueGenericSend+0x9e>
 800508c:	2300      	movs	r3, #0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d109      	bne.n	80050a6 <xQueueGenericSend+0xb6>
 8005092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005096:	f383 8811 	msr	BASEPRI, r3
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	61fb      	str	r3, [r7, #28]
 80050a4:	e7fe      	b.n	80050a4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050a6:	f001 fe91 	bl	8006dcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d302      	bcc.n	80050bc <xQueueGenericSend+0xcc>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d129      	bne.n	8005110 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	68b9      	ldr	r1, [r7, #8]
 80050c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050c2:	f000 f9ff 	bl	80054c4 <prvCopyDataToQueue>
 80050c6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d010      	beq.n	80050f2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d2:	3324      	adds	r3, #36	; 0x24
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 ffaf 	bl	8006038 <xTaskRemoveFromEventList>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d013      	beq.n	8005108 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80050e0:	4b3f      	ldr	r3, [pc, #252]	; (80051e0 <xQueueGenericSend+0x1f0>)
 80050e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	e00a      	b.n	8005108 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80050f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d007      	beq.n	8005108 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80050f8:	4b39      	ldr	r3, [pc, #228]	; (80051e0 <xQueueGenericSend+0x1f0>)
 80050fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005108:	f001 fe8e 	bl	8006e28 <vPortExitCritical>
				return pdPASS;
 800510c:	2301      	movs	r3, #1
 800510e:	e063      	b.n	80051d8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d103      	bne.n	800511e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005116:	f001 fe87 	bl	8006e28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800511a:	2300      	movs	r3, #0
 800511c:	e05c      	b.n	80051d8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800511e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005120:	2b00      	cmp	r3, #0
 8005122:	d106      	bne.n	8005132 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005124:	f107 0314 	add.w	r3, r7, #20
 8005128:	4618      	mov	r0, r3
 800512a:	f000 ffe7 	bl	80060fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800512e:	2301      	movs	r3, #1
 8005130:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005132:	f001 fe79 	bl	8006e28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005136:	f000 fd5d 	bl	8005bf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800513a:	f001 fe47 	bl	8006dcc <vPortEnterCritical>
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005144:	b25b      	sxtb	r3, r3
 8005146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514a:	d103      	bne.n	8005154 <xQueueGenericSend+0x164>
 800514c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800515a:	b25b      	sxtb	r3, r3
 800515c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005160:	d103      	bne.n	800516a <xQueueGenericSend+0x17a>
 8005162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800516a:	f001 fe5d 	bl	8006e28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800516e:	1d3a      	adds	r2, r7, #4
 8005170:	f107 0314 	add.w	r3, r7, #20
 8005174:	4611      	mov	r1, r2
 8005176:	4618      	mov	r0, r3
 8005178:	f000 ffd6 	bl	8006128 <xTaskCheckForTimeOut>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d124      	bne.n	80051cc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005182:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005184:	f000 fa96 	bl	80056b4 <prvIsQueueFull>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d018      	beq.n	80051c0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	3310      	adds	r3, #16
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	4611      	mov	r1, r2
 8005196:	4618      	mov	r0, r3
 8005198:	f000 ff00 	bl	8005f9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800519c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800519e:	f000 fa21 	bl	80055e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80051a2:	f000 fd35 	bl	8005c10 <xTaskResumeAll>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f47f af7c 	bne.w	80050a6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80051ae:	4b0c      	ldr	r3, [pc, #48]	; (80051e0 <xQueueGenericSend+0x1f0>)
 80051b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	e772      	b.n	80050a6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80051c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051c2:	f000 fa0f 	bl	80055e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051c6:	f000 fd23 	bl	8005c10 <xTaskResumeAll>
 80051ca:	e76c      	b.n	80050a6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80051cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051ce:	f000 fa09 	bl	80055e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051d2:	f000 fd1d 	bl	8005c10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80051d6:	2300      	movs	r3, #0
		}
	}
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3738      	adds	r7, #56	; 0x38
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	e000ed04 	.word	0xe000ed04

080051e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08e      	sub	sp, #56	; 0x38
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d109      	bne.n	8005210 <xQueueGenericSendFromISR+0x2c>
 80051fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
 800520e:	e7fe      	b.n	800520e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d103      	bne.n	800521e <xQueueGenericSendFromISR+0x3a>
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <xQueueGenericSendFromISR+0x3e>
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <xQueueGenericSendFromISR+0x40>
 8005222:	2300      	movs	r3, #0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d109      	bne.n	800523c <xQueueGenericSendFromISR+0x58>
 8005228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522c:	f383 8811 	msr	BASEPRI, r3
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	623b      	str	r3, [r7, #32]
 800523a:	e7fe      	b.n	800523a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d103      	bne.n	800524a <xQueueGenericSendFromISR+0x66>
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005246:	2b01      	cmp	r3, #1
 8005248:	d101      	bne.n	800524e <xQueueGenericSendFromISR+0x6a>
 800524a:	2301      	movs	r3, #1
 800524c:	e000      	b.n	8005250 <xQueueGenericSendFromISR+0x6c>
 800524e:	2300      	movs	r3, #0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d109      	bne.n	8005268 <xQueueGenericSendFromISR+0x84>
 8005254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	61fb      	str	r3, [r7, #28]
 8005266:	e7fe      	b.n	8005266 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005268:	f001 fe8c 	bl	8006f84 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800526c:	f3ef 8211 	mrs	r2, BASEPRI
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	61ba      	str	r2, [r7, #24]
 8005282:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005284:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005286:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800528c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005290:	429a      	cmp	r2, r3
 8005292:	d302      	bcc.n	800529a <xQueueGenericSendFromISR+0xb6>
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2b02      	cmp	r3, #2
 8005298:	d12c      	bne.n	80052f4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800529a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	68b9      	ldr	r1, [r7, #8]
 80052a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052aa:	f000 f90b 	bl	80054c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80052ae:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80052b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b6:	d112      	bne.n	80052de <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d016      	beq.n	80052ee <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c2:	3324      	adds	r3, #36	; 0x24
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 feb7 	bl	8006038 <xTaskRemoveFromEventList>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00e      	beq.n	80052ee <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00b      	beq.n	80052ee <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	e007      	b.n	80052ee <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80052de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052e2:	3301      	adds	r3, #1
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	b25a      	sxtb	r2, r3
 80052e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80052ee:	2301      	movs	r3, #1
 80052f0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80052f2:	e001      	b.n	80052f8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80052f4:	2300      	movs	r3, #0
 80052f6:	637b      	str	r3, [r7, #52]	; 0x34
 80052f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005304:	4618      	mov	r0, r3
 8005306:	3738      	adds	r7, #56	; 0x38
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08c      	sub	sp, #48	; 0x30
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005318:	2300      	movs	r3, #0
 800531a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005322:	2b00      	cmp	r3, #0
 8005324:	d109      	bne.n	800533a <xQueueReceive+0x2e>
	__asm volatile
 8005326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	623b      	str	r3, [r7, #32]
 8005338:	e7fe      	b.n	8005338 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d103      	bne.n	8005348 <xQueueReceive+0x3c>
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <xQueueReceive+0x40>
 8005348:	2301      	movs	r3, #1
 800534a:	e000      	b.n	800534e <xQueueReceive+0x42>
 800534c:	2300      	movs	r3, #0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d109      	bne.n	8005366 <xQueueReceive+0x5a>
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	61fb      	str	r3, [r7, #28]
 8005364:	e7fe      	b.n	8005364 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005366:	f001 f823 	bl	80063b0 <xTaskGetSchedulerState>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d102      	bne.n	8005376 <xQueueReceive+0x6a>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <xQueueReceive+0x6e>
 8005376:	2301      	movs	r3, #1
 8005378:	e000      	b.n	800537c <xQueueReceive+0x70>
 800537a:	2300      	movs	r3, #0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d109      	bne.n	8005394 <xQueueReceive+0x88>
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	61bb      	str	r3, [r7, #24]
 8005392:	e7fe      	b.n	8005392 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005394:	f001 fd1a 	bl	8006dcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d01f      	beq.n	80053e4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053a4:	68b9      	ldr	r1, [r7, #8]
 80053a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053a8:	f000 f8f6 	bl	8005598 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	1e5a      	subs	r2, r3, #1
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00f      	beq.n	80053dc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053be:	3310      	adds	r3, #16
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 fe39 	bl	8006038 <xTaskRemoveFromEventList>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d007      	beq.n	80053dc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80053cc:	4b3c      	ldr	r3, [pc, #240]	; (80054c0 <xQueueReceive+0x1b4>)
 80053ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80053dc:	f001 fd24 	bl	8006e28 <vPortExitCritical>
				return pdPASS;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e069      	b.n	80054b8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d103      	bne.n	80053f2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053ea:	f001 fd1d 	bl	8006e28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80053ee:	2300      	movs	r3, #0
 80053f0:	e062      	b.n	80054b8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d106      	bne.n	8005406 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053f8:	f107 0310 	add.w	r3, r7, #16
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 fe7d 	bl	80060fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005402:	2301      	movs	r3, #1
 8005404:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005406:	f001 fd0f 	bl	8006e28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800540a:	f000 fbf3 	bl	8005bf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800540e:	f001 fcdd 	bl	8006dcc <vPortEnterCritical>
 8005412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005414:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005418:	b25b      	sxtb	r3, r3
 800541a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541e:	d103      	bne.n	8005428 <xQueueReceive+0x11c>
 8005420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800542e:	b25b      	sxtb	r3, r3
 8005430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005434:	d103      	bne.n	800543e <xQueueReceive+0x132>
 8005436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800543e:	f001 fcf3 	bl	8006e28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005442:	1d3a      	adds	r2, r7, #4
 8005444:	f107 0310 	add.w	r3, r7, #16
 8005448:	4611      	mov	r1, r2
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fe6c 	bl	8006128 <xTaskCheckForTimeOut>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d123      	bne.n	800549e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005456:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005458:	f000 f916 	bl	8005688 <prvIsQueueEmpty>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d017      	beq.n	8005492 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005464:	3324      	adds	r3, #36	; 0x24
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	4611      	mov	r1, r2
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fd96 	bl	8005f9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005472:	f000 f8b7 	bl	80055e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005476:	f000 fbcb 	bl	8005c10 <xTaskResumeAll>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d189      	bne.n	8005394 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005480:	4b0f      	ldr	r3, [pc, #60]	; (80054c0 <xQueueReceive+0x1b4>)
 8005482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	e780      	b.n	8005394 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005494:	f000 f8a6 	bl	80055e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005498:	f000 fbba 	bl	8005c10 <xTaskResumeAll>
 800549c:	e77a      	b.n	8005394 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800549e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054a0:	f000 f8a0 	bl	80055e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054a4:	f000 fbb4 	bl	8005c10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054aa:	f000 f8ed 	bl	8005688 <prvIsQueueEmpty>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f43f af6f 	beq.w	8005394 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80054b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3730      	adds	r7, #48	; 0x30
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	e000ed04 	.word	0xe000ed04

080054c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80054d0:	2300      	movs	r3, #0
 80054d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10d      	bne.n	80054fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d14d      	bne.n	8005586 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 ff7c 	bl	80063ec <xTaskPriorityDisinherit>
 80054f4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	605a      	str	r2, [r3, #4]
 80054fc:	e043      	b.n	8005586 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d119      	bne.n	8005538 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6898      	ldr	r0, [r3, #8]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550c:	461a      	mov	r2, r3
 800550e:	68b9      	ldr	r1, [r7, #8]
 8005510:	f002 f99c 	bl	800784c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551c:	441a      	add	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	689a      	ldr	r2, [r3, #8]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	429a      	cmp	r2, r3
 800552c:	d32b      	bcc.n	8005586 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	609a      	str	r2, [r3, #8]
 8005536:	e026      	b.n	8005586 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	68d8      	ldr	r0, [r3, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005540:	461a      	mov	r2, r3
 8005542:	68b9      	ldr	r1, [r7, #8]
 8005544:	f002 f982 	bl	800784c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	68da      	ldr	r2, [r3, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005550:	425b      	negs	r3, r3
 8005552:	441a      	add	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	429a      	cmp	r2, r3
 8005562:	d207      	bcs.n	8005574 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556c:	425b      	negs	r3, r3
 800556e:	441a      	add	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b02      	cmp	r3, #2
 8005578:	d105      	bne.n	8005586 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	3b01      	subs	r3, #1
 8005584:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1c5a      	adds	r2, r3, #1
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800558e:	697b      	ldr	r3, [r7, #20]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3718      	adds	r7, #24
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d018      	beq.n	80055dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	441a      	add	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d303      	bcc.n	80055cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68d9      	ldr	r1, [r3, #12]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	461a      	mov	r2, r3
 80055d6:	6838      	ldr	r0, [r7, #0]
 80055d8:	f002 f938 	bl	800784c <memcpy>
	}
}
 80055dc:	bf00      	nop
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80055ec:	f001 fbee 	bl	8006dcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055f8:	e011      	b.n	800561e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d012      	beq.n	8005628 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	3324      	adds	r3, #36	; 0x24
 8005606:	4618      	mov	r0, r3
 8005608:	f000 fd16 	bl	8006038 <xTaskRemoveFromEventList>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005612:	f000 fde9 	bl	80061e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005616:	7bfb      	ldrb	r3, [r7, #15]
 8005618:	3b01      	subs	r3, #1
 800561a:	b2db      	uxtb	r3, r3
 800561c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800561e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005622:	2b00      	cmp	r3, #0
 8005624:	dce9      	bgt.n	80055fa <prvUnlockQueue+0x16>
 8005626:	e000      	b.n	800562a <prvUnlockQueue+0x46>
					break;
 8005628:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	22ff      	movs	r2, #255	; 0xff
 800562e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005632:	f001 fbf9 	bl	8006e28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005636:	f001 fbc9 	bl	8006dcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005640:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005642:	e011      	b.n	8005668 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d012      	beq.n	8005672 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3310      	adds	r3, #16
 8005650:	4618      	mov	r0, r3
 8005652:	f000 fcf1 	bl	8006038 <xTaskRemoveFromEventList>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800565c:	f000 fdc4 	bl	80061e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005660:	7bbb      	ldrb	r3, [r7, #14]
 8005662:	3b01      	subs	r3, #1
 8005664:	b2db      	uxtb	r3, r3
 8005666:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005668:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800566c:	2b00      	cmp	r3, #0
 800566e:	dce9      	bgt.n	8005644 <prvUnlockQueue+0x60>
 8005670:	e000      	b.n	8005674 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005672:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	22ff      	movs	r2, #255	; 0xff
 8005678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800567c:	f001 fbd4 	bl	8006e28 <vPortExitCritical>
}
 8005680:	bf00      	nop
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005690:	f001 fb9c 	bl	8006dcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005698:	2b00      	cmp	r3, #0
 800569a:	d102      	bne.n	80056a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800569c:	2301      	movs	r3, #1
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	e001      	b.n	80056a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056a6:	f001 fbbf 	bl	8006e28 <vPortExitCritical>

	return xReturn;
 80056aa:	68fb      	ldr	r3, [r7, #12]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056bc:	f001 fb86 	bl	8006dcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d102      	bne.n	80056d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80056cc:	2301      	movs	r3, #1
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	e001      	b.n	80056d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80056d2:	2300      	movs	r3, #0
 80056d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056d6:	f001 fba7 	bl	8006e28 <vPortExitCritical>

	return xReturn;
 80056da:	68fb      	ldr	r3, [r7, #12]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	e014      	b.n	800571e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80056f4:	4a0e      	ldr	r2, [pc, #56]	; (8005730 <vQueueAddToRegistry+0x4c>)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10b      	bne.n	8005718 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005700:	490b      	ldr	r1, [pc, #44]	; (8005730 <vQueueAddToRegistry+0x4c>)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800570a:	4a09      	ldr	r2, [pc, #36]	; (8005730 <vQueueAddToRegistry+0x4c>)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	4413      	add	r3, r2
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005716:	e005      	b.n	8005724 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	3301      	adds	r3, #1
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2b07      	cmp	r3, #7
 8005722:	d9e7      	bls.n	80056f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005724:	bf00      	nop
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	20001d7c 	.word	0x20001d7c

08005734 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005744:	f001 fb42 	bl	8006dcc <vPortEnterCritical>
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800574e:	b25b      	sxtb	r3, r3
 8005750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005754:	d103      	bne.n	800575e <vQueueWaitForMessageRestricted+0x2a>
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005764:	b25b      	sxtb	r3, r3
 8005766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576a:	d103      	bne.n	8005774 <vQueueWaitForMessageRestricted+0x40>
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005774:	f001 fb58 	bl	8006e28 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	2b00      	cmp	r3, #0
 800577e:	d106      	bne.n	800578e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	3324      	adds	r3, #36	; 0x24
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	68b9      	ldr	r1, [r7, #8]
 8005788:	4618      	mov	r0, r3
 800578a:	f000 fc2b 	bl	8005fe4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800578e:	6978      	ldr	r0, [r7, #20]
 8005790:	f7ff ff28 	bl	80055e4 <prvUnlockQueue>
	}
 8005794:	bf00      	nop
 8005796:	3718      	adds	r7, #24
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08e      	sub	sp, #56	; 0x38
 80057a0:	af04      	add	r7, sp, #16
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
 80057a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d109      	bne.n	80057c4 <xTaskCreateStatic+0x28>
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	623b      	str	r3, [r7, #32]
 80057c2:	e7fe      	b.n	80057c2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80057c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d109      	bne.n	80057de <xTaskCreateStatic+0x42>
 80057ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	61fb      	str	r3, [r7, #28]
 80057dc:	e7fe      	b.n	80057dc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057de:	235c      	movs	r3, #92	; 0x5c
 80057e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	2b5c      	cmp	r3, #92	; 0x5c
 80057e6:	d009      	beq.n	80057fc <xTaskCreateStatic+0x60>
 80057e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ec:	f383 8811 	msr	BASEPRI, r3
 80057f0:	f3bf 8f6f 	isb	sy
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	61bb      	str	r3, [r7, #24]
 80057fa:	e7fe      	b.n	80057fa <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d01e      	beq.n	8005840 <xTaskCreateStatic+0xa4>
 8005802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01b      	beq.n	8005840 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005810:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	2202      	movs	r2, #2
 8005816:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800581a:	2300      	movs	r3, #0
 800581c:	9303      	str	r3, [sp, #12]
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	9302      	str	r3, [sp, #8]
 8005822:	f107 0314 	add.w	r3, r7, #20
 8005826:	9301      	str	r3, [sp, #4]
 8005828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 f850 	bl	80058d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005838:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800583a:	f000 f8d3 	bl	80059e4 <prvAddNewTaskToReadyList>
 800583e:	e001      	b.n	8005844 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005840:	2300      	movs	r3, #0
 8005842:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005844:	697b      	ldr	r3, [r7, #20]
	}
 8005846:	4618      	mov	r0, r3
 8005848:	3728      	adds	r7, #40	; 0x28
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800584e:	b580      	push	{r7, lr}
 8005850:	b08c      	sub	sp, #48	; 0x30
 8005852:	af04      	add	r7, sp, #16
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	603b      	str	r3, [r7, #0]
 800585a:	4613      	mov	r3, r2
 800585c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800585e:	88fb      	ldrh	r3, [r7, #6]
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4618      	mov	r0, r3
 8005864:	f001 fbcc 	bl	8007000 <pvPortMalloc>
 8005868:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00e      	beq.n	800588e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005870:	205c      	movs	r0, #92	; 0x5c
 8005872:	f001 fbc5 	bl	8007000 <pvPortMalloc>
 8005876:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	631a      	str	r2, [r3, #48]	; 0x30
 8005884:	e005      	b.n	8005892 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005886:	6978      	ldr	r0, [r7, #20]
 8005888:	f001 fc7c 	bl	8007184 <vPortFree>
 800588c:	e001      	b.n	8005892 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800588e:	2300      	movs	r3, #0
 8005890:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d017      	beq.n	80058c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058a0:	88fa      	ldrh	r2, [r7, #6]
 80058a2:	2300      	movs	r3, #0
 80058a4:	9303      	str	r3, [sp, #12]
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	9302      	str	r3, [sp, #8]
 80058aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ac:	9301      	str	r3, [sp, #4]
 80058ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68b9      	ldr	r1, [r7, #8]
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 f80e 	bl	80058d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058bc:	69f8      	ldr	r0, [r7, #28]
 80058be:	f000 f891 	bl	80059e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058c2:	2301      	movs	r3, #1
 80058c4:	61bb      	str	r3, [r7, #24]
 80058c6:	e002      	b.n	80058ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058c8:	f04f 33ff 	mov.w	r3, #4294967295
 80058cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80058ce:	69bb      	ldr	r3, [r7, #24]
	}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3720      	adds	r7, #32
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
 80058e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	461a      	mov	r2, r3
 80058f0:	21a5      	movs	r1, #165	; 0xa5
 80058f2:	f001 ffb6 	bl	8007862 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005900:	3b01      	subs	r3, #1
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	f023 0307 	bic.w	r3, r3, #7
 800590e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	2b00      	cmp	r3, #0
 8005918:	d009      	beq.n	800592e <prvInitialiseNewTask+0x56>
 800591a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	e7fe      	b.n	800592c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800592e:	2300      	movs	r3, #0
 8005930:	61fb      	str	r3, [r7, #28]
 8005932:	e012      	b.n	800595a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	4413      	add	r3, r2
 800593a:	7819      	ldrb	r1, [r3, #0]
 800593c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	4413      	add	r3, r2
 8005942:	3334      	adds	r3, #52	; 0x34
 8005944:	460a      	mov	r2, r1
 8005946:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	4413      	add	r3, r2
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d006      	beq.n	8005962 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	3301      	adds	r3, #1
 8005958:	61fb      	str	r3, [r7, #28]
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	2b0f      	cmp	r3, #15
 800595e:	d9e9      	bls.n	8005934 <prvInitialiseNewTask+0x5c>
 8005960:	e000      	b.n	8005964 <prvInitialiseNewTask+0x8c>
		{
			break;
 8005962:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800596c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596e:	2b37      	cmp	r3, #55	; 0x37
 8005970:	d901      	bls.n	8005976 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005972:	2337      	movs	r3, #55	; 0x37
 8005974:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800597a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800597c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005980:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005984:	2200      	movs	r2, #0
 8005986:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598a:	3304      	adds	r3, #4
 800598c:	4618      	mov	r0, r3
 800598e:	f7ff f99d 	bl	8004ccc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005994:	3318      	adds	r3, #24
 8005996:	4618      	mov	r0, r3
 8005998:	f7ff f998 	bl	8004ccc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800599c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80059a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059b0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b4:	2200      	movs	r2, #0
 80059b6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	68f9      	ldr	r1, [r7, #12]
 80059c4:	69b8      	ldr	r0, [r7, #24]
 80059c6:	f001 f8db 	bl	8006b80 <pxPortInitialiseStack>
 80059ca:	4602      	mov	r2, r0
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80059d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059dc:	bf00      	nop
 80059de:	3720      	adds	r7, #32
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059ec:	f001 f9ee 	bl	8006dcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059f0:	4b2d      	ldr	r3, [pc, #180]	; (8005aa8 <prvAddNewTaskToReadyList+0xc4>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3301      	adds	r3, #1
 80059f6:	4a2c      	ldr	r2, [pc, #176]	; (8005aa8 <prvAddNewTaskToReadyList+0xc4>)
 80059f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059fa:	4b2c      	ldr	r3, [pc, #176]	; (8005aac <prvAddNewTaskToReadyList+0xc8>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d109      	bne.n	8005a16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a02:	4a2a      	ldr	r2, [pc, #168]	; (8005aac <prvAddNewTaskToReadyList+0xc8>)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a08:	4b27      	ldr	r3, [pc, #156]	; (8005aa8 <prvAddNewTaskToReadyList+0xc4>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d110      	bne.n	8005a32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a10:	f000 fc0e 	bl	8006230 <prvInitialiseTaskLists>
 8005a14:	e00d      	b.n	8005a32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a16:	4b26      	ldr	r3, [pc, #152]	; (8005ab0 <prvAddNewTaskToReadyList+0xcc>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d109      	bne.n	8005a32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a1e:	4b23      	ldr	r3, [pc, #140]	; (8005aac <prvAddNewTaskToReadyList+0xc8>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d802      	bhi.n	8005a32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a2c:	4a1f      	ldr	r2, [pc, #124]	; (8005aac <prvAddNewTaskToReadyList+0xc8>)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a32:	4b20      	ldr	r3, [pc, #128]	; (8005ab4 <prvAddNewTaskToReadyList+0xd0>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3301      	adds	r3, #1
 8005a38:	4a1e      	ldr	r2, [pc, #120]	; (8005ab4 <prvAddNewTaskToReadyList+0xd0>)
 8005a3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a3c:	4b1d      	ldr	r3, [pc, #116]	; (8005ab4 <prvAddNewTaskToReadyList+0xd0>)
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a48:	4b1b      	ldr	r3, [pc, #108]	; (8005ab8 <prvAddNewTaskToReadyList+0xd4>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d903      	bls.n	8005a58 <prvAddNewTaskToReadyList+0x74>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	4a18      	ldr	r2, [pc, #96]	; (8005ab8 <prvAddNewTaskToReadyList+0xd4>)
 8005a56:	6013      	str	r3, [r2, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4a15      	ldr	r2, [pc, #84]	; (8005abc <prvAddNewTaskToReadyList+0xd8>)
 8005a66:	441a      	add	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	f7ff f939 	bl	8004ce6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a74:	f001 f9d8 	bl	8006e28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a78:	4b0d      	ldr	r3, [pc, #52]	; (8005ab0 <prvAddNewTaskToReadyList+0xcc>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00e      	beq.n	8005a9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a80:	4b0a      	ldr	r3, [pc, #40]	; (8005aac <prvAddNewTaskToReadyList+0xc8>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d207      	bcs.n	8005a9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a8e:	4b0c      	ldr	r3, [pc, #48]	; (8005ac0 <prvAddNewTaskToReadyList+0xdc>)
 8005a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a9e:	bf00      	nop
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20000dbc 	.word	0x20000dbc
 8005aac:	200008e8 	.word	0x200008e8
 8005ab0:	20000dc8 	.word	0x20000dc8
 8005ab4:	20000dd8 	.word	0x20000dd8
 8005ab8:	20000dc4 	.word	0x20000dc4
 8005abc:	200008ec 	.word	0x200008ec
 8005ac0:	e000ed04 	.word	0xe000ed04

08005ac4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005acc:	2300      	movs	r3, #0
 8005ace:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d016      	beq.n	8005b04 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ad6:	4b13      	ldr	r3, [pc, #76]	; (8005b24 <vTaskDelay+0x60>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d009      	beq.n	8005af2 <vTaskDelay+0x2e>
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	60bb      	str	r3, [r7, #8]
 8005af0:	e7fe      	b.n	8005af0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005af2:	f000 f87f 	bl	8005bf4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005af6:	2100      	movs	r1, #0
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fce3 	bl	80064c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005afe:	f000 f887 	bl	8005c10 <xTaskResumeAll>
 8005b02:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d107      	bne.n	8005b1a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005b0a:	4b07      	ldr	r3, [pc, #28]	; (8005b28 <vTaskDelay+0x64>)
 8005b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b1a:	bf00      	nop
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20000de4 	.word	0x20000de4
 8005b28:	e000ed04 	.word	0xe000ed04

08005b2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08a      	sub	sp, #40	; 0x28
 8005b30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b32:	2300      	movs	r3, #0
 8005b34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b3a:	463a      	mov	r2, r7
 8005b3c:	1d39      	adds	r1, r7, #4
 8005b3e:	f107 0308 	add.w	r3, r7, #8
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7ff f86e 	bl	8004c24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b48:	6839      	ldr	r1, [r7, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	9202      	str	r2, [sp, #8]
 8005b50:	9301      	str	r3, [sp, #4]
 8005b52:	2300      	movs	r3, #0
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	2300      	movs	r3, #0
 8005b58:	460a      	mov	r2, r1
 8005b5a:	4920      	ldr	r1, [pc, #128]	; (8005bdc <vTaskStartScheduler+0xb0>)
 8005b5c:	4820      	ldr	r0, [pc, #128]	; (8005be0 <vTaskStartScheduler+0xb4>)
 8005b5e:	f7ff fe1d 	bl	800579c <xTaskCreateStatic>
 8005b62:	4602      	mov	r2, r0
 8005b64:	4b1f      	ldr	r3, [pc, #124]	; (8005be4 <vTaskStartScheduler+0xb8>)
 8005b66:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b68:	4b1e      	ldr	r3, [pc, #120]	; (8005be4 <vTaskStartScheduler+0xb8>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b70:	2301      	movs	r3, #1
 8005b72:	617b      	str	r3, [r7, #20]
 8005b74:	e001      	b.n	8005b7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d102      	bne.n	8005b86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005b80:	f000 fcf4 	bl	800656c <xTimerCreateTimerTask>
 8005b84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d115      	bne.n	8005bb8 <vTaskStartScheduler+0x8c>
 8005b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b9e:	4b12      	ldr	r3, [pc, #72]	; (8005be8 <vTaskStartScheduler+0xbc>)
 8005ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ba6:	4b11      	ldr	r3, [pc, #68]	; (8005bec <vTaskStartScheduler+0xc0>)
 8005ba8:	2201      	movs	r2, #1
 8005baa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005bac:	4b10      	ldr	r3, [pc, #64]	; (8005bf0 <vTaskStartScheduler+0xc4>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005bb2:	f001 f86d 	bl	8006c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005bb6:	e00d      	b.n	8005bd4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbe:	d109      	bne.n	8005bd4 <vTaskStartScheduler+0xa8>
 8005bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	e7fe      	b.n	8005bd2 <vTaskStartScheduler+0xa6>
}
 8005bd4:	bf00      	nop
 8005bd6:	3718      	adds	r7, #24
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	0800af20 	.word	0x0800af20
 8005be0:	08006201 	.word	0x08006201
 8005be4:	20000de0 	.word	0x20000de0
 8005be8:	20000ddc 	.word	0x20000ddc
 8005bec:	20000dc8 	.word	0x20000dc8
 8005bf0:	20000dc0 	.word	0x20000dc0

08005bf4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005bf8:	4b04      	ldr	r3, [pc, #16]	; (8005c0c <vTaskSuspendAll+0x18>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	4a03      	ldr	r2, [pc, #12]	; (8005c0c <vTaskSuspendAll+0x18>)
 8005c00:	6013      	str	r3, [r2, #0]
}
 8005c02:	bf00      	nop
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	20000de4 	.word	0x20000de4

08005c10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c1e:	4b41      	ldr	r3, [pc, #260]	; (8005d24 <xTaskResumeAll+0x114>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d109      	bne.n	8005c3a <xTaskResumeAll+0x2a>
 8005c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	603b      	str	r3, [r7, #0]
 8005c38:	e7fe      	b.n	8005c38 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c3a:	f001 f8c7 	bl	8006dcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c3e:	4b39      	ldr	r3, [pc, #228]	; (8005d24 <xTaskResumeAll+0x114>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3b01      	subs	r3, #1
 8005c44:	4a37      	ldr	r2, [pc, #220]	; (8005d24 <xTaskResumeAll+0x114>)
 8005c46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c48:	4b36      	ldr	r3, [pc, #216]	; (8005d24 <xTaskResumeAll+0x114>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d162      	bne.n	8005d16 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c50:	4b35      	ldr	r3, [pc, #212]	; (8005d28 <xTaskResumeAll+0x118>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d05e      	beq.n	8005d16 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c58:	e02f      	b.n	8005cba <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005c5a:	4b34      	ldr	r3, [pc, #208]	; (8005d2c <xTaskResumeAll+0x11c>)
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3318      	adds	r3, #24
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff f89a 	bl	8004da0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	3304      	adds	r3, #4
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff f895 	bl	8004da0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7a:	4b2d      	ldr	r3, [pc, #180]	; (8005d30 <xTaskResumeAll+0x120>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d903      	bls.n	8005c8a <xTaskResumeAll+0x7a>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c86:	4a2a      	ldr	r2, [pc, #168]	; (8005d30 <xTaskResumeAll+0x120>)
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8e:	4613      	mov	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4a27      	ldr	r2, [pc, #156]	; (8005d34 <xTaskResumeAll+0x124>)
 8005c98:	441a      	add	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	f7ff f820 	bl	8004ce6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005caa:	4b23      	ldr	r3, [pc, #140]	; (8005d38 <xTaskResumeAll+0x128>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d302      	bcc.n	8005cba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005cb4:	4b21      	ldr	r3, [pc, #132]	; (8005d3c <xTaskResumeAll+0x12c>)
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cba:	4b1c      	ldr	r3, [pc, #112]	; (8005d2c <xTaskResumeAll+0x11c>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1cb      	bne.n	8005c5a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cc8:	f000 fb4c 	bl	8006364 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005ccc:	4b1c      	ldr	r3, [pc, #112]	; (8005d40 <xTaskResumeAll+0x130>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d010      	beq.n	8005cfa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005cd8:	f000 f846 	bl	8005d68 <xTaskIncrementTick>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005ce2:	4b16      	ldr	r3, [pc, #88]	; (8005d3c <xTaskResumeAll+0x12c>)
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1f1      	bne.n	8005cd8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005cf4:	4b12      	ldr	r3, [pc, #72]	; (8005d40 <xTaskResumeAll+0x130>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005cfa:	4b10      	ldr	r3, [pc, #64]	; (8005d3c <xTaskResumeAll+0x12c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d009      	beq.n	8005d16 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d02:	2301      	movs	r3, #1
 8005d04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d06:	4b0f      	ldr	r3, [pc, #60]	; (8005d44 <xTaskResumeAll+0x134>)
 8005d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d16:	f001 f887 	bl	8006e28 <vPortExitCritical>

	return xAlreadyYielded;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	20000de4 	.word	0x20000de4
 8005d28:	20000dbc 	.word	0x20000dbc
 8005d2c:	20000d7c 	.word	0x20000d7c
 8005d30:	20000dc4 	.word	0x20000dc4
 8005d34:	200008ec 	.word	0x200008ec
 8005d38:	200008e8 	.word	0x200008e8
 8005d3c:	20000dd0 	.word	0x20000dd0
 8005d40:	20000dcc 	.word	0x20000dcc
 8005d44:	e000ed04 	.word	0xe000ed04

08005d48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d4e:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <xTaskGetTickCount+0x1c>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d54:	687b      	ldr	r3, [r7, #4]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	20000dc0 	.word	0x20000dc0

08005d68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d72:	4b51      	ldr	r3, [pc, #324]	; (8005eb8 <xTaskIncrementTick+0x150>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f040 808d 	bne.w	8005e96 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d7c:	4b4f      	ldr	r3, [pc, #316]	; (8005ebc <xTaskIncrementTick+0x154>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3301      	adds	r3, #1
 8005d82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d84:	4a4d      	ldr	r2, [pc, #308]	; (8005ebc <xTaskIncrementTick+0x154>)
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d11f      	bne.n	8005dd0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d90:	4b4b      	ldr	r3, [pc, #300]	; (8005ec0 <xTaskIncrementTick+0x158>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d009      	beq.n	8005dae <xTaskIncrementTick+0x46>
 8005d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	e7fe      	b.n	8005dac <xTaskIncrementTick+0x44>
 8005dae:	4b44      	ldr	r3, [pc, #272]	; (8005ec0 <xTaskIncrementTick+0x158>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	4b43      	ldr	r3, [pc, #268]	; (8005ec4 <xTaskIncrementTick+0x15c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a41      	ldr	r2, [pc, #260]	; (8005ec0 <xTaskIncrementTick+0x158>)
 8005dba:	6013      	str	r3, [r2, #0]
 8005dbc:	4a41      	ldr	r2, [pc, #260]	; (8005ec4 <xTaskIncrementTick+0x15c>)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6013      	str	r3, [r2, #0]
 8005dc2:	4b41      	ldr	r3, [pc, #260]	; (8005ec8 <xTaskIncrementTick+0x160>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	4a3f      	ldr	r2, [pc, #252]	; (8005ec8 <xTaskIncrementTick+0x160>)
 8005dca:	6013      	str	r3, [r2, #0]
 8005dcc:	f000 faca 	bl	8006364 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005dd0:	4b3e      	ldr	r3, [pc, #248]	; (8005ecc <xTaskIncrementTick+0x164>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d34e      	bcc.n	8005e78 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dda:	4b39      	ldr	r3, [pc, #228]	; (8005ec0 <xTaskIncrementTick+0x158>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <xTaskIncrementTick+0x80>
 8005de4:	2301      	movs	r3, #1
 8005de6:	e000      	b.n	8005dea <xTaskIncrementTick+0x82>
 8005de8:	2300      	movs	r3, #0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d004      	beq.n	8005df8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dee:	4b37      	ldr	r3, [pc, #220]	; (8005ecc <xTaskIncrementTick+0x164>)
 8005df0:	f04f 32ff 	mov.w	r2, #4294967295
 8005df4:	601a      	str	r2, [r3, #0]
					break;
 8005df6:	e03f      	b.n	8005e78 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005df8:	4b31      	ldr	r3, [pc, #196]	; (8005ec0 <xTaskIncrementTick+0x158>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d203      	bcs.n	8005e18 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e10:	4a2e      	ldr	r2, [pc, #184]	; (8005ecc <xTaskIncrementTick+0x164>)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6013      	str	r3, [r2, #0]
						break;
 8005e16:	e02f      	b.n	8005e78 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7fe ffbf 	bl	8004da0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d004      	beq.n	8005e34 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	3318      	adds	r3, #24
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fe ffb6 	bl	8004da0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e38:	4b25      	ldr	r3, [pc, #148]	; (8005ed0 <xTaskIncrementTick+0x168>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d903      	bls.n	8005e48 <xTaskIncrementTick+0xe0>
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	4a22      	ldr	r2, [pc, #136]	; (8005ed0 <xTaskIncrementTick+0x168>)
 8005e46:	6013      	str	r3, [r2, #0]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4a1f      	ldr	r2, [pc, #124]	; (8005ed4 <xTaskIncrementTick+0x16c>)
 8005e56:	441a      	add	r2, r3
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4610      	mov	r0, r2
 8005e60:	f7fe ff41 	bl	8004ce6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e68:	4b1b      	ldr	r3, [pc, #108]	; (8005ed8 <xTaskIncrementTick+0x170>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d3b3      	bcc.n	8005dda <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005e72:	2301      	movs	r3, #1
 8005e74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e76:	e7b0      	b.n	8005dda <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e78:	4b17      	ldr	r3, [pc, #92]	; (8005ed8 <xTaskIncrementTick+0x170>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7e:	4915      	ldr	r1, [pc, #84]	; (8005ed4 <xTaskIncrementTick+0x16c>)
 8005e80:	4613      	mov	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	440b      	add	r3, r1
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d907      	bls.n	8005ea0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005e90:	2301      	movs	r3, #1
 8005e92:	617b      	str	r3, [r7, #20]
 8005e94:	e004      	b.n	8005ea0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005e96:	4b11      	ldr	r3, [pc, #68]	; (8005edc <xTaskIncrementTick+0x174>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	4a0f      	ldr	r2, [pc, #60]	; (8005edc <xTaskIncrementTick+0x174>)
 8005e9e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005ea0:	4b0f      	ldr	r3, [pc, #60]	; (8005ee0 <xTaskIncrementTick+0x178>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005eac:	697b      	ldr	r3, [r7, #20]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20000de4 	.word	0x20000de4
 8005ebc:	20000dc0 	.word	0x20000dc0
 8005ec0:	20000d74 	.word	0x20000d74
 8005ec4:	20000d78 	.word	0x20000d78
 8005ec8:	20000dd4 	.word	0x20000dd4
 8005ecc:	20000ddc 	.word	0x20000ddc
 8005ed0:	20000dc4 	.word	0x20000dc4
 8005ed4:	200008ec 	.word	0x200008ec
 8005ed8:	200008e8 	.word	0x200008e8
 8005edc:	20000dcc 	.word	0x20000dcc
 8005ee0:	20000dd0 	.word	0x20000dd0

08005ee4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005eea:	4b27      	ldr	r3, [pc, #156]	; (8005f88 <vTaskSwitchContext+0xa4>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ef2:	4b26      	ldr	r3, [pc, #152]	; (8005f8c <vTaskSwitchContext+0xa8>)
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ef8:	e040      	b.n	8005f7c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005efa:	4b24      	ldr	r3, [pc, #144]	; (8005f8c <vTaskSwitchContext+0xa8>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005f00:	4b23      	ldr	r3, [pc, #140]	; (8005f90 <vTaskSwitchContext+0xac>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	60fb      	str	r3, [r7, #12]
 8005f06:	e00f      	b.n	8005f28 <vTaskSwitchContext+0x44>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d109      	bne.n	8005f22 <vTaskSwitchContext+0x3e>
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	607b      	str	r3, [r7, #4]
 8005f20:	e7fe      	b.n	8005f20 <vTaskSwitchContext+0x3c>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	3b01      	subs	r3, #1
 8005f26:	60fb      	str	r3, [r7, #12]
 8005f28:	491a      	ldr	r1, [pc, #104]	; (8005f94 <vTaskSwitchContext+0xb0>)
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	440b      	add	r3, r1
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d0e5      	beq.n	8005f08 <vTaskSwitchContext+0x24>
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4a13      	ldr	r2, [pc, #76]	; (8005f94 <vTaskSwitchContext+0xb0>)
 8005f48:	4413      	add	r3, r2
 8005f4a:	60bb      	str	r3, [r7, #8]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	605a      	str	r2, [r3, #4]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	3308      	adds	r3, #8
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d104      	bne.n	8005f6c <vTaskSwitchContext+0x88>
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	685a      	ldr	r2, [r3, #4]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	605a      	str	r2, [r3, #4]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	4a09      	ldr	r2, [pc, #36]	; (8005f98 <vTaskSwitchContext+0xb4>)
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	4a06      	ldr	r2, [pc, #24]	; (8005f90 <vTaskSwitchContext+0xac>)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6013      	str	r3, [r2, #0]
}
 8005f7c:	bf00      	nop
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	20000de4 	.word	0x20000de4
 8005f8c:	20000dd0 	.word	0x20000dd0
 8005f90:	20000dc4 	.word	0x20000dc4
 8005f94:	200008ec 	.word	0x200008ec
 8005f98:	200008e8 	.word	0x200008e8

08005f9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d109      	bne.n	8005fc0 <vTaskPlaceOnEventList+0x24>
 8005fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	60fb      	str	r3, [r7, #12]
 8005fbe:	e7fe      	b.n	8005fbe <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fc0:	4b07      	ldr	r3, [pc, #28]	; (8005fe0 <vTaskPlaceOnEventList+0x44>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	3318      	adds	r3, #24
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7fe feb0 	bl	8004d2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005fce:	2101      	movs	r1, #1
 8005fd0:	6838      	ldr	r0, [r7, #0]
 8005fd2:	f000 fa77 	bl	80064c4 <prvAddCurrentTaskToDelayedList>
}
 8005fd6:	bf00      	nop
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	200008e8 	.word	0x200008e8

08005fe4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d109      	bne.n	800600a <vTaskPlaceOnEventListRestricted+0x26>
 8005ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	e7fe      	b.n	8006008 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800600a:	4b0a      	ldr	r3, [pc, #40]	; (8006034 <vTaskPlaceOnEventListRestricted+0x50>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3318      	adds	r3, #24
 8006010:	4619      	mov	r1, r3
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f7fe fe67 	bl	8004ce6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d002      	beq.n	8006024 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800601e:	f04f 33ff 	mov.w	r3, #4294967295
 8006022:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	68b8      	ldr	r0, [r7, #8]
 8006028:	f000 fa4c 	bl	80064c4 <prvAddCurrentTaskToDelayedList>
	}
 800602c:	bf00      	nop
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	200008e8 	.word	0x200008e8

08006038 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d109      	bne.n	8006062 <xTaskRemoveFromEventList+0x2a>
 800604e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	e7fe      	b.n	8006060 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	3318      	adds	r3, #24
 8006066:	4618      	mov	r0, r3
 8006068:	f7fe fe9a 	bl	8004da0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800606c:	4b1d      	ldr	r3, [pc, #116]	; (80060e4 <xTaskRemoveFromEventList+0xac>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d11d      	bne.n	80060b0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	3304      	adds	r3, #4
 8006078:	4618      	mov	r0, r3
 800607a:	f7fe fe91 	bl	8004da0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006082:	4b19      	ldr	r3, [pc, #100]	; (80060e8 <xTaskRemoveFromEventList+0xb0>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	429a      	cmp	r2, r3
 8006088:	d903      	bls.n	8006092 <xTaskRemoveFromEventList+0x5a>
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608e:	4a16      	ldr	r2, [pc, #88]	; (80060e8 <xTaskRemoveFromEventList+0xb0>)
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006096:	4613      	mov	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4a13      	ldr	r2, [pc, #76]	; (80060ec <xTaskRemoveFromEventList+0xb4>)
 80060a0:	441a      	add	r2, r3
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	3304      	adds	r3, #4
 80060a6:	4619      	mov	r1, r3
 80060a8:	4610      	mov	r0, r2
 80060aa:	f7fe fe1c 	bl	8004ce6 <vListInsertEnd>
 80060ae:	e005      	b.n	80060bc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	3318      	adds	r3, #24
 80060b4:	4619      	mov	r1, r3
 80060b6:	480e      	ldr	r0, [pc, #56]	; (80060f0 <xTaskRemoveFromEventList+0xb8>)
 80060b8:	f7fe fe15 	bl	8004ce6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c0:	4b0c      	ldr	r3, [pc, #48]	; (80060f4 <xTaskRemoveFromEventList+0xbc>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d905      	bls.n	80060d6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80060ca:	2301      	movs	r3, #1
 80060cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80060ce:	4b0a      	ldr	r3, [pc, #40]	; (80060f8 <xTaskRemoveFromEventList+0xc0>)
 80060d0:	2201      	movs	r2, #1
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	e001      	b.n	80060da <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80060d6:	2300      	movs	r3, #0
 80060d8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80060da:	697b      	ldr	r3, [r7, #20]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	20000de4 	.word	0x20000de4
 80060e8:	20000dc4 	.word	0x20000dc4
 80060ec:	200008ec 	.word	0x200008ec
 80060f0:	20000d7c 	.word	0x20000d7c
 80060f4:	200008e8 	.word	0x200008e8
 80060f8:	20000dd0 	.word	0x20000dd0

080060fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006104:	4b06      	ldr	r3, [pc, #24]	; (8006120 <vTaskInternalSetTimeOutState+0x24>)
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800610c:	4b05      	ldr	r3, [pc, #20]	; (8006124 <vTaskInternalSetTimeOutState+0x28>)
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	605a      	str	r2, [r3, #4]
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	20000dd4 	.word	0x20000dd4
 8006124:	20000dc0 	.word	0x20000dc0

08006128 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b088      	sub	sp, #32
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d109      	bne.n	800614c <xTaskCheckForTimeOut+0x24>
 8006138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	613b      	str	r3, [r7, #16]
 800614a:	e7fe      	b.n	800614a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d109      	bne.n	8006166 <xTaskCheckForTimeOut+0x3e>
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	e7fe      	b.n	8006164 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006166:	f000 fe31 	bl	8006dcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800616a:	4b1d      	ldr	r3, [pc, #116]	; (80061e0 <xTaskCheckForTimeOut+0xb8>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006182:	d102      	bne.n	800618a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006184:	2300      	movs	r3, #0
 8006186:	61fb      	str	r3, [r7, #28]
 8006188:	e023      	b.n	80061d2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	4b15      	ldr	r3, [pc, #84]	; (80061e4 <xTaskCheckForTimeOut+0xbc>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	429a      	cmp	r2, r3
 8006194:	d007      	beq.n	80061a6 <xTaskCheckForTimeOut+0x7e>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	429a      	cmp	r2, r3
 800619e:	d302      	bcc.n	80061a6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80061a0:	2301      	movs	r3, #1
 80061a2:	61fb      	str	r3, [r7, #28]
 80061a4:	e015      	b.n	80061d2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d20b      	bcs.n	80061c8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	1ad2      	subs	r2, r2, r3
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f7ff ff9d 	bl	80060fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80061c2:	2300      	movs	r3, #0
 80061c4:	61fb      	str	r3, [r7, #28]
 80061c6:	e004      	b.n	80061d2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2200      	movs	r2, #0
 80061cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80061ce:	2301      	movs	r3, #1
 80061d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80061d2:	f000 fe29 	bl	8006e28 <vPortExitCritical>

	return xReturn;
 80061d6:	69fb      	ldr	r3, [r7, #28]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3720      	adds	r7, #32
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	20000dc0 	.word	0x20000dc0
 80061e4:	20000dd4 	.word	0x20000dd4

080061e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80061e8:	b480      	push	{r7}
 80061ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80061ec:	4b03      	ldr	r3, [pc, #12]	; (80061fc <vTaskMissedYield+0x14>)
 80061ee:	2201      	movs	r2, #1
 80061f0:	601a      	str	r2, [r3, #0]
}
 80061f2:	bf00      	nop
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	20000dd0 	.word	0x20000dd0

08006200 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006208:	f000 f852 	bl	80062b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800620c:	4b06      	ldr	r3, [pc, #24]	; (8006228 <prvIdleTask+0x28>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d9f9      	bls.n	8006208 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006214:	4b05      	ldr	r3, [pc, #20]	; (800622c <prvIdleTask+0x2c>)
 8006216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800621a:	601a      	str	r2, [r3, #0]
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006224:	e7f0      	b.n	8006208 <prvIdleTask+0x8>
 8006226:	bf00      	nop
 8006228:	200008ec 	.word	0x200008ec
 800622c:	e000ed04 	.word	0xe000ed04

08006230 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006236:	2300      	movs	r3, #0
 8006238:	607b      	str	r3, [r7, #4]
 800623a:	e00c      	b.n	8006256 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	4613      	mov	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4a12      	ldr	r2, [pc, #72]	; (8006290 <prvInitialiseTaskLists+0x60>)
 8006248:	4413      	add	r3, r2
 800624a:	4618      	mov	r0, r3
 800624c:	f7fe fd1e 	bl	8004c8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3301      	adds	r3, #1
 8006254:	607b      	str	r3, [r7, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b37      	cmp	r3, #55	; 0x37
 800625a:	d9ef      	bls.n	800623c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800625c:	480d      	ldr	r0, [pc, #52]	; (8006294 <prvInitialiseTaskLists+0x64>)
 800625e:	f7fe fd15 	bl	8004c8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006262:	480d      	ldr	r0, [pc, #52]	; (8006298 <prvInitialiseTaskLists+0x68>)
 8006264:	f7fe fd12 	bl	8004c8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006268:	480c      	ldr	r0, [pc, #48]	; (800629c <prvInitialiseTaskLists+0x6c>)
 800626a:	f7fe fd0f 	bl	8004c8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800626e:	480c      	ldr	r0, [pc, #48]	; (80062a0 <prvInitialiseTaskLists+0x70>)
 8006270:	f7fe fd0c 	bl	8004c8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006274:	480b      	ldr	r0, [pc, #44]	; (80062a4 <prvInitialiseTaskLists+0x74>)
 8006276:	f7fe fd09 	bl	8004c8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800627a:	4b0b      	ldr	r3, [pc, #44]	; (80062a8 <prvInitialiseTaskLists+0x78>)
 800627c:	4a05      	ldr	r2, [pc, #20]	; (8006294 <prvInitialiseTaskLists+0x64>)
 800627e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006280:	4b0a      	ldr	r3, [pc, #40]	; (80062ac <prvInitialiseTaskLists+0x7c>)
 8006282:	4a05      	ldr	r2, [pc, #20]	; (8006298 <prvInitialiseTaskLists+0x68>)
 8006284:	601a      	str	r2, [r3, #0]
}
 8006286:	bf00      	nop
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	200008ec 	.word	0x200008ec
 8006294:	20000d4c 	.word	0x20000d4c
 8006298:	20000d60 	.word	0x20000d60
 800629c:	20000d7c 	.word	0x20000d7c
 80062a0:	20000d90 	.word	0x20000d90
 80062a4:	20000da8 	.word	0x20000da8
 80062a8:	20000d74 	.word	0x20000d74
 80062ac:	20000d78 	.word	0x20000d78

080062b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062b6:	e019      	b.n	80062ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80062b8:	f000 fd88 	bl	8006dcc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80062bc:	4b0f      	ldr	r3, [pc, #60]	; (80062fc <prvCheckTasksWaitingTermination+0x4c>)
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3304      	adds	r3, #4
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7fe fd69 	bl	8004da0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062ce:	4b0c      	ldr	r3, [pc, #48]	; (8006300 <prvCheckTasksWaitingTermination+0x50>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	4a0a      	ldr	r2, [pc, #40]	; (8006300 <prvCheckTasksWaitingTermination+0x50>)
 80062d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80062d8:	4b0a      	ldr	r3, [pc, #40]	; (8006304 <prvCheckTasksWaitingTermination+0x54>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	3b01      	subs	r3, #1
 80062de:	4a09      	ldr	r2, [pc, #36]	; (8006304 <prvCheckTasksWaitingTermination+0x54>)
 80062e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80062e2:	f000 fda1 	bl	8006e28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f80e 	bl	8006308 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062ec:	4b05      	ldr	r3, [pc, #20]	; (8006304 <prvCheckTasksWaitingTermination+0x54>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1e1      	bne.n	80062b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80062f4:	bf00      	nop
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	20000d90 	.word	0x20000d90
 8006300:	20000dbc 	.word	0x20000dbc
 8006304:	20000da4 	.word	0x20000da4

08006308 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006316:	2b00      	cmp	r3, #0
 8006318:	d108      	bne.n	800632c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631e:	4618      	mov	r0, r3
 8006320:	f000 ff30 	bl	8007184 <vPortFree>
				vPortFree( pxTCB );
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 ff2d 	bl	8007184 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800632a:	e017      	b.n	800635c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006332:	2b01      	cmp	r3, #1
 8006334:	d103      	bne.n	800633e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 ff24 	bl	8007184 <vPortFree>
	}
 800633c:	e00e      	b.n	800635c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006344:	2b02      	cmp	r3, #2
 8006346:	d009      	beq.n	800635c <prvDeleteTCB+0x54>
 8006348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634c:	f383 8811 	msr	BASEPRI, r3
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	e7fe      	b.n	800635a <prvDeleteTCB+0x52>
	}
 800635c:	bf00      	nop
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800636a:	4b0f      	ldr	r3, [pc, #60]	; (80063a8 <prvResetNextTaskUnblockTime+0x44>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <prvResetNextTaskUnblockTime+0x14>
 8006374:	2301      	movs	r3, #1
 8006376:	e000      	b.n	800637a <prvResetNextTaskUnblockTime+0x16>
 8006378:	2300      	movs	r3, #0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d004      	beq.n	8006388 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800637e:	4b0b      	ldr	r3, [pc, #44]	; (80063ac <prvResetNextTaskUnblockTime+0x48>)
 8006380:	f04f 32ff 	mov.w	r2, #4294967295
 8006384:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006386:	e008      	b.n	800639a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006388:	4b07      	ldr	r3, [pc, #28]	; (80063a8 <prvResetNextTaskUnblockTime+0x44>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	4a05      	ldr	r2, [pc, #20]	; (80063ac <prvResetNextTaskUnblockTime+0x48>)
 8006398:	6013      	str	r3, [r2, #0]
}
 800639a:	bf00      	nop
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	20000d74 	.word	0x20000d74
 80063ac:	20000ddc 	.word	0x20000ddc

080063b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80063b6:	4b0b      	ldr	r3, [pc, #44]	; (80063e4 <xTaskGetSchedulerState+0x34>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d102      	bne.n	80063c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80063be:	2301      	movs	r3, #1
 80063c0:	607b      	str	r3, [r7, #4]
 80063c2:	e008      	b.n	80063d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063c4:	4b08      	ldr	r3, [pc, #32]	; (80063e8 <xTaskGetSchedulerState+0x38>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d102      	bne.n	80063d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80063cc:	2302      	movs	r3, #2
 80063ce:	607b      	str	r3, [r7, #4]
 80063d0:	e001      	b.n	80063d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80063d2:	2300      	movs	r3, #0
 80063d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80063d6:	687b      	ldr	r3, [r7, #4]
	}
 80063d8:	4618      	mov	r0, r3
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	20000dc8 	.word	0x20000dc8
 80063e8:	20000de4 	.word	0x20000de4

080063ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80063f8:	2300      	movs	r3, #0
 80063fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d054      	beq.n	80064ac <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006402:	4b2d      	ldr	r3, [pc, #180]	; (80064b8 <xTaskPriorityDisinherit+0xcc>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	429a      	cmp	r2, r3
 800640a:	d009      	beq.n	8006420 <xTaskPriorityDisinherit+0x34>
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	60fb      	str	r3, [r7, #12]
 800641e:	e7fe      	b.n	800641e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006424:	2b00      	cmp	r3, #0
 8006426:	d109      	bne.n	800643c <xTaskPriorityDisinherit+0x50>
 8006428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	60bb      	str	r3, [r7, #8]
 800643a:	e7fe      	b.n	800643a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006440:	1e5a      	subs	r2, r3, #1
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800644e:	429a      	cmp	r2, r3
 8006450:	d02c      	beq.n	80064ac <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006456:	2b00      	cmp	r3, #0
 8006458:	d128      	bne.n	80064ac <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	3304      	adds	r3, #4
 800645e:	4618      	mov	r0, r3
 8006460:	f7fe fc9e 	bl	8004da0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006470:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647c:	4b0f      	ldr	r3, [pc, #60]	; (80064bc <xTaskPriorityDisinherit+0xd0>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	429a      	cmp	r2, r3
 8006482:	d903      	bls.n	800648c <xTaskPriorityDisinherit+0xa0>
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	4a0c      	ldr	r2, [pc, #48]	; (80064bc <xTaskPriorityDisinherit+0xd0>)
 800648a:	6013      	str	r3, [r2, #0]
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4a09      	ldr	r2, [pc, #36]	; (80064c0 <xTaskPriorityDisinherit+0xd4>)
 800649a:	441a      	add	r2, r3
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	3304      	adds	r3, #4
 80064a0:	4619      	mov	r1, r3
 80064a2:	4610      	mov	r0, r2
 80064a4:	f7fe fc1f 	bl	8004ce6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80064a8:	2301      	movs	r3, #1
 80064aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064ac:	697b      	ldr	r3, [r7, #20]
	}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	200008e8 	.word	0x200008e8
 80064bc:	20000dc4 	.word	0x20000dc4
 80064c0:	200008ec 	.word	0x200008ec

080064c4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80064ce:	4b21      	ldr	r3, [pc, #132]	; (8006554 <prvAddCurrentTaskToDelayedList+0x90>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064d4:	4b20      	ldr	r3, [pc, #128]	; (8006558 <prvAddCurrentTaskToDelayedList+0x94>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3304      	adds	r3, #4
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fe fc60 	bl	8004da0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e6:	d10a      	bne.n	80064fe <prvAddCurrentTaskToDelayedList+0x3a>
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d007      	beq.n	80064fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064ee:	4b1a      	ldr	r3, [pc, #104]	; (8006558 <prvAddCurrentTaskToDelayedList+0x94>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3304      	adds	r3, #4
 80064f4:	4619      	mov	r1, r3
 80064f6:	4819      	ldr	r0, [pc, #100]	; (800655c <prvAddCurrentTaskToDelayedList+0x98>)
 80064f8:	f7fe fbf5 	bl	8004ce6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80064fc:	e026      	b.n	800654c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4413      	add	r3, r2
 8006504:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006506:	4b14      	ldr	r3, [pc, #80]	; (8006558 <prvAddCurrentTaskToDelayedList+0x94>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	429a      	cmp	r2, r3
 8006514:	d209      	bcs.n	800652a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006516:	4b12      	ldr	r3, [pc, #72]	; (8006560 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	4b0f      	ldr	r3, [pc, #60]	; (8006558 <prvAddCurrentTaskToDelayedList+0x94>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	3304      	adds	r3, #4
 8006520:	4619      	mov	r1, r3
 8006522:	4610      	mov	r0, r2
 8006524:	f7fe fc03 	bl	8004d2e <vListInsert>
}
 8006528:	e010      	b.n	800654c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800652a:	4b0e      	ldr	r3, [pc, #56]	; (8006564 <prvAddCurrentTaskToDelayedList+0xa0>)
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	4b0a      	ldr	r3, [pc, #40]	; (8006558 <prvAddCurrentTaskToDelayedList+0x94>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	3304      	adds	r3, #4
 8006534:	4619      	mov	r1, r3
 8006536:	4610      	mov	r0, r2
 8006538:	f7fe fbf9 	bl	8004d2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800653c:	4b0a      	ldr	r3, [pc, #40]	; (8006568 <prvAddCurrentTaskToDelayedList+0xa4>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	429a      	cmp	r2, r3
 8006544:	d202      	bcs.n	800654c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006546:	4a08      	ldr	r2, [pc, #32]	; (8006568 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	6013      	str	r3, [r2, #0]
}
 800654c:	bf00      	nop
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	20000dc0 	.word	0x20000dc0
 8006558:	200008e8 	.word	0x200008e8
 800655c:	20000da8 	.word	0x20000da8
 8006560:	20000d78 	.word	0x20000d78
 8006564:	20000d74 	.word	0x20000d74
 8006568:	20000ddc 	.word	0x20000ddc

0800656c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b08a      	sub	sp, #40	; 0x28
 8006570:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006572:	2300      	movs	r3, #0
 8006574:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006576:	f000 fac3 	bl	8006b00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800657a:	4b1c      	ldr	r3, [pc, #112]	; (80065ec <xTimerCreateTimerTask+0x80>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d021      	beq.n	80065c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006582:	2300      	movs	r3, #0
 8006584:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006586:	2300      	movs	r3, #0
 8006588:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800658a:	1d3a      	adds	r2, r7, #4
 800658c:	f107 0108 	add.w	r1, r7, #8
 8006590:	f107 030c 	add.w	r3, r7, #12
 8006594:	4618      	mov	r0, r3
 8006596:	f7fe fb5f 	bl	8004c58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800659a:	6879      	ldr	r1, [r7, #4]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	9202      	str	r2, [sp, #8]
 80065a2:	9301      	str	r3, [sp, #4]
 80065a4:	2302      	movs	r3, #2
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	2300      	movs	r3, #0
 80065aa:	460a      	mov	r2, r1
 80065ac:	4910      	ldr	r1, [pc, #64]	; (80065f0 <xTimerCreateTimerTask+0x84>)
 80065ae:	4811      	ldr	r0, [pc, #68]	; (80065f4 <xTimerCreateTimerTask+0x88>)
 80065b0:	f7ff f8f4 	bl	800579c <xTaskCreateStatic>
 80065b4:	4602      	mov	r2, r0
 80065b6:	4b10      	ldr	r3, [pc, #64]	; (80065f8 <xTimerCreateTimerTask+0x8c>)
 80065b8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80065ba:	4b0f      	ldr	r3, [pc, #60]	; (80065f8 <xTimerCreateTimerTask+0x8c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80065c2:	2301      	movs	r3, #1
 80065c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d109      	bne.n	80065e0 <xTimerCreateTimerTask+0x74>
 80065cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	613b      	str	r3, [r7, #16]
 80065de:	e7fe      	b.n	80065de <xTimerCreateTimerTask+0x72>
	return xReturn;
 80065e0:	697b      	ldr	r3, [r7, #20]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	20000e18 	.word	0x20000e18
 80065f0:	0800af28 	.word	0x0800af28
 80065f4:	08006715 	.word	0x08006715
 80065f8:	20000e1c 	.word	0x20000e1c

080065fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b08a      	sub	sp, #40	; 0x28
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
 8006608:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800660a:	2300      	movs	r3, #0
 800660c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d109      	bne.n	8006628 <xTimerGenericCommand+0x2c>
 8006614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	623b      	str	r3, [r7, #32]
 8006626:	e7fe      	b.n	8006626 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006628:	4b19      	ldr	r3, [pc, #100]	; (8006690 <xTimerGenericCommand+0x94>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d02a      	beq.n	8006686 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2b05      	cmp	r3, #5
 8006640:	dc18      	bgt.n	8006674 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006642:	f7ff feb5 	bl	80063b0 <xTaskGetSchedulerState>
 8006646:	4603      	mov	r3, r0
 8006648:	2b02      	cmp	r3, #2
 800664a:	d109      	bne.n	8006660 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800664c:	4b10      	ldr	r3, [pc, #64]	; (8006690 <xTimerGenericCommand+0x94>)
 800664e:	6818      	ldr	r0, [r3, #0]
 8006650:	f107 0110 	add.w	r1, r7, #16
 8006654:	2300      	movs	r3, #0
 8006656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006658:	f7fe fcca 	bl	8004ff0 <xQueueGenericSend>
 800665c:	6278      	str	r0, [r7, #36]	; 0x24
 800665e:	e012      	b.n	8006686 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006660:	4b0b      	ldr	r3, [pc, #44]	; (8006690 <xTimerGenericCommand+0x94>)
 8006662:	6818      	ldr	r0, [r3, #0]
 8006664:	f107 0110 	add.w	r1, r7, #16
 8006668:	2300      	movs	r3, #0
 800666a:	2200      	movs	r2, #0
 800666c:	f7fe fcc0 	bl	8004ff0 <xQueueGenericSend>
 8006670:	6278      	str	r0, [r7, #36]	; 0x24
 8006672:	e008      	b.n	8006686 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006674:	4b06      	ldr	r3, [pc, #24]	; (8006690 <xTimerGenericCommand+0x94>)
 8006676:	6818      	ldr	r0, [r3, #0]
 8006678:	f107 0110 	add.w	r1, r7, #16
 800667c:	2300      	movs	r3, #0
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	f7fe fdb0 	bl	80051e4 <xQueueGenericSendFromISR>
 8006684:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006688:	4618      	mov	r0, r3
 800668a:	3728      	adds	r7, #40	; 0x28
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	20000e18 	.word	0x20000e18

08006694 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b088      	sub	sp, #32
 8006698:	af02      	add	r7, sp, #8
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800669e:	4b1c      	ldr	r3, [pc, #112]	; (8006710 <prvProcessExpiredTimer+0x7c>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	3304      	adds	r3, #4
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fe fb77 	bl	8004da0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d121      	bne.n	80066fe <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	699a      	ldr	r2, [r3, #24]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	18d1      	adds	r1, r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	683a      	ldr	r2, [r7, #0]
 80066c6:	6978      	ldr	r0, [r7, #20]
 80066c8:	f000 f8c8 	bl	800685c <prvInsertTimerInActiveList>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d015      	beq.n	80066fe <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066d2:	2300      	movs	r3, #0
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	2300      	movs	r3, #0
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	2100      	movs	r1, #0
 80066dc:	6978      	ldr	r0, [r7, #20]
 80066de:	f7ff ff8d 	bl	80065fc <xTimerGenericCommand>
 80066e2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d109      	bne.n	80066fe <prvProcessExpiredTimer+0x6a>
 80066ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	e7fe      	b.n	80066fc <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006702:	6978      	ldr	r0, [r7, #20]
 8006704:	4798      	blx	r3
}
 8006706:	bf00      	nop
 8006708:	3718      	adds	r7, #24
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20000e10 	.word	0x20000e10

08006714 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800671c:	f107 0308 	add.w	r3, r7, #8
 8006720:	4618      	mov	r0, r3
 8006722:	f000 f857 	bl	80067d4 <prvGetNextExpireTime>
 8006726:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	4619      	mov	r1, r3
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 f803 	bl	8006738 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006732:	f000 f8d5 	bl	80068e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006736:	e7f1      	b.n	800671c <prvTimerTask+0x8>

08006738 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006742:	f7ff fa57 	bl	8005bf4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006746:	f107 0308 	add.w	r3, r7, #8
 800674a:	4618      	mov	r0, r3
 800674c:	f000 f866 	bl	800681c <prvSampleTimeNow>
 8006750:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d130      	bne.n	80067ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10a      	bne.n	8006774 <prvProcessTimerOrBlockTask+0x3c>
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	429a      	cmp	r2, r3
 8006764:	d806      	bhi.n	8006774 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006766:	f7ff fa53 	bl	8005c10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800676a:	68f9      	ldr	r1, [r7, #12]
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7ff ff91 	bl	8006694 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006772:	e024      	b.n	80067be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d008      	beq.n	800678c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800677a:	4b13      	ldr	r3, [pc, #76]	; (80067c8 <prvProcessTimerOrBlockTask+0x90>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	bf0c      	ite	eq
 8006784:	2301      	moveq	r3, #1
 8006786:	2300      	movne	r3, #0
 8006788:	b2db      	uxtb	r3, r3
 800678a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800678c:	4b0f      	ldr	r3, [pc, #60]	; (80067cc <prvProcessTimerOrBlockTask+0x94>)
 800678e:	6818      	ldr	r0, [r3, #0]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	4619      	mov	r1, r3
 800679a:	f7fe ffcb 	bl	8005734 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800679e:	f7ff fa37 	bl	8005c10 <xTaskResumeAll>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10a      	bne.n	80067be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80067a8:	4b09      	ldr	r3, [pc, #36]	; (80067d0 <prvProcessTimerOrBlockTask+0x98>)
 80067aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	f3bf 8f6f 	isb	sy
}
 80067b8:	e001      	b.n	80067be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80067ba:	f7ff fa29 	bl	8005c10 <xTaskResumeAll>
}
 80067be:	bf00      	nop
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	20000e14 	.word	0x20000e14
 80067cc:	20000e18 	.word	0x20000e18
 80067d0:	e000ed04 	.word	0xe000ed04

080067d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80067dc:	4b0e      	ldr	r3, [pc, #56]	; (8006818 <prvGetNextExpireTime+0x44>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	bf0c      	ite	eq
 80067e6:	2301      	moveq	r3, #1
 80067e8:	2300      	movne	r3, #0
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	461a      	mov	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d105      	bne.n	8006806 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067fa:	4b07      	ldr	r3, [pc, #28]	; (8006818 <prvGetNextExpireTime+0x44>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	e001      	b.n	800680a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006806:	2300      	movs	r3, #0
 8006808:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800680a:	68fb      	ldr	r3, [r7, #12]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	20000e10 	.word	0x20000e10

0800681c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006824:	f7ff fa90 	bl	8005d48 <xTaskGetTickCount>
 8006828:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800682a:	4b0b      	ldr	r3, [pc, #44]	; (8006858 <prvSampleTimeNow+0x3c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	429a      	cmp	r2, r3
 8006832:	d205      	bcs.n	8006840 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006834:	f000 f904 	bl	8006a40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	e002      	b.n	8006846 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006846:	4a04      	ldr	r2, [pc, #16]	; (8006858 <prvSampleTimeNow+0x3c>)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800684c:	68fb      	ldr	r3, [r7, #12]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	20000e20 	.word	0x20000e20

0800685c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800686a:	2300      	movs	r3, #0
 800686c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	429a      	cmp	r2, r3
 8006880:	d812      	bhi.n	80068a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	1ad2      	subs	r2, r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	429a      	cmp	r2, r3
 800688e:	d302      	bcc.n	8006896 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006890:	2301      	movs	r3, #1
 8006892:	617b      	str	r3, [r7, #20]
 8006894:	e01b      	b.n	80068ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006896:	4b10      	ldr	r3, [pc, #64]	; (80068d8 <prvInsertTimerInActiveList+0x7c>)
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3304      	adds	r3, #4
 800689e:	4619      	mov	r1, r3
 80068a0:	4610      	mov	r0, r2
 80068a2:	f7fe fa44 	bl	8004d2e <vListInsert>
 80068a6:	e012      	b.n	80068ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d206      	bcs.n	80068be <prvInsertTimerInActiveList+0x62>
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d302      	bcc.n	80068be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80068b8:	2301      	movs	r3, #1
 80068ba:	617b      	str	r3, [r7, #20]
 80068bc:	e007      	b.n	80068ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068be:	4b07      	ldr	r3, [pc, #28]	; (80068dc <prvInsertTimerInActiveList+0x80>)
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3304      	adds	r3, #4
 80068c6:	4619      	mov	r1, r3
 80068c8:	4610      	mov	r0, r2
 80068ca:	f7fe fa30 	bl	8004d2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80068ce:	697b      	ldr	r3, [r7, #20]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3718      	adds	r7, #24
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	20000e14 	.word	0x20000e14
 80068dc:	20000e10 	.word	0x20000e10

080068e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b08e      	sub	sp, #56	; 0x38
 80068e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068e6:	e099      	b.n	8006a1c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	da17      	bge.n	800691e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80068ee:	1d3b      	adds	r3, r7, #4
 80068f0:	3304      	adds	r3, #4
 80068f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80068f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d109      	bne.n	800690e <prvProcessReceivedCommands+0x2e>
 80068fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	61fb      	str	r3, [r7, #28]
 800690c:	e7fe      	b.n	800690c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800690e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006914:	6850      	ldr	r0, [r2, #4]
 8006916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006918:	6892      	ldr	r2, [r2, #8]
 800691a:	4611      	mov	r1, r2
 800691c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	db7a      	blt.n	8006a1a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d004      	beq.n	800693a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006932:	3304      	adds	r3, #4
 8006934:	4618      	mov	r0, r3
 8006936:	f7fe fa33 	bl	8004da0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800693a:	463b      	mov	r3, r7
 800693c:	4618      	mov	r0, r3
 800693e:	f7ff ff6d 	bl	800681c <prvSampleTimeNow>
 8006942:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b09      	cmp	r3, #9
 8006948:	d868      	bhi.n	8006a1c <prvProcessReceivedCommands+0x13c>
 800694a:	a201      	add	r2, pc, #4	; (adr r2, 8006950 <prvProcessReceivedCommands+0x70>)
 800694c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006950:	08006979 	.word	0x08006979
 8006954:	08006979 	.word	0x08006979
 8006958:	08006979 	.word	0x08006979
 800695c:	08006a1d 	.word	0x08006a1d
 8006960:	080069d3 	.word	0x080069d3
 8006964:	08006a09 	.word	0x08006a09
 8006968:	08006979 	.word	0x08006979
 800696c:	08006979 	.word	0x08006979
 8006970:	08006a1d 	.word	0x08006a1d
 8006974:	080069d3 	.word	0x080069d3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	18d1      	adds	r1, r2, r3
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006986:	f7ff ff69 	bl	800685c <prvInsertTimerInActiveList>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d045      	beq.n	8006a1c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006996:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d13d      	bne.n	8006a1c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	441a      	add	r2, r3
 80069a8:	2300      	movs	r3, #0
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	2300      	movs	r3, #0
 80069ae:	2100      	movs	r1, #0
 80069b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069b2:	f7ff fe23 	bl	80065fc <xTimerGenericCommand>
 80069b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d12e      	bne.n	8006a1c <prvProcessReceivedCommands+0x13c>
 80069be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	61bb      	str	r3, [r7, #24]
 80069d0:	e7fe      	b.n	80069d0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80069d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d109      	bne.n	80069f4 <prvProcessReceivedCommands+0x114>
 80069e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	617b      	str	r3, [r7, #20]
 80069f2:	e7fe      	b.n	80069f2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80069f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f6:	699a      	ldr	r2, [r3, #24]
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	18d1      	adds	r1, r2, r3
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a02:	f7ff ff2b 	bl	800685c <prvInsertTimerInActiveList>
					break;
 8006a06:	e009      	b.n	8006a1c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d104      	bne.n	8006a1c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8006a12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a14:	f000 fbb6 	bl	8007184 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a18:	e000      	b.n	8006a1c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006a1a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a1c:	4b07      	ldr	r3, [pc, #28]	; (8006a3c <prvProcessReceivedCommands+0x15c>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	1d39      	adds	r1, r7, #4
 8006a22:	2200      	movs	r2, #0
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7fe fc71 	bl	800530c <xQueueReceive>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f47f af5b 	bne.w	80068e8 <prvProcessReceivedCommands+0x8>
	}
}
 8006a32:	bf00      	nop
 8006a34:	3730      	adds	r7, #48	; 0x30
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20000e18 	.word	0x20000e18

08006a40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b088      	sub	sp, #32
 8006a44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a46:	e044      	b.n	8006ad2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a48:	4b2b      	ldr	r3, [pc, #172]	; (8006af8 <prvSwitchTimerLists+0xb8>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a52:	4b29      	ldr	r3, [pc, #164]	; (8006af8 <prvSwitchTimerLists+0xb8>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	3304      	adds	r3, #4
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7fe f99d 	bl	8004da0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d12d      	bne.n	8006ad2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d90e      	bls.n	8006aa6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a94:	4b18      	ldr	r3, [pc, #96]	; (8006af8 <prvSwitchTimerLists+0xb8>)
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3304      	adds	r3, #4
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	4610      	mov	r0, r2
 8006aa0:	f7fe f945 	bl	8004d2e <vListInsert>
 8006aa4:	e015      	b.n	8006ad2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	2300      	movs	r3, #0
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	2100      	movs	r1, #0
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f7ff fda3 	bl	80065fc <xTimerGenericCommand>
 8006ab6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d109      	bne.n	8006ad2 <prvSwitchTimerLists+0x92>
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	603b      	str	r3, [r7, #0]
 8006ad0:	e7fe      	b.n	8006ad0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ad2:	4b09      	ldr	r3, [pc, #36]	; (8006af8 <prvSwitchTimerLists+0xb8>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1b5      	bne.n	8006a48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006adc:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <prvSwitchTimerLists+0xb8>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006ae2:	4b06      	ldr	r3, [pc, #24]	; (8006afc <prvSwitchTimerLists+0xbc>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a04      	ldr	r2, [pc, #16]	; (8006af8 <prvSwitchTimerLists+0xb8>)
 8006ae8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006aea:	4a04      	ldr	r2, [pc, #16]	; (8006afc <prvSwitchTimerLists+0xbc>)
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	6013      	str	r3, [r2, #0]
}
 8006af0:	bf00      	nop
 8006af2:	3718      	adds	r7, #24
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	20000e10 	.word	0x20000e10
 8006afc:	20000e14 	.word	0x20000e14

08006b00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b06:	f000 f961 	bl	8006dcc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b0a:	4b15      	ldr	r3, [pc, #84]	; (8006b60 <prvCheckForValidListAndQueue+0x60>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d120      	bne.n	8006b54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b12:	4814      	ldr	r0, [pc, #80]	; (8006b64 <prvCheckForValidListAndQueue+0x64>)
 8006b14:	f7fe f8ba 	bl	8004c8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b18:	4813      	ldr	r0, [pc, #76]	; (8006b68 <prvCheckForValidListAndQueue+0x68>)
 8006b1a:	f7fe f8b7 	bl	8004c8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b1e:	4b13      	ldr	r3, [pc, #76]	; (8006b6c <prvCheckForValidListAndQueue+0x6c>)
 8006b20:	4a10      	ldr	r2, [pc, #64]	; (8006b64 <prvCheckForValidListAndQueue+0x64>)
 8006b22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b24:	4b12      	ldr	r3, [pc, #72]	; (8006b70 <prvCheckForValidListAndQueue+0x70>)
 8006b26:	4a10      	ldr	r2, [pc, #64]	; (8006b68 <prvCheckForValidListAndQueue+0x68>)
 8006b28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	4b11      	ldr	r3, [pc, #68]	; (8006b74 <prvCheckForValidListAndQueue+0x74>)
 8006b30:	4a11      	ldr	r2, [pc, #68]	; (8006b78 <prvCheckForValidListAndQueue+0x78>)
 8006b32:	2110      	movs	r1, #16
 8006b34:	200a      	movs	r0, #10
 8006b36:	f7fe f9c5 	bl	8004ec4 <xQueueGenericCreateStatic>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	4b08      	ldr	r3, [pc, #32]	; (8006b60 <prvCheckForValidListAndQueue+0x60>)
 8006b3e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006b40:	4b07      	ldr	r3, [pc, #28]	; (8006b60 <prvCheckForValidListAndQueue+0x60>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d005      	beq.n	8006b54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b48:	4b05      	ldr	r3, [pc, #20]	; (8006b60 <prvCheckForValidListAndQueue+0x60>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	490b      	ldr	r1, [pc, #44]	; (8006b7c <prvCheckForValidListAndQueue+0x7c>)
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fe fdc8 	bl	80056e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b54:	f000 f968 	bl	8006e28 <vPortExitCritical>
}
 8006b58:	bf00      	nop
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	20000e18 	.word	0x20000e18
 8006b64:	20000de8 	.word	0x20000de8
 8006b68:	20000dfc 	.word	0x20000dfc
 8006b6c:	20000e10 	.word	0x20000e10
 8006b70:	20000e14 	.word	0x20000e14
 8006b74:	20000ec4 	.word	0x20000ec4
 8006b78:	20000e24 	.word	0x20000e24
 8006b7c:	0800af30 	.word	0x0800af30

08006b80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	3b04      	subs	r3, #4
 8006b90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	3b04      	subs	r3, #4
 8006b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	f023 0201 	bic.w	r2, r3, #1
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	3b04      	subs	r3, #4
 8006bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006bb0:	4a0c      	ldr	r2, [pc, #48]	; (8006be4 <pxPortInitialiseStack+0x64>)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3b14      	subs	r3, #20
 8006bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3b04      	subs	r3, #4
 8006bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f06f 0202 	mvn.w	r2, #2
 8006bce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	3b20      	subs	r3, #32
 8006bd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	08006be9 	.word	0x08006be9

08006be8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006bf2:	4b11      	ldr	r3, [pc, #68]	; (8006c38 <prvTaskExitError+0x50>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bfa:	d009      	beq.n	8006c10 <prvTaskExitError+0x28>
 8006bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	60fb      	str	r3, [r7, #12]
 8006c0e:	e7fe      	b.n	8006c0e <prvTaskExitError+0x26>
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c22:	bf00      	nop
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d0fc      	beq.n	8006c24 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c2a:	bf00      	nop
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	20000024 	.word	0x20000024
 8006c3c:	00000000 	.word	0x00000000

08006c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c40:	4b07      	ldr	r3, [pc, #28]	; (8006c60 <pxCurrentTCBConst2>)
 8006c42:	6819      	ldr	r1, [r3, #0]
 8006c44:	6808      	ldr	r0, [r1, #0]
 8006c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4a:	f380 8809 	msr	PSP, r0
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f04f 0000 	mov.w	r0, #0
 8006c56:	f380 8811 	msr	BASEPRI, r0
 8006c5a:	4770      	bx	lr
 8006c5c:	f3af 8000 	nop.w

08006c60 <pxCurrentTCBConst2>:
 8006c60:	200008e8 	.word	0x200008e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c64:	bf00      	nop
 8006c66:	bf00      	nop

08006c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c68:	4808      	ldr	r0, [pc, #32]	; (8006c8c <prvPortStartFirstTask+0x24>)
 8006c6a:	6800      	ldr	r0, [r0, #0]
 8006c6c:	6800      	ldr	r0, [r0, #0]
 8006c6e:	f380 8808 	msr	MSP, r0
 8006c72:	f04f 0000 	mov.w	r0, #0
 8006c76:	f380 8814 	msr	CONTROL, r0
 8006c7a:	b662      	cpsie	i
 8006c7c:	b661      	cpsie	f
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	df00      	svc	0
 8006c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c8a:	bf00      	nop
 8006c8c:	e000ed08 	.word	0xe000ed08

08006c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c96:	4b44      	ldr	r3, [pc, #272]	; (8006da8 <xPortStartScheduler+0x118>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a44      	ldr	r2, [pc, #272]	; (8006dac <xPortStartScheduler+0x11c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d109      	bne.n	8006cb4 <xPortStartScheduler+0x24>
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	613b      	str	r3, [r7, #16]
 8006cb2:	e7fe      	b.n	8006cb2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006cb4:	4b3c      	ldr	r3, [pc, #240]	; (8006da8 <xPortStartScheduler+0x118>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a3d      	ldr	r2, [pc, #244]	; (8006db0 <xPortStartScheduler+0x120>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d109      	bne.n	8006cd2 <xPortStartScheduler+0x42>
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	e7fe      	b.n	8006cd0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006cd2:	4b38      	ldr	r3, [pc, #224]	; (8006db4 <xPortStartScheduler+0x124>)
 8006cd4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	22ff      	movs	r2, #255	; 0xff
 8006ce2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006cec:	78fb      	ldrb	r3, [r7, #3]
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	4b30      	ldr	r3, [pc, #192]	; (8006db8 <xPortStartScheduler+0x128>)
 8006cf8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006cfa:	4b30      	ldr	r3, [pc, #192]	; (8006dbc <xPortStartScheduler+0x12c>)
 8006cfc:	2207      	movs	r2, #7
 8006cfe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d00:	e009      	b.n	8006d16 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006d02:	4b2e      	ldr	r3, [pc, #184]	; (8006dbc <xPortStartScheduler+0x12c>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3b01      	subs	r3, #1
 8006d08:	4a2c      	ldr	r2, [pc, #176]	; (8006dbc <xPortStartScheduler+0x12c>)
 8006d0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d0c:	78fb      	ldrb	r3, [r7, #3]
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d16:	78fb      	ldrb	r3, [r7, #3]
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1e:	2b80      	cmp	r3, #128	; 0x80
 8006d20:	d0ef      	beq.n	8006d02 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d22:	4b26      	ldr	r3, [pc, #152]	; (8006dbc <xPortStartScheduler+0x12c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f1c3 0307 	rsb	r3, r3, #7
 8006d2a:	2b04      	cmp	r3, #4
 8006d2c:	d009      	beq.n	8006d42 <xPortStartScheduler+0xb2>
 8006d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	60bb      	str	r3, [r7, #8]
 8006d40:	e7fe      	b.n	8006d40 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d42:	4b1e      	ldr	r3, [pc, #120]	; (8006dbc <xPortStartScheduler+0x12c>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	021b      	lsls	r3, r3, #8
 8006d48:	4a1c      	ldr	r2, [pc, #112]	; (8006dbc <xPortStartScheduler+0x12c>)
 8006d4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d4c:	4b1b      	ldr	r3, [pc, #108]	; (8006dbc <xPortStartScheduler+0x12c>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d54:	4a19      	ldr	r2, [pc, #100]	; (8006dbc <xPortStartScheduler+0x12c>)
 8006d56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d60:	4b17      	ldr	r3, [pc, #92]	; (8006dc0 <xPortStartScheduler+0x130>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a16      	ldr	r2, [pc, #88]	; (8006dc0 <xPortStartScheduler+0x130>)
 8006d66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d6c:	4b14      	ldr	r3, [pc, #80]	; (8006dc0 <xPortStartScheduler+0x130>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a13      	ldr	r2, [pc, #76]	; (8006dc0 <xPortStartScheduler+0x130>)
 8006d72:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d78:	f000 f8d6 	bl	8006f28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d7c:	4b11      	ldr	r3, [pc, #68]	; (8006dc4 <xPortStartScheduler+0x134>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d82:	f000 f8f5 	bl	8006f70 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d86:	4b10      	ldr	r3, [pc, #64]	; (8006dc8 <xPortStartScheduler+0x138>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a0f      	ldr	r2, [pc, #60]	; (8006dc8 <xPortStartScheduler+0x138>)
 8006d8c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006d90:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d92:	f7ff ff69 	bl	8006c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d96:	f7ff f8a5 	bl	8005ee4 <vTaskSwitchContext>
	prvTaskExitError();
 8006d9a:	f7ff ff25 	bl	8006be8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3718      	adds	r7, #24
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	e000ed00 	.word	0xe000ed00
 8006dac:	410fc271 	.word	0x410fc271
 8006db0:	410fc270 	.word	0x410fc270
 8006db4:	e000e400 	.word	0xe000e400
 8006db8:	20000f14 	.word	0x20000f14
 8006dbc:	20000f18 	.word	0x20000f18
 8006dc0:	e000ed20 	.word	0xe000ed20
 8006dc4:	20000024 	.word	0x20000024
 8006dc8:	e000ef34 	.word	0xe000ef34

08006dcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006de4:	4b0e      	ldr	r3, [pc, #56]	; (8006e20 <vPortEnterCritical+0x54>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	3301      	adds	r3, #1
 8006dea:	4a0d      	ldr	r2, [pc, #52]	; (8006e20 <vPortEnterCritical+0x54>)
 8006dec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006dee:	4b0c      	ldr	r3, [pc, #48]	; (8006e20 <vPortEnterCritical+0x54>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d10e      	bne.n	8006e14 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006df6:	4b0b      	ldr	r3, [pc, #44]	; (8006e24 <vPortEnterCritical+0x58>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d009      	beq.n	8006e14 <vPortEnterCritical+0x48>
 8006e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	603b      	str	r3, [r7, #0]
 8006e12:	e7fe      	b.n	8006e12 <vPortEnterCritical+0x46>
	}
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	20000024 	.word	0x20000024
 8006e24:	e000ed04 	.word	0xe000ed04

08006e28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e2e:	4b11      	ldr	r3, [pc, #68]	; (8006e74 <vPortExitCritical+0x4c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d109      	bne.n	8006e4a <vPortExitCritical+0x22>
 8006e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	607b      	str	r3, [r7, #4]
 8006e48:	e7fe      	b.n	8006e48 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006e4a:	4b0a      	ldr	r3, [pc, #40]	; (8006e74 <vPortExitCritical+0x4c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	4a08      	ldr	r2, [pc, #32]	; (8006e74 <vPortExitCritical+0x4c>)
 8006e52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e54:	4b07      	ldr	r3, [pc, #28]	; (8006e74 <vPortExitCritical+0x4c>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d104      	bne.n	8006e66 <vPortExitCritical+0x3e>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e66:	bf00      	nop
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	20000024 	.word	0x20000024
	...

08006e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e80:	f3ef 8009 	mrs	r0, PSP
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	4b15      	ldr	r3, [pc, #84]	; (8006ee0 <pxCurrentTCBConst>)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	f01e 0f10 	tst.w	lr, #16
 8006e90:	bf08      	it	eq
 8006e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9a:	6010      	str	r0, [r2, #0]
 8006e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ea4:	f380 8811 	msr	BASEPRI, r0
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f7ff f818 	bl	8005ee4 <vTaskSwitchContext>
 8006eb4:	f04f 0000 	mov.w	r0, #0
 8006eb8:	f380 8811 	msr	BASEPRI, r0
 8006ebc:	bc09      	pop	{r0, r3}
 8006ebe:	6819      	ldr	r1, [r3, #0]
 8006ec0:	6808      	ldr	r0, [r1, #0]
 8006ec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec6:	f01e 0f10 	tst.w	lr, #16
 8006eca:	bf08      	it	eq
 8006ecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ed0:	f380 8809 	msr	PSP, r0
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	f3af 8000 	nop.w

08006ee0 <pxCurrentTCBConst>:
 8006ee0:	200008e8 	.word	0x200008e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop

08006ee8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
	__asm volatile
 8006eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f00:	f7fe ff32 	bl	8005d68 <xTaskIncrementTick>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f0a:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <SysTick_Handler+0x3c>)
 8006f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f10:	601a      	str	r2, [r3, #0]
 8006f12:	2300      	movs	r3, #0
 8006f14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f1c:	bf00      	nop
 8006f1e:	3708      	adds	r7, #8
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	e000ed04 	.word	0xe000ed04

08006f28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f28:	b480      	push	{r7}
 8006f2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f2c:	4b0b      	ldr	r3, [pc, #44]	; (8006f5c <vPortSetupTimerInterrupt+0x34>)
 8006f2e:	2200      	movs	r2, #0
 8006f30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f32:	4b0b      	ldr	r3, [pc, #44]	; (8006f60 <vPortSetupTimerInterrupt+0x38>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f38:	4b0a      	ldr	r3, [pc, #40]	; (8006f64 <vPortSetupTimerInterrupt+0x3c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a0a      	ldr	r2, [pc, #40]	; (8006f68 <vPortSetupTimerInterrupt+0x40>)
 8006f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f42:	099b      	lsrs	r3, r3, #6
 8006f44:	4a09      	ldr	r2, [pc, #36]	; (8006f6c <vPortSetupTimerInterrupt+0x44>)
 8006f46:	3b01      	subs	r3, #1
 8006f48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f4a:	4b04      	ldr	r3, [pc, #16]	; (8006f5c <vPortSetupTimerInterrupt+0x34>)
 8006f4c:	2207      	movs	r2, #7
 8006f4e:	601a      	str	r2, [r3, #0]
}
 8006f50:	bf00      	nop
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	e000e010 	.word	0xe000e010
 8006f60:	e000e018 	.word	0xe000e018
 8006f64:	20000018 	.word	0x20000018
 8006f68:	10624dd3 	.word	0x10624dd3
 8006f6c:	e000e014 	.word	0xe000e014

08006f70 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f70:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f80 <vPortEnableVFP+0x10>
 8006f74:	6801      	ldr	r1, [r0, #0]
 8006f76:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f7a:	6001      	str	r1, [r0, #0]
 8006f7c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f7e:	bf00      	nop
 8006f80:	e000ed88 	.word	0xe000ed88

08006f84 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f8a:	f3ef 8305 	mrs	r3, IPSR
 8006f8e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2b0f      	cmp	r3, #15
 8006f94:	d913      	bls.n	8006fbe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f96:	4a16      	ldr	r2, [pc, #88]	; (8006ff0 <vPortValidateInterruptPriority+0x6c>)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006fa0:	4b14      	ldr	r3, [pc, #80]	; (8006ff4 <vPortValidateInterruptPriority+0x70>)
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	7afa      	ldrb	r2, [r7, #11]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d209      	bcs.n	8006fbe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fae:	f383 8811 	msr	BASEPRI, r3
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	607b      	str	r3, [r7, #4]
 8006fbc:	e7fe      	b.n	8006fbc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006fbe:	4b0e      	ldr	r3, [pc, #56]	; (8006ff8 <vPortValidateInterruptPriority+0x74>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006fc6:	4b0d      	ldr	r3, [pc, #52]	; (8006ffc <vPortValidateInterruptPriority+0x78>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d909      	bls.n	8006fe2 <vPortValidateInterruptPriority+0x5e>
 8006fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	603b      	str	r3, [r7, #0]
 8006fe0:	e7fe      	b.n	8006fe0 <vPortValidateInterruptPriority+0x5c>
	}
 8006fe2:	bf00      	nop
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	e000e3f0 	.word	0xe000e3f0
 8006ff4:	20000f14 	.word	0x20000f14
 8006ff8:	e000ed0c 	.word	0xe000ed0c
 8006ffc:	20000f18 	.word	0x20000f18

08007000 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b08a      	sub	sp, #40	; 0x28
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007008:	2300      	movs	r3, #0
 800700a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800700c:	f7fe fdf2 	bl	8005bf4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007010:	4b57      	ldr	r3, [pc, #348]	; (8007170 <pvPortMalloc+0x170>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007018:	f000 f90c 	bl	8007234 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800701c:	4b55      	ldr	r3, [pc, #340]	; (8007174 <pvPortMalloc+0x174>)
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4013      	ands	r3, r2
 8007024:	2b00      	cmp	r3, #0
 8007026:	f040 808c 	bne.w	8007142 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d01c      	beq.n	800706a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007030:	2208      	movs	r2, #8
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4413      	add	r3, r2
 8007036:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f003 0307 	and.w	r3, r3, #7
 800703e:	2b00      	cmp	r3, #0
 8007040:	d013      	beq.n	800706a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f023 0307 	bic.w	r3, r3, #7
 8007048:	3308      	adds	r3, #8
 800704a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f003 0307 	and.w	r3, r3, #7
 8007052:	2b00      	cmp	r3, #0
 8007054:	d009      	beq.n	800706a <pvPortMalloc+0x6a>
 8007056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	617b      	str	r3, [r7, #20]
 8007068:	e7fe      	b.n	8007068 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d068      	beq.n	8007142 <pvPortMalloc+0x142>
 8007070:	4b41      	ldr	r3, [pc, #260]	; (8007178 <pvPortMalloc+0x178>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	429a      	cmp	r2, r3
 8007078:	d863      	bhi.n	8007142 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800707a:	4b40      	ldr	r3, [pc, #256]	; (800717c <pvPortMalloc+0x17c>)
 800707c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800707e:	4b3f      	ldr	r3, [pc, #252]	; (800717c <pvPortMalloc+0x17c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007084:	e004      	b.n	8007090 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	429a      	cmp	r2, r3
 8007098:	d903      	bls.n	80070a2 <pvPortMalloc+0xa2>
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1f1      	bne.n	8007086 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80070a2:	4b33      	ldr	r3, [pc, #204]	; (8007170 <pvPortMalloc+0x170>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d04a      	beq.n	8007142 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2208      	movs	r2, #8
 80070b2:	4413      	add	r3, r2
 80070b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	685a      	ldr	r2, [r3, #4]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	1ad2      	subs	r2, r2, r3
 80070c6:	2308      	movs	r3, #8
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d91e      	bls.n	800710c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4413      	add	r3, r2
 80070d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d009      	beq.n	80070f4 <pvPortMalloc+0xf4>
 80070e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	613b      	str	r3, [r7, #16]
 80070f2:	e7fe      	b.n	80070f2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	1ad2      	subs	r2, r2, r3
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007106:	69b8      	ldr	r0, [r7, #24]
 8007108:	f000 f8f6 	bl	80072f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800710c:	4b1a      	ldr	r3, [pc, #104]	; (8007178 <pvPortMalloc+0x178>)
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	4a18      	ldr	r2, [pc, #96]	; (8007178 <pvPortMalloc+0x178>)
 8007118:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800711a:	4b17      	ldr	r3, [pc, #92]	; (8007178 <pvPortMalloc+0x178>)
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	4b18      	ldr	r3, [pc, #96]	; (8007180 <pvPortMalloc+0x180>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	429a      	cmp	r2, r3
 8007124:	d203      	bcs.n	800712e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007126:	4b14      	ldr	r3, [pc, #80]	; (8007178 <pvPortMalloc+0x178>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a15      	ldr	r2, [pc, #84]	; (8007180 <pvPortMalloc+0x180>)
 800712c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	4b10      	ldr	r3, [pc, #64]	; (8007174 <pvPortMalloc+0x174>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	431a      	orrs	r2, r3
 8007138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800713c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713e:	2200      	movs	r2, #0
 8007140:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007142:	f7fe fd65 	bl	8005c10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	f003 0307 	and.w	r3, r3, #7
 800714c:	2b00      	cmp	r3, #0
 800714e:	d009      	beq.n	8007164 <pvPortMalloc+0x164>
 8007150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	60fb      	str	r3, [r7, #12]
 8007162:	e7fe      	b.n	8007162 <pvPortMalloc+0x162>
	return pvReturn;
 8007164:	69fb      	ldr	r3, [r7, #28]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3728      	adds	r7, #40	; 0x28
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	20001b24 	.word	0x20001b24
 8007174:	20001b30 	.word	0x20001b30
 8007178:	20001b28 	.word	0x20001b28
 800717c:	20001b1c 	.word	0x20001b1c
 8007180:	20001b2c 	.word	0x20001b2c

08007184 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d046      	beq.n	8007224 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007196:	2308      	movs	r3, #8
 8007198:	425b      	negs	r3, r3
 800719a:	697a      	ldr	r2, [r7, #20]
 800719c:	4413      	add	r3, r2
 800719e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	4b20      	ldr	r3, [pc, #128]	; (800722c <vPortFree+0xa8>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4013      	ands	r3, r2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d109      	bne.n	80071c6 <vPortFree+0x42>
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	e7fe      	b.n	80071c4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d009      	beq.n	80071e2 <vPortFree+0x5e>
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	60bb      	str	r3, [r7, #8]
 80071e0:	e7fe      	b.n	80071e0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	4b11      	ldr	r3, [pc, #68]	; (800722c <vPortFree+0xa8>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4013      	ands	r3, r2
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d019      	beq.n	8007224 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d115      	bne.n	8007224 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	4b0b      	ldr	r3, [pc, #44]	; (800722c <vPortFree+0xa8>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	43db      	mvns	r3, r3
 8007202:	401a      	ands	r2, r3
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007208:	f7fe fcf4 	bl	8005bf4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	4b07      	ldr	r3, [pc, #28]	; (8007230 <vPortFree+0xac>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4413      	add	r3, r2
 8007216:	4a06      	ldr	r2, [pc, #24]	; (8007230 <vPortFree+0xac>)
 8007218:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800721a:	6938      	ldr	r0, [r7, #16]
 800721c:	f000 f86c 	bl	80072f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007220:	f7fe fcf6 	bl	8005c10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007224:	bf00      	nop
 8007226:	3718      	adds	r7, #24
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	20001b30 	.word	0x20001b30
 8007230:	20001b28 	.word	0x20001b28

08007234 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800723a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800723e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007240:	4b27      	ldr	r3, [pc, #156]	; (80072e0 <prvHeapInit+0xac>)
 8007242:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f003 0307 	and.w	r3, r3, #7
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00c      	beq.n	8007268 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	3307      	adds	r3, #7
 8007252:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f023 0307 	bic.w	r3, r3, #7
 800725a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	4a1f      	ldr	r2, [pc, #124]	; (80072e0 <prvHeapInit+0xac>)
 8007264:	4413      	add	r3, r2
 8007266:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800726c:	4a1d      	ldr	r2, [pc, #116]	; (80072e4 <prvHeapInit+0xb0>)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007272:	4b1c      	ldr	r3, [pc, #112]	; (80072e4 <prvHeapInit+0xb0>)
 8007274:	2200      	movs	r2, #0
 8007276:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	4413      	add	r3, r2
 800727e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007280:	2208      	movs	r2, #8
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	1a9b      	subs	r3, r3, r2
 8007286:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f023 0307 	bic.w	r3, r3, #7
 800728e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4a15      	ldr	r2, [pc, #84]	; (80072e8 <prvHeapInit+0xb4>)
 8007294:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007296:	4b14      	ldr	r3, [pc, #80]	; (80072e8 <prvHeapInit+0xb4>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2200      	movs	r2, #0
 800729c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800729e:	4b12      	ldr	r3, [pc, #72]	; (80072e8 <prvHeapInit+0xb4>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2200      	movs	r2, #0
 80072a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	1ad2      	subs	r2, r2, r3
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072b4:	4b0c      	ldr	r3, [pc, #48]	; (80072e8 <prvHeapInit+0xb4>)
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	4a0a      	ldr	r2, [pc, #40]	; (80072ec <prvHeapInit+0xb8>)
 80072c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	4a09      	ldr	r2, [pc, #36]	; (80072f0 <prvHeapInit+0xbc>)
 80072ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072cc:	4b09      	ldr	r3, [pc, #36]	; (80072f4 <prvHeapInit+0xc0>)
 80072ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80072d2:	601a      	str	r2, [r3, #0]
}
 80072d4:	bf00      	nop
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	20000f1c 	.word	0x20000f1c
 80072e4:	20001b1c 	.word	0x20001b1c
 80072e8:	20001b24 	.word	0x20001b24
 80072ec:	20001b2c 	.word	0x20001b2c
 80072f0:	20001b28 	.word	0x20001b28
 80072f4:	20001b30 	.word	0x20001b30

080072f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007300:	4b28      	ldr	r3, [pc, #160]	; (80073a4 <prvInsertBlockIntoFreeList+0xac>)
 8007302:	60fb      	str	r3, [r7, #12]
 8007304:	e002      	b.n	800730c <prvInsertBlockIntoFreeList+0x14>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	429a      	cmp	r2, r3
 8007314:	d8f7      	bhi.n	8007306 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	4413      	add	r3, r2
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	429a      	cmp	r2, r3
 8007326:	d108      	bne.n	800733a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	441a      	add	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	441a      	add	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	429a      	cmp	r2, r3
 800734c:	d118      	bne.n	8007380 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	4b15      	ldr	r3, [pc, #84]	; (80073a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	429a      	cmp	r2, r3
 8007358:	d00d      	beq.n	8007376 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685a      	ldr	r2, [r3, #4]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	441a      	add	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	e008      	b.n	8007388 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007376:	4b0c      	ldr	r3, [pc, #48]	; (80073a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	e003      	b.n	8007388 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	429a      	cmp	r2, r3
 800738e:	d002      	beq.n	8007396 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007396:	bf00      	nop
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	20001b1c 	.word	0x20001b1c
 80073a8:	20001b24 	.word	0x20001b24

080073ac <__errno>:
 80073ac:	4b01      	ldr	r3, [pc, #4]	; (80073b4 <__errno+0x8>)
 80073ae:	6818      	ldr	r0, [r3, #0]
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	20000028 	.word	0x20000028

080073b8 <_fclose_r>:
 80073b8:	b570      	push	{r4, r5, r6, lr}
 80073ba:	4605      	mov	r5, r0
 80073bc:	460c      	mov	r4, r1
 80073be:	b911      	cbnz	r1, 80073c6 <_fclose_r+0xe>
 80073c0:	2600      	movs	r6, #0
 80073c2:	4630      	mov	r0, r6
 80073c4:	bd70      	pop	{r4, r5, r6, pc}
 80073c6:	b118      	cbz	r0, 80073d0 <_fclose_r+0x18>
 80073c8:	6983      	ldr	r3, [r0, #24]
 80073ca:	b90b      	cbnz	r3, 80073d0 <_fclose_r+0x18>
 80073cc:	f000 f93e 	bl	800764c <__sinit>
 80073d0:	4b1f      	ldr	r3, [pc, #124]	; (8007450 <_fclose_r+0x98>)
 80073d2:	429c      	cmp	r4, r3
 80073d4:	d132      	bne.n	800743c <_fclose_r+0x84>
 80073d6:	686c      	ldr	r4, [r5, #4]
 80073d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d0ef      	beq.n	80073c0 <_fclose_r+0x8>
 80073e0:	4621      	mov	r1, r4
 80073e2:	4628      	mov	r0, r5
 80073e4:	f000 f842 	bl	800746c <__sflush_r>
 80073e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80073ea:	4606      	mov	r6, r0
 80073ec:	b133      	cbz	r3, 80073fc <_fclose_r+0x44>
 80073ee:	6a21      	ldr	r1, [r4, #32]
 80073f0:	4628      	mov	r0, r5
 80073f2:	4798      	blx	r3
 80073f4:	2800      	cmp	r0, #0
 80073f6:	bfb8      	it	lt
 80073f8:	f04f 36ff 	movlt.w	r6, #4294967295
 80073fc:	89a3      	ldrh	r3, [r4, #12]
 80073fe:	061b      	lsls	r3, r3, #24
 8007400:	d503      	bpl.n	800740a <_fclose_r+0x52>
 8007402:	6921      	ldr	r1, [r4, #16]
 8007404:	4628      	mov	r0, r5
 8007406:	f000 fa35 	bl	8007874 <_free_r>
 800740a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800740c:	b141      	cbz	r1, 8007420 <_fclose_r+0x68>
 800740e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007412:	4299      	cmp	r1, r3
 8007414:	d002      	beq.n	800741c <_fclose_r+0x64>
 8007416:	4628      	mov	r0, r5
 8007418:	f000 fa2c 	bl	8007874 <_free_r>
 800741c:	2300      	movs	r3, #0
 800741e:	6363      	str	r3, [r4, #52]	; 0x34
 8007420:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007422:	b121      	cbz	r1, 800742e <_fclose_r+0x76>
 8007424:	4628      	mov	r0, r5
 8007426:	f000 fa25 	bl	8007874 <_free_r>
 800742a:	2300      	movs	r3, #0
 800742c:	64a3      	str	r3, [r4, #72]	; 0x48
 800742e:	f000 f979 	bl	8007724 <__sfp_lock_acquire>
 8007432:	2300      	movs	r3, #0
 8007434:	81a3      	strh	r3, [r4, #12]
 8007436:	f000 f976 	bl	8007726 <__sfp_lock_release>
 800743a:	e7c2      	b.n	80073c2 <_fclose_r+0xa>
 800743c:	4b05      	ldr	r3, [pc, #20]	; (8007454 <_fclose_r+0x9c>)
 800743e:	429c      	cmp	r4, r3
 8007440:	d101      	bne.n	8007446 <_fclose_r+0x8e>
 8007442:	68ac      	ldr	r4, [r5, #8]
 8007444:	e7c8      	b.n	80073d8 <_fclose_r+0x20>
 8007446:	4b04      	ldr	r3, [pc, #16]	; (8007458 <_fclose_r+0xa0>)
 8007448:	429c      	cmp	r4, r3
 800744a:	bf08      	it	eq
 800744c:	68ec      	ldreq	r4, [r5, #12]
 800744e:	e7c3      	b.n	80073d8 <_fclose_r+0x20>
 8007450:	0800afd8 	.word	0x0800afd8
 8007454:	0800aff8 	.word	0x0800aff8
 8007458:	0800afb8 	.word	0x0800afb8

0800745c <fclose>:
 800745c:	4b02      	ldr	r3, [pc, #8]	; (8007468 <fclose+0xc>)
 800745e:	4601      	mov	r1, r0
 8007460:	6818      	ldr	r0, [r3, #0]
 8007462:	f7ff bfa9 	b.w	80073b8 <_fclose_r>
 8007466:	bf00      	nop
 8007468:	20000028 	.word	0x20000028

0800746c <__sflush_r>:
 800746c:	898a      	ldrh	r2, [r1, #12]
 800746e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007472:	4605      	mov	r5, r0
 8007474:	0710      	lsls	r0, r2, #28
 8007476:	460c      	mov	r4, r1
 8007478:	d458      	bmi.n	800752c <__sflush_r+0xc0>
 800747a:	684b      	ldr	r3, [r1, #4]
 800747c:	2b00      	cmp	r3, #0
 800747e:	dc05      	bgt.n	800748c <__sflush_r+0x20>
 8007480:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007482:	2b00      	cmp	r3, #0
 8007484:	dc02      	bgt.n	800748c <__sflush_r+0x20>
 8007486:	2000      	movs	r0, #0
 8007488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800748c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800748e:	2e00      	cmp	r6, #0
 8007490:	d0f9      	beq.n	8007486 <__sflush_r+0x1a>
 8007492:	2300      	movs	r3, #0
 8007494:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007498:	682f      	ldr	r7, [r5, #0]
 800749a:	6a21      	ldr	r1, [r4, #32]
 800749c:	602b      	str	r3, [r5, #0]
 800749e:	d032      	beq.n	8007506 <__sflush_r+0x9a>
 80074a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074a2:	89a3      	ldrh	r3, [r4, #12]
 80074a4:	075a      	lsls	r2, r3, #29
 80074a6:	d505      	bpl.n	80074b4 <__sflush_r+0x48>
 80074a8:	6863      	ldr	r3, [r4, #4]
 80074aa:	1ac0      	subs	r0, r0, r3
 80074ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074ae:	b10b      	cbz	r3, 80074b4 <__sflush_r+0x48>
 80074b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074b2:	1ac0      	subs	r0, r0, r3
 80074b4:	2300      	movs	r3, #0
 80074b6:	4602      	mov	r2, r0
 80074b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074ba:	6a21      	ldr	r1, [r4, #32]
 80074bc:	4628      	mov	r0, r5
 80074be:	47b0      	blx	r6
 80074c0:	1c43      	adds	r3, r0, #1
 80074c2:	89a3      	ldrh	r3, [r4, #12]
 80074c4:	d106      	bne.n	80074d4 <__sflush_r+0x68>
 80074c6:	6829      	ldr	r1, [r5, #0]
 80074c8:	291d      	cmp	r1, #29
 80074ca:	d848      	bhi.n	800755e <__sflush_r+0xf2>
 80074cc:	4a29      	ldr	r2, [pc, #164]	; (8007574 <__sflush_r+0x108>)
 80074ce:	40ca      	lsrs	r2, r1
 80074d0:	07d6      	lsls	r6, r2, #31
 80074d2:	d544      	bpl.n	800755e <__sflush_r+0xf2>
 80074d4:	2200      	movs	r2, #0
 80074d6:	6062      	str	r2, [r4, #4]
 80074d8:	04d9      	lsls	r1, r3, #19
 80074da:	6922      	ldr	r2, [r4, #16]
 80074dc:	6022      	str	r2, [r4, #0]
 80074de:	d504      	bpl.n	80074ea <__sflush_r+0x7e>
 80074e0:	1c42      	adds	r2, r0, #1
 80074e2:	d101      	bne.n	80074e8 <__sflush_r+0x7c>
 80074e4:	682b      	ldr	r3, [r5, #0]
 80074e6:	b903      	cbnz	r3, 80074ea <__sflush_r+0x7e>
 80074e8:	6560      	str	r0, [r4, #84]	; 0x54
 80074ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074ec:	602f      	str	r7, [r5, #0]
 80074ee:	2900      	cmp	r1, #0
 80074f0:	d0c9      	beq.n	8007486 <__sflush_r+0x1a>
 80074f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074f6:	4299      	cmp	r1, r3
 80074f8:	d002      	beq.n	8007500 <__sflush_r+0x94>
 80074fa:	4628      	mov	r0, r5
 80074fc:	f000 f9ba 	bl	8007874 <_free_r>
 8007500:	2000      	movs	r0, #0
 8007502:	6360      	str	r0, [r4, #52]	; 0x34
 8007504:	e7c0      	b.n	8007488 <__sflush_r+0x1c>
 8007506:	2301      	movs	r3, #1
 8007508:	4628      	mov	r0, r5
 800750a:	47b0      	blx	r6
 800750c:	1c41      	adds	r1, r0, #1
 800750e:	d1c8      	bne.n	80074a2 <__sflush_r+0x36>
 8007510:	682b      	ldr	r3, [r5, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d0c5      	beq.n	80074a2 <__sflush_r+0x36>
 8007516:	2b1d      	cmp	r3, #29
 8007518:	d001      	beq.n	800751e <__sflush_r+0xb2>
 800751a:	2b16      	cmp	r3, #22
 800751c:	d101      	bne.n	8007522 <__sflush_r+0xb6>
 800751e:	602f      	str	r7, [r5, #0]
 8007520:	e7b1      	b.n	8007486 <__sflush_r+0x1a>
 8007522:	89a3      	ldrh	r3, [r4, #12]
 8007524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007528:	81a3      	strh	r3, [r4, #12]
 800752a:	e7ad      	b.n	8007488 <__sflush_r+0x1c>
 800752c:	690f      	ldr	r7, [r1, #16]
 800752e:	2f00      	cmp	r7, #0
 8007530:	d0a9      	beq.n	8007486 <__sflush_r+0x1a>
 8007532:	0793      	lsls	r3, r2, #30
 8007534:	680e      	ldr	r6, [r1, #0]
 8007536:	bf08      	it	eq
 8007538:	694b      	ldreq	r3, [r1, #20]
 800753a:	600f      	str	r7, [r1, #0]
 800753c:	bf18      	it	ne
 800753e:	2300      	movne	r3, #0
 8007540:	eba6 0807 	sub.w	r8, r6, r7
 8007544:	608b      	str	r3, [r1, #8]
 8007546:	f1b8 0f00 	cmp.w	r8, #0
 800754a:	dd9c      	ble.n	8007486 <__sflush_r+0x1a>
 800754c:	4643      	mov	r3, r8
 800754e:	463a      	mov	r2, r7
 8007550:	6a21      	ldr	r1, [r4, #32]
 8007552:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007554:	4628      	mov	r0, r5
 8007556:	47b0      	blx	r6
 8007558:	2800      	cmp	r0, #0
 800755a:	dc06      	bgt.n	800756a <__sflush_r+0xfe>
 800755c:	89a3      	ldrh	r3, [r4, #12]
 800755e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007562:	81a3      	strh	r3, [r4, #12]
 8007564:	f04f 30ff 	mov.w	r0, #4294967295
 8007568:	e78e      	b.n	8007488 <__sflush_r+0x1c>
 800756a:	4407      	add	r7, r0
 800756c:	eba8 0800 	sub.w	r8, r8, r0
 8007570:	e7e9      	b.n	8007546 <__sflush_r+0xda>
 8007572:	bf00      	nop
 8007574:	20400001 	.word	0x20400001

08007578 <_fflush_r>:
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	690b      	ldr	r3, [r1, #16]
 800757c:	4605      	mov	r5, r0
 800757e:	460c      	mov	r4, r1
 8007580:	b1db      	cbz	r3, 80075ba <_fflush_r+0x42>
 8007582:	b118      	cbz	r0, 800758c <_fflush_r+0x14>
 8007584:	6983      	ldr	r3, [r0, #24]
 8007586:	b90b      	cbnz	r3, 800758c <_fflush_r+0x14>
 8007588:	f000 f860 	bl	800764c <__sinit>
 800758c:	4b0c      	ldr	r3, [pc, #48]	; (80075c0 <_fflush_r+0x48>)
 800758e:	429c      	cmp	r4, r3
 8007590:	d109      	bne.n	80075a6 <_fflush_r+0x2e>
 8007592:	686c      	ldr	r4, [r5, #4]
 8007594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007598:	b17b      	cbz	r3, 80075ba <_fflush_r+0x42>
 800759a:	4621      	mov	r1, r4
 800759c:	4628      	mov	r0, r5
 800759e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075a2:	f7ff bf63 	b.w	800746c <__sflush_r>
 80075a6:	4b07      	ldr	r3, [pc, #28]	; (80075c4 <_fflush_r+0x4c>)
 80075a8:	429c      	cmp	r4, r3
 80075aa:	d101      	bne.n	80075b0 <_fflush_r+0x38>
 80075ac:	68ac      	ldr	r4, [r5, #8]
 80075ae:	e7f1      	b.n	8007594 <_fflush_r+0x1c>
 80075b0:	4b05      	ldr	r3, [pc, #20]	; (80075c8 <_fflush_r+0x50>)
 80075b2:	429c      	cmp	r4, r3
 80075b4:	bf08      	it	eq
 80075b6:	68ec      	ldreq	r4, [r5, #12]
 80075b8:	e7ec      	b.n	8007594 <_fflush_r+0x1c>
 80075ba:	2000      	movs	r0, #0
 80075bc:	bd38      	pop	{r3, r4, r5, pc}
 80075be:	bf00      	nop
 80075c0:	0800afd8 	.word	0x0800afd8
 80075c4:	0800aff8 	.word	0x0800aff8
 80075c8:	0800afb8 	.word	0x0800afb8

080075cc <std>:
 80075cc:	2300      	movs	r3, #0
 80075ce:	b510      	push	{r4, lr}
 80075d0:	4604      	mov	r4, r0
 80075d2:	e9c0 3300 	strd	r3, r3, [r0]
 80075d6:	6083      	str	r3, [r0, #8]
 80075d8:	8181      	strh	r1, [r0, #12]
 80075da:	6643      	str	r3, [r0, #100]	; 0x64
 80075dc:	81c2      	strh	r2, [r0, #14]
 80075de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075e2:	6183      	str	r3, [r0, #24]
 80075e4:	4619      	mov	r1, r3
 80075e6:	2208      	movs	r2, #8
 80075e8:	305c      	adds	r0, #92	; 0x5c
 80075ea:	f000 f93a 	bl	8007862 <memset>
 80075ee:	4b05      	ldr	r3, [pc, #20]	; (8007604 <std+0x38>)
 80075f0:	6263      	str	r3, [r4, #36]	; 0x24
 80075f2:	4b05      	ldr	r3, [pc, #20]	; (8007608 <std+0x3c>)
 80075f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80075f6:	4b05      	ldr	r3, [pc, #20]	; (800760c <std+0x40>)
 80075f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075fa:	4b05      	ldr	r3, [pc, #20]	; (8007610 <std+0x44>)
 80075fc:	6224      	str	r4, [r4, #32]
 80075fe:	6323      	str	r3, [r4, #48]	; 0x30
 8007600:	bd10      	pop	{r4, pc}
 8007602:	bf00      	nop
 8007604:	080082dd 	.word	0x080082dd
 8007608:	080082ff 	.word	0x080082ff
 800760c:	08008337 	.word	0x08008337
 8007610:	0800835b 	.word	0x0800835b

08007614 <_cleanup_r>:
 8007614:	4901      	ldr	r1, [pc, #4]	; (800761c <_cleanup_r+0x8>)
 8007616:	f000 b8d7 	b.w	80077c8 <_fwalk_reent>
 800761a:	bf00      	nop
 800761c:	08007579 	.word	0x08007579

08007620 <__sfmoreglue>:
 8007620:	b570      	push	{r4, r5, r6, lr}
 8007622:	1e4a      	subs	r2, r1, #1
 8007624:	2568      	movs	r5, #104	; 0x68
 8007626:	4355      	muls	r5, r2
 8007628:	460e      	mov	r6, r1
 800762a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800762e:	f000 f96f 	bl	8007910 <_malloc_r>
 8007632:	4604      	mov	r4, r0
 8007634:	b140      	cbz	r0, 8007648 <__sfmoreglue+0x28>
 8007636:	2100      	movs	r1, #0
 8007638:	e9c0 1600 	strd	r1, r6, [r0]
 800763c:	300c      	adds	r0, #12
 800763e:	60a0      	str	r0, [r4, #8]
 8007640:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007644:	f000 f90d 	bl	8007862 <memset>
 8007648:	4620      	mov	r0, r4
 800764a:	bd70      	pop	{r4, r5, r6, pc}

0800764c <__sinit>:
 800764c:	6983      	ldr	r3, [r0, #24]
 800764e:	b510      	push	{r4, lr}
 8007650:	4604      	mov	r4, r0
 8007652:	bb33      	cbnz	r3, 80076a2 <__sinit+0x56>
 8007654:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007658:	6503      	str	r3, [r0, #80]	; 0x50
 800765a:	4b12      	ldr	r3, [pc, #72]	; (80076a4 <__sinit+0x58>)
 800765c:	4a12      	ldr	r2, [pc, #72]	; (80076a8 <__sinit+0x5c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6282      	str	r2, [r0, #40]	; 0x28
 8007662:	4298      	cmp	r0, r3
 8007664:	bf04      	itt	eq
 8007666:	2301      	moveq	r3, #1
 8007668:	6183      	streq	r3, [r0, #24]
 800766a:	f000 f81f 	bl	80076ac <__sfp>
 800766e:	6060      	str	r0, [r4, #4]
 8007670:	4620      	mov	r0, r4
 8007672:	f000 f81b 	bl	80076ac <__sfp>
 8007676:	60a0      	str	r0, [r4, #8]
 8007678:	4620      	mov	r0, r4
 800767a:	f000 f817 	bl	80076ac <__sfp>
 800767e:	2200      	movs	r2, #0
 8007680:	60e0      	str	r0, [r4, #12]
 8007682:	2104      	movs	r1, #4
 8007684:	6860      	ldr	r0, [r4, #4]
 8007686:	f7ff ffa1 	bl	80075cc <std>
 800768a:	2201      	movs	r2, #1
 800768c:	2109      	movs	r1, #9
 800768e:	68a0      	ldr	r0, [r4, #8]
 8007690:	f7ff ff9c 	bl	80075cc <std>
 8007694:	2202      	movs	r2, #2
 8007696:	2112      	movs	r1, #18
 8007698:	68e0      	ldr	r0, [r4, #12]
 800769a:	f7ff ff97 	bl	80075cc <std>
 800769e:	2301      	movs	r3, #1
 80076a0:	61a3      	str	r3, [r4, #24]
 80076a2:	bd10      	pop	{r4, pc}
 80076a4:	0800b018 	.word	0x0800b018
 80076a8:	08007615 	.word	0x08007615

080076ac <__sfp>:
 80076ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ae:	4b1b      	ldr	r3, [pc, #108]	; (800771c <__sfp+0x70>)
 80076b0:	681e      	ldr	r6, [r3, #0]
 80076b2:	69b3      	ldr	r3, [r6, #24]
 80076b4:	4607      	mov	r7, r0
 80076b6:	b913      	cbnz	r3, 80076be <__sfp+0x12>
 80076b8:	4630      	mov	r0, r6
 80076ba:	f7ff ffc7 	bl	800764c <__sinit>
 80076be:	3648      	adds	r6, #72	; 0x48
 80076c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076c4:	3b01      	subs	r3, #1
 80076c6:	d503      	bpl.n	80076d0 <__sfp+0x24>
 80076c8:	6833      	ldr	r3, [r6, #0]
 80076ca:	b133      	cbz	r3, 80076da <__sfp+0x2e>
 80076cc:	6836      	ldr	r6, [r6, #0]
 80076ce:	e7f7      	b.n	80076c0 <__sfp+0x14>
 80076d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076d4:	b16d      	cbz	r5, 80076f2 <__sfp+0x46>
 80076d6:	3468      	adds	r4, #104	; 0x68
 80076d8:	e7f4      	b.n	80076c4 <__sfp+0x18>
 80076da:	2104      	movs	r1, #4
 80076dc:	4638      	mov	r0, r7
 80076de:	f7ff ff9f 	bl	8007620 <__sfmoreglue>
 80076e2:	6030      	str	r0, [r6, #0]
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d1f1      	bne.n	80076cc <__sfp+0x20>
 80076e8:	230c      	movs	r3, #12
 80076ea:	603b      	str	r3, [r7, #0]
 80076ec:	4604      	mov	r4, r0
 80076ee:	4620      	mov	r0, r4
 80076f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076f2:	4b0b      	ldr	r3, [pc, #44]	; (8007720 <__sfp+0x74>)
 80076f4:	6665      	str	r5, [r4, #100]	; 0x64
 80076f6:	e9c4 5500 	strd	r5, r5, [r4]
 80076fa:	60a5      	str	r5, [r4, #8]
 80076fc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007700:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007704:	2208      	movs	r2, #8
 8007706:	4629      	mov	r1, r5
 8007708:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800770c:	f000 f8a9 	bl	8007862 <memset>
 8007710:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007714:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007718:	e7e9      	b.n	80076ee <__sfp+0x42>
 800771a:	bf00      	nop
 800771c:	0800b018 	.word	0x0800b018
 8007720:	ffff0001 	.word	0xffff0001

08007724 <__sfp_lock_acquire>:
 8007724:	4770      	bx	lr

08007726 <__sfp_lock_release>:
 8007726:	4770      	bx	lr

08007728 <_fputs_r>:
 8007728:	b570      	push	{r4, r5, r6, lr}
 800772a:	460e      	mov	r6, r1
 800772c:	4614      	mov	r4, r2
 800772e:	4605      	mov	r5, r0
 8007730:	b118      	cbz	r0, 800773a <_fputs_r+0x12>
 8007732:	6983      	ldr	r3, [r0, #24]
 8007734:	b90b      	cbnz	r3, 800773a <_fputs_r+0x12>
 8007736:	f7ff ff89 	bl	800764c <__sinit>
 800773a:	4b1c      	ldr	r3, [pc, #112]	; (80077ac <_fputs_r+0x84>)
 800773c:	429c      	cmp	r4, r3
 800773e:	d10b      	bne.n	8007758 <_fputs_r+0x30>
 8007740:	686c      	ldr	r4, [r5, #4]
 8007742:	89a3      	ldrh	r3, [r4, #12]
 8007744:	071b      	lsls	r3, r3, #28
 8007746:	d511      	bpl.n	800776c <_fputs_r+0x44>
 8007748:	6923      	ldr	r3, [r4, #16]
 800774a:	b17b      	cbz	r3, 800776c <_fputs_r+0x44>
 800774c:	3e01      	subs	r6, #1
 800774e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007752:	b9a1      	cbnz	r1, 800777e <_fputs_r+0x56>
 8007754:	4608      	mov	r0, r1
 8007756:	e011      	b.n	800777c <_fputs_r+0x54>
 8007758:	4b15      	ldr	r3, [pc, #84]	; (80077b0 <_fputs_r+0x88>)
 800775a:	429c      	cmp	r4, r3
 800775c:	d101      	bne.n	8007762 <_fputs_r+0x3a>
 800775e:	68ac      	ldr	r4, [r5, #8]
 8007760:	e7ef      	b.n	8007742 <_fputs_r+0x1a>
 8007762:	4b14      	ldr	r3, [pc, #80]	; (80077b4 <_fputs_r+0x8c>)
 8007764:	429c      	cmp	r4, r3
 8007766:	bf08      	it	eq
 8007768:	68ec      	ldreq	r4, [r5, #12]
 800776a:	e7ea      	b.n	8007742 <_fputs_r+0x1a>
 800776c:	4621      	mov	r1, r4
 800776e:	4628      	mov	r0, r5
 8007770:	f000 fe5c 	bl	800842c <__swsetup_r>
 8007774:	2800      	cmp	r0, #0
 8007776:	d0e9      	beq.n	800774c <_fputs_r+0x24>
 8007778:	f04f 30ff 	mov.w	r0, #4294967295
 800777c:	bd70      	pop	{r4, r5, r6, pc}
 800777e:	68a3      	ldr	r3, [r4, #8]
 8007780:	3b01      	subs	r3, #1
 8007782:	2b00      	cmp	r3, #0
 8007784:	60a3      	str	r3, [r4, #8]
 8007786:	da04      	bge.n	8007792 <_fputs_r+0x6a>
 8007788:	69a2      	ldr	r2, [r4, #24]
 800778a:	4293      	cmp	r3, r2
 800778c:	db06      	blt.n	800779c <_fputs_r+0x74>
 800778e:	290a      	cmp	r1, #10
 8007790:	d004      	beq.n	800779c <_fputs_r+0x74>
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	1c5a      	adds	r2, r3, #1
 8007796:	6022      	str	r2, [r4, #0]
 8007798:	7019      	strb	r1, [r3, #0]
 800779a:	e7d8      	b.n	800774e <_fputs_r+0x26>
 800779c:	4622      	mov	r2, r4
 800779e:	4628      	mov	r0, r5
 80077a0:	f000 fde0 	bl	8008364 <__swbuf_r>
 80077a4:	3001      	adds	r0, #1
 80077a6:	d1d2      	bne.n	800774e <_fputs_r+0x26>
 80077a8:	e7e6      	b.n	8007778 <_fputs_r+0x50>
 80077aa:	bf00      	nop
 80077ac:	0800afd8 	.word	0x0800afd8
 80077b0:	0800aff8 	.word	0x0800aff8
 80077b4:	0800afb8 	.word	0x0800afb8

080077b8 <fputs>:
 80077b8:	4b02      	ldr	r3, [pc, #8]	; (80077c4 <fputs+0xc>)
 80077ba:	460a      	mov	r2, r1
 80077bc:	4601      	mov	r1, r0
 80077be:	6818      	ldr	r0, [r3, #0]
 80077c0:	f7ff bfb2 	b.w	8007728 <_fputs_r>
 80077c4:	20000028 	.word	0x20000028

080077c8 <_fwalk_reent>:
 80077c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077cc:	4680      	mov	r8, r0
 80077ce:	4689      	mov	r9, r1
 80077d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80077d4:	2600      	movs	r6, #0
 80077d6:	b914      	cbnz	r4, 80077de <_fwalk_reent+0x16>
 80077d8:	4630      	mov	r0, r6
 80077da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80077e2:	3f01      	subs	r7, #1
 80077e4:	d501      	bpl.n	80077ea <_fwalk_reent+0x22>
 80077e6:	6824      	ldr	r4, [r4, #0]
 80077e8:	e7f5      	b.n	80077d6 <_fwalk_reent+0xe>
 80077ea:	89ab      	ldrh	r3, [r5, #12]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d907      	bls.n	8007800 <_fwalk_reent+0x38>
 80077f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077f4:	3301      	adds	r3, #1
 80077f6:	d003      	beq.n	8007800 <_fwalk_reent+0x38>
 80077f8:	4629      	mov	r1, r5
 80077fa:	4640      	mov	r0, r8
 80077fc:	47c8      	blx	r9
 80077fe:	4306      	orrs	r6, r0
 8007800:	3568      	adds	r5, #104	; 0x68
 8007802:	e7ee      	b.n	80077e2 <_fwalk_reent+0x1a>

08007804 <__libc_init_array>:
 8007804:	b570      	push	{r4, r5, r6, lr}
 8007806:	4e0d      	ldr	r6, [pc, #52]	; (800783c <__libc_init_array+0x38>)
 8007808:	4c0d      	ldr	r4, [pc, #52]	; (8007840 <__libc_init_array+0x3c>)
 800780a:	1ba4      	subs	r4, r4, r6
 800780c:	10a4      	asrs	r4, r4, #2
 800780e:	2500      	movs	r5, #0
 8007810:	42a5      	cmp	r5, r4
 8007812:	d109      	bne.n	8007828 <__libc_init_array+0x24>
 8007814:	4e0b      	ldr	r6, [pc, #44]	; (8007844 <__libc_init_array+0x40>)
 8007816:	4c0c      	ldr	r4, [pc, #48]	; (8007848 <__libc_init_array+0x44>)
 8007818:	f003 fa84 	bl	800ad24 <_init>
 800781c:	1ba4      	subs	r4, r4, r6
 800781e:	10a4      	asrs	r4, r4, #2
 8007820:	2500      	movs	r5, #0
 8007822:	42a5      	cmp	r5, r4
 8007824:	d105      	bne.n	8007832 <__libc_init_array+0x2e>
 8007826:	bd70      	pop	{r4, r5, r6, pc}
 8007828:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800782c:	4798      	blx	r3
 800782e:	3501      	adds	r5, #1
 8007830:	e7ee      	b.n	8007810 <__libc_init_array+0xc>
 8007832:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007836:	4798      	blx	r3
 8007838:	3501      	adds	r5, #1
 800783a:	e7f2      	b.n	8007822 <__libc_init_array+0x1e>
 800783c:	0800b2c0 	.word	0x0800b2c0
 8007840:	0800b2c0 	.word	0x0800b2c0
 8007844:	0800b2c0 	.word	0x0800b2c0
 8007848:	0800b2c4 	.word	0x0800b2c4

0800784c <memcpy>:
 800784c:	b510      	push	{r4, lr}
 800784e:	1e43      	subs	r3, r0, #1
 8007850:	440a      	add	r2, r1
 8007852:	4291      	cmp	r1, r2
 8007854:	d100      	bne.n	8007858 <memcpy+0xc>
 8007856:	bd10      	pop	{r4, pc}
 8007858:	f811 4b01 	ldrb.w	r4, [r1], #1
 800785c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007860:	e7f7      	b.n	8007852 <memcpy+0x6>

08007862 <memset>:
 8007862:	4402      	add	r2, r0
 8007864:	4603      	mov	r3, r0
 8007866:	4293      	cmp	r3, r2
 8007868:	d100      	bne.n	800786c <memset+0xa>
 800786a:	4770      	bx	lr
 800786c:	f803 1b01 	strb.w	r1, [r3], #1
 8007870:	e7f9      	b.n	8007866 <memset+0x4>
	...

08007874 <_free_r>:
 8007874:	b538      	push	{r3, r4, r5, lr}
 8007876:	4605      	mov	r5, r0
 8007878:	2900      	cmp	r1, #0
 800787a:	d045      	beq.n	8007908 <_free_r+0x94>
 800787c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007880:	1f0c      	subs	r4, r1, #4
 8007882:	2b00      	cmp	r3, #0
 8007884:	bfb8      	it	lt
 8007886:	18e4      	addlt	r4, r4, r3
 8007888:	f001 fd1e 	bl	80092c8 <__malloc_lock>
 800788c:	4a1f      	ldr	r2, [pc, #124]	; (800790c <_free_r+0x98>)
 800788e:	6813      	ldr	r3, [r2, #0]
 8007890:	4610      	mov	r0, r2
 8007892:	b933      	cbnz	r3, 80078a2 <_free_r+0x2e>
 8007894:	6063      	str	r3, [r4, #4]
 8007896:	6014      	str	r4, [r2, #0]
 8007898:	4628      	mov	r0, r5
 800789a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800789e:	f001 bd14 	b.w	80092ca <__malloc_unlock>
 80078a2:	42a3      	cmp	r3, r4
 80078a4:	d90c      	bls.n	80078c0 <_free_r+0x4c>
 80078a6:	6821      	ldr	r1, [r4, #0]
 80078a8:	1862      	adds	r2, r4, r1
 80078aa:	4293      	cmp	r3, r2
 80078ac:	bf04      	itt	eq
 80078ae:	681a      	ldreq	r2, [r3, #0]
 80078b0:	685b      	ldreq	r3, [r3, #4]
 80078b2:	6063      	str	r3, [r4, #4]
 80078b4:	bf04      	itt	eq
 80078b6:	1852      	addeq	r2, r2, r1
 80078b8:	6022      	streq	r2, [r4, #0]
 80078ba:	6004      	str	r4, [r0, #0]
 80078bc:	e7ec      	b.n	8007898 <_free_r+0x24>
 80078be:	4613      	mov	r3, r2
 80078c0:	685a      	ldr	r2, [r3, #4]
 80078c2:	b10a      	cbz	r2, 80078c8 <_free_r+0x54>
 80078c4:	42a2      	cmp	r2, r4
 80078c6:	d9fa      	bls.n	80078be <_free_r+0x4a>
 80078c8:	6819      	ldr	r1, [r3, #0]
 80078ca:	1858      	adds	r0, r3, r1
 80078cc:	42a0      	cmp	r0, r4
 80078ce:	d10b      	bne.n	80078e8 <_free_r+0x74>
 80078d0:	6820      	ldr	r0, [r4, #0]
 80078d2:	4401      	add	r1, r0
 80078d4:	1858      	adds	r0, r3, r1
 80078d6:	4282      	cmp	r2, r0
 80078d8:	6019      	str	r1, [r3, #0]
 80078da:	d1dd      	bne.n	8007898 <_free_r+0x24>
 80078dc:	6810      	ldr	r0, [r2, #0]
 80078de:	6852      	ldr	r2, [r2, #4]
 80078e0:	605a      	str	r2, [r3, #4]
 80078e2:	4401      	add	r1, r0
 80078e4:	6019      	str	r1, [r3, #0]
 80078e6:	e7d7      	b.n	8007898 <_free_r+0x24>
 80078e8:	d902      	bls.n	80078f0 <_free_r+0x7c>
 80078ea:	230c      	movs	r3, #12
 80078ec:	602b      	str	r3, [r5, #0]
 80078ee:	e7d3      	b.n	8007898 <_free_r+0x24>
 80078f0:	6820      	ldr	r0, [r4, #0]
 80078f2:	1821      	adds	r1, r4, r0
 80078f4:	428a      	cmp	r2, r1
 80078f6:	bf04      	itt	eq
 80078f8:	6811      	ldreq	r1, [r2, #0]
 80078fa:	6852      	ldreq	r2, [r2, #4]
 80078fc:	6062      	str	r2, [r4, #4]
 80078fe:	bf04      	itt	eq
 8007900:	1809      	addeq	r1, r1, r0
 8007902:	6021      	streq	r1, [r4, #0]
 8007904:	605c      	str	r4, [r3, #4]
 8007906:	e7c7      	b.n	8007898 <_free_r+0x24>
 8007908:	bd38      	pop	{r3, r4, r5, pc}
 800790a:	bf00      	nop
 800790c:	20001b34 	.word	0x20001b34

08007910 <_malloc_r>:
 8007910:	b570      	push	{r4, r5, r6, lr}
 8007912:	1ccd      	adds	r5, r1, #3
 8007914:	f025 0503 	bic.w	r5, r5, #3
 8007918:	3508      	adds	r5, #8
 800791a:	2d0c      	cmp	r5, #12
 800791c:	bf38      	it	cc
 800791e:	250c      	movcc	r5, #12
 8007920:	2d00      	cmp	r5, #0
 8007922:	4606      	mov	r6, r0
 8007924:	db01      	blt.n	800792a <_malloc_r+0x1a>
 8007926:	42a9      	cmp	r1, r5
 8007928:	d903      	bls.n	8007932 <_malloc_r+0x22>
 800792a:	230c      	movs	r3, #12
 800792c:	6033      	str	r3, [r6, #0]
 800792e:	2000      	movs	r0, #0
 8007930:	bd70      	pop	{r4, r5, r6, pc}
 8007932:	f001 fcc9 	bl	80092c8 <__malloc_lock>
 8007936:	4a21      	ldr	r2, [pc, #132]	; (80079bc <_malloc_r+0xac>)
 8007938:	6814      	ldr	r4, [r2, #0]
 800793a:	4621      	mov	r1, r4
 800793c:	b991      	cbnz	r1, 8007964 <_malloc_r+0x54>
 800793e:	4c20      	ldr	r4, [pc, #128]	; (80079c0 <_malloc_r+0xb0>)
 8007940:	6823      	ldr	r3, [r4, #0]
 8007942:	b91b      	cbnz	r3, 800794c <_malloc_r+0x3c>
 8007944:	4630      	mov	r0, r6
 8007946:	f000 fc99 	bl	800827c <_sbrk_r>
 800794a:	6020      	str	r0, [r4, #0]
 800794c:	4629      	mov	r1, r5
 800794e:	4630      	mov	r0, r6
 8007950:	f000 fc94 	bl	800827c <_sbrk_r>
 8007954:	1c43      	adds	r3, r0, #1
 8007956:	d124      	bne.n	80079a2 <_malloc_r+0x92>
 8007958:	230c      	movs	r3, #12
 800795a:	6033      	str	r3, [r6, #0]
 800795c:	4630      	mov	r0, r6
 800795e:	f001 fcb4 	bl	80092ca <__malloc_unlock>
 8007962:	e7e4      	b.n	800792e <_malloc_r+0x1e>
 8007964:	680b      	ldr	r3, [r1, #0]
 8007966:	1b5b      	subs	r3, r3, r5
 8007968:	d418      	bmi.n	800799c <_malloc_r+0x8c>
 800796a:	2b0b      	cmp	r3, #11
 800796c:	d90f      	bls.n	800798e <_malloc_r+0x7e>
 800796e:	600b      	str	r3, [r1, #0]
 8007970:	50cd      	str	r5, [r1, r3]
 8007972:	18cc      	adds	r4, r1, r3
 8007974:	4630      	mov	r0, r6
 8007976:	f001 fca8 	bl	80092ca <__malloc_unlock>
 800797a:	f104 000b 	add.w	r0, r4, #11
 800797e:	1d23      	adds	r3, r4, #4
 8007980:	f020 0007 	bic.w	r0, r0, #7
 8007984:	1ac3      	subs	r3, r0, r3
 8007986:	d0d3      	beq.n	8007930 <_malloc_r+0x20>
 8007988:	425a      	negs	r2, r3
 800798a:	50e2      	str	r2, [r4, r3]
 800798c:	e7d0      	b.n	8007930 <_malloc_r+0x20>
 800798e:	428c      	cmp	r4, r1
 8007990:	684b      	ldr	r3, [r1, #4]
 8007992:	bf16      	itet	ne
 8007994:	6063      	strne	r3, [r4, #4]
 8007996:	6013      	streq	r3, [r2, #0]
 8007998:	460c      	movne	r4, r1
 800799a:	e7eb      	b.n	8007974 <_malloc_r+0x64>
 800799c:	460c      	mov	r4, r1
 800799e:	6849      	ldr	r1, [r1, #4]
 80079a0:	e7cc      	b.n	800793c <_malloc_r+0x2c>
 80079a2:	1cc4      	adds	r4, r0, #3
 80079a4:	f024 0403 	bic.w	r4, r4, #3
 80079a8:	42a0      	cmp	r0, r4
 80079aa:	d005      	beq.n	80079b8 <_malloc_r+0xa8>
 80079ac:	1a21      	subs	r1, r4, r0
 80079ae:	4630      	mov	r0, r6
 80079b0:	f000 fc64 	bl	800827c <_sbrk_r>
 80079b4:	3001      	adds	r0, #1
 80079b6:	d0cf      	beq.n	8007958 <_malloc_r+0x48>
 80079b8:	6025      	str	r5, [r4, #0]
 80079ba:	e7db      	b.n	8007974 <_malloc_r+0x64>
 80079bc:	20001b34 	.word	0x20001b34
 80079c0:	20001b38 	.word	0x20001b38

080079c4 <__cvt>:
 80079c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079c8:	ec55 4b10 	vmov	r4, r5, d0
 80079cc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80079ce:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80079d2:	2d00      	cmp	r5, #0
 80079d4:	460e      	mov	r6, r1
 80079d6:	4691      	mov	r9, r2
 80079d8:	4619      	mov	r1, r3
 80079da:	bfb8      	it	lt
 80079dc:	4622      	movlt	r2, r4
 80079de:	462b      	mov	r3, r5
 80079e0:	f027 0720 	bic.w	r7, r7, #32
 80079e4:	bfbb      	ittet	lt
 80079e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80079ea:	461d      	movlt	r5, r3
 80079ec:	2300      	movge	r3, #0
 80079ee:	232d      	movlt	r3, #45	; 0x2d
 80079f0:	bfb8      	it	lt
 80079f2:	4614      	movlt	r4, r2
 80079f4:	2f46      	cmp	r7, #70	; 0x46
 80079f6:	700b      	strb	r3, [r1, #0]
 80079f8:	d004      	beq.n	8007a04 <__cvt+0x40>
 80079fa:	2f45      	cmp	r7, #69	; 0x45
 80079fc:	d100      	bne.n	8007a00 <__cvt+0x3c>
 80079fe:	3601      	adds	r6, #1
 8007a00:	2102      	movs	r1, #2
 8007a02:	e000      	b.n	8007a06 <__cvt+0x42>
 8007a04:	2103      	movs	r1, #3
 8007a06:	ab03      	add	r3, sp, #12
 8007a08:	9301      	str	r3, [sp, #4]
 8007a0a:	ab02      	add	r3, sp, #8
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	4632      	mov	r2, r6
 8007a10:	4653      	mov	r3, sl
 8007a12:	ec45 4b10 	vmov	d0, r4, r5
 8007a16:	f000 fe13 	bl	8008640 <_dtoa_r>
 8007a1a:	2f47      	cmp	r7, #71	; 0x47
 8007a1c:	4680      	mov	r8, r0
 8007a1e:	d102      	bne.n	8007a26 <__cvt+0x62>
 8007a20:	f019 0f01 	tst.w	r9, #1
 8007a24:	d026      	beq.n	8007a74 <__cvt+0xb0>
 8007a26:	2f46      	cmp	r7, #70	; 0x46
 8007a28:	eb08 0906 	add.w	r9, r8, r6
 8007a2c:	d111      	bne.n	8007a52 <__cvt+0x8e>
 8007a2e:	f898 3000 	ldrb.w	r3, [r8]
 8007a32:	2b30      	cmp	r3, #48	; 0x30
 8007a34:	d10a      	bne.n	8007a4c <__cvt+0x88>
 8007a36:	2200      	movs	r2, #0
 8007a38:	2300      	movs	r3, #0
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	4629      	mov	r1, r5
 8007a3e:	f7f9 f84b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a42:	b918      	cbnz	r0, 8007a4c <__cvt+0x88>
 8007a44:	f1c6 0601 	rsb	r6, r6, #1
 8007a48:	f8ca 6000 	str.w	r6, [sl]
 8007a4c:	f8da 3000 	ldr.w	r3, [sl]
 8007a50:	4499      	add	r9, r3
 8007a52:	2200      	movs	r2, #0
 8007a54:	2300      	movs	r3, #0
 8007a56:	4620      	mov	r0, r4
 8007a58:	4629      	mov	r1, r5
 8007a5a:	f7f9 f83d 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a5e:	b938      	cbnz	r0, 8007a70 <__cvt+0xac>
 8007a60:	2230      	movs	r2, #48	; 0x30
 8007a62:	9b03      	ldr	r3, [sp, #12]
 8007a64:	454b      	cmp	r3, r9
 8007a66:	d205      	bcs.n	8007a74 <__cvt+0xb0>
 8007a68:	1c59      	adds	r1, r3, #1
 8007a6a:	9103      	str	r1, [sp, #12]
 8007a6c:	701a      	strb	r2, [r3, #0]
 8007a6e:	e7f8      	b.n	8007a62 <__cvt+0x9e>
 8007a70:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a74:	9b03      	ldr	r3, [sp, #12]
 8007a76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a78:	eba3 0308 	sub.w	r3, r3, r8
 8007a7c:	4640      	mov	r0, r8
 8007a7e:	6013      	str	r3, [r2, #0]
 8007a80:	b004      	add	sp, #16
 8007a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007a86 <__exponent>:
 8007a86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a88:	2900      	cmp	r1, #0
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	bfba      	itte	lt
 8007a8e:	4249      	neglt	r1, r1
 8007a90:	232d      	movlt	r3, #45	; 0x2d
 8007a92:	232b      	movge	r3, #43	; 0x2b
 8007a94:	2909      	cmp	r1, #9
 8007a96:	f804 2b02 	strb.w	r2, [r4], #2
 8007a9a:	7043      	strb	r3, [r0, #1]
 8007a9c:	dd20      	ble.n	8007ae0 <__exponent+0x5a>
 8007a9e:	f10d 0307 	add.w	r3, sp, #7
 8007aa2:	461f      	mov	r7, r3
 8007aa4:	260a      	movs	r6, #10
 8007aa6:	fb91 f5f6 	sdiv	r5, r1, r6
 8007aaa:	fb06 1115 	mls	r1, r6, r5, r1
 8007aae:	3130      	adds	r1, #48	; 0x30
 8007ab0:	2d09      	cmp	r5, #9
 8007ab2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007ab6:	f103 32ff 	add.w	r2, r3, #4294967295
 8007aba:	4629      	mov	r1, r5
 8007abc:	dc09      	bgt.n	8007ad2 <__exponent+0x4c>
 8007abe:	3130      	adds	r1, #48	; 0x30
 8007ac0:	3b02      	subs	r3, #2
 8007ac2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007ac6:	42bb      	cmp	r3, r7
 8007ac8:	4622      	mov	r2, r4
 8007aca:	d304      	bcc.n	8007ad6 <__exponent+0x50>
 8007acc:	1a10      	subs	r0, r2, r0
 8007ace:	b003      	add	sp, #12
 8007ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	e7e7      	b.n	8007aa6 <__exponent+0x20>
 8007ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ada:	f804 2b01 	strb.w	r2, [r4], #1
 8007ade:	e7f2      	b.n	8007ac6 <__exponent+0x40>
 8007ae0:	2330      	movs	r3, #48	; 0x30
 8007ae2:	4419      	add	r1, r3
 8007ae4:	7083      	strb	r3, [r0, #2]
 8007ae6:	1d02      	adds	r2, r0, #4
 8007ae8:	70c1      	strb	r1, [r0, #3]
 8007aea:	e7ef      	b.n	8007acc <__exponent+0x46>

08007aec <_printf_float>:
 8007aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af0:	b08d      	sub	sp, #52	; 0x34
 8007af2:	460c      	mov	r4, r1
 8007af4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007af8:	4616      	mov	r6, r2
 8007afa:	461f      	mov	r7, r3
 8007afc:	4605      	mov	r5, r0
 8007afe:	f001 fb57 	bl	80091b0 <_localeconv_r>
 8007b02:	6803      	ldr	r3, [r0, #0]
 8007b04:	9304      	str	r3, [sp, #16]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7f8 fb6a 	bl	80001e0 <strlen>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	930a      	str	r3, [sp, #40]	; 0x28
 8007b10:	f8d8 3000 	ldr.w	r3, [r8]
 8007b14:	9005      	str	r0, [sp, #20]
 8007b16:	3307      	adds	r3, #7
 8007b18:	f023 0307 	bic.w	r3, r3, #7
 8007b1c:	f103 0208 	add.w	r2, r3, #8
 8007b20:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007b24:	f8d4 b000 	ldr.w	fp, [r4]
 8007b28:	f8c8 2000 	str.w	r2, [r8]
 8007b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b30:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007b34:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007b38:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b3c:	9307      	str	r3, [sp, #28]
 8007b3e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b42:	f04f 32ff 	mov.w	r2, #4294967295
 8007b46:	4ba7      	ldr	r3, [pc, #668]	; (8007de4 <_printf_float+0x2f8>)
 8007b48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b4c:	f7f8 fff6 	bl	8000b3c <__aeabi_dcmpun>
 8007b50:	bb70      	cbnz	r0, 8007bb0 <_printf_float+0xc4>
 8007b52:	f04f 32ff 	mov.w	r2, #4294967295
 8007b56:	4ba3      	ldr	r3, [pc, #652]	; (8007de4 <_printf_float+0x2f8>)
 8007b58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b5c:	f7f8 ffd0 	bl	8000b00 <__aeabi_dcmple>
 8007b60:	bb30      	cbnz	r0, 8007bb0 <_printf_float+0xc4>
 8007b62:	2200      	movs	r2, #0
 8007b64:	2300      	movs	r3, #0
 8007b66:	4640      	mov	r0, r8
 8007b68:	4649      	mov	r1, r9
 8007b6a:	f7f8 ffbf 	bl	8000aec <__aeabi_dcmplt>
 8007b6e:	b110      	cbz	r0, 8007b76 <_printf_float+0x8a>
 8007b70:	232d      	movs	r3, #45	; 0x2d
 8007b72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b76:	4a9c      	ldr	r2, [pc, #624]	; (8007de8 <_printf_float+0x2fc>)
 8007b78:	4b9c      	ldr	r3, [pc, #624]	; (8007dec <_printf_float+0x300>)
 8007b7a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007b7e:	bf8c      	ite	hi
 8007b80:	4690      	movhi	r8, r2
 8007b82:	4698      	movls	r8, r3
 8007b84:	2303      	movs	r3, #3
 8007b86:	f02b 0204 	bic.w	r2, fp, #4
 8007b8a:	6123      	str	r3, [r4, #16]
 8007b8c:	6022      	str	r2, [r4, #0]
 8007b8e:	f04f 0900 	mov.w	r9, #0
 8007b92:	9700      	str	r7, [sp, #0]
 8007b94:	4633      	mov	r3, r6
 8007b96:	aa0b      	add	r2, sp, #44	; 0x2c
 8007b98:	4621      	mov	r1, r4
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	f000 f9e6 	bl	8007f6c <_printf_common>
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	f040 808d 	bne.w	8007cc0 <_printf_float+0x1d4>
 8007ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8007baa:	b00d      	add	sp, #52	; 0x34
 8007bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb0:	4642      	mov	r2, r8
 8007bb2:	464b      	mov	r3, r9
 8007bb4:	4640      	mov	r0, r8
 8007bb6:	4649      	mov	r1, r9
 8007bb8:	f7f8 ffc0 	bl	8000b3c <__aeabi_dcmpun>
 8007bbc:	b110      	cbz	r0, 8007bc4 <_printf_float+0xd8>
 8007bbe:	4a8c      	ldr	r2, [pc, #560]	; (8007df0 <_printf_float+0x304>)
 8007bc0:	4b8c      	ldr	r3, [pc, #560]	; (8007df4 <_printf_float+0x308>)
 8007bc2:	e7da      	b.n	8007b7a <_printf_float+0x8e>
 8007bc4:	6861      	ldr	r1, [r4, #4]
 8007bc6:	1c4b      	adds	r3, r1, #1
 8007bc8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007bcc:	a80a      	add	r0, sp, #40	; 0x28
 8007bce:	d13e      	bne.n	8007c4e <_printf_float+0x162>
 8007bd0:	2306      	movs	r3, #6
 8007bd2:	6063      	str	r3, [r4, #4]
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007bda:	ab09      	add	r3, sp, #36	; 0x24
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	ec49 8b10 	vmov	d0, r8, r9
 8007be2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007be6:	6022      	str	r2, [r4, #0]
 8007be8:	f8cd a004 	str.w	sl, [sp, #4]
 8007bec:	6861      	ldr	r1, [r4, #4]
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f7ff fee8 	bl	80079c4 <__cvt>
 8007bf4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007bf8:	2b47      	cmp	r3, #71	; 0x47
 8007bfa:	4680      	mov	r8, r0
 8007bfc:	d109      	bne.n	8007c12 <_printf_float+0x126>
 8007bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c00:	1cd8      	adds	r0, r3, #3
 8007c02:	db02      	blt.n	8007c0a <_printf_float+0x11e>
 8007c04:	6862      	ldr	r2, [r4, #4]
 8007c06:	4293      	cmp	r3, r2
 8007c08:	dd47      	ble.n	8007c9a <_printf_float+0x1ae>
 8007c0a:	f1aa 0a02 	sub.w	sl, sl, #2
 8007c0e:	fa5f fa8a 	uxtb.w	sl, sl
 8007c12:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007c16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c18:	d824      	bhi.n	8007c64 <_printf_float+0x178>
 8007c1a:	3901      	subs	r1, #1
 8007c1c:	4652      	mov	r2, sl
 8007c1e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007c22:	9109      	str	r1, [sp, #36]	; 0x24
 8007c24:	f7ff ff2f 	bl	8007a86 <__exponent>
 8007c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c2a:	1813      	adds	r3, r2, r0
 8007c2c:	2a01      	cmp	r2, #1
 8007c2e:	4681      	mov	r9, r0
 8007c30:	6123      	str	r3, [r4, #16]
 8007c32:	dc02      	bgt.n	8007c3a <_printf_float+0x14e>
 8007c34:	6822      	ldr	r2, [r4, #0]
 8007c36:	07d1      	lsls	r1, r2, #31
 8007c38:	d501      	bpl.n	8007c3e <_printf_float+0x152>
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	6123      	str	r3, [r4, #16]
 8007c3e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0a5      	beq.n	8007b92 <_printf_float+0xa6>
 8007c46:	232d      	movs	r3, #45	; 0x2d
 8007c48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c4c:	e7a1      	b.n	8007b92 <_printf_float+0xa6>
 8007c4e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007c52:	f000 8177 	beq.w	8007f44 <_printf_float+0x458>
 8007c56:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007c5a:	d1bb      	bne.n	8007bd4 <_printf_float+0xe8>
 8007c5c:	2900      	cmp	r1, #0
 8007c5e:	d1b9      	bne.n	8007bd4 <_printf_float+0xe8>
 8007c60:	2301      	movs	r3, #1
 8007c62:	e7b6      	b.n	8007bd2 <_printf_float+0xe6>
 8007c64:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007c68:	d119      	bne.n	8007c9e <_printf_float+0x1b2>
 8007c6a:	2900      	cmp	r1, #0
 8007c6c:	6863      	ldr	r3, [r4, #4]
 8007c6e:	dd0c      	ble.n	8007c8a <_printf_float+0x19e>
 8007c70:	6121      	str	r1, [r4, #16]
 8007c72:	b913      	cbnz	r3, 8007c7a <_printf_float+0x18e>
 8007c74:	6822      	ldr	r2, [r4, #0]
 8007c76:	07d2      	lsls	r2, r2, #31
 8007c78:	d502      	bpl.n	8007c80 <_printf_float+0x194>
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	440b      	add	r3, r1
 8007c7e:	6123      	str	r3, [r4, #16]
 8007c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c82:	65a3      	str	r3, [r4, #88]	; 0x58
 8007c84:	f04f 0900 	mov.w	r9, #0
 8007c88:	e7d9      	b.n	8007c3e <_printf_float+0x152>
 8007c8a:	b913      	cbnz	r3, 8007c92 <_printf_float+0x1a6>
 8007c8c:	6822      	ldr	r2, [r4, #0]
 8007c8e:	07d0      	lsls	r0, r2, #31
 8007c90:	d501      	bpl.n	8007c96 <_printf_float+0x1aa>
 8007c92:	3302      	adds	r3, #2
 8007c94:	e7f3      	b.n	8007c7e <_printf_float+0x192>
 8007c96:	2301      	movs	r3, #1
 8007c98:	e7f1      	b.n	8007c7e <_printf_float+0x192>
 8007c9a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007c9e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	db05      	blt.n	8007cb2 <_printf_float+0x1c6>
 8007ca6:	6822      	ldr	r2, [r4, #0]
 8007ca8:	6123      	str	r3, [r4, #16]
 8007caa:	07d1      	lsls	r1, r2, #31
 8007cac:	d5e8      	bpl.n	8007c80 <_printf_float+0x194>
 8007cae:	3301      	adds	r3, #1
 8007cb0:	e7e5      	b.n	8007c7e <_printf_float+0x192>
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	bfd4      	ite	le
 8007cb6:	f1c3 0302 	rsble	r3, r3, #2
 8007cba:	2301      	movgt	r3, #1
 8007cbc:	4413      	add	r3, r2
 8007cbe:	e7de      	b.n	8007c7e <_printf_float+0x192>
 8007cc0:	6823      	ldr	r3, [r4, #0]
 8007cc2:	055a      	lsls	r2, r3, #21
 8007cc4:	d407      	bmi.n	8007cd6 <_printf_float+0x1ea>
 8007cc6:	6923      	ldr	r3, [r4, #16]
 8007cc8:	4642      	mov	r2, r8
 8007cca:	4631      	mov	r1, r6
 8007ccc:	4628      	mov	r0, r5
 8007cce:	47b8      	blx	r7
 8007cd0:	3001      	adds	r0, #1
 8007cd2:	d12b      	bne.n	8007d2c <_printf_float+0x240>
 8007cd4:	e767      	b.n	8007ba6 <_printf_float+0xba>
 8007cd6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007cda:	f240 80dc 	bls.w	8007e96 <_printf_float+0x3aa>
 8007cde:	2200      	movs	r2, #0
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ce6:	f7f8 fef7 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d033      	beq.n	8007d56 <_printf_float+0x26a>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	4a41      	ldr	r2, [pc, #260]	; (8007df8 <_printf_float+0x30c>)
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	47b8      	blx	r7
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	f43f af54 	beq.w	8007ba6 <_printf_float+0xba>
 8007cfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d02:	429a      	cmp	r2, r3
 8007d04:	db02      	blt.n	8007d0c <_printf_float+0x220>
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	07d8      	lsls	r0, r3, #31
 8007d0a:	d50f      	bpl.n	8007d2c <_printf_float+0x240>
 8007d0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d10:	4631      	mov	r1, r6
 8007d12:	4628      	mov	r0, r5
 8007d14:	47b8      	blx	r7
 8007d16:	3001      	adds	r0, #1
 8007d18:	f43f af45 	beq.w	8007ba6 <_printf_float+0xba>
 8007d1c:	f04f 0800 	mov.w	r8, #0
 8007d20:	f104 091a 	add.w	r9, r4, #26
 8007d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d26:	3b01      	subs	r3, #1
 8007d28:	4543      	cmp	r3, r8
 8007d2a:	dc09      	bgt.n	8007d40 <_printf_float+0x254>
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	079b      	lsls	r3, r3, #30
 8007d30:	f100 8103 	bmi.w	8007f3a <_printf_float+0x44e>
 8007d34:	68e0      	ldr	r0, [r4, #12]
 8007d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d38:	4298      	cmp	r0, r3
 8007d3a:	bfb8      	it	lt
 8007d3c:	4618      	movlt	r0, r3
 8007d3e:	e734      	b.n	8007baa <_printf_float+0xbe>
 8007d40:	2301      	movs	r3, #1
 8007d42:	464a      	mov	r2, r9
 8007d44:	4631      	mov	r1, r6
 8007d46:	4628      	mov	r0, r5
 8007d48:	47b8      	blx	r7
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	f43f af2b 	beq.w	8007ba6 <_printf_float+0xba>
 8007d50:	f108 0801 	add.w	r8, r8, #1
 8007d54:	e7e6      	b.n	8007d24 <_printf_float+0x238>
 8007d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	dc2b      	bgt.n	8007db4 <_printf_float+0x2c8>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	4a26      	ldr	r2, [pc, #152]	; (8007df8 <_printf_float+0x30c>)
 8007d60:	4631      	mov	r1, r6
 8007d62:	4628      	mov	r0, r5
 8007d64:	47b8      	blx	r7
 8007d66:	3001      	adds	r0, #1
 8007d68:	f43f af1d 	beq.w	8007ba6 <_printf_float+0xba>
 8007d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d6e:	b923      	cbnz	r3, 8007d7a <_printf_float+0x28e>
 8007d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d72:	b913      	cbnz	r3, 8007d7a <_printf_float+0x28e>
 8007d74:	6823      	ldr	r3, [r4, #0]
 8007d76:	07d9      	lsls	r1, r3, #31
 8007d78:	d5d8      	bpl.n	8007d2c <_printf_float+0x240>
 8007d7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d7e:	4631      	mov	r1, r6
 8007d80:	4628      	mov	r0, r5
 8007d82:	47b8      	blx	r7
 8007d84:	3001      	adds	r0, #1
 8007d86:	f43f af0e 	beq.w	8007ba6 <_printf_float+0xba>
 8007d8a:	f04f 0900 	mov.w	r9, #0
 8007d8e:	f104 0a1a 	add.w	sl, r4, #26
 8007d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d94:	425b      	negs	r3, r3
 8007d96:	454b      	cmp	r3, r9
 8007d98:	dc01      	bgt.n	8007d9e <_printf_float+0x2b2>
 8007d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d9c:	e794      	b.n	8007cc8 <_printf_float+0x1dc>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	4652      	mov	r2, sl
 8007da2:	4631      	mov	r1, r6
 8007da4:	4628      	mov	r0, r5
 8007da6:	47b8      	blx	r7
 8007da8:	3001      	adds	r0, #1
 8007daa:	f43f aefc 	beq.w	8007ba6 <_printf_float+0xba>
 8007dae:	f109 0901 	add.w	r9, r9, #1
 8007db2:	e7ee      	b.n	8007d92 <_printf_float+0x2a6>
 8007db4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007db6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007db8:	429a      	cmp	r2, r3
 8007dba:	bfa8      	it	ge
 8007dbc:	461a      	movge	r2, r3
 8007dbe:	2a00      	cmp	r2, #0
 8007dc0:	4691      	mov	r9, r2
 8007dc2:	dd07      	ble.n	8007dd4 <_printf_float+0x2e8>
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	4631      	mov	r1, r6
 8007dc8:	4642      	mov	r2, r8
 8007dca:	4628      	mov	r0, r5
 8007dcc:	47b8      	blx	r7
 8007dce:	3001      	adds	r0, #1
 8007dd0:	f43f aee9 	beq.w	8007ba6 <_printf_float+0xba>
 8007dd4:	f104 031a 	add.w	r3, r4, #26
 8007dd8:	f04f 0b00 	mov.w	fp, #0
 8007ddc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007de0:	9306      	str	r3, [sp, #24]
 8007de2:	e015      	b.n	8007e10 <_printf_float+0x324>
 8007de4:	7fefffff 	.word	0x7fefffff
 8007de8:	0800b020 	.word	0x0800b020
 8007dec:	0800b01c 	.word	0x0800b01c
 8007df0:	0800b028 	.word	0x0800b028
 8007df4:	0800b024 	.word	0x0800b024
 8007df8:	0800b02c 	.word	0x0800b02c
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	9a06      	ldr	r2, [sp, #24]
 8007e00:	4631      	mov	r1, r6
 8007e02:	4628      	mov	r0, r5
 8007e04:	47b8      	blx	r7
 8007e06:	3001      	adds	r0, #1
 8007e08:	f43f aecd 	beq.w	8007ba6 <_printf_float+0xba>
 8007e0c:	f10b 0b01 	add.w	fp, fp, #1
 8007e10:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007e14:	ebaa 0309 	sub.w	r3, sl, r9
 8007e18:	455b      	cmp	r3, fp
 8007e1a:	dcef      	bgt.n	8007dfc <_printf_float+0x310>
 8007e1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e20:	429a      	cmp	r2, r3
 8007e22:	44d0      	add	r8, sl
 8007e24:	db15      	blt.n	8007e52 <_printf_float+0x366>
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	07da      	lsls	r2, r3, #31
 8007e2a:	d412      	bmi.n	8007e52 <_printf_float+0x366>
 8007e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e30:	eba3 020a 	sub.w	r2, r3, sl
 8007e34:	eba3 0a01 	sub.w	sl, r3, r1
 8007e38:	4592      	cmp	sl, r2
 8007e3a:	bfa8      	it	ge
 8007e3c:	4692      	movge	sl, r2
 8007e3e:	f1ba 0f00 	cmp.w	sl, #0
 8007e42:	dc0e      	bgt.n	8007e62 <_printf_float+0x376>
 8007e44:	f04f 0800 	mov.w	r8, #0
 8007e48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e4c:	f104 091a 	add.w	r9, r4, #26
 8007e50:	e019      	b.n	8007e86 <_printf_float+0x39a>
 8007e52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e56:	4631      	mov	r1, r6
 8007e58:	4628      	mov	r0, r5
 8007e5a:	47b8      	blx	r7
 8007e5c:	3001      	adds	r0, #1
 8007e5e:	d1e5      	bne.n	8007e2c <_printf_float+0x340>
 8007e60:	e6a1      	b.n	8007ba6 <_printf_float+0xba>
 8007e62:	4653      	mov	r3, sl
 8007e64:	4642      	mov	r2, r8
 8007e66:	4631      	mov	r1, r6
 8007e68:	4628      	mov	r0, r5
 8007e6a:	47b8      	blx	r7
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d1e9      	bne.n	8007e44 <_printf_float+0x358>
 8007e70:	e699      	b.n	8007ba6 <_printf_float+0xba>
 8007e72:	2301      	movs	r3, #1
 8007e74:	464a      	mov	r2, r9
 8007e76:	4631      	mov	r1, r6
 8007e78:	4628      	mov	r0, r5
 8007e7a:	47b8      	blx	r7
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	f43f ae92 	beq.w	8007ba6 <_printf_float+0xba>
 8007e82:	f108 0801 	add.w	r8, r8, #1
 8007e86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e8a:	1a9b      	subs	r3, r3, r2
 8007e8c:	eba3 030a 	sub.w	r3, r3, sl
 8007e90:	4543      	cmp	r3, r8
 8007e92:	dcee      	bgt.n	8007e72 <_printf_float+0x386>
 8007e94:	e74a      	b.n	8007d2c <_printf_float+0x240>
 8007e96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e98:	2a01      	cmp	r2, #1
 8007e9a:	dc01      	bgt.n	8007ea0 <_printf_float+0x3b4>
 8007e9c:	07db      	lsls	r3, r3, #31
 8007e9e:	d53a      	bpl.n	8007f16 <_printf_float+0x42a>
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	4642      	mov	r2, r8
 8007ea4:	4631      	mov	r1, r6
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	47b8      	blx	r7
 8007eaa:	3001      	adds	r0, #1
 8007eac:	f43f ae7b 	beq.w	8007ba6 <_printf_float+0xba>
 8007eb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007eb4:	4631      	mov	r1, r6
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	47b8      	blx	r7
 8007eba:	3001      	adds	r0, #1
 8007ebc:	f108 0801 	add.w	r8, r8, #1
 8007ec0:	f43f ae71 	beq.w	8007ba6 <_printf_float+0xba>
 8007ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f103 3aff 	add.w	sl, r3, #4294967295
 8007ecc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	f7f8 fe01 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ed6:	b9c8      	cbnz	r0, 8007f0c <_printf_float+0x420>
 8007ed8:	4653      	mov	r3, sl
 8007eda:	4642      	mov	r2, r8
 8007edc:	4631      	mov	r1, r6
 8007ede:	4628      	mov	r0, r5
 8007ee0:	47b8      	blx	r7
 8007ee2:	3001      	adds	r0, #1
 8007ee4:	d10e      	bne.n	8007f04 <_printf_float+0x418>
 8007ee6:	e65e      	b.n	8007ba6 <_printf_float+0xba>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	4652      	mov	r2, sl
 8007eec:	4631      	mov	r1, r6
 8007eee:	4628      	mov	r0, r5
 8007ef0:	47b8      	blx	r7
 8007ef2:	3001      	adds	r0, #1
 8007ef4:	f43f ae57 	beq.w	8007ba6 <_printf_float+0xba>
 8007ef8:	f108 0801 	add.w	r8, r8, #1
 8007efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007efe:	3b01      	subs	r3, #1
 8007f00:	4543      	cmp	r3, r8
 8007f02:	dcf1      	bgt.n	8007ee8 <_printf_float+0x3fc>
 8007f04:	464b      	mov	r3, r9
 8007f06:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007f0a:	e6de      	b.n	8007cca <_printf_float+0x1de>
 8007f0c:	f04f 0800 	mov.w	r8, #0
 8007f10:	f104 0a1a 	add.w	sl, r4, #26
 8007f14:	e7f2      	b.n	8007efc <_printf_float+0x410>
 8007f16:	2301      	movs	r3, #1
 8007f18:	e7df      	b.n	8007eda <_printf_float+0x3ee>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	464a      	mov	r2, r9
 8007f1e:	4631      	mov	r1, r6
 8007f20:	4628      	mov	r0, r5
 8007f22:	47b8      	blx	r7
 8007f24:	3001      	adds	r0, #1
 8007f26:	f43f ae3e 	beq.w	8007ba6 <_printf_float+0xba>
 8007f2a:	f108 0801 	add.w	r8, r8, #1
 8007f2e:	68e3      	ldr	r3, [r4, #12]
 8007f30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f32:	1a9b      	subs	r3, r3, r2
 8007f34:	4543      	cmp	r3, r8
 8007f36:	dcf0      	bgt.n	8007f1a <_printf_float+0x42e>
 8007f38:	e6fc      	b.n	8007d34 <_printf_float+0x248>
 8007f3a:	f04f 0800 	mov.w	r8, #0
 8007f3e:	f104 0919 	add.w	r9, r4, #25
 8007f42:	e7f4      	b.n	8007f2e <_printf_float+0x442>
 8007f44:	2900      	cmp	r1, #0
 8007f46:	f43f ae8b 	beq.w	8007c60 <_printf_float+0x174>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007f50:	ab09      	add	r3, sp, #36	; 0x24
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	ec49 8b10 	vmov	d0, r8, r9
 8007f58:	6022      	str	r2, [r4, #0]
 8007f5a:	f8cd a004 	str.w	sl, [sp, #4]
 8007f5e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f62:	4628      	mov	r0, r5
 8007f64:	f7ff fd2e 	bl	80079c4 <__cvt>
 8007f68:	4680      	mov	r8, r0
 8007f6a:	e648      	b.n	8007bfe <_printf_float+0x112>

08007f6c <_printf_common>:
 8007f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f70:	4691      	mov	r9, r2
 8007f72:	461f      	mov	r7, r3
 8007f74:	688a      	ldr	r2, [r1, #8]
 8007f76:	690b      	ldr	r3, [r1, #16]
 8007f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	bfb8      	it	lt
 8007f80:	4613      	movlt	r3, r2
 8007f82:	f8c9 3000 	str.w	r3, [r9]
 8007f86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f8a:	4606      	mov	r6, r0
 8007f8c:	460c      	mov	r4, r1
 8007f8e:	b112      	cbz	r2, 8007f96 <_printf_common+0x2a>
 8007f90:	3301      	adds	r3, #1
 8007f92:	f8c9 3000 	str.w	r3, [r9]
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	0699      	lsls	r1, r3, #26
 8007f9a:	bf42      	ittt	mi
 8007f9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007fa0:	3302      	addmi	r3, #2
 8007fa2:	f8c9 3000 	strmi.w	r3, [r9]
 8007fa6:	6825      	ldr	r5, [r4, #0]
 8007fa8:	f015 0506 	ands.w	r5, r5, #6
 8007fac:	d107      	bne.n	8007fbe <_printf_common+0x52>
 8007fae:	f104 0a19 	add.w	sl, r4, #25
 8007fb2:	68e3      	ldr	r3, [r4, #12]
 8007fb4:	f8d9 2000 	ldr.w	r2, [r9]
 8007fb8:	1a9b      	subs	r3, r3, r2
 8007fba:	42ab      	cmp	r3, r5
 8007fbc:	dc28      	bgt.n	8008010 <_printf_common+0xa4>
 8007fbe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007fc2:	6822      	ldr	r2, [r4, #0]
 8007fc4:	3300      	adds	r3, #0
 8007fc6:	bf18      	it	ne
 8007fc8:	2301      	movne	r3, #1
 8007fca:	0692      	lsls	r2, r2, #26
 8007fcc:	d42d      	bmi.n	800802a <_printf_common+0xbe>
 8007fce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fd2:	4639      	mov	r1, r7
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	47c0      	blx	r8
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d020      	beq.n	800801e <_printf_common+0xb2>
 8007fdc:	6823      	ldr	r3, [r4, #0]
 8007fde:	68e5      	ldr	r5, [r4, #12]
 8007fe0:	f8d9 2000 	ldr.w	r2, [r9]
 8007fe4:	f003 0306 	and.w	r3, r3, #6
 8007fe8:	2b04      	cmp	r3, #4
 8007fea:	bf08      	it	eq
 8007fec:	1aad      	subeq	r5, r5, r2
 8007fee:	68a3      	ldr	r3, [r4, #8]
 8007ff0:	6922      	ldr	r2, [r4, #16]
 8007ff2:	bf0c      	ite	eq
 8007ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ff8:	2500      	movne	r5, #0
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	bfc4      	itt	gt
 8007ffe:	1a9b      	subgt	r3, r3, r2
 8008000:	18ed      	addgt	r5, r5, r3
 8008002:	f04f 0900 	mov.w	r9, #0
 8008006:	341a      	adds	r4, #26
 8008008:	454d      	cmp	r5, r9
 800800a:	d11a      	bne.n	8008042 <_printf_common+0xd6>
 800800c:	2000      	movs	r0, #0
 800800e:	e008      	b.n	8008022 <_printf_common+0xb6>
 8008010:	2301      	movs	r3, #1
 8008012:	4652      	mov	r2, sl
 8008014:	4639      	mov	r1, r7
 8008016:	4630      	mov	r0, r6
 8008018:	47c0      	blx	r8
 800801a:	3001      	adds	r0, #1
 800801c:	d103      	bne.n	8008026 <_printf_common+0xba>
 800801e:	f04f 30ff 	mov.w	r0, #4294967295
 8008022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008026:	3501      	adds	r5, #1
 8008028:	e7c3      	b.n	8007fb2 <_printf_common+0x46>
 800802a:	18e1      	adds	r1, r4, r3
 800802c:	1c5a      	adds	r2, r3, #1
 800802e:	2030      	movs	r0, #48	; 0x30
 8008030:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008034:	4422      	add	r2, r4
 8008036:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800803a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800803e:	3302      	adds	r3, #2
 8008040:	e7c5      	b.n	8007fce <_printf_common+0x62>
 8008042:	2301      	movs	r3, #1
 8008044:	4622      	mov	r2, r4
 8008046:	4639      	mov	r1, r7
 8008048:	4630      	mov	r0, r6
 800804a:	47c0      	blx	r8
 800804c:	3001      	adds	r0, #1
 800804e:	d0e6      	beq.n	800801e <_printf_common+0xb2>
 8008050:	f109 0901 	add.w	r9, r9, #1
 8008054:	e7d8      	b.n	8008008 <_printf_common+0x9c>
	...

08008058 <_printf_i>:
 8008058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800805c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008060:	460c      	mov	r4, r1
 8008062:	7e09      	ldrb	r1, [r1, #24]
 8008064:	b085      	sub	sp, #20
 8008066:	296e      	cmp	r1, #110	; 0x6e
 8008068:	4617      	mov	r7, r2
 800806a:	4606      	mov	r6, r0
 800806c:	4698      	mov	r8, r3
 800806e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008070:	f000 80b3 	beq.w	80081da <_printf_i+0x182>
 8008074:	d822      	bhi.n	80080bc <_printf_i+0x64>
 8008076:	2963      	cmp	r1, #99	; 0x63
 8008078:	d036      	beq.n	80080e8 <_printf_i+0x90>
 800807a:	d80a      	bhi.n	8008092 <_printf_i+0x3a>
 800807c:	2900      	cmp	r1, #0
 800807e:	f000 80b9 	beq.w	80081f4 <_printf_i+0x19c>
 8008082:	2958      	cmp	r1, #88	; 0x58
 8008084:	f000 8083 	beq.w	800818e <_printf_i+0x136>
 8008088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800808c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008090:	e032      	b.n	80080f8 <_printf_i+0xa0>
 8008092:	2964      	cmp	r1, #100	; 0x64
 8008094:	d001      	beq.n	800809a <_printf_i+0x42>
 8008096:	2969      	cmp	r1, #105	; 0x69
 8008098:	d1f6      	bne.n	8008088 <_printf_i+0x30>
 800809a:	6820      	ldr	r0, [r4, #0]
 800809c:	6813      	ldr	r3, [r2, #0]
 800809e:	0605      	lsls	r5, r0, #24
 80080a0:	f103 0104 	add.w	r1, r3, #4
 80080a4:	d52a      	bpl.n	80080fc <_printf_i+0xa4>
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6011      	str	r1, [r2, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	da03      	bge.n	80080b6 <_printf_i+0x5e>
 80080ae:	222d      	movs	r2, #45	; 0x2d
 80080b0:	425b      	negs	r3, r3
 80080b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80080b6:	486f      	ldr	r0, [pc, #444]	; (8008274 <_printf_i+0x21c>)
 80080b8:	220a      	movs	r2, #10
 80080ba:	e039      	b.n	8008130 <_printf_i+0xd8>
 80080bc:	2973      	cmp	r1, #115	; 0x73
 80080be:	f000 809d 	beq.w	80081fc <_printf_i+0x1a4>
 80080c2:	d808      	bhi.n	80080d6 <_printf_i+0x7e>
 80080c4:	296f      	cmp	r1, #111	; 0x6f
 80080c6:	d020      	beq.n	800810a <_printf_i+0xb2>
 80080c8:	2970      	cmp	r1, #112	; 0x70
 80080ca:	d1dd      	bne.n	8008088 <_printf_i+0x30>
 80080cc:	6823      	ldr	r3, [r4, #0]
 80080ce:	f043 0320 	orr.w	r3, r3, #32
 80080d2:	6023      	str	r3, [r4, #0]
 80080d4:	e003      	b.n	80080de <_printf_i+0x86>
 80080d6:	2975      	cmp	r1, #117	; 0x75
 80080d8:	d017      	beq.n	800810a <_printf_i+0xb2>
 80080da:	2978      	cmp	r1, #120	; 0x78
 80080dc:	d1d4      	bne.n	8008088 <_printf_i+0x30>
 80080de:	2378      	movs	r3, #120	; 0x78
 80080e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080e4:	4864      	ldr	r0, [pc, #400]	; (8008278 <_printf_i+0x220>)
 80080e6:	e055      	b.n	8008194 <_printf_i+0x13c>
 80080e8:	6813      	ldr	r3, [r2, #0]
 80080ea:	1d19      	adds	r1, r3, #4
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	6011      	str	r1, [r2, #0]
 80080f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080f8:	2301      	movs	r3, #1
 80080fa:	e08c      	b.n	8008216 <_printf_i+0x1be>
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6011      	str	r1, [r2, #0]
 8008100:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008104:	bf18      	it	ne
 8008106:	b21b      	sxthne	r3, r3
 8008108:	e7cf      	b.n	80080aa <_printf_i+0x52>
 800810a:	6813      	ldr	r3, [r2, #0]
 800810c:	6825      	ldr	r5, [r4, #0]
 800810e:	1d18      	adds	r0, r3, #4
 8008110:	6010      	str	r0, [r2, #0]
 8008112:	0628      	lsls	r0, r5, #24
 8008114:	d501      	bpl.n	800811a <_printf_i+0xc2>
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	e002      	b.n	8008120 <_printf_i+0xc8>
 800811a:	0668      	lsls	r0, r5, #25
 800811c:	d5fb      	bpl.n	8008116 <_printf_i+0xbe>
 800811e:	881b      	ldrh	r3, [r3, #0]
 8008120:	4854      	ldr	r0, [pc, #336]	; (8008274 <_printf_i+0x21c>)
 8008122:	296f      	cmp	r1, #111	; 0x6f
 8008124:	bf14      	ite	ne
 8008126:	220a      	movne	r2, #10
 8008128:	2208      	moveq	r2, #8
 800812a:	2100      	movs	r1, #0
 800812c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008130:	6865      	ldr	r5, [r4, #4]
 8008132:	60a5      	str	r5, [r4, #8]
 8008134:	2d00      	cmp	r5, #0
 8008136:	f2c0 8095 	blt.w	8008264 <_printf_i+0x20c>
 800813a:	6821      	ldr	r1, [r4, #0]
 800813c:	f021 0104 	bic.w	r1, r1, #4
 8008140:	6021      	str	r1, [r4, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d13d      	bne.n	80081c2 <_printf_i+0x16a>
 8008146:	2d00      	cmp	r5, #0
 8008148:	f040 808e 	bne.w	8008268 <_printf_i+0x210>
 800814c:	4665      	mov	r5, ip
 800814e:	2a08      	cmp	r2, #8
 8008150:	d10b      	bne.n	800816a <_printf_i+0x112>
 8008152:	6823      	ldr	r3, [r4, #0]
 8008154:	07db      	lsls	r3, r3, #31
 8008156:	d508      	bpl.n	800816a <_printf_i+0x112>
 8008158:	6923      	ldr	r3, [r4, #16]
 800815a:	6862      	ldr	r2, [r4, #4]
 800815c:	429a      	cmp	r2, r3
 800815e:	bfde      	ittt	le
 8008160:	2330      	movle	r3, #48	; 0x30
 8008162:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008166:	f105 35ff 	addle.w	r5, r5, #4294967295
 800816a:	ebac 0305 	sub.w	r3, ip, r5
 800816e:	6123      	str	r3, [r4, #16]
 8008170:	f8cd 8000 	str.w	r8, [sp]
 8008174:	463b      	mov	r3, r7
 8008176:	aa03      	add	r2, sp, #12
 8008178:	4621      	mov	r1, r4
 800817a:	4630      	mov	r0, r6
 800817c:	f7ff fef6 	bl	8007f6c <_printf_common>
 8008180:	3001      	adds	r0, #1
 8008182:	d14d      	bne.n	8008220 <_printf_i+0x1c8>
 8008184:	f04f 30ff 	mov.w	r0, #4294967295
 8008188:	b005      	add	sp, #20
 800818a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800818e:	4839      	ldr	r0, [pc, #228]	; (8008274 <_printf_i+0x21c>)
 8008190:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008194:	6813      	ldr	r3, [r2, #0]
 8008196:	6821      	ldr	r1, [r4, #0]
 8008198:	1d1d      	adds	r5, r3, #4
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6015      	str	r5, [r2, #0]
 800819e:	060a      	lsls	r2, r1, #24
 80081a0:	d50b      	bpl.n	80081ba <_printf_i+0x162>
 80081a2:	07ca      	lsls	r2, r1, #31
 80081a4:	bf44      	itt	mi
 80081a6:	f041 0120 	orrmi.w	r1, r1, #32
 80081aa:	6021      	strmi	r1, [r4, #0]
 80081ac:	b91b      	cbnz	r3, 80081b6 <_printf_i+0x15e>
 80081ae:	6822      	ldr	r2, [r4, #0]
 80081b0:	f022 0220 	bic.w	r2, r2, #32
 80081b4:	6022      	str	r2, [r4, #0]
 80081b6:	2210      	movs	r2, #16
 80081b8:	e7b7      	b.n	800812a <_printf_i+0xd2>
 80081ba:	064d      	lsls	r5, r1, #25
 80081bc:	bf48      	it	mi
 80081be:	b29b      	uxthmi	r3, r3
 80081c0:	e7ef      	b.n	80081a2 <_printf_i+0x14a>
 80081c2:	4665      	mov	r5, ip
 80081c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80081c8:	fb02 3311 	mls	r3, r2, r1, r3
 80081cc:	5cc3      	ldrb	r3, [r0, r3]
 80081ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80081d2:	460b      	mov	r3, r1
 80081d4:	2900      	cmp	r1, #0
 80081d6:	d1f5      	bne.n	80081c4 <_printf_i+0x16c>
 80081d8:	e7b9      	b.n	800814e <_printf_i+0xf6>
 80081da:	6813      	ldr	r3, [r2, #0]
 80081dc:	6825      	ldr	r5, [r4, #0]
 80081de:	6961      	ldr	r1, [r4, #20]
 80081e0:	1d18      	adds	r0, r3, #4
 80081e2:	6010      	str	r0, [r2, #0]
 80081e4:	0628      	lsls	r0, r5, #24
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	d501      	bpl.n	80081ee <_printf_i+0x196>
 80081ea:	6019      	str	r1, [r3, #0]
 80081ec:	e002      	b.n	80081f4 <_printf_i+0x19c>
 80081ee:	066a      	lsls	r2, r5, #25
 80081f0:	d5fb      	bpl.n	80081ea <_printf_i+0x192>
 80081f2:	8019      	strh	r1, [r3, #0]
 80081f4:	2300      	movs	r3, #0
 80081f6:	6123      	str	r3, [r4, #16]
 80081f8:	4665      	mov	r5, ip
 80081fa:	e7b9      	b.n	8008170 <_printf_i+0x118>
 80081fc:	6813      	ldr	r3, [r2, #0]
 80081fe:	1d19      	adds	r1, r3, #4
 8008200:	6011      	str	r1, [r2, #0]
 8008202:	681d      	ldr	r5, [r3, #0]
 8008204:	6862      	ldr	r2, [r4, #4]
 8008206:	2100      	movs	r1, #0
 8008208:	4628      	mov	r0, r5
 800820a:	f7f7 fff1 	bl	80001f0 <memchr>
 800820e:	b108      	cbz	r0, 8008214 <_printf_i+0x1bc>
 8008210:	1b40      	subs	r0, r0, r5
 8008212:	6060      	str	r0, [r4, #4]
 8008214:	6863      	ldr	r3, [r4, #4]
 8008216:	6123      	str	r3, [r4, #16]
 8008218:	2300      	movs	r3, #0
 800821a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800821e:	e7a7      	b.n	8008170 <_printf_i+0x118>
 8008220:	6923      	ldr	r3, [r4, #16]
 8008222:	462a      	mov	r2, r5
 8008224:	4639      	mov	r1, r7
 8008226:	4630      	mov	r0, r6
 8008228:	47c0      	blx	r8
 800822a:	3001      	adds	r0, #1
 800822c:	d0aa      	beq.n	8008184 <_printf_i+0x12c>
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	079b      	lsls	r3, r3, #30
 8008232:	d413      	bmi.n	800825c <_printf_i+0x204>
 8008234:	68e0      	ldr	r0, [r4, #12]
 8008236:	9b03      	ldr	r3, [sp, #12]
 8008238:	4298      	cmp	r0, r3
 800823a:	bfb8      	it	lt
 800823c:	4618      	movlt	r0, r3
 800823e:	e7a3      	b.n	8008188 <_printf_i+0x130>
 8008240:	2301      	movs	r3, #1
 8008242:	464a      	mov	r2, r9
 8008244:	4639      	mov	r1, r7
 8008246:	4630      	mov	r0, r6
 8008248:	47c0      	blx	r8
 800824a:	3001      	adds	r0, #1
 800824c:	d09a      	beq.n	8008184 <_printf_i+0x12c>
 800824e:	3501      	adds	r5, #1
 8008250:	68e3      	ldr	r3, [r4, #12]
 8008252:	9a03      	ldr	r2, [sp, #12]
 8008254:	1a9b      	subs	r3, r3, r2
 8008256:	42ab      	cmp	r3, r5
 8008258:	dcf2      	bgt.n	8008240 <_printf_i+0x1e8>
 800825a:	e7eb      	b.n	8008234 <_printf_i+0x1dc>
 800825c:	2500      	movs	r5, #0
 800825e:	f104 0919 	add.w	r9, r4, #25
 8008262:	e7f5      	b.n	8008250 <_printf_i+0x1f8>
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1ac      	bne.n	80081c2 <_printf_i+0x16a>
 8008268:	7803      	ldrb	r3, [r0, #0]
 800826a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800826e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008272:	e76c      	b.n	800814e <_printf_i+0xf6>
 8008274:	0800b02e 	.word	0x0800b02e
 8008278:	0800b03f 	.word	0x0800b03f

0800827c <_sbrk_r>:
 800827c:	b538      	push	{r3, r4, r5, lr}
 800827e:	4c06      	ldr	r4, [pc, #24]	; (8008298 <_sbrk_r+0x1c>)
 8008280:	2300      	movs	r3, #0
 8008282:	4605      	mov	r5, r0
 8008284:	4608      	mov	r0, r1
 8008286:	6023      	str	r3, [r4, #0]
 8008288:	f7f9 fdae 	bl	8001de8 <_sbrk>
 800828c:	1c43      	adds	r3, r0, #1
 800828e:	d102      	bne.n	8008296 <_sbrk_r+0x1a>
 8008290:	6823      	ldr	r3, [r4, #0]
 8008292:	b103      	cbz	r3, 8008296 <_sbrk_r+0x1a>
 8008294:	602b      	str	r3, [r5, #0]
 8008296:	bd38      	pop	{r3, r4, r5, pc}
 8008298:	20001dbc 	.word	0x20001dbc

0800829c <siprintf>:
 800829c:	b40e      	push	{r1, r2, r3}
 800829e:	b500      	push	{lr}
 80082a0:	b09c      	sub	sp, #112	; 0x70
 80082a2:	ab1d      	add	r3, sp, #116	; 0x74
 80082a4:	9002      	str	r0, [sp, #8]
 80082a6:	9006      	str	r0, [sp, #24]
 80082a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082ac:	4809      	ldr	r0, [pc, #36]	; (80082d4 <siprintf+0x38>)
 80082ae:	9107      	str	r1, [sp, #28]
 80082b0:	9104      	str	r1, [sp, #16]
 80082b2:	4909      	ldr	r1, [pc, #36]	; (80082d8 <siprintf+0x3c>)
 80082b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80082b8:	9105      	str	r1, [sp, #20]
 80082ba:	6800      	ldr	r0, [r0, #0]
 80082bc:	9301      	str	r3, [sp, #4]
 80082be:	a902      	add	r1, sp, #8
 80082c0:	f001 fb48 	bl	8009954 <_svfiprintf_r>
 80082c4:	9b02      	ldr	r3, [sp, #8]
 80082c6:	2200      	movs	r2, #0
 80082c8:	701a      	strb	r2, [r3, #0]
 80082ca:	b01c      	add	sp, #112	; 0x70
 80082cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80082d0:	b003      	add	sp, #12
 80082d2:	4770      	bx	lr
 80082d4:	20000028 	.word	0x20000028
 80082d8:	ffff0208 	.word	0xffff0208

080082dc <__sread>:
 80082dc:	b510      	push	{r4, lr}
 80082de:	460c      	mov	r4, r1
 80082e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082e4:	f001 fc2e 	bl	8009b44 <_read_r>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	bfab      	itete	ge
 80082ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082ee:	89a3      	ldrhlt	r3, [r4, #12]
 80082f0:	181b      	addge	r3, r3, r0
 80082f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082f6:	bfac      	ite	ge
 80082f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80082fa:	81a3      	strhlt	r3, [r4, #12]
 80082fc:	bd10      	pop	{r4, pc}

080082fe <__swrite>:
 80082fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008302:	461f      	mov	r7, r3
 8008304:	898b      	ldrh	r3, [r1, #12]
 8008306:	05db      	lsls	r3, r3, #23
 8008308:	4605      	mov	r5, r0
 800830a:	460c      	mov	r4, r1
 800830c:	4616      	mov	r6, r2
 800830e:	d505      	bpl.n	800831c <__swrite+0x1e>
 8008310:	2302      	movs	r3, #2
 8008312:	2200      	movs	r2, #0
 8008314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008318:	f000 ff58 	bl	80091cc <_lseek_r>
 800831c:	89a3      	ldrh	r3, [r4, #12]
 800831e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008322:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008326:	81a3      	strh	r3, [r4, #12]
 8008328:	4632      	mov	r2, r6
 800832a:	463b      	mov	r3, r7
 800832c:	4628      	mov	r0, r5
 800832e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008332:	f000 b869 	b.w	8008408 <_write_r>

08008336 <__sseek>:
 8008336:	b510      	push	{r4, lr}
 8008338:	460c      	mov	r4, r1
 800833a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800833e:	f000 ff45 	bl	80091cc <_lseek_r>
 8008342:	1c43      	adds	r3, r0, #1
 8008344:	89a3      	ldrh	r3, [r4, #12]
 8008346:	bf15      	itete	ne
 8008348:	6560      	strne	r0, [r4, #84]	; 0x54
 800834a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800834e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008352:	81a3      	strheq	r3, [r4, #12]
 8008354:	bf18      	it	ne
 8008356:	81a3      	strhne	r3, [r4, #12]
 8008358:	bd10      	pop	{r4, pc}

0800835a <__sclose>:
 800835a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800835e:	f000 b8d3 	b.w	8008508 <_close_r>
	...

08008364 <__swbuf_r>:
 8008364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008366:	460e      	mov	r6, r1
 8008368:	4614      	mov	r4, r2
 800836a:	4605      	mov	r5, r0
 800836c:	b118      	cbz	r0, 8008376 <__swbuf_r+0x12>
 800836e:	6983      	ldr	r3, [r0, #24]
 8008370:	b90b      	cbnz	r3, 8008376 <__swbuf_r+0x12>
 8008372:	f7ff f96b 	bl	800764c <__sinit>
 8008376:	4b21      	ldr	r3, [pc, #132]	; (80083fc <__swbuf_r+0x98>)
 8008378:	429c      	cmp	r4, r3
 800837a:	d12a      	bne.n	80083d2 <__swbuf_r+0x6e>
 800837c:	686c      	ldr	r4, [r5, #4]
 800837e:	69a3      	ldr	r3, [r4, #24]
 8008380:	60a3      	str	r3, [r4, #8]
 8008382:	89a3      	ldrh	r3, [r4, #12]
 8008384:	071a      	lsls	r2, r3, #28
 8008386:	d52e      	bpl.n	80083e6 <__swbuf_r+0x82>
 8008388:	6923      	ldr	r3, [r4, #16]
 800838a:	b363      	cbz	r3, 80083e6 <__swbuf_r+0x82>
 800838c:	6923      	ldr	r3, [r4, #16]
 800838e:	6820      	ldr	r0, [r4, #0]
 8008390:	1ac0      	subs	r0, r0, r3
 8008392:	6963      	ldr	r3, [r4, #20]
 8008394:	b2f6      	uxtb	r6, r6
 8008396:	4283      	cmp	r3, r0
 8008398:	4637      	mov	r7, r6
 800839a:	dc04      	bgt.n	80083a6 <__swbuf_r+0x42>
 800839c:	4621      	mov	r1, r4
 800839e:	4628      	mov	r0, r5
 80083a0:	f7ff f8ea 	bl	8007578 <_fflush_r>
 80083a4:	bb28      	cbnz	r0, 80083f2 <__swbuf_r+0x8e>
 80083a6:	68a3      	ldr	r3, [r4, #8]
 80083a8:	3b01      	subs	r3, #1
 80083aa:	60a3      	str	r3, [r4, #8]
 80083ac:	6823      	ldr	r3, [r4, #0]
 80083ae:	1c5a      	adds	r2, r3, #1
 80083b0:	6022      	str	r2, [r4, #0]
 80083b2:	701e      	strb	r6, [r3, #0]
 80083b4:	6963      	ldr	r3, [r4, #20]
 80083b6:	3001      	adds	r0, #1
 80083b8:	4283      	cmp	r3, r0
 80083ba:	d004      	beq.n	80083c6 <__swbuf_r+0x62>
 80083bc:	89a3      	ldrh	r3, [r4, #12]
 80083be:	07db      	lsls	r3, r3, #31
 80083c0:	d519      	bpl.n	80083f6 <__swbuf_r+0x92>
 80083c2:	2e0a      	cmp	r6, #10
 80083c4:	d117      	bne.n	80083f6 <__swbuf_r+0x92>
 80083c6:	4621      	mov	r1, r4
 80083c8:	4628      	mov	r0, r5
 80083ca:	f7ff f8d5 	bl	8007578 <_fflush_r>
 80083ce:	b190      	cbz	r0, 80083f6 <__swbuf_r+0x92>
 80083d0:	e00f      	b.n	80083f2 <__swbuf_r+0x8e>
 80083d2:	4b0b      	ldr	r3, [pc, #44]	; (8008400 <__swbuf_r+0x9c>)
 80083d4:	429c      	cmp	r4, r3
 80083d6:	d101      	bne.n	80083dc <__swbuf_r+0x78>
 80083d8:	68ac      	ldr	r4, [r5, #8]
 80083da:	e7d0      	b.n	800837e <__swbuf_r+0x1a>
 80083dc:	4b09      	ldr	r3, [pc, #36]	; (8008404 <__swbuf_r+0xa0>)
 80083de:	429c      	cmp	r4, r3
 80083e0:	bf08      	it	eq
 80083e2:	68ec      	ldreq	r4, [r5, #12]
 80083e4:	e7cb      	b.n	800837e <__swbuf_r+0x1a>
 80083e6:	4621      	mov	r1, r4
 80083e8:	4628      	mov	r0, r5
 80083ea:	f000 f81f 	bl	800842c <__swsetup_r>
 80083ee:	2800      	cmp	r0, #0
 80083f0:	d0cc      	beq.n	800838c <__swbuf_r+0x28>
 80083f2:	f04f 37ff 	mov.w	r7, #4294967295
 80083f6:	4638      	mov	r0, r7
 80083f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083fa:	bf00      	nop
 80083fc:	0800afd8 	.word	0x0800afd8
 8008400:	0800aff8 	.word	0x0800aff8
 8008404:	0800afb8 	.word	0x0800afb8

08008408 <_write_r>:
 8008408:	b538      	push	{r3, r4, r5, lr}
 800840a:	4c07      	ldr	r4, [pc, #28]	; (8008428 <_write_r+0x20>)
 800840c:	4605      	mov	r5, r0
 800840e:	4608      	mov	r0, r1
 8008410:	4611      	mov	r1, r2
 8008412:	2200      	movs	r2, #0
 8008414:	6022      	str	r2, [r4, #0]
 8008416:	461a      	mov	r2, r3
 8008418:	f7f9 fc95 	bl	8001d46 <_write>
 800841c:	1c43      	adds	r3, r0, #1
 800841e:	d102      	bne.n	8008426 <_write_r+0x1e>
 8008420:	6823      	ldr	r3, [r4, #0]
 8008422:	b103      	cbz	r3, 8008426 <_write_r+0x1e>
 8008424:	602b      	str	r3, [r5, #0]
 8008426:	bd38      	pop	{r3, r4, r5, pc}
 8008428:	20001dbc 	.word	0x20001dbc

0800842c <__swsetup_r>:
 800842c:	4b32      	ldr	r3, [pc, #200]	; (80084f8 <__swsetup_r+0xcc>)
 800842e:	b570      	push	{r4, r5, r6, lr}
 8008430:	681d      	ldr	r5, [r3, #0]
 8008432:	4606      	mov	r6, r0
 8008434:	460c      	mov	r4, r1
 8008436:	b125      	cbz	r5, 8008442 <__swsetup_r+0x16>
 8008438:	69ab      	ldr	r3, [r5, #24]
 800843a:	b913      	cbnz	r3, 8008442 <__swsetup_r+0x16>
 800843c:	4628      	mov	r0, r5
 800843e:	f7ff f905 	bl	800764c <__sinit>
 8008442:	4b2e      	ldr	r3, [pc, #184]	; (80084fc <__swsetup_r+0xd0>)
 8008444:	429c      	cmp	r4, r3
 8008446:	d10f      	bne.n	8008468 <__swsetup_r+0x3c>
 8008448:	686c      	ldr	r4, [r5, #4]
 800844a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800844e:	b29a      	uxth	r2, r3
 8008450:	0715      	lsls	r5, r2, #28
 8008452:	d42c      	bmi.n	80084ae <__swsetup_r+0x82>
 8008454:	06d0      	lsls	r0, r2, #27
 8008456:	d411      	bmi.n	800847c <__swsetup_r+0x50>
 8008458:	2209      	movs	r2, #9
 800845a:	6032      	str	r2, [r6, #0]
 800845c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008460:	81a3      	strh	r3, [r4, #12]
 8008462:	f04f 30ff 	mov.w	r0, #4294967295
 8008466:	e03e      	b.n	80084e6 <__swsetup_r+0xba>
 8008468:	4b25      	ldr	r3, [pc, #148]	; (8008500 <__swsetup_r+0xd4>)
 800846a:	429c      	cmp	r4, r3
 800846c:	d101      	bne.n	8008472 <__swsetup_r+0x46>
 800846e:	68ac      	ldr	r4, [r5, #8]
 8008470:	e7eb      	b.n	800844a <__swsetup_r+0x1e>
 8008472:	4b24      	ldr	r3, [pc, #144]	; (8008504 <__swsetup_r+0xd8>)
 8008474:	429c      	cmp	r4, r3
 8008476:	bf08      	it	eq
 8008478:	68ec      	ldreq	r4, [r5, #12]
 800847a:	e7e6      	b.n	800844a <__swsetup_r+0x1e>
 800847c:	0751      	lsls	r1, r2, #29
 800847e:	d512      	bpl.n	80084a6 <__swsetup_r+0x7a>
 8008480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008482:	b141      	cbz	r1, 8008496 <__swsetup_r+0x6a>
 8008484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008488:	4299      	cmp	r1, r3
 800848a:	d002      	beq.n	8008492 <__swsetup_r+0x66>
 800848c:	4630      	mov	r0, r6
 800848e:	f7ff f9f1 	bl	8007874 <_free_r>
 8008492:	2300      	movs	r3, #0
 8008494:	6363      	str	r3, [r4, #52]	; 0x34
 8008496:	89a3      	ldrh	r3, [r4, #12]
 8008498:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800849c:	81a3      	strh	r3, [r4, #12]
 800849e:	2300      	movs	r3, #0
 80084a0:	6063      	str	r3, [r4, #4]
 80084a2:	6923      	ldr	r3, [r4, #16]
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	89a3      	ldrh	r3, [r4, #12]
 80084a8:	f043 0308 	orr.w	r3, r3, #8
 80084ac:	81a3      	strh	r3, [r4, #12]
 80084ae:	6923      	ldr	r3, [r4, #16]
 80084b0:	b94b      	cbnz	r3, 80084c6 <__swsetup_r+0x9a>
 80084b2:	89a3      	ldrh	r3, [r4, #12]
 80084b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80084b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084bc:	d003      	beq.n	80084c6 <__swsetup_r+0x9a>
 80084be:	4621      	mov	r1, r4
 80084c0:	4630      	mov	r0, r6
 80084c2:	f000 feb9 	bl	8009238 <__smakebuf_r>
 80084c6:	89a2      	ldrh	r2, [r4, #12]
 80084c8:	f012 0301 	ands.w	r3, r2, #1
 80084cc:	d00c      	beq.n	80084e8 <__swsetup_r+0xbc>
 80084ce:	2300      	movs	r3, #0
 80084d0:	60a3      	str	r3, [r4, #8]
 80084d2:	6963      	ldr	r3, [r4, #20]
 80084d4:	425b      	negs	r3, r3
 80084d6:	61a3      	str	r3, [r4, #24]
 80084d8:	6923      	ldr	r3, [r4, #16]
 80084da:	b953      	cbnz	r3, 80084f2 <__swsetup_r+0xc6>
 80084dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084e0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80084e4:	d1ba      	bne.n	800845c <__swsetup_r+0x30>
 80084e6:	bd70      	pop	{r4, r5, r6, pc}
 80084e8:	0792      	lsls	r2, r2, #30
 80084ea:	bf58      	it	pl
 80084ec:	6963      	ldrpl	r3, [r4, #20]
 80084ee:	60a3      	str	r3, [r4, #8]
 80084f0:	e7f2      	b.n	80084d8 <__swsetup_r+0xac>
 80084f2:	2000      	movs	r0, #0
 80084f4:	e7f7      	b.n	80084e6 <__swsetup_r+0xba>
 80084f6:	bf00      	nop
 80084f8:	20000028 	.word	0x20000028
 80084fc:	0800afd8 	.word	0x0800afd8
 8008500:	0800aff8 	.word	0x0800aff8
 8008504:	0800afb8 	.word	0x0800afb8

08008508 <_close_r>:
 8008508:	b538      	push	{r3, r4, r5, lr}
 800850a:	4c06      	ldr	r4, [pc, #24]	; (8008524 <_close_r+0x1c>)
 800850c:	2300      	movs	r3, #0
 800850e:	4605      	mov	r5, r0
 8008510:	4608      	mov	r0, r1
 8008512:	6023      	str	r3, [r4, #0]
 8008514:	f7f9 fc33 	bl	8001d7e <_close>
 8008518:	1c43      	adds	r3, r0, #1
 800851a:	d102      	bne.n	8008522 <_close_r+0x1a>
 800851c:	6823      	ldr	r3, [r4, #0]
 800851e:	b103      	cbz	r3, 8008522 <_close_r+0x1a>
 8008520:	602b      	str	r3, [r5, #0]
 8008522:	bd38      	pop	{r3, r4, r5, pc}
 8008524:	20001dbc 	.word	0x20001dbc

08008528 <quorem>:
 8008528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800852c:	6903      	ldr	r3, [r0, #16]
 800852e:	690c      	ldr	r4, [r1, #16]
 8008530:	42a3      	cmp	r3, r4
 8008532:	4680      	mov	r8, r0
 8008534:	f2c0 8082 	blt.w	800863c <quorem+0x114>
 8008538:	3c01      	subs	r4, #1
 800853a:	f101 0714 	add.w	r7, r1, #20
 800853e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008542:	f100 0614 	add.w	r6, r0, #20
 8008546:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800854a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800854e:	eb06 030c 	add.w	r3, r6, ip
 8008552:	3501      	adds	r5, #1
 8008554:	eb07 090c 	add.w	r9, r7, ip
 8008558:	9301      	str	r3, [sp, #4]
 800855a:	fbb0 f5f5 	udiv	r5, r0, r5
 800855e:	b395      	cbz	r5, 80085c6 <quorem+0x9e>
 8008560:	f04f 0a00 	mov.w	sl, #0
 8008564:	4638      	mov	r0, r7
 8008566:	46b6      	mov	lr, r6
 8008568:	46d3      	mov	fp, sl
 800856a:	f850 2b04 	ldr.w	r2, [r0], #4
 800856e:	b293      	uxth	r3, r2
 8008570:	fb05 a303 	mla	r3, r5, r3, sl
 8008574:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008578:	b29b      	uxth	r3, r3
 800857a:	ebab 0303 	sub.w	r3, fp, r3
 800857e:	0c12      	lsrs	r2, r2, #16
 8008580:	f8de b000 	ldr.w	fp, [lr]
 8008584:	fb05 a202 	mla	r2, r5, r2, sl
 8008588:	fa13 f38b 	uxtah	r3, r3, fp
 800858c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008590:	fa1f fb82 	uxth.w	fp, r2
 8008594:	f8de 2000 	ldr.w	r2, [lr]
 8008598:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800859c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085a6:	4581      	cmp	r9, r0
 80085a8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80085ac:	f84e 3b04 	str.w	r3, [lr], #4
 80085b0:	d2db      	bcs.n	800856a <quorem+0x42>
 80085b2:	f856 300c 	ldr.w	r3, [r6, ip]
 80085b6:	b933      	cbnz	r3, 80085c6 <quorem+0x9e>
 80085b8:	9b01      	ldr	r3, [sp, #4]
 80085ba:	3b04      	subs	r3, #4
 80085bc:	429e      	cmp	r6, r3
 80085be:	461a      	mov	r2, r3
 80085c0:	d330      	bcc.n	8008624 <quorem+0xfc>
 80085c2:	f8c8 4010 	str.w	r4, [r8, #16]
 80085c6:	4640      	mov	r0, r8
 80085c8:	f001 f896 	bl	80096f8 <__mcmp>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	db25      	blt.n	800861c <quorem+0xf4>
 80085d0:	3501      	adds	r5, #1
 80085d2:	4630      	mov	r0, r6
 80085d4:	f04f 0c00 	mov.w	ip, #0
 80085d8:	f857 2b04 	ldr.w	r2, [r7], #4
 80085dc:	f8d0 e000 	ldr.w	lr, [r0]
 80085e0:	b293      	uxth	r3, r2
 80085e2:	ebac 0303 	sub.w	r3, ip, r3
 80085e6:	0c12      	lsrs	r2, r2, #16
 80085e8:	fa13 f38e 	uxtah	r3, r3, lr
 80085ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80085f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085fa:	45b9      	cmp	r9, r7
 80085fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008600:	f840 3b04 	str.w	r3, [r0], #4
 8008604:	d2e8      	bcs.n	80085d8 <quorem+0xb0>
 8008606:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800860a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800860e:	b92a      	cbnz	r2, 800861c <quorem+0xf4>
 8008610:	3b04      	subs	r3, #4
 8008612:	429e      	cmp	r6, r3
 8008614:	461a      	mov	r2, r3
 8008616:	d30b      	bcc.n	8008630 <quorem+0x108>
 8008618:	f8c8 4010 	str.w	r4, [r8, #16]
 800861c:	4628      	mov	r0, r5
 800861e:	b003      	add	sp, #12
 8008620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008624:	6812      	ldr	r2, [r2, #0]
 8008626:	3b04      	subs	r3, #4
 8008628:	2a00      	cmp	r2, #0
 800862a:	d1ca      	bne.n	80085c2 <quorem+0x9a>
 800862c:	3c01      	subs	r4, #1
 800862e:	e7c5      	b.n	80085bc <quorem+0x94>
 8008630:	6812      	ldr	r2, [r2, #0]
 8008632:	3b04      	subs	r3, #4
 8008634:	2a00      	cmp	r2, #0
 8008636:	d1ef      	bne.n	8008618 <quorem+0xf0>
 8008638:	3c01      	subs	r4, #1
 800863a:	e7ea      	b.n	8008612 <quorem+0xea>
 800863c:	2000      	movs	r0, #0
 800863e:	e7ee      	b.n	800861e <quorem+0xf6>

08008640 <_dtoa_r>:
 8008640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008644:	ec57 6b10 	vmov	r6, r7, d0
 8008648:	b097      	sub	sp, #92	; 0x5c
 800864a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800864c:	9106      	str	r1, [sp, #24]
 800864e:	4604      	mov	r4, r0
 8008650:	920b      	str	r2, [sp, #44]	; 0x2c
 8008652:	9312      	str	r3, [sp, #72]	; 0x48
 8008654:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008658:	e9cd 6700 	strd	r6, r7, [sp]
 800865c:	b93d      	cbnz	r5, 800866e <_dtoa_r+0x2e>
 800865e:	2010      	movs	r0, #16
 8008660:	f000 fe2a 	bl	80092b8 <malloc>
 8008664:	6260      	str	r0, [r4, #36]	; 0x24
 8008666:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800866a:	6005      	str	r5, [r0, #0]
 800866c:	60c5      	str	r5, [r0, #12]
 800866e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008670:	6819      	ldr	r1, [r3, #0]
 8008672:	b151      	cbz	r1, 800868a <_dtoa_r+0x4a>
 8008674:	685a      	ldr	r2, [r3, #4]
 8008676:	604a      	str	r2, [r1, #4]
 8008678:	2301      	movs	r3, #1
 800867a:	4093      	lsls	r3, r2
 800867c:	608b      	str	r3, [r1, #8]
 800867e:	4620      	mov	r0, r4
 8008680:	f000 fe58 	bl	8009334 <_Bfree>
 8008684:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008686:	2200      	movs	r2, #0
 8008688:	601a      	str	r2, [r3, #0]
 800868a:	1e3b      	subs	r3, r7, #0
 800868c:	bfbb      	ittet	lt
 800868e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008692:	9301      	strlt	r3, [sp, #4]
 8008694:	2300      	movge	r3, #0
 8008696:	2201      	movlt	r2, #1
 8008698:	bfac      	ite	ge
 800869a:	f8c8 3000 	strge.w	r3, [r8]
 800869e:	f8c8 2000 	strlt.w	r2, [r8]
 80086a2:	4baf      	ldr	r3, [pc, #700]	; (8008960 <_dtoa_r+0x320>)
 80086a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80086a8:	ea33 0308 	bics.w	r3, r3, r8
 80086ac:	d114      	bne.n	80086d8 <_dtoa_r+0x98>
 80086ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80086b4:	6013      	str	r3, [r2, #0]
 80086b6:	9b00      	ldr	r3, [sp, #0]
 80086b8:	b923      	cbnz	r3, 80086c4 <_dtoa_r+0x84>
 80086ba:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80086be:	2800      	cmp	r0, #0
 80086c0:	f000 8542 	beq.w	8009148 <_dtoa_r+0xb08>
 80086c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086c6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008974 <_dtoa_r+0x334>
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f000 8544 	beq.w	8009158 <_dtoa_r+0xb18>
 80086d0:	f10b 0303 	add.w	r3, fp, #3
 80086d4:	f000 bd3e 	b.w	8009154 <_dtoa_r+0xb14>
 80086d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80086dc:	2200      	movs	r2, #0
 80086de:	2300      	movs	r3, #0
 80086e0:	4630      	mov	r0, r6
 80086e2:	4639      	mov	r1, r7
 80086e4:	f7f8 f9f8 	bl	8000ad8 <__aeabi_dcmpeq>
 80086e8:	4681      	mov	r9, r0
 80086ea:	b168      	cbz	r0, 8008708 <_dtoa_r+0xc8>
 80086ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086ee:	2301      	movs	r3, #1
 80086f0:	6013      	str	r3, [r2, #0]
 80086f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 8524 	beq.w	8009142 <_dtoa_r+0xb02>
 80086fa:	4b9a      	ldr	r3, [pc, #616]	; (8008964 <_dtoa_r+0x324>)
 80086fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80086fe:	f103 3bff 	add.w	fp, r3, #4294967295
 8008702:	6013      	str	r3, [r2, #0]
 8008704:	f000 bd28 	b.w	8009158 <_dtoa_r+0xb18>
 8008708:	aa14      	add	r2, sp, #80	; 0x50
 800870a:	a915      	add	r1, sp, #84	; 0x54
 800870c:	ec47 6b10 	vmov	d0, r6, r7
 8008710:	4620      	mov	r0, r4
 8008712:	f001 f868 	bl	80097e6 <__d2b>
 8008716:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800871a:	9004      	str	r0, [sp, #16]
 800871c:	2d00      	cmp	r5, #0
 800871e:	d07c      	beq.n	800881a <_dtoa_r+0x1da>
 8008720:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008724:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008728:	46b2      	mov	sl, r6
 800872a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800872e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008732:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008736:	2200      	movs	r2, #0
 8008738:	4b8b      	ldr	r3, [pc, #556]	; (8008968 <_dtoa_r+0x328>)
 800873a:	4650      	mov	r0, sl
 800873c:	4659      	mov	r1, fp
 800873e:	f7f7 fdab 	bl	8000298 <__aeabi_dsub>
 8008742:	a381      	add	r3, pc, #516	; (adr r3, 8008948 <_dtoa_r+0x308>)
 8008744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008748:	f7f7 ff5e 	bl	8000608 <__aeabi_dmul>
 800874c:	a380      	add	r3, pc, #512	; (adr r3, 8008950 <_dtoa_r+0x310>)
 800874e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008752:	f7f7 fda3 	bl	800029c <__adddf3>
 8008756:	4606      	mov	r6, r0
 8008758:	4628      	mov	r0, r5
 800875a:	460f      	mov	r7, r1
 800875c:	f7f7 feea 	bl	8000534 <__aeabi_i2d>
 8008760:	a37d      	add	r3, pc, #500	; (adr r3, 8008958 <_dtoa_r+0x318>)
 8008762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008766:	f7f7 ff4f 	bl	8000608 <__aeabi_dmul>
 800876a:	4602      	mov	r2, r0
 800876c:	460b      	mov	r3, r1
 800876e:	4630      	mov	r0, r6
 8008770:	4639      	mov	r1, r7
 8008772:	f7f7 fd93 	bl	800029c <__adddf3>
 8008776:	4606      	mov	r6, r0
 8008778:	460f      	mov	r7, r1
 800877a:	f7f8 f9f5 	bl	8000b68 <__aeabi_d2iz>
 800877e:	2200      	movs	r2, #0
 8008780:	4682      	mov	sl, r0
 8008782:	2300      	movs	r3, #0
 8008784:	4630      	mov	r0, r6
 8008786:	4639      	mov	r1, r7
 8008788:	f7f8 f9b0 	bl	8000aec <__aeabi_dcmplt>
 800878c:	b148      	cbz	r0, 80087a2 <_dtoa_r+0x162>
 800878e:	4650      	mov	r0, sl
 8008790:	f7f7 fed0 	bl	8000534 <__aeabi_i2d>
 8008794:	4632      	mov	r2, r6
 8008796:	463b      	mov	r3, r7
 8008798:	f7f8 f99e 	bl	8000ad8 <__aeabi_dcmpeq>
 800879c:	b908      	cbnz	r0, 80087a2 <_dtoa_r+0x162>
 800879e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087a2:	f1ba 0f16 	cmp.w	sl, #22
 80087a6:	d859      	bhi.n	800885c <_dtoa_r+0x21c>
 80087a8:	4970      	ldr	r1, [pc, #448]	; (800896c <_dtoa_r+0x32c>)
 80087aa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80087ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087b6:	f7f8 f9b7 	bl	8000b28 <__aeabi_dcmpgt>
 80087ba:	2800      	cmp	r0, #0
 80087bc:	d050      	beq.n	8008860 <_dtoa_r+0x220>
 80087be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087c2:	2300      	movs	r3, #0
 80087c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80087c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087c8:	1b5d      	subs	r5, r3, r5
 80087ca:	f1b5 0801 	subs.w	r8, r5, #1
 80087ce:	bf49      	itett	mi
 80087d0:	f1c5 0301 	rsbmi	r3, r5, #1
 80087d4:	2300      	movpl	r3, #0
 80087d6:	9305      	strmi	r3, [sp, #20]
 80087d8:	f04f 0800 	movmi.w	r8, #0
 80087dc:	bf58      	it	pl
 80087de:	9305      	strpl	r3, [sp, #20]
 80087e0:	f1ba 0f00 	cmp.w	sl, #0
 80087e4:	db3e      	blt.n	8008864 <_dtoa_r+0x224>
 80087e6:	2300      	movs	r3, #0
 80087e8:	44d0      	add	r8, sl
 80087ea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80087ee:	9307      	str	r3, [sp, #28]
 80087f0:	9b06      	ldr	r3, [sp, #24]
 80087f2:	2b09      	cmp	r3, #9
 80087f4:	f200 8090 	bhi.w	8008918 <_dtoa_r+0x2d8>
 80087f8:	2b05      	cmp	r3, #5
 80087fa:	bfc4      	itt	gt
 80087fc:	3b04      	subgt	r3, #4
 80087fe:	9306      	strgt	r3, [sp, #24]
 8008800:	9b06      	ldr	r3, [sp, #24]
 8008802:	f1a3 0302 	sub.w	r3, r3, #2
 8008806:	bfcc      	ite	gt
 8008808:	2500      	movgt	r5, #0
 800880a:	2501      	movle	r5, #1
 800880c:	2b03      	cmp	r3, #3
 800880e:	f200 808f 	bhi.w	8008930 <_dtoa_r+0x2f0>
 8008812:	e8df f003 	tbb	[pc, r3]
 8008816:	7f7d      	.short	0x7f7d
 8008818:	7131      	.short	0x7131
 800881a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800881e:	441d      	add	r5, r3
 8008820:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008824:	2820      	cmp	r0, #32
 8008826:	dd13      	ble.n	8008850 <_dtoa_r+0x210>
 8008828:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800882c:	9b00      	ldr	r3, [sp, #0]
 800882e:	fa08 f800 	lsl.w	r8, r8, r0
 8008832:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008836:	fa23 f000 	lsr.w	r0, r3, r0
 800883a:	ea48 0000 	orr.w	r0, r8, r0
 800883e:	f7f7 fe69 	bl	8000514 <__aeabi_ui2d>
 8008842:	2301      	movs	r3, #1
 8008844:	4682      	mov	sl, r0
 8008846:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800884a:	3d01      	subs	r5, #1
 800884c:	9313      	str	r3, [sp, #76]	; 0x4c
 800884e:	e772      	b.n	8008736 <_dtoa_r+0xf6>
 8008850:	9b00      	ldr	r3, [sp, #0]
 8008852:	f1c0 0020 	rsb	r0, r0, #32
 8008856:	fa03 f000 	lsl.w	r0, r3, r0
 800885a:	e7f0      	b.n	800883e <_dtoa_r+0x1fe>
 800885c:	2301      	movs	r3, #1
 800885e:	e7b1      	b.n	80087c4 <_dtoa_r+0x184>
 8008860:	900f      	str	r0, [sp, #60]	; 0x3c
 8008862:	e7b0      	b.n	80087c6 <_dtoa_r+0x186>
 8008864:	9b05      	ldr	r3, [sp, #20]
 8008866:	eba3 030a 	sub.w	r3, r3, sl
 800886a:	9305      	str	r3, [sp, #20]
 800886c:	f1ca 0300 	rsb	r3, sl, #0
 8008870:	9307      	str	r3, [sp, #28]
 8008872:	2300      	movs	r3, #0
 8008874:	930e      	str	r3, [sp, #56]	; 0x38
 8008876:	e7bb      	b.n	80087f0 <_dtoa_r+0x1b0>
 8008878:	2301      	movs	r3, #1
 800887a:	930a      	str	r3, [sp, #40]	; 0x28
 800887c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800887e:	2b00      	cmp	r3, #0
 8008880:	dd59      	ble.n	8008936 <_dtoa_r+0x2f6>
 8008882:	9302      	str	r3, [sp, #8]
 8008884:	4699      	mov	r9, r3
 8008886:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008888:	2200      	movs	r2, #0
 800888a:	6072      	str	r2, [r6, #4]
 800888c:	2204      	movs	r2, #4
 800888e:	f102 0014 	add.w	r0, r2, #20
 8008892:	4298      	cmp	r0, r3
 8008894:	6871      	ldr	r1, [r6, #4]
 8008896:	d953      	bls.n	8008940 <_dtoa_r+0x300>
 8008898:	4620      	mov	r0, r4
 800889a:	f000 fd17 	bl	80092cc <_Balloc>
 800889e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088a0:	6030      	str	r0, [r6, #0]
 80088a2:	f1b9 0f0e 	cmp.w	r9, #14
 80088a6:	f8d3 b000 	ldr.w	fp, [r3]
 80088aa:	f200 80e6 	bhi.w	8008a7a <_dtoa_r+0x43a>
 80088ae:	2d00      	cmp	r5, #0
 80088b0:	f000 80e3 	beq.w	8008a7a <_dtoa_r+0x43a>
 80088b4:	ed9d 7b00 	vldr	d7, [sp]
 80088b8:	f1ba 0f00 	cmp.w	sl, #0
 80088bc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80088c0:	dd74      	ble.n	80089ac <_dtoa_r+0x36c>
 80088c2:	4a2a      	ldr	r2, [pc, #168]	; (800896c <_dtoa_r+0x32c>)
 80088c4:	f00a 030f 	and.w	r3, sl, #15
 80088c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80088cc:	ed93 7b00 	vldr	d7, [r3]
 80088d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80088d4:	06f0      	lsls	r0, r6, #27
 80088d6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80088da:	d565      	bpl.n	80089a8 <_dtoa_r+0x368>
 80088dc:	4b24      	ldr	r3, [pc, #144]	; (8008970 <_dtoa_r+0x330>)
 80088de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80088e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088e6:	f7f7 ffb9 	bl	800085c <__aeabi_ddiv>
 80088ea:	e9cd 0100 	strd	r0, r1, [sp]
 80088ee:	f006 060f 	and.w	r6, r6, #15
 80088f2:	2503      	movs	r5, #3
 80088f4:	4f1e      	ldr	r7, [pc, #120]	; (8008970 <_dtoa_r+0x330>)
 80088f6:	e04c      	b.n	8008992 <_dtoa_r+0x352>
 80088f8:	2301      	movs	r3, #1
 80088fa:	930a      	str	r3, [sp, #40]	; 0x28
 80088fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088fe:	4453      	add	r3, sl
 8008900:	f103 0901 	add.w	r9, r3, #1
 8008904:	9302      	str	r3, [sp, #8]
 8008906:	464b      	mov	r3, r9
 8008908:	2b01      	cmp	r3, #1
 800890a:	bfb8      	it	lt
 800890c:	2301      	movlt	r3, #1
 800890e:	e7ba      	b.n	8008886 <_dtoa_r+0x246>
 8008910:	2300      	movs	r3, #0
 8008912:	e7b2      	b.n	800887a <_dtoa_r+0x23a>
 8008914:	2300      	movs	r3, #0
 8008916:	e7f0      	b.n	80088fa <_dtoa_r+0x2ba>
 8008918:	2501      	movs	r5, #1
 800891a:	2300      	movs	r3, #0
 800891c:	9306      	str	r3, [sp, #24]
 800891e:	950a      	str	r5, [sp, #40]	; 0x28
 8008920:	f04f 33ff 	mov.w	r3, #4294967295
 8008924:	9302      	str	r3, [sp, #8]
 8008926:	4699      	mov	r9, r3
 8008928:	2200      	movs	r2, #0
 800892a:	2312      	movs	r3, #18
 800892c:	920b      	str	r2, [sp, #44]	; 0x2c
 800892e:	e7aa      	b.n	8008886 <_dtoa_r+0x246>
 8008930:	2301      	movs	r3, #1
 8008932:	930a      	str	r3, [sp, #40]	; 0x28
 8008934:	e7f4      	b.n	8008920 <_dtoa_r+0x2e0>
 8008936:	2301      	movs	r3, #1
 8008938:	9302      	str	r3, [sp, #8]
 800893a:	4699      	mov	r9, r3
 800893c:	461a      	mov	r2, r3
 800893e:	e7f5      	b.n	800892c <_dtoa_r+0x2ec>
 8008940:	3101      	adds	r1, #1
 8008942:	6071      	str	r1, [r6, #4]
 8008944:	0052      	lsls	r2, r2, #1
 8008946:	e7a2      	b.n	800888e <_dtoa_r+0x24e>
 8008948:	636f4361 	.word	0x636f4361
 800894c:	3fd287a7 	.word	0x3fd287a7
 8008950:	8b60c8b3 	.word	0x8b60c8b3
 8008954:	3fc68a28 	.word	0x3fc68a28
 8008958:	509f79fb 	.word	0x509f79fb
 800895c:	3fd34413 	.word	0x3fd34413
 8008960:	7ff00000 	.word	0x7ff00000
 8008964:	0800b02d 	.word	0x0800b02d
 8008968:	3ff80000 	.word	0x3ff80000
 800896c:	0800b088 	.word	0x0800b088
 8008970:	0800b060 	.word	0x0800b060
 8008974:	0800b059 	.word	0x0800b059
 8008978:	07f1      	lsls	r1, r6, #31
 800897a:	d508      	bpl.n	800898e <_dtoa_r+0x34e>
 800897c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008984:	f7f7 fe40 	bl	8000608 <__aeabi_dmul>
 8008988:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800898c:	3501      	adds	r5, #1
 800898e:	1076      	asrs	r6, r6, #1
 8008990:	3708      	adds	r7, #8
 8008992:	2e00      	cmp	r6, #0
 8008994:	d1f0      	bne.n	8008978 <_dtoa_r+0x338>
 8008996:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800899a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800899e:	f7f7 ff5d 	bl	800085c <__aeabi_ddiv>
 80089a2:	e9cd 0100 	strd	r0, r1, [sp]
 80089a6:	e01a      	b.n	80089de <_dtoa_r+0x39e>
 80089a8:	2502      	movs	r5, #2
 80089aa:	e7a3      	b.n	80088f4 <_dtoa_r+0x2b4>
 80089ac:	f000 80a0 	beq.w	8008af0 <_dtoa_r+0x4b0>
 80089b0:	f1ca 0600 	rsb	r6, sl, #0
 80089b4:	4b9f      	ldr	r3, [pc, #636]	; (8008c34 <_dtoa_r+0x5f4>)
 80089b6:	4fa0      	ldr	r7, [pc, #640]	; (8008c38 <_dtoa_r+0x5f8>)
 80089b8:	f006 020f 	and.w	r2, r6, #15
 80089bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80089c8:	f7f7 fe1e 	bl	8000608 <__aeabi_dmul>
 80089cc:	e9cd 0100 	strd	r0, r1, [sp]
 80089d0:	1136      	asrs	r6, r6, #4
 80089d2:	2300      	movs	r3, #0
 80089d4:	2502      	movs	r5, #2
 80089d6:	2e00      	cmp	r6, #0
 80089d8:	d17f      	bne.n	8008ada <_dtoa_r+0x49a>
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1e1      	bne.n	80089a2 <_dtoa_r+0x362>
 80089de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f000 8087 	beq.w	8008af4 <_dtoa_r+0x4b4>
 80089e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80089ea:	2200      	movs	r2, #0
 80089ec:	4b93      	ldr	r3, [pc, #588]	; (8008c3c <_dtoa_r+0x5fc>)
 80089ee:	4630      	mov	r0, r6
 80089f0:	4639      	mov	r1, r7
 80089f2:	f7f8 f87b 	bl	8000aec <__aeabi_dcmplt>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	d07c      	beq.n	8008af4 <_dtoa_r+0x4b4>
 80089fa:	f1b9 0f00 	cmp.w	r9, #0
 80089fe:	d079      	beq.n	8008af4 <_dtoa_r+0x4b4>
 8008a00:	9b02      	ldr	r3, [sp, #8]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	dd35      	ble.n	8008a72 <_dtoa_r+0x432>
 8008a06:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008a0a:	9308      	str	r3, [sp, #32]
 8008a0c:	4639      	mov	r1, r7
 8008a0e:	2200      	movs	r2, #0
 8008a10:	4b8b      	ldr	r3, [pc, #556]	; (8008c40 <_dtoa_r+0x600>)
 8008a12:	4630      	mov	r0, r6
 8008a14:	f7f7 fdf8 	bl	8000608 <__aeabi_dmul>
 8008a18:	e9cd 0100 	strd	r0, r1, [sp]
 8008a1c:	9f02      	ldr	r7, [sp, #8]
 8008a1e:	3501      	adds	r5, #1
 8008a20:	4628      	mov	r0, r5
 8008a22:	f7f7 fd87 	bl	8000534 <__aeabi_i2d>
 8008a26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a2a:	f7f7 fded 	bl	8000608 <__aeabi_dmul>
 8008a2e:	2200      	movs	r2, #0
 8008a30:	4b84      	ldr	r3, [pc, #528]	; (8008c44 <_dtoa_r+0x604>)
 8008a32:	f7f7 fc33 	bl	800029c <__adddf3>
 8008a36:	4605      	mov	r5, r0
 8008a38:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008a3c:	2f00      	cmp	r7, #0
 8008a3e:	d15d      	bne.n	8008afc <_dtoa_r+0x4bc>
 8008a40:	2200      	movs	r2, #0
 8008a42:	4b81      	ldr	r3, [pc, #516]	; (8008c48 <_dtoa_r+0x608>)
 8008a44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a48:	f7f7 fc26 	bl	8000298 <__aeabi_dsub>
 8008a4c:	462a      	mov	r2, r5
 8008a4e:	4633      	mov	r3, r6
 8008a50:	e9cd 0100 	strd	r0, r1, [sp]
 8008a54:	f7f8 f868 	bl	8000b28 <__aeabi_dcmpgt>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	f040 8288 	bne.w	8008f6e <_dtoa_r+0x92e>
 8008a5e:	462a      	mov	r2, r5
 8008a60:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008a64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a68:	f7f8 f840 	bl	8000aec <__aeabi_dcmplt>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	f040 827c 	bne.w	8008f6a <_dtoa_r+0x92a>
 8008a72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008a76:	e9cd 2300 	strd	r2, r3, [sp]
 8008a7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f2c0 8150 	blt.w	8008d22 <_dtoa_r+0x6e2>
 8008a82:	f1ba 0f0e 	cmp.w	sl, #14
 8008a86:	f300 814c 	bgt.w	8008d22 <_dtoa_r+0x6e2>
 8008a8a:	4b6a      	ldr	r3, [pc, #424]	; (8008c34 <_dtoa_r+0x5f4>)
 8008a8c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008a90:	ed93 7b00 	vldr	d7, [r3]
 8008a94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008a9c:	f280 80d8 	bge.w	8008c50 <_dtoa_r+0x610>
 8008aa0:	f1b9 0f00 	cmp.w	r9, #0
 8008aa4:	f300 80d4 	bgt.w	8008c50 <_dtoa_r+0x610>
 8008aa8:	f040 825e 	bne.w	8008f68 <_dtoa_r+0x928>
 8008aac:	2200      	movs	r2, #0
 8008aae:	4b66      	ldr	r3, [pc, #408]	; (8008c48 <_dtoa_r+0x608>)
 8008ab0:	ec51 0b17 	vmov	r0, r1, d7
 8008ab4:	f7f7 fda8 	bl	8000608 <__aeabi_dmul>
 8008ab8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008abc:	f7f8 f82a 	bl	8000b14 <__aeabi_dcmpge>
 8008ac0:	464f      	mov	r7, r9
 8008ac2:	464e      	mov	r6, r9
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	f040 8234 	bne.w	8008f32 <_dtoa_r+0x8f2>
 8008aca:	2331      	movs	r3, #49	; 0x31
 8008acc:	f10b 0501 	add.w	r5, fp, #1
 8008ad0:	f88b 3000 	strb.w	r3, [fp]
 8008ad4:	f10a 0a01 	add.w	sl, sl, #1
 8008ad8:	e22f      	b.n	8008f3a <_dtoa_r+0x8fa>
 8008ada:	07f2      	lsls	r2, r6, #31
 8008adc:	d505      	bpl.n	8008aea <_dtoa_r+0x4aa>
 8008ade:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ae2:	f7f7 fd91 	bl	8000608 <__aeabi_dmul>
 8008ae6:	3501      	adds	r5, #1
 8008ae8:	2301      	movs	r3, #1
 8008aea:	1076      	asrs	r6, r6, #1
 8008aec:	3708      	adds	r7, #8
 8008aee:	e772      	b.n	80089d6 <_dtoa_r+0x396>
 8008af0:	2502      	movs	r5, #2
 8008af2:	e774      	b.n	80089de <_dtoa_r+0x39e>
 8008af4:	f8cd a020 	str.w	sl, [sp, #32]
 8008af8:	464f      	mov	r7, r9
 8008afa:	e791      	b.n	8008a20 <_dtoa_r+0x3e0>
 8008afc:	4b4d      	ldr	r3, [pc, #308]	; (8008c34 <_dtoa_r+0x5f4>)
 8008afe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b02:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d047      	beq.n	8008b9c <_dtoa_r+0x55c>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	460b      	mov	r3, r1
 8008b10:	2000      	movs	r0, #0
 8008b12:	494e      	ldr	r1, [pc, #312]	; (8008c4c <_dtoa_r+0x60c>)
 8008b14:	f7f7 fea2 	bl	800085c <__aeabi_ddiv>
 8008b18:	462a      	mov	r2, r5
 8008b1a:	4633      	mov	r3, r6
 8008b1c:	f7f7 fbbc 	bl	8000298 <__aeabi_dsub>
 8008b20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008b24:	465d      	mov	r5, fp
 8008b26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b2a:	f7f8 f81d 	bl	8000b68 <__aeabi_d2iz>
 8008b2e:	4606      	mov	r6, r0
 8008b30:	f7f7 fd00 	bl	8000534 <__aeabi_i2d>
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b3c:	f7f7 fbac 	bl	8000298 <__aeabi_dsub>
 8008b40:	3630      	adds	r6, #48	; 0x30
 8008b42:	f805 6b01 	strb.w	r6, [r5], #1
 8008b46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008b4a:	e9cd 0100 	strd	r0, r1, [sp]
 8008b4e:	f7f7 ffcd 	bl	8000aec <__aeabi_dcmplt>
 8008b52:	2800      	cmp	r0, #0
 8008b54:	d163      	bne.n	8008c1e <_dtoa_r+0x5de>
 8008b56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	4937      	ldr	r1, [pc, #220]	; (8008c3c <_dtoa_r+0x5fc>)
 8008b5e:	f7f7 fb9b 	bl	8000298 <__aeabi_dsub>
 8008b62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008b66:	f7f7 ffc1 	bl	8000aec <__aeabi_dcmplt>
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	f040 80b7 	bne.w	8008cde <_dtoa_r+0x69e>
 8008b70:	eba5 030b 	sub.w	r3, r5, fp
 8008b74:	429f      	cmp	r7, r3
 8008b76:	f77f af7c 	ble.w	8008a72 <_dtoa_r+0x432>
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	4b30      	ldr	r3, [pc, #192]	; (8008c40 <_dtoa_r+0x600>)
 8008b7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b82:	f7f7 fd41 	bl	8000608 <__aeabi_dmul>
 8008b86:	2200      	movs	r2, #0
 8008b88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008b8c:	4b2c      	ldr	r3, [pc, #176]	; (8008c40 <_dtoa_r+0x600>)
 8008b8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b92:	f7f7 fd39 	bl	8000608 <__aeabi_dmul>
 8008b96:	e9cd 0100 	strd	r0, r1, [sp]
 8008b9a:	e7c4      	b.n	8008b26 <_dtoa_r+0x4e6>
 8008b9c:	462a      	mov	r2, r5
 8008b9e:	4633      	mov	r3, r6
 8008ba0:	f7f7 fd32 	bl	8000608 <__aeabi_dmul>
 8008ba4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008ba8:	eb0b 0507 	add.w	r5, fp, r7
 8008bac:	465e      	mov	r6, fp
 8008bae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bb2:	f7f7 ffd9 	bl	8000b68 <__aeabi_d2iz>
 8008bb6:	4607      	mov	r7, r0
 8008bb8:	f7f7 fcbc 	bl	8000534 <__aeabi_i2d>
 8008bbc:	3730      	adds	r7, #48	; 0x30
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bc6:	f7f7 fb67 	bl	8000298 <__aeabi_dsub>
 8008bca:	f806 7b01 	strb.w	r7, [r6], #1
 8008bce:	42ae      	cmp	r6, r5
 8008bd0:	e9cd 0100 	strd	r0, r1, [sp]
 8008bd4:	f04f 0200 	mov.w	r2, #0
 8008bd8:	d126      	bne.n	8008c28 <_dtoa_r+0x5e8>
 8008bda:	4b1c      	ldr	r3, [pc, #112]	; (8008c4c <_dtoa_r+0x60c>)
 8008bdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008be0:	f7f7 fb5c 	bl	800029c <__adddf3>
 8008be4:	4602      	mov	r2, r0
 8008be6:	460b      	mov	r3, r1
 8008be8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bec:	f7f7 ff9c 	bl	8000b28 <__aeabi_dcmpgt>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	d174      	bne.n	8008cde <_dtoa_r+0x69e>
 8008bf4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	4914      	ldr	r1, [pc, #80]	; (8008c4c <_dtoa_r+0x60c>)
 8008bfc:	f7f7 fb4c 	bl	8000298 <__aeabi_dsub>
 8008c00:	4602      	mov	r2, r0
 8008c02:	460b      	mov	r3, r1
 8008c04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c08:	f7f7 ff70 	bl	8000aec <__aeabi_dcmplt>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	f43f af30 	beq.w	8008a72 <_dtoa_r+0x432>
 8008c12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c16:	2b30      	cmp	r3, #48	; 0x30
 8008c18:	f105 32ff 	add.w	r2, r5, #4294967295
 8008c1c:	d002      	beq.n	8008c24 <_dtoa_r+0x5e4>
 8008c1e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008c22:	e04a      	b.n	8008cba <_dtoa_r+0x67a>
 8008c24:	4615      	mov	r5, r2
 8008c26:	e7f4      	b.n	8008c12 <_dtoa_r+0x5d2>
 8008c28:	4b05      	ldr	r3, [pc, #20]	; (8008c40 <_dtoa_r+0x600>)
 8008c2a:	f7f7 fced 	bl	8000608 <__aeabi_dmul>
 8008c2e:	e9cd 0100 	strd	r0, r1, [sp]
 8008c32:	e7bc      	b.n	8008bae <_dtoa_r+0x56e>
 8008c34:	0800b088 	.word	0x0800b088
 8008c38:	0800b060 	.word	0x0800b060
 8008c3c:	3ff00000 	.word	0x3ff00000
 8008c40:	40240000 	.word	0x40240000
 8008c44:	401c0000 	.word	0x401c0000
 8008c48:	40140000 	.word	0x40140000
 8008c4c:	3fe00000 	.word	0x3fe00000
 8008c50:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008c54:	465d      	mov	r5, fp
 8008c56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	4639      	mov	r1, r7
 8008c5e:	f7f7 fdfd 	bl	800085c <__aeabi_ddiv>
 8008c62:	f7f7 ff81 	bl	8000b68 <__aeabi_d2iz>
 8008c66:	4680      	mov	r8, r0
 8008c68:	f7f7 fc64 	bl	8000534 <__aeabi_i2d>
 8008c6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c70:	f7f7 fcca 	bl	8000608 <__aeabi_dmul>
 8008c74:	4602      	mov	r2, r0
 8008c76:	460b      	mov	r3, r1
 8008c78:	4630      	mov	r0, r6
 8008c7a:	4639      	mov	r1, r7
 8008c7c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008c80:	f7f7 fb0a 	bl	8000298 <__aeabi_dsub>
 8008c84:	f805 6b01 	strb.w	r6, [r5], #1
 8008c88:	eba5 060b 	sub.w	r6, r5, fp
 8008c8c:	45b1      	cmp	r9, r6
 8008c8e:	4602      	mov	r2, r0
 8008c90:	460b      	mov	r3, r1
 8008c92:	d139      	bne.n	8008d08 <_dtoa_r+0x6c8>
 8008c94:	f7f7 fb02 	bl	800029c <__adddf3>
 8008c98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c9c:	4606      	mov	r6, r0
 8008c9e:	460f      	mov	r7, r1
 8008ca0:	f7f7 ff42 	bl	8000b28 <__aeabi_dcmpgt>
 8008ca4:	b9c8      	cbnz	r0, 8008cda <_dtoa_r+0x69a>
 8008ca6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008caa:	4630      	mov	r0, r6
 8008cac:	4639      	mov	r1, r7
 8008cae:	f7f7 ff13 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cb2:	b110      	cbz	r0, 8008cba <_dtoa_r+0x67a>
 8008cb4:	f018 0f01 	tst.w	r8, #1
 8008cb8:	d10f      	bne.n	8008cda <_dtoa_r+0x69a>
 8008cba:	9904      	ldr	r1, [sp, #16]
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	f000 fb39 	bl	8009334 <_Bfree>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008cc6:	702b      	strb	r3, [r5, #0]
 8008cc8:	f10a 0301 	add.w	r3, sl, #1
 8008ccc:	6013      	str	r3, [r2, #0]
 8008cce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f000 8241 	beq.w	8009158 <_dtoa_r+0xb18>
 8008cd6:	601d      	str	r5, [r3, #0]
 8008cd8:	e23e      	b.n	8009158 <_dtoa_r+0xb18>
 8008cda:	f8cd a020 	str.w	sl, [sp, #32]
 8008cde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008ce2:	2a39      	cmp	r2, #57	; 0x39
 8008ce4:	f105 33ff 	add.w	r3, r5, #4294967295
 8008ce8:	d108      	bne.n	8008cfc <_dtoa_r+0x6bc>
 8008cea:	459b      	cmp	fp, r3
 8008cec:	d10a      	bne.n	8008d04 <_dtoa_r+0x6c4>
 8008cee:	9b08      	ldr	r3, [sp, #32]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	9308      	str	r3, [sp, #32]
 8008cf4:	2330      	movs	r3, #48	; 0x30
 8008cf6:	f88b 3000 	strb.w	r3, [fp]
 8008cfa:	465b      	mov	r3, fp
 8008cfc:	781a      	ldrb	r2, [r3, #0]
 8008cfe:	3201      	adds	r2, #1
 8008d00:	701a      	strb	r2, [r3, #0]
 8008d02:	e78c      	b.n	8008c1e <_dtoa_r+0x5de>
 8008d04:	461d      	mov	r5, r3
 8008d06:	e7ea      	b.n	8008cde <_dtoa_r+0x69e>
 8008d08:	2200      	movs	r2, #0
 8008d0a:	4b9b      	ldr	r3, [pc, #620]	; (8008f78 <_dtoa_r+0x938>)
 8008d0c:	f7f7 fc7c 	bl	8000608 <__aeabi_dmul>
 8008d10:	2200      	movs	r2, #0
 8008d12:	2300      	movs	r3, #0
 8008d14:	4606      	mov	r6, r0
 8008d16:	460f      	mov	r7, r1
 8008d18:	f7f7 fede 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	d09a      	beq.n	8008c56 <_dtoa_r+0x616>
 8008d20:	e7cb      	b.n	8008cba <_dtoa_r+0x67a>
 8008d22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d24:	2a00      	cmp	r2, #0
 8008d26:	f000 808b 	beq.w	8008e40 <_dtoa_r+0x800>
 8008d2a:	9a06      	ldr	r2, [sp, #24]
 8008d2c:	2a01      	cmp	r2, #1
 8008d2e:	dc6e      	bgt.n	8008e0e <_dtoa_r+0x7ce>
 8008d30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008d32:	2a00      	cmp	r2, #0
 8008d34:	d067      	beq.n	8008e06 <_dtoa_r+0x7c6>
 8008d36:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008d3a:	9f07      	ldr	r7, [sp, #28]
 8008d3c:	9d05      	ldr	r5, [sp, #20]
 8008d3e:	9a05      	ldr	r2, [sp, #20]
 8008d40:	2101      	movs	r1, #1
 8008d42:	441a      	add	r2, r3
 8008d44:	4620      	mov	r0, r4
 8008d46:	9205      	str	r2, [sp, #20]
 8008d48:	4498      	add	r8, r3
 8008d4a:	f000 fb93 	bl	8009474 <__i2b>
 8008d4e:	4606      	mov	r6, r0
 8008d50:	2d00      	cmp	r5, #0
 8008d52:	dd0c      	ble.n	8008d6e <_dtoa_r+0x72e>
 8008d54:	f1b8 0f00 	cmp.w	r8, #0
 8008d58:	dd09      	ble.n	8008d6e <_dtoa_r+0x72e>
 8008d5a:	4545      	cmp	r5, r8
 8008d5c:	9a05      	ldr	r2, [sp, #20]
 8008d5e:	462b      	mov	r3, r5
 8008d60:	bfa8      	it	ge
 8008d62:	4643      	movge	r3, r8
 8008d64:	1ad2      	subs	r2, r2, r3
 8008d66:	9205      	str	r2, [sp, #20]
 8008d68:	1aed      	subs	r5, r5, r3
 8008d6a:	eba8 0803 	sub.w	r8, r8, r3
 8008d6e:	9b07      	ldr	r3, [sp, #28]
 8008d70:	b1eb      	cbz	r3, 8008dae <_dtoa_r+0x76e>
 8008d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d067      	beq.n	8008e48 <_dtoa_r+0x808>
 8008d78:	b18f      	cbz	r7, 8008d9e <_dtoa_r+0x75e>
 8008d7a:	4631      	mov	r1, r6
 8008d7c:	463a      	mov	r2, r7
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f000 fc18 	bl	80095b4 <__pow5mult>
 8008d84:	9a04      	ldr	r2, [sp, #16]
 8008d86:	4601      	mov	r1, r0
 8008d88:	4606      	mov	r6, r0
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f000 fb7b 	bl	8009486 <__multiply>
 8008d90:	9904      	ldr	r1, [sp, #16]
 8008d92:	9008      	str	r0, [sp, #32]
 8008d94:	4620      	mov	r0, r4
 8008d96:	f000 facd 	bl	8009334 <_Bfree>
 8008d9a:	9b08      	ldr	r3, [sp, #32]
 8008d9c:	9304      	str	r3, [sp, #16]
 8008d9e:	9b07      	ldr	r3, [sp, #28]
 8008da0:	1bda      	subs	r2, r3, r7
 8008da2:	d004      	beq.n	8008dae <_dtoa_r+0x76e>
 8008da4:	9904      	ldr	r1, [sp, #16]
 8008da6:	4620      	mov	r0, r4
 8008da8:	f000 fc04 	bl	80095b4 <__pow5mult>
 8008dac:	9004      	str	r0, [sp, #16]
 8008dae:	2101      	movs	r1, #1
 8008db0:	4620      	mov	r0, r4
 8008db2:	f000 fb5f 	bl	8009474 <__i2b>
 8008db6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008db8:	4607      	mov	r7, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f000 81d0 	beq.w	8009160 <_dtoa_r+0xb20>
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	4601      	mov	r1, r0
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f000 fbf5 	bl	80095b4 <__pow5mult>
 8008dca:	9b06      	ldr	r3, [sp, #24]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	4607      	mov	r7, r0
 8008dd0:	dc40      	bgt.n	8008e54 <_dtoa_r+0x814>
 8008dd2:	9b00      	ldr	r3, [sp, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d139      	bne.n	8008e4c <_dtoa_r+0x80c>
 8008dd8:	9b01      	ldr	r3, [sp, #4]
 8008dda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d136      	bne.n	8008e50 <_dtoa_r+0x810>
 8008de2:	9b01      	ldr	r3, [sp, #4]
 8008de4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008de8:	0d1b      	lsrs	r3, r3, #20
 8008dea:	051b      	lsls	r3, r3, #20
 8008dec:	b12b      	cbz	r3, 8008dfa <_dtoa_r+0x7ba>
 8008dee:	9b05      	ldr	r3, [sp, #20]
 8008df0:	3301      	adds	r3, #1
 8008df2:	9305      	str	r3, [sp, #20]
 8008df4:	f108 0801 	add.w	r8, r8, #1
 8008df8:	2301      	movs	r3, #1
 8008dfa:	9307      	str	r3, [sp, #28]
 8008dfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d12a      	bne.n	8008e58 <_dtoa_r+0x818>
 8008e02:	2001      	movs	r0, #1
 8008e04:	e030      	b.n	8008e68 <_dtoa_r+0x828>
 8008e06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e08:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008e0c:	e795      	b.n	8008d3a <_dtoa_r+0x6fa>
 8008e0e:	9b07      	ldr	r3, [sp, #28]
 8008e10:	f109 37ff 	add.w	r7, r9, #4294967295
 8008e14:	42bb      	cmp	r3, r7
 8008e16:	bfbf      	itttt	lt
 8008e18:	9b07      	ldrlt	r3, [sp, #28]
 8008e1a:	9707      	strlt	r7, [sp, #28]
 8008e1c:	1afa      	sublt	r2, r7, r3
 8008e1e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008e20:	bfbb      	ittet	lt
 8008e22:	189b      	addlt	r3, r3, r2
 8008e24:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008e26:	1bdf      	subge	r7, r3, r7
 8008e28:	2700      	movlt	r7, #0
 8008e2a:	f1b9 0f00 	cmp.w	r9, #0
 8008e2e:	bfb5      	itete	lt
 8008e30:	9b05      	ldrlt	r3, [sp, #20]
 8008e32:	9d05      	ldrge	r5, [sp, #20]
 8008e34:	eba3 0509 	sublt.w	r5, r3, r9
 8008e38:	464b      	movge	r3, r9
 8008e3a:	bfb8      	it	lt
 8008e3c:	2300      	movlt	r3, #0
 8008e3e:	e77e      	b.n	8008d3e <_dtoa_r+0x6fe>
 8008e40:	9f07      	ldr	r7, [sp, #28]
 8008e42:	9d05      	ldr	r5, [sp, #20]
 8008e44:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008e46:	e783      	b.n	8008d50 <_dtoa_r+0x710>
 8008e48:	9a07      	ldr	r2, [sp, #28]
 8008e4a:	e7ab      	b.n	8008da4 <_dtoa_r+0x764>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	e7d4      	b.n	8008dfa <_dtoa_r+0x7ba>
 8008e50:	9b00      	ldr	r3, [sp, #0]
 8008e52:	e7d2      	b.n	8008dfa <_dtoa_r+0x7ba>
 8008e54:	2300      	movs	r3, #0
 8008e56:	9307      	str	r3, [sp, #28]
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008e5e:	6918      	ldr	r0, [r3, #16]
 8008e60:	f000 faba 	bl	80093d8 <__hi0bits>
 8008e64:	f1c0 0020 	rsb	r0, r0, #32
 8008e68:	4440      	add	r0, r8
 8008e6a:	f010 001f 	ands.w	r0, r0, #31
 8008e6e:	d047      	beq.n	8008f00 <_dtoa_r+0x8c0>
 8008e70:	f1c0 0320 	rsb	r3, r0, #32
 8008e74:	2b04      	cmp	r3, #4
 8008e76:	dd3b      	ble.n	8008ef0 <_dtoa_r+0x8b0>
 8008e78:	9b05      	ldr	r3, [sp, #20]
 8008e7a:	f1c0 001c 	rsb	r0, r0, #28
 8008e7e:	4403      	add	r3, r0
 8008e80:	9305      	str	r3, [sp, #20]
 8008e82:	4405      	add	r5, r0
 8008e84:	4480      	add	r8, r0
 8008e86:	9b05      	ldr	r3, [sp, #20]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	dd05      	ble.n	8008e98 <_dtoa_r+0x858>
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	9904      	ldr	r1, [sp, #16]
 8008e90:	4620      	mov	r0, r4
 8008e92:	f000 fbdd 	bl	8009650 <__lshift>
 8008e96:	9004      	str	r0, [sp, #16]
 8008e98:	f1b8 0f00 	cmp.w	r8, #0
 8008e9c:	dd05      	ble.n	8008eaa <_dtoa_r+0x86a>
 8008e9e:	4639      	mov	r1, r7
 8008ea0:	4642      	mov	r2, r8
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f000 fbd4 	bl	8009650 <__lshift>
 8008ea8:	4607      	mov	r7, r0
 8008eaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008eac:	b353      	cbz	r3, 8008f04 <_dtoa_r+0x8c4>
 8008eae:	4639      	mov	r1, r7
 8008eb0:	9804      	ldr	r0, [sp, #16]
 8008eb2:	f000 fc21 	bl	80096f8 <__mcmp>
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	da24      	bge.n	8008f04 <_dtoa_r+0x8c4>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	220a      	movs	r2, #10
 8008ebe:	9904      	ldr	r1, [sp, #16]
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f000 fa4e 	bl	8009362 <__multadd>
 8008ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ec8:	9004      	str	r0, [sp, #16]
 8008eca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f000 814d 	beq.w	800916e <_dtoa_r+0xb2e>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	4631      	mov	r1, r6
 8008ed8:	220a      	movs	r2, #10
 8008eda:	4620      	mov	r0, r4
 8008edc:	f000 fa41 	bl	8009362 <__multadd>
 8008ee0:	9b02      	ldr	r3, [sp, #8]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	4606      	mov	r6, r0
 8008ee6:	dc4f      	bgt.n	8008f88 <_dtoa_r+0x948>
 8008ee8:	9b06      	ldr	r3, [sp, #24]
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	dd4c      	ble.n	8008f88 <_dtoa_r+0x948>
 8008eee:	e011      	b.n	8008f14 <_dtoa_r+0x8d4>
 8008ef0:	d0c9      	beq.n	8008e86 <_dtoa_r+0x846>
 8008ef2:	9a05      	ldr	r2, [sp, #20]
 8008ef4:	331c      	adds	r3, #28
 8008ef6:	441a      	add	r2, r3
 8008ef8:	9205      	str	r2, [sp, #20]
 8008efa:	441d      	add	r5, r3
 8008efc:	4498      	add	r8, r3
 8008efe:	e7c2      	b.n	8008e86 <_dtoa_r+0x846>
 8008f00:	4603      	mov	r3, r0
 8008f02:	e7f6      	b.n	8008ef2 <_dtoa_r+0x8b2>
 8008f04:	f1b9 0f00 	cmp.w	r9, #0
 8008f08:	dc38      	bgt.n	8008f7c <_dtoa_r+0x93c>
 8008f0a:	9b06      	ldr	r3, [sp, #24]
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	dd35      	ble.n	8008f7c <_dtoa_r+0x93c>
 8008f10:	f8cd 9008 	str.w	r9, [sp, #8]
 8008f14:	9b02      	ldr	r3, [sp, #8]
 8008f16:	b963      	cbnz	r3, 8008f32 <_dtoa_r+0x8f2>
 8008f18:	4639      	mov	r1, r7
 8008f1a:	2205      	movs	r2, #5
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	f000 fa20 	bl	8009362 <__multadd>
 8008f22:	4601      	mov	r1, r0
 8008f24:	4607      	mov	r7, r0
 8008f26:	9804      	ldr	r0, [sp, #16]
 8008f28:	f000 fbe6 	bl	80096f8 <__mcmp>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	f73f adcc 	bgt.w	8008aca <_dtoa_r+0x48a>
 8008f32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f34:	465d      	mov	r5, fp
 8008f36:	ea6f 0a03 	mvn.w	sl, r3
 8008f3a:	f04f 0900 	mov.w	r9, #0
 8008f3e:	4639      	mov	r1, r7
 8008f40:	4620      	mov	r0, r4
 8008f42:	f000 f9f7 	bl	8009334 <_Bfree>
 8008f46:	2e00      	cmp	r6, #0
 8008f48:	f43f aeb7 	beq.w	8008cba <_dtoa_r+0x67a>
 8008f4c:	f1b9 0f00 	cmp.w	r9, #0
 8008f50:	d005      	beq.n	8008f5e <_dtoa_r+0x91e>
 8008f52:	45b1      	cmp	r9, r6
 8008f54:	d003      	beq.n	8008f5e <_dtoa_r+0x91e>
 8008f56:	4649      	mov	r1, r9
 8008f58:	4620      	mov	r0, r4
 8008f5a:	f000 f9eb 	bl	8009334 <_Bfree>
 8008f5e:	4631      	mov	r1, r6
 8008f60:	4620      	mov	r0, r4
 8008f62:	f000 f9e7 	bl	8009334 <_Bfree>
 8008f66:	e6a8      	b.n	8008cba <_dtoa_r+0x67a>
 8008f68:	2700      	movs	r7, #0
 8008f6a:	463e      	mov	r6, r7
 8008f6c:	e7e1      	b.n	8008f32 <_dtoa_r+0x8f2>
 8008f6e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008f72:	463e      	mov	r6, r7
 8008f74:	e5a9      	b.n	8008aca <_dtoa_r+0x48a>
 8008f76:	bf00      	nop
 8008f78:	40240000 	.word	0x40240000
 8008f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f7e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f000 80fa 	beq.w	800917c <_dtoa_r+0xb3c>
 8008f88:	2d00      	cmp	r5, #0
 8008f8a:	dd05      	ble.n	8008f98 <_dtoa_r+0x958>
 8008f8c:	4631      	mov	r1, r6
 8008f8e:	462a      	mov	r2, r5
 8008f90:	4620      	mov	r0, r4
 8008f92:	f000 fb5d 	bl	8009650 <__lshift>
 8008f96:	4606      	mov	r6, r0
 8008f98:	9b07      	ldr	r3, [sp, #28]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d04c      	beq.n	8009038 <_dtoa_r+0x9f8>
 8008f9e:	6871      	ldr	r1, [r6, #4]
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	f000 f993 	bl	80092cc <_Balloc>
 8008fa6:	6932      	ldr	r2, [r6, #16]
 8008fa8:	3202      	adds	r2, #2
 8008faa:	4605      	mov	r5, r0
 8008fac:	0092      	lsls	r2, r2, #2
 8008fae:	f106 010c 	add.w	r1, r6, #12
 8008fb2:	300c      	adds	r0, #12
 8008fb4:	f7fe fc4a 	bl	800784c <memcpy>
 8008fb8:	2201      	movs	r2, #1
 8008fba:	4629      	mov	r1, r5
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	f000 fb47 	bl	8009650 <__lshift>
 8008fc2:	9b00      	ldr	r3, [sp, #0]
 8008fc4:	f8cd b014 	str.w	fp, [sp, #20]
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	46b1      	mov	r9, r6
 8008fce:	9307      	str	r3, [sp, #28]
 8008fd0:	4606      	mov	r6, r0
 8008fd2:	4639      	mov	r1, r7
 8008fd4:	9804      	ldr	r0, [sp, #16]
 8008fd6:	f7ff faa7 	bl	8008528 <quorem>
 8008fda:	4649      	mov	r1, r9
 8008fdc:	4605      	mov	r5, r0
 8008fde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008fe2:	9804      	ldr	r0, [sp, #16]
 8008fe4:	f000 fb88 	bl	80096f8 <__mcmp>
 8008fe8:	4632      	mov	r2, r6
 8008fea:	9000      	str	r0, [sp, #0]
 8008fec:	4639      	mov	r1, r7
 8008fee:	4620      	mov	r0, r4
 8008ff0:	f000 fb9c 	bl	800972c <__mdiff>
 8008ff4:	68c3      	ldr	r3, [r0, #12]
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	bb03      	cbnz	r3, 800903c <_dtoa_r+0x9fc>
 8008ffa:	4601      	mov	r1, r0
 8008ffc:	9008      	str	r0, [sp, #32]
 8008ffe:	9804      	ldr	r0, [sp, #16]
 8009000:	f000 fb7a 	bl	80096f8 <__mcmp>
 8009004:	9a08      	ldr	r2, [sp, #32]
 8009006:	4603      	mov	r3, r0
 8009008:	4611      	mov	r1, r2
 800900a:	4620      	mov	r0, r4
 800900c:	9308      	str	r3, [sp, #32]
 800900e:	f000 f991 	bl	8009334 <_Bfree>
 8009012:	9b08      	ldr	r3, [sp, #32]
 8009014:	b9a3      	cbnz	r3, 8009040 <_dtoa_r+0xa00>
 8009016:	9a06      	ldr	r2, [sp, #24]
 8009018:	b992      	cbnz	r2, 8009040 <_dtoa_r+0xa00>
 800901a:	9a07      	ldr	r2, [sp, #28]
 800901c:	b982      	cbnz	r2, 8009040 <_dtoa_r+0xa00>
 800901e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009022:	d029      	beq.n	8009078 <_dtoa_r+0xa38>
 8009024:	9b00      	ldr	r3, [sp, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	dd01      	ble.n	800902e <_dtoa_r+0x9ee>
 800902a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800902e:	9b05      	ldr	r3, [sp, #20]
 8009030:	1c5d      	adds	r5, r3, #1
 8009032:	f883 8000 	strb.w	r8, [r3]
 8009036:	e782      	b.n	8008f3e <_dtoa_r+0x8fe>
 8009038:	4630      	mov	r0, r6
 800903a:	e7c2      	b.n	8008fc2 <_dtoa_r+0x982>
 800903c:	2301      	movs	r3, #1
 800903e:	e7e3      	b.n	8009008 <_dtoa_r+0x9c8>
 8009040:	9a00      	ldr	r2, [sp, #0]
 8009042:	2a00      	cmp	r2, #0
 8009044:	db04      	blt.n	8009050 <_dtoa_r+0xa10>
 8009046:	d125      	bne.n	8009094 <_dtoa_r+0xa54>
 8009048:	9a06      	ldr	r2, [sp, #24]
 800904a:	bb1a      	cbnz	r2, 8009094 <_dtoa_r+0xa54>
 800904c:	9a07      	ldr	r2, [sp, #28]
 800904e:	bb0a      	cbnz	r2, 8009094 <_dtoa_r+0xa54>
 8009050:	2b00      	cmp	r3, #0
 8009052:	ddec      	ble.n	800902e <_dtoa_r+0x9ee>
 8009054:	2201      	movs	r2, #1
 8009056:	9904      	ldr	r1, [sp, #16]
 8009058:	4620      	mov	r0, r4
 800905a:	f000 faf9 	bl	8009650 <__lshift>
 800905e:	4639      	mov	r1, r7
 8009060:	9004      	str	r0, [sp, #16]
 8009062:	f000 fb49 	bl	80096f8 <__mcmp>
 8009066:	2800      	cmp	r0, #0
 8009068:	dc03      	bgt.n	8009072 <_dtoa_r+0xa32>
 800906a:	d1e0      	bne.n	800902e <_dtoa_r+0x9ee>
 800906c:	f018 0f01 	tst.w	r8, #1
 8009070:	d0dd      	beq.n	800902e <_dtoa_r+0x9ee>
 8009072:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009076:	d1d8      	bne.n	800902a <_dtoa_r+0x9ea>
 8009078:	9b05      	ldr	r3, [sp, #20]
 800907a:	9a05      	ldr	r2, [sp, #20]
 800907c:	1c5d      	adds	r5, r3, #1
 800907e:	2339      	movs	r3, #57	; 0x39
 8009080:	7013      	strb	r3, [r2, #0]
 8009082:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009086:	2b39      	cmp	r3, #57	; 0x39
 8009088:	f105 32ff 	add.w	r2, r5, #4294967295
 800908c:	d04f      	beq.n	800912e <_dtoa_r+0xaee>
 800908e:	3301      	adds	r3, #1
 8009090:	7013      	strb	r3, [r2, #0]
 8009092:	e754      	b.n	8008f3e <_dtoa_r+0x8fe>
 8009094:	9a05      	ldr	r2, [sp, #20]
 8009096:	2b00      	cmp	r3, #0
 8009098:	f102 0501 	add.w	r5, r2, #1
 800909c:	dd06      	ble.n	80090ac <_dtoa_r+0xa6c>
 800909e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80090a2:	d0e9      	beq.n	8009078 <_dtoa_r+0xa38>
 80090a4:	f108 0801 	add.w	r8, r8, #1
 80090a8:	9b05      	ldr	r3, [sp, #20]
 80090aa:	e7c2      	b.n	8009032 <_dtoa_r+0x9f2>
 80090ac:	9a02      	ldr	r2, [sp, #8]
 80090ae:	f805 8c01 	strb.w	r8, [r5, #-1]
 80090b2:	eba5 030b 	sub.w	r3, r5, fp
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d021      	beq.n	80090fe <_dtoa_r+0xabe>
 80090ba:	2300      	movs	r3, #0
 80090bc:	220a      	movs	r2, #10
 80090be:	9904      	ldr	r1, [sp, #16]
 80090c0:	4620      	mov	r0, r4
 80090c2:	f000 f94e 	bl	8009362 <__multadd>
 80090c6:	45b1      	cmp	r9, r6
 80090c8:	9004      	str	r0, [sp, #16]
 80090ca:	f04f 0300 	mov.w	r3, #0
 80090ce:	f04f 020a 	mov.w	r2, #10
 80090d2:	4649      	mov	r1, r9
 80090d4:	4620      	mov	r0, r4
 80090d6:	d105      	bne.n	80090e4 <_dtoa_r+0xaa4>
 80090d8:	f000 f943 	bl	8009362 <__multadd>
 80090dc:	4681      	mov	r9, r0
 80090de:	4606      	mov	r6, r0
 80090e0:	9505      	str	r5, [sp, #20]
 80090e2:	e776      	b.n	8008fd2 <_dtoa_r+0x992>
 80090e4:	f000 f93d 	bl	8009362 <__multadd>
 80090e8:	4631      	mov	r1, r6
 80090ea:	4681      	mov	r9, r0
 80090ec:	2300      	movs	r3, #0
 80090ee:	220a      	movs	r2, #10
 80090f0:	4620      	mov	r0, r4
 80090f2:	f000 f936 	bl	8009362 <__multadd>
 80090f6:	4606      	mov	r6, r0
 80090f8:	e7f2      	b.n	80090e0 <_dtoa_r+0xaa0>
 80090fa:	f04f 0900 	mov.w	r9, #0
 80090fe:	2201      	movs	r2, #1
 8009100:	9904      	ldr	r1, [sp, #16]
 8009102:	4620      	mov	r0, r4
 8009104:	f000 faa4 	bl	8009650 <__lshift>
 8009108:	4639      	mov	r1, r7
 800910a:	9004      	str	r0, [sp, #16]
 800910c:	f000 faf4 	bl	80096f8 <__mcmp>
 8009110:	2800      	cmp	r0, #0
 8009112:	dcb6      	bgt.n	8009082 <_dtoa_r+0xa42>
 8009114:	d102      	bne.n	800911c <_dtoa_r+0xadc>
 8009116:	f018 0f01 	tst.w	r8, #1
 800911a:	d1b2      	bne.n	8009082 <_dtoa_r+0xa42>
 800911c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009120:	2b30      	cmp	r3, #48	; 0x30
 8009122:	f105 32ff 	add.w	r2, r5, #4294967295
 8009126:	f47f af0a 	bne.w	8008f3e <_dtoa_r+0x8fe>
 800912a:	4615      	mov	r5, r2
 800912c:	e7f6      	b.n	800911c <_dtoa_r+0xadc>
 800912e:	4593      	cmp	fp, r2
 8009130:	d105      	bne.n	800913e <_dtoa_r+0xafe>
 8009132:	2331      	movs	r3, #49	; 0x31
 8009134:	f10a 0a01 	add.w	sl, sl, #1
 8009138:	f88b 3000 	strb.w	r3, [fp]
 800913c:	e6ff      	b.n	8008f3e <_dtoa_r+0x8fe>
 800913e:	4615      	mov	r5, r2
 8009140:	e79f      	b.n	8009082 <_dtoa_r+0xa42>
 8009142:	f8df b064 	ldr.w	fp, [pc, #100]	; 80091a8 <_dtoa_r+0xb68>
 8009146:	e007      	b.n	8009158 <_dtoa_r+0xb18>
 8009148:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800914a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80091ac <_dtoa_r+0xb6c>
 800914e:	b11b      	cbz	r3, 8009158 <_dtoa_r+0xb18>
 8009150:	f10b 0308 	add.w	r3, fp, #8
 8009154:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009156:	6013      	str	r3, [r2, #0]
 8009158:	4658      	mov	r0, fp
 800915a:	b017      	add	sp, #92	; 0x5c
 800915c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009160:	9b06      	ldr	r3, [sp, #24]
 8009162:	2b01      	cmp	r3, #1
 8009164:	f77f ae35 	ble.w	8008dd2 <_dtoa_r+0x792>
 8009168:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800916a:	9307      	str	r3, [sp, #28]
 800916c:	e649      	b.n	8008e02 <_dtoa_r+0x7c2>
 800916e:	9b02      	ldr	r3, [sp, #8]
 8009170:	2b00      	cmp	r3, #0
 8009172:	dc03      	bgt.n	800917c <_dtoa_r+0xb3c>
 8009174:	9b06      	ldr	r3, [sp, #24]
 8009176:	2b02      	cmp	r3, #2
 8009178:	f73f aecc 	bgt.w	8008f14 <_dtoa_r+0x8d4>
 800917c:	465d      	mov	r5, fp
 800917e:	4639      	mov	r1, r7
 8009180:	9804      	ldr	r0, [sp, #16]
 8009182:	f7ff f9d1 	bl	8008528 <quorem>
 8009186:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800918a:	f805 8b01 	strb.w	r8, [r5], #1
 800918e:	9a02      	ldr	r2, [sp, #8]
 8009190:	eba5 030b 	sub.w	r3, r5, fp
 8009194:	429a      	cmp	r2, r3
 8009196:	ddb0      	ble.n	80090fa <_dtoa_r+0xaba>
 8009198:	2300      	movs	r3, #0
 800919a:	220a      	movs	r2, #10
 800919c:	9904      	ldr	r1, [sp, #16]
 800919e:	4620      	mov	r0, r4
 80091a0:	f000 f8df 	bl	8009362 <__multadd>
 80091a4:	9004      	str	r0, [sp, #16]
 80091a6:	e7ea      	b.n	800917e <_dtoa_r+0xb3e>
 80091a8:	0800b02c 	.word	0x0800b02c
 80091ac:	0800b050 	.word	0x0800b050

080091b0 <_localeconv_r>:
 80091b0:	4b04      	ldr	r3, [pc, #16]	; (80091c4 <_localeconv_r+0x14>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6a18      	ldr	r0, [r3, #32]
 80091b6:	4b04      	ldr	r3, [pc, #16]	; (80091c8 <_localeconv_r+0x18>)
 80091b8:	2800      	cmp	r0, #0
 80091ba:	bf08      	it	eq
 80091bc:	4618      	moveq	r0, r3
 80091be:	30f0      	adds	r0, #240	; 0xf0
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	20000028 	.word	0x20000028
 80091c8:	2000008c 	.word	0x2000008c

080091cc <_lseek_r>:
 80091cc:	b538      	push	{r3, r4, r5, lr}
 80091ce:	4c07      	ldr	r4, [pc, #28]	; (80091ec <_lseek_r+0x20>)
 80091d0:	4605      	mov	r5, r0
 80091d2:	4608      	mov	r0, r1
 80091d4:	4611      	mov	r1, r2
 80091d6:	2200      	movs	r2, #0
 80091d8:	6022      	str	r2, [r4, #0]
 80091da:	461a      	mov	r2, r3
 80091dc:	f7f8 fdf6 	bl	8001dcc <_lseek>
 80091e0:	1c43      	adds	r3, r0, #1
 80091e2:	d102      	bne.n	80091ea <_lseek_r+0x1e>
 80091e4:	6823      	ldr	r3, [r4, #0]
 80091e6:	b103      	cbz	r3, 80091ea <_lseek_r+0x1e>
 80091e8:	602b      	str	r3, [r5, #0]
 80091ea:	bd38      	pop	{r3, r4, r5, pc}
 80091ec:	20001dbc 	.word	0x20001dbc

080091f0 <__swhatbuf_r>:
 80091f0:	b570      	push	{r4, r5, r6, lr}
 80091f2:	460e      	mov	r6, r1
 80091f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091f8:	2900      	cmp	r1, #0
 80091fa:	b096      	sub	sp, #88	; 0x58
 80091fc:	4614      	mov	r4, r2
 80091fe:	461d      	mov	r5, r3
 8009200:	da07      	bge.n	8009212 <__swhatbuf_r+0x22>
 8009202:	2300      	movs	r3, #0
 8009204:	602b      	str	r3, [r5, #0]
 8009206:	89b3      	ldrh	r3, [r6, #12]
 8009208:	061a      	lsls	r2, r3, #24
 800920a:	d410      	bmi.n	800922e <__swhatbuf_r+0x3e>
 800920c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009210:	e00e      	b.n	8009230 <__swhatbuf_r+0x40>
 8009212:	466a      	mov	r2, sp
 8009214:	f000 fca8 	bl	8009b68 <_fstat_r>
 8009218:	2800      	cmp	r0, #0
 800921a:	dbf2      	blt.n	8009202 <__swhatbuf_r+0x12>
 800921c:	9a01      	ldr	r2, [sp, #4]
 800921e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009222:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009226:	425a      	negs	r2, r3
 8009228:	415a      	adcs	r2, r3
 800922a:	602a      	str	r2, [r5, #0]
 800922c:	e7ee      	b.n	800920c <__swhatbuf_r+0x1c>
 800922e:	2340      	movs	r3, #64	; 0x40
 8009230:	2000      	movs	r0, #0
 8009232:	6023      	str	r3, [r4, #0]
 8009234:	b016      	add	sp, #88	; 0x58
 8009236:	bd70      	pop	{r4, r5, r6, pc}

08009238 <__smakebuf_r>:
 8009238:	898b      	ldrh	r3, [r1, #12]
 800923a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800923c:	079d      	lsls	r5, r3, #30
 800923e:	4606      	mov	r6, r0
 8009240:	460c      	mov	r4, r1
 8009242:	d507      	bpl.n	8009254 <__smakebuf_r+0x1c>
 8009244:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009248:	6023      	str	r3, [r4, #0]
 800924a:	6123      	str	r3, [r4, #16]
 800924c:	2301      	movs	r3, #1
 800924e:	6163      	str	r3, [r4, #20]
 8009250:	b002      	add	sp, #8
 8009252:	bd70      	pop	{r4, r5, r6, pc}
 8009254:	ab01      	add	r3, sp, #4
 8009256:	466a      	mov	r2, sp
 8009258:	f7ff ffca 	bl	80091f0 <__swhatbuf_r>
 800925c:	9900      	ldr	r1, [sp, #0]
 800925e:	4605      	mov	r5, r0
 8009260:	4630      	mov	r0, r6
 8009262:	f7fe fb55 	bl	8007910 <_malloc_r>
 8009266:	b948      	cbnz	r0, 800927c <__smakebuf_r+0x44>
 8009268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800926c:	059a      	lsls	r2, r3, #22
 800926e:	d4ef      	bmi.n	8009250 <__smakebuf_r+0x18>
 8009270:	f023 0303 	bic.w	r3, r3, #3
 8009274:	f043 0302 	orr.w	r3, r3, #2
 8009278:	81a3      	strh	r3, [r4, #12]
 800927a:	e7e3      	b.n	8009244 <__smakebuf_r+0xc>
 800927c:	4b0d      	ldr	r3, [pc, #52]	; (80092b4 <__smakebuf_r+0x7c>)
 800927e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009280:	89a3      	ldrh	r3, [r4, #12]
 8009282:	6020      	str	r0, [r4, #0]
 8009284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009288:	81a3      	strh	r3, [r4, #12]
 800928a:	9b00      	ldr	r3, [sp, #0]
 800928c:	6163      	str	r3, [r4, #20]
 800928e:	9b01      	ldr	r3, [sp, #4]
 8009290:	6120      	str	r0, [r4, #16]
 8009292:	b15b      	cbz	r3, 80092ac <__smakebuf_r+0x74>
 8009294:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009298:	4630      	mov	r0, r6
 800929a:	f000 fc77 	bl	8009b8c <_isatty_r>
 800929e:	b128      	cbz	r0, 80092ac <__smakebuf_r+0x74>
 80092a0:	89a3      	ldrh	r3, [r4, #12]
 80092a2:	f023 0303 	bic.w	r3, r3, #3
 80092a6:	f043 0301 	orr.w	r3, r3, #1
 80092aa:	81a3      	strh	r3, [r4, #12]
 80092ac:	89a3      	ldrh	r3, [r4, #12]
 80092ae:	431d      	orrs	r5, r3
 80092b0:	81a5      	strh	r5, [r4, #12]
 80092b2:	e7cd      	b.n	8009250 <__smakebuf_r+0x18>
 80092b4:	08007615 	.word	0x08007615

080092b8 <malloc>:
 80092b8:	4b02      	ldr	r3, [pc, #8]	; (80092c4 <malloc+0xc>)
 80092ba:	4601      	mov	r1, r0
 80092bc:	6818      	ldr	r0, [r3, #0]
 80092be:	f7fe bb27 	b.w	8007910 <_malloc_r>
 80092c2:	bf00      	nop
 80092c4:	20000028 	.word	0x20000028

080092c8 <__malloc_lock>:
 80092c8:	4770      	bx	lr

080092ca <__malloc_unlock>:
 80092ca:	4770      	bx	lr

080092cc <_Balloc>:
 80092cc:	b570      	push	{r4, r5, r6, lr}
 80092ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80092d0:	4604      	mov	r4, r0
 80092d2:	460e      	mov	r6, r1
 80092d4:	b93d      	cbnz	r5, 80092e6 <_Balloc+0x1a>
 80092d6:	2010      	movs	r0, #16
 80092d8:	f7ff ffee 	bl	80092b8 <malloc>
 80092dc:	6260      	str	r0, [r4, #36]	; 0x24
 80092de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80092e2:	6005      	str	r5, [r0, #0]
 80092e4:	60c5      	str	r5, [r0, #12]
 80092e6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80092e8:	68eb      	ldr	r3, [r5, #12]
 80092ea:	b183      	cbz	r3, 800930e <_Balloc+0x42>
 80092ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80092f4:	b9b8      	cbnz	r0, 8009326 <_Balloc+0x5a>
 80092f6:	2101      	movs	r1, #1
 80092f8:	fa01 f506 	lsl.w	r5, r1, r6
 80092fc:	1d6a      	adds	r2, r5, #5
 80092fe:	0092      	lsls	r2, r2, #2
 8009300:	4620      	mov	r0, r4
 8009302:	f000 fabf 	bl	8009884 <_calloc_r>
 8009306:	b160      	cbz	r0, 8009322 <_Balloc+0x56>
 8009308:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800930c:	e00e      	b.n	800932c <_Balloc+0x60>
 800930e:	2221      	movs	r2, #33	; 0x21
 8009310:	2104      	movs	r1, #4
 8009312:	4620      	mov	r0, r4
 8009314:	f000 fab6 	bl	8009884 <_calloc_r>
 8009318:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800931a:	60e8      	str	r0, [r5, #12]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1e4      	bne.n	80092ec <_Balloc+0x20>
 8009322:	2000      	movs	r0, #0
 8009324:	bd70      	pop	{r4, r5, r6, pc}
 8009326:	6802      	ldr	r2, [r0, #0]
 8009328:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800932c:	2300      	movs	r3, #0
 800932e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009332:	e7f7      	b.n	8009324 <_Balloc+0x58>

08009334 <_Bfree>:
 8009334:	b570      	push	{r4, r5, r6, lr}
 8009336:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009338:	4606      	mov	r6, r0
 800933a:	460d      	mov	r5, r1
 800933c:	b93c      	cbnz	r4, 800934e <_Bfree+0x1a>
 800933e:	2010      	movs	r0, #16
 8009340:	f7ff ffba 	bl	80092b8 <malloc>
 8009344:	6270      	str	r0, [r6, #36]	; 0x24
 8009346:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800934a:	6004      	str	r4, [r0, #0]
 800934c:	60c4      	str	r4, [r0, #12]
 800934e:	b13d      	cbz	r5, 8009360 <_Bfree+0x2c>
 8009350:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009352:	686a      	ldr	r2, [r5, #4]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800935a:	6029      	str	r1, [r5, #0]
 800935c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009360:	bd70      	pop	{r4, r5, r6, pc}

08009362 <__multadd>:
 8009362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009366:	690d      	ldr	r5, [r1, #16]
 8009368:	461f      	mov	r7, r3
 800936a:	4606      	mov	r6, r0
 800936c:	460c      	mov	r4, r1
 800936e:	f101 0c14 	add.w	ip, r1, #20
 8009372:	2300      	movs	r3, #0
 8009374:	f8dc 0000 	ldr.w	r0, [ip]
 8009378:	b281      	uxth	r1, r0
 800937a:	fb02 7101 	mla	r1, r2, r1, r7
 800937e:	0c0f      	lsrs	r7, r1, #16
 8009380:	0c00      	lsrs	r0, r0, #16
 8009382:	fb02 7000 	mla	r0, r2, r0, r7
 8009386:	b289      	uxth	r1, r1
 8009388:	3301      	adds	r3, #1
 800938a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800938e:	429d      	cmp	r5, r3
 8009390:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009394:	f84c 1b04 	str.w	r1, [ip], #4
 8009398:	dcec      	bgt.n	8009374 <__multadd+0x12>
 800939a:	b1d7      	cbz	r7, 80093d2 <__multadd+0x70>
 800939c:	68a3      	ldr	r3, [r4, #8]
 800939e:	42ab      	cmp	r3, r5
 80093a0:	dc12      	bgt.n	80093c8 <__multadd+0x66>
 80093a2:	6861      	ldr	r1, [r4, #4]
 80093a4:	4630      	mov	r0, r6
 80093a6:	3101      	adds	r1, #1
 80093a8:	f7ff ff90 	bl	80092cc <_Balloc>
 80093ac:	6922      	ldr	r2, [r4, #16]
 80093ae:	3202      	adds	r2, #2
 80093b0:	f104 010c 	add.w	r1, r4, #12
 80093b4:	4680      	mov	r8, r0
 80093b6:	0092      	lsls	r2, r2, #2
 80093b8:	300c      	adds	r0, #12
 80093ba:	f7fe fa47 	bl	800784c <memcpy>
 80093be:	4621      	mov	r1, r4
 80093c0:	4630      	mov	r0, r6
 80093c2:	f7ff ffb7 	bl	8009334 <_Bfree>
 80093c6:	4644      	mov	r4, r8
 80093c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80093cc:	3501      	adds	r5, #1
 80093ce:	615f      	str	r7, [r3, #20]
 80093d0:	6125      	str	r5, [r4, #16]
 80093d2:	4620      	mov	r0, r4
 80093d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080093d8 <__hi0bits>:
 80093d8:	0c02      	lsrs	r2, r0, #16
 80093da:	0412      	lsls	r2, r2, #16
 80093dc:	4603      	mov	r3, r0
 80093de:	b9b2      	cbnz	r2, 800940e <__hi0bits+0x36>
 80093e0:	0403      	lsls	r3, r0, #16
 80093e2:	2010      	movs	r0, #16
 80093e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80093e8:	bf04      	itt	eq
 80093ea:	021b      	lsleq	r3, r3, #8
 80093ec:	3008      	addeq	r0, #8
 80093ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80093f2:	bf04      	itt	eq
 80093f4:	011b      	lsleq	r3, r3, #4
 80093f6:	3004      	addeq	r0, #4
 80093f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80093fc:	bf04      	itt	eq
 80093fe:	009b      	lsleq	r3, r3, #2
 8009400:	3002      	addeq	r0, #2
 8009402:	2b00      	cmp	r3, #0
 8009404:	db06      	blt.n	8009414 <__hi0bits+0x3c>
 8009406:	005b      	lsls	r3, r3, #1
 8009408:	d503      	bpl.n	8009412 <__hi0bits+0x3a>
 800940a:	3001      	adds	r0, #1
 800940c:	4770      	bx	lr
 800940e:	2000      	movs	r0, #0
 8009410:	e7e8      	b.n	80093e4 <__hi0bits+0xc>
 8009412:	2020      	movs	r0, #32
 8009414:	4770      	bx	lr

08009416 <__lo0bits>:
 8009416:	6803      	ldr	r3, [r0, #0]
 8009418:	f013 0207 	ands.w	r2, r3, #7
 800941c:	4601      	mov	r1, r0
 800941e:	d00b      	beq.n	8009438 <__lo0bits+0x22>
 8009420:	07da      	lsls	r2, r3, #31
 8009422:	d423      	bmi.n	800946c <__lo0bits+0x56>
 8009424:	0798      	lsls	r0, r3, #30
 8009426:	bf49      	itett	mi
 8009428:	085b      	lsrmi	r3, r3, #1
 800942a:	089b      	lsrpl	r3, r3, #2
 800942c:	2001      	movmi	r0, #1
 800942e:	600b      	strmi	r3, [r1, #0]
 8009430:	bf5c      	itt	pl
 8009432:	600b      	strpl	r3, [r1, #0]
 8009434:	2002      	movpl	r0, #2
 8009436:	4770      	bx	lr
 8009438:	b298      	uxth	r0, r3
 800943a:	b9a8      	cbnz	r0, 8009468 <__lo0bits+0x52>
 800943c:	0c1b      	lsrs	r3, r3, #16
 800943e:	2010      	movs	r0, #16
 8009440:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009444:	bf04      	itt	eq
 8009446:	0a1b      	lsreq	r3, r3, #8
 8009448:	3008      	addeq	r0, #8
 800944a:	071a      	lsls	r2, r3, #28
 800944c:	bf04      	itt	eq
 800944e:	091b      	lsreq	r3, r3, #4
 8009450:	3004      	addeq	r0, #4
 8009452:	079a      	lsls	r2, r3, #30
 8009454:	bf04      	itt	eq
 8009456:	089b      	lsreq	r3, r3, #2
 8009458:	3002      	addeq	r0, #2
 800945a:	07da      	lsls	r2, r3, #31
 800945c:	d402      	bmi.n	8009464 <__lo0bits+0x4e>
 800945e:	085b      	lsrs	r3, r3, #1
 8009460:	d006      	beq.n	8009470 <__lo0bits+0x5a>
 8009462:	3001      	adds	r0, #1
 8009464:	600b      	str	r3, [r1, #0]
 8009466:	4770      	bx	lr
 8009468:	4610      	mov	r0, r2
 800946a:	e7e9      	b.n	8009440 <__lo0bits+0x2a>
 800946c:	2000      	movs	r0, #0
 800946e:	4770      	bx	lr
 8009470:	2020      	movs	r0, #32
 8009472:	4770      	bx	lr

08009474 <__i2b>:
 8009474:	b510      	push	{r4, lr}
 8009476:	460c      	mov	r4, r1
 8009478:	2101      	movs	r1, #1
 800947a:	f7ff ff27 	bl	80092cc <_Balloc>
 800947e:	2201      	movs	r2, #1
 8009480:	6144      	str	r4, [r0, #20]
 8009482:	6102      	str	r2, [r0, #16]
 8009484:	bd10      	pop	{r4, pc}

08009486 <__multiply>:
 8009486:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800948a:	4614      	mov	r4, r2
 800948c:	690a      	ldr	r2, [r1, #16]
 800948e:	6923      	ldr	r3, [r4, #16]
 8009490:	429a      	cmp	r2, r3
 8009492:	bfb8      	it	lt
 8009494:	460b      	movlt	r3, r1
 8009496:	4688      	mov	r8, r1
 8009498:	bfbc      	itt	lt
 800949a:	46a0      	movlt	r8, r4
 800949c:	461c      	movlt	r4, r3
 800949e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80094a2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80094a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80094aa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80094ae:	eb07 0609 	add.w	r6, r7, r9
 80094b2:	42b3      	cmp	r3, r6
 80094b4:	bfb8      	it	lt
 80094b6:	3101      	addlt	r1, #1
 80094b8:	f7ff ff08 	bl	80092cc <_Balloc>
 80094bc:	f100 0514 	add.w	r5, r0, #20
 80094c0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80094c4:	462b      	mov	r3, r5
 80094c6:	2200      	movs	r2, #0
 80094c8:	4573      	cmp	r3, lr
 80094ca:	d316      	bcc.n	80094fa <__multiply+0x74>
 80094cc:	f104 0214 	add.w	r2, r4, #20
 80094d0:	f108 0114 	add.w	r1, r8, #20
 80094d4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80094d8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	9b00      	ldr	r3, [sp, #0]
 80094e0:	9201      	str	r2, [sp, #4]
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d80c      	bhi.n	8009500 <__multiply+0x7a>
 80094e6:	2e00      	cmp	r6, #0
 80094e8:	dd03      	ble.n	80094f2 <__multiply+0x6c>
 80094ea:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d05d      	beq.n	80095ae <__multiply+0x128>
 80094f2:	6106      	str	r6, [r0, #16]
 80094f4:	b003      	add	sp, #12
 80094f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094fa:	f843 2b04 	str.w	r2, [r3], #4
 80094fe:	e7e3      	b.n	80094c8 <__multiply+0x42>
 8009500:	f8b2 b000 	ldrh.w	fp, [r2]
 8009504:	f1bb 0f00 	cmp.w	fp, #0
 8009508:	d023      	beq.n	8009552 <__multiply+0xcc>
 800950a:	4689      	mov	r9, r1
 800950c:	46ac      	mov	ip, r5
 800950e:	f04f 0800 	mov.w	r8, #0
 8009512:	f859 4b04 	ldr.w	r4, [r9], #4
 8009516:	f8dc a000 	ldr.w	sl, [ip]
 800951a:	b2a3      	uxth	r3, r4
 800951c:	fa1f fa8a 	uxth.w	sl, sl
 8009520:	fb0b a303 	mla	r3, fp, r3, sl
 8009524:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009528:	f8dc 4000 	ldr.w	r4, [ip]
 800952c:	4443      	add	r3, r8
 800952e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009532:	fb0b 840a 	mla	r4, fp, sl, r8
 8009536:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800953a:	46e2      	mov	sl, ip
 800953c:	b29b      	uxth	r3, r3
 800953e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009542:	454f      	cmp	r7, r9
 8009544:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009548:	f84a 3b04 	str.w	r3, [sl], #4
 800954c:	d82b      	bhi.n	80095a6 <__multiply+0x120>
 800954e:	f8cc 8004 	str.w	r8, [ip, #4]
 8009552:	9b01      	ldr	r3, [sp, #4]
 8009554:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009558:	3204      	adds	r2, #4
 800955a:	f1ba 0f00 	cmp.w	sl, #0
 800955e:	d020      	beq.n	80095a2 <__multiply+0x11c>
 8009560:	682b      	ldr	r3, [r5, #0]
 8009562:	4689      	mov	r9, r1
 8009564:	46a8      	mov	r8, r5
 8009566:	f04f 0b00 	mov.w	fp, #0
 800956a:	f8b9 c000 	ldrh.w	ip, [r9]
 800956e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009572:	fb0a 440c 	mla	r4, sl, ip, r4
 8009576:	445c      	add	r4, fp
 8009578:	46c4      	mov	ip, r8
 800957a:	b29b      	uxth	r3, r3
 800957c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009580:	f84c 3b04 	str.w	r3, [ip], #4
 8009584:	f859 3b04 	ldr.w	r3, [r9], #4
 8009588:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800958c:	0c1b      	lsrs	r3, r3, #16
 800958e:	fb0a b303 	mla	r3, sl, r3, fp
 8009592:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009596:	454f      	cmp	r7, r9
 8009598:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800959c:	d805      	bhi.n	80095aa <__multiply+0x124>
 800959e:	f8c8 3004 	str.w	r3, [r8, #4]
 80095a2:	3504      	adds	r5, #4
 80095a4:	e79b      	b.n	80094de <__multiply+0x58>
 80095a6:	46d4      	mov	ip, sl
 80095a8:	e7b3      	b.n	8009512 <__multiply+0x8c>
 80095aa:	46e0      	mov	r8, ip
 80095ac:	e7dd      	b.n	800956a <__multiply+0xe4>
 80095ae:	3e01      	subs	r6, #1
 80095b0:	e799      	b.n	80094e6 <__multiply+0x60>
	...

080095b4 <__pow5mult>:
 80095b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095b8:	4615      	mov	r5, r2
 80095ba:	f012 0203 	ands.w	r2, r2, #3
 80095be:	4606      	mov	r6, r0
 80095c0:	460f      	mov	r7, r1
 80095c2:	d007      	beq.n	80095d4 <__pow5mult+0x20>
 80095c4:	3a01      	subs	r2, #1
 80095c6:	4c21      	ldr	r4, [pc, #132]	; (800964c <__pow5mult+0x98>)
 80095c8:	2300      	movs	r3, #0
 80095ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80095ce:	f7ff fec8 	bl	8009362 <__multadd>
 80095d2:	4607      	mov	r7, r0
 80095d4:	10ad      	asrs	r5, r5, #2
 80095d6:	d035      	beq.n	8009644 <__pow5mult+0x90>
 80095d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80095da:	b93c      	cbnz	r4, 80095ec <__pow5mult+0x38>
 80095dc:	2010      	movs	r0, #16
 80095de:	f7ff fe6b 	bl	80092b8 <malloc>
 80095e2:	6270      	str	r0, [r6, #36]	; 0x24
 80095e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095e8:	6004      	str	r4, [r0, #0]
 80095ea:	60c4      	str	r4, [r0, #12]
 80095ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80095f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80095f4:	b94c      	cbnz	r4, 800960a <__pow5mult+0x56>
 80095f6:	f240 2171 	movw	r1, #625	; 0x271
 80095fa:	4630      	mov	r0, r6
 80095fc:	f7ff ff3a 	bl	8009474 <__i2b>
 8009600:	2300      	movs	r3, #0
 8009602:	f8c8 0008 	str.w	r0, [r8, #8]
 8009606:	4604      	mov	r4, r0
 8009608:	6003      	str	r3, [r0, #0]
 800960a:	f04f 0800 	mov.w	r8, #0
 800960e:	07eb      	lsls	r3, r5, #31
 8009610:	d50a      	bpl.n	8009628 <__pow5mult+0x74>
 8009612:	4639      	mov	r1, r7
 8009614:	4622      	mov	r2, r4
 8009616:	4630      	mov	r0, r6
 8009618:	f7ff ff35 	bl	8009486 <__multiply>
 800961c:	4639      	mov	r1, r7
 800961e:	4681      	mov	r9, r0
 8009620:	4630      	mov	r0, r6
 8009622:	f7ff fe87 	bl	8009334 <_Bfree>
 8009626:	464f      	mov	r7, r9
 8009628:	106d      	asrs	r5, r5, #1
 800962a:	d00b      	beq.n	8009644 <__pow5mult+0x90>
 800962c:	6820      	ldr	r0, [r4, #0]
 800962e:	b938      	cbnz	r0, 8009640 <__pow5mult+0x8c>
 8009630:	4622      	mov	r2, r4
 8009632:	4621      	mov	r1, r4
 8009634:	4630      	mov	r0, r6
 8009636:	f7ff ff26 	bl	8009486 <__multiply>
 800963a:	6020      	str	r0, [r4, #0]
 800963c:	f8c0 8000 	str.w	r8, [r0]
 8009640:	4604      	mov	r4, r0
 8009642:	e7e4      	b.n	800960e <__pow5mult+0x5a>
 8009644:	4638      	mov	r0, r7
 8009646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800964a:	bf00      	nop
 800964c:	0800b150 	.word	0x0800b150

08009650 <__lshift>:
 8009650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009654:	460c      	mov	r4, r1
 8009656:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800965a:	6923      	ldr	r3, [r4, #16]
 800965c:	6849      	ldr	r1, [r1, #4]
 800965e:	eb0a 0903 	add.w	r9, sl, r3
 8009662:	68a3      	ldr	r3, [r4, #8]
 8009664:	4607      	mov	r7, r0
 8009666:	4616      	mov	r6, r2
 8009668:	f109 0501 	add.w	r5, r9, #1
 800966c:	42ab      	cmp	r3, r5
 800966e:	db32      	blt.n	80096d6 <__lshift+0x86>
 8009670:	4638      	mov	r0, r7
 8009672:	f7ff fe2b 	bl	80092cc <_Balloc>
 8009676:	2300      	movs	r3, #0
 8009678:	4680      	mov	r8, r0
 800967a:	f100 0114 	add.w	r1, r0, #20
 800967e:	461a      	mov	r2, r3
 8009680:	4553      	cmp	r3, sl
 8009682:	db2b      	blt.n	80096dc <__lshift+0x8c>
 8009684:	6920      	ldr	r0, [r4, #16]
 8009686:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800968a:	f104 0314 	add.w	r3, r4, #20
 800968e:	f016 021f 	ands.w	r2, r6, #31
 8009692:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009696:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800969a:	d025      	beq.n	80096e8 <__lshift+0x98>
 800969c:	f1c2 0e20 	rsb	lr, r2, #32
 80096a0:	2000      	movs	r0, #0
 80096a2:	681e      	ldr	r6, [r3, #0]
 80096a4:	468a      	mov	sl, r1
 80096a6:	4096      	lsls	r6, r2
 80096a8:	4330      	orrs	r0, r6
 80096aa:	f84a 0b04 	str.w	r0, [sl], #4
 80096ae:	f853 0b04 	ldr.w	r0, [r3], #4
 80096b2:	459c      	cmp	ip, r3
 80096b4:	fa20 f00e 	lsr.w	r0, r0, lr
 80096b8:	d814      	bhi.n	80096e4 <__lshift+0x94>
 80096ba:	6048      	str	r0, [r1, #4]
 80096bc:	b108      	cbz	r0, 80096c2 <__lshift+0x72>
 80096be:	f109 0502 	add.w	r5, r9, #2
 80096c2:	3d01      	subs	r5, #1
 80096c4:	4638      	mov	r0, r7
 80096c6:	f8c8 5010 	str.w	r5, [r8, #16]
 80096ca:	4621      	mov	r1, r4
 80096cc:	f7ff fe32 	bl	8009334 <_Bfree>
 80096d0:	4640      	mov	r0, r8
 80096d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096d6:	3101      	adds	r1, #1
 80096d8:	005b      	lsls	r3, r3, #1
 80096da:	e7c7      	b.n	800966c <__lshift+0x1c>
 80096dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80096e0:	3301      	adds	r3, #1
 80096e2:	e7cd      	b.n	8009680 <__lshift+0x30>
 80096e4:	4651      	mov	r1, sl
 80096e6:	e7dc      	b.n	80096a2 <__lshift+0x52>
 80096e8:	3904      	subs	r1, #4
 80096ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80096ee:	f841 2f04 	str.w	r2, [r1, #4]!
 80096f2:	459c      	cmp	ip, r3
 80096f4:	d8f9      	bhi.n	80096ea <__lshift+0x9a>
 80096f6:	e7e4      	b.n	80096c2 <__lshift+0x72>

080096f8 <__mcmp>:
 80096f8:	6903      	ldr	r3, [r0, #16]
 80096fa:	690a      	ldr	r2, [r1, #16]
 80096fc:	1a9b      	subs	r3, r3, r2
 80096fe:	b530      	push	{r4, r5, lr}
 8009700:	d10c      	bne.n	800971c <__mcmp+0x24>
 8009702:	0092      	lsls	r2, r2, #2
 8009704:	3014      	adds	r0, #20
 8009706:	3114      	adds	r1, #20
 8009708:	1884      	adds	r4, r0, r2
 800970a:	4411      	add	r1, r2
 800970c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009710:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009714:	4295      	cmp	r5, r2
 8009716:	d003      	beq.n	8009720 <__mcmp+0x28>
 8009718:	d305      	bcc.n	8009726 <__mcmp+0x2e>
 800971a:	2301      	movs	r3, #1
 800971c:	4618      	mov	r0, r3
 800971e:	bd30      	pop	{r4, r5, pc}
 8009720:	42a0      	cmp	r0, r4
 8009722:	d3f3      	bcc.n	800970c <__mcmp+0x14>
 8009724:	e7fa      	b.n	800971c <__mcmp+0x24>
 8009726:	f04f 33ff 	mov.w	r3, #4294967295
 800972a:	e7f7      	b.n	800971c <__mcmp+0x24>

0800972c <__mdiff>:
 800972c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009730:	460d      	mov	r5, r1
 8009732:	4607      	mov	r7, r0
 8009734:	4611      	mov	r1, r2
 8009736:	4628      	mov	r0, r5
 8009738:	4614      	mov	r4, r2
 800973a:	f7ff ffdd 	bl	80096f8 <__mcmp>
 800973e:	1e06      	subs	r6, r0, #0
 8009740:	d108      	bne.n	8009754 <__mdiff+0x28>
 8009742:	4631      	mov	r1, r6
 8009744:	4638      	mov	r0, r7
 8009746:	f7ff fdc1 	bl	80092cc <_Balloc>
 800974a:	2301      	movs	r3, #1
 800974c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009754:	bfa4      	itt	ge
 8009756:	4623      	movge	r3, r4
 8009758:	462c      	movge	r4, r5
 800975a:	4638      	mov	r0, r7
 800975c:	6861      	ldr	r1, [r4, #4]
 800975e:	bfa6      	itte	ge
 8009760:	461d      	movge	r5, r3
 8009762:	2600      	movge	r6, #0
 8009764:	2601      	movlt	r6, #1
 8009766:	f7ff fdb1 	bl	80092cc <_Balloc>
 800976a:	692b      	ldr	r3, [r5, #16]
 800976c:	60c6      	str	r6, [r0, #12]
 800976e:	6926      	ldr	r6, [r4, #16]
 8009770:	f105 0914 	add.w	r9, r5, #20
 8009774:	f104 0214 	add.w	r2, r4, #20
 8009778:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800977c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009780:	f100 0514 	add.w	r5, r0, #20
 8009784:	f04f 0e00 	mov.w	lr, #0
 8009788:	f852 ab04 	ldr.w	sl, [r2], #4
 800978c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009790:	fa1e f18a 	uxtah	r1, lr, sl
 8009794:	b2a3      	uxth	r3, r4
 8009796:	1ac9      	subs	r1, r1, r3
 8009798:	0c23      	lsrs	r3, r4, #16
 800979a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800979e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80097a2:	b289      	uxth	r1, r1
 80097a4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80097a8:	45c8      	cmp	r8, r9
 80097aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80097ae:	4694      	mov	ip, r2
 80097b0:	f845 3b04 	str.w	r3, [r5], #4
 80097b4:	d8e8      	bhi.n	8009788 <__mdiff+0x5c>
 80097b6:	45bc      	cmp	ip, r7
 80097b8:	d304      	bcc.n	80097c4 <__mdiff+0x98>
 80097ba:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80097be:	b183      	cbz	r3, 80097e2 <__mdiff+0xb6>
 80097c0:	6106      	str	r6, [r0, #16]
 80097c2:	e7c5      	b.n	8009750 <__mdiff+0x24>
 80097c4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80097c8:	fa1e f381 	uxtah	r3, lr, r1
 80097cc:	141a      	asrs	r2, r3, #16
 80097ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097d8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80097dc:	f845 3b04 	str.w	r3, [r5], #4
 80097e0:	e7e9      	b.n	80097b6 <__mdiff+0x8a>
 80097e2:	3e01      	subs	r6, #1
 80097e4:	e7e9      	b.n	80097ba <__mdiff+0x8e>

080097e6 <__d2b>:
 80097e6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097ea:	460e      	mov	r6, r1
 80097ec:	2101      	movs	r1, #1
 80097ee:	ec59 8b10 	vmov	r8, r9, d0
 80097f2:	4615      	mov	r5, r2
 80097f4:	f7ff fd6a 	bl	80092cc <_Balloc>
 80097f8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80097fc:	4607      	mov	r7, r0
 80097fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009802:	bb34      	cbnz	r4, 8009852 <__d2b+0x6c>
 8009804:	9301      	str	r3, [sp, #4]
 8009806:	f1b8 0300 	subs.w	r3, r8, #0
 800980a:	d027      	beq.n	800985c <__d2b+0x76>
 800980c:	a802      	add	r0, sp, #8
 800980e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009812:	f7ff fe00 	bl	8009416 <__lo0bits>
 8009816:	9900      	ldr	r1, [sp, #0]
 8009818:	b1f0      	cbz	r0, 8009858 <__d2b+0x72>
 800981a:	9a01      	ldr	r2, [sp, #4]
 800981c:	f1c0 0320 	rsb	r3, r0, #32
 8009820:	fa02 f303 	lsl.w	r3, r2, r3
 8009824:	430b      	orrs	r3, r1
 8009826:	40c2      	lsrs	r2, r0
 8009828:	617b      	str	r3, [r7, #20]
 800982a:	9201      	str	r2, [sp, #4]
 800982c:	9b01      	ldr	r3, [sp, #4]
 800982e:	61bb      	str	r3, [r7, #24]
 8009830:	2b00      	cmp	r3, #0
 8009832:	bf14      	ite	ne
 8009834:	2102      	movne	r1, #2
 8009836:	2101      	moveq	r1, #1
 8009838:	6139      	str	r1, [r7, #16]
 800983a:	b1c4      	cbz	r4, 800986e <__d2b+0x88>
 800983c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009840:	4404      	add	r4, r0
 8009842:	6034      	str	r4, [r6, #0]
 8009844:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009848:	6028      	str	r0, [r5, #0]
 800984a:	4638      	mov	r0, r7
 800984c:	b003      	add	sp, #12
 800984e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009852:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009856:	e7d5      	b.n	8009804 <__d2b+0x1e>
 8009858:	6179      	str	r1, [r7, #20]
 800985a:	e7e7      	b.n	800982c <__d2b+0x46>
 800985c:	a801      	add	r0, sp, #4
 800985e:	f7ff fdda 	bl	8009416 <__lo0bits>
 8009862:	9b01      	ldr	r3, [sp, #4]
 8009864:	617b      	str	r3, [r7, #20]
 8009866:	2101      	movs	r1, #1
 8009868:	6139      	str	r1, [r7, #16]
 800986a:	3020      	adds	r0, #32
 800986c:	e7e5      	b.n	800983a <__d2b+0x54>
 800986e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009872:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009876:	6030      	str	r0, [r6, #0]
 8009878:	6918      	ldr	r0, [r3, #16]
 800987a:	f7ff fdad 	bl	80093d8 <__hi0bits>
 800987e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009882:	e7e1      	b.n	8009848 <__d2b+0x62>

08009884 <_calloc_r>:
 8009884:	b538      	push	{r3, r4, r5, lr}
 8009886:	fb02 f401 	mul.w	r4, r2, r1
 800988a:	4621      	mov	r1, r4
 800988c:	f7fe f840 	bl	8007910 <_malloc_r>
 8009890:	4605      	mov	r5, r0
 8009892:	b118      	cbz	r0, 800989c <_calloc_r+0x18>
 8009894:	4622      	mov	r2, r4
 8009896:	2100      	movs	r1, #0
 8009898:	f7fd ffe3 	bl	8007862 <memset>
 800989c:	4628      	mov	r0, r5
 800989e:	bd38      	pop	{r3, r4, r5, pc}

080098a0 <__ssputs_r>:
 80098a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098a4:	688e      	ldr	r6, [r1, #8]
 80098a6:	429e      	cmp	r6, r3
 80098a8:	4682      	mov	sl, r0
 80098aa:	460c      	mov	r4, r1
 80098ac:	4690      	mov	r8, r2
 80098ae:	4699      	mov	r9, r3
 80098b0:	d837      	bhi.n	8009922 <__ssputs_r+0x82>
 80098b2:	898a      	ldrh	r2, [r1, #12]
 80098b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098b8:	d031      	beq.n	800991e <__ssputs_r+0x7e>
 80098ba:	6825      	ldr	r5, [r4, #0]
 80098bc:	6909      	ldr	r1, [r1, #16]
 80098be:	1a6f      	subs	r7, r5, r1
 80098c0:	6965      	ldr	r5, [r4, #20]
 80098c2:	2302      	movs	r3, #2
 80098c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098c8:	fb95 f5f3 	sdiv	r5, r5, r3
 80098cc:	f109 0301 	add.w	r3, r9, #1
 80098d0:	443b      	add	r3, r7
 80098d2:	429d      	cmp	r5, r3
 80098d4:	bf38      	it	cc
 80098d6:	461d      	movcc	r5, r3
 80098d8:	0553      	lsls	r3, r2, #21
 80098da:	d530      	bpl.n	800993e <__ssputs_r+0x9e>
 80098dc:	4629      	mov	r1, r5
 80098de:	f7fe f817 	bl	8007910 <_malloc_r>
 80098e2:	4606      	mov	r6, r0
 80098e4:	b950      	cbnz	r0, 80098fc <__ssputs_r+0x5c>
 80098e6:	230c      	movs	r3, #12
 80098e8:	f8ca 3000 	str.w	r3, [sl]
 80098ec:	89a3      	ldrh	r3, [r4, #12]
 80098ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098f2:	81a3      	strh	r3, [r4, #12]
 80098f4:	f04f 30ff 	mov.w	r0, #4294967295
 80098f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098fc:	463a      	mov	r2, r7
 80098fe:	6921      	ldr	r1, [r4, #16]
 8009900:	f7fd ffa4 	bl	800784c <memcpy>
 8009904:	89a3      	ldrh	r3, [r4, #12]
 8009906:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800990a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800990e:	81a3      	strh	r3, [r4, #12]
 8009910:	6126      	str	r6, [r4, #16]
 8009912:	6165      	str	r5, [r4, #20]
 8009914:	443e      	add	r6, r7
 8009916:	1bed      	subs	r5, r5, r7
 8009918:	6026      	str	r6, [r4, #0]
 800991a:	60a5      	str	r5, [r4, #8]
 800991c:	464e      	mov	r6, r9
 800991e:	454e      	cmp	r6, r9
 8009920:	d900      	bls.n	8009924 <__ssputs_r+0x84>
 8009922:	464e      	mov	r6, r9
 8009924:	4632      	mov	r2, r6
 8009926:	4641      	mov	r1, r8
 8009928:	6820      	ldr	r0, [r4, #0]
 800992a:	f000 f951 	bl	8009bd0 <memmove>
 800992e:	68a3      	ldr	r3, [r4, #8]
 8009930:	1b9b      	subs	r3, r3, r6
 8009932:	60a3      	str	r3, [r4, #8]
 8009934:	6823      	ldr	r3, [r4, #0]
 8009936:	441e      	add	r6, r3
 8009938:	6026      	str	r6, [r4, #0]
 800993a:	2000      	movs	r0, #0
 800993c:	e7dc      	b.n	80098f8 <__ssputs_r+0x58>
 800993e:	462a      	mov	r2, r5
 8009940:	f000 f95f 	bl	8009c02 <_realloc_r>
 8009944:	4606      	mov	r6, r0
 8009946:	2800      	cmp	r0, #0
 8009948:	d1e2      	bne.n	8009910 <__ssputs_r+0x70>
 800994a:	6921      	ldr	r1, [r4, #16]
 800994c:	4650      	mov	r0, sl
 800994e:	f7fd ff91 	bl	8007874 <_free_r>
 8009952:	e7c8      	b.n	80098e6 <__ssputs_r+0x46>

08009954 <_svfiprintf_r>:
 8009954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009958:	461d      	mov	r5, r3
 800995a:	898b      	ldrh	r3, [r1, #12]
 800995c:	061f      	lsls	r7, r3, #24
 800995e:	b09d      	sub	sp, #116	; 0x74
 8009960:	4680      	mov	r8, r0
 8009962:	460c      	mov	r4, r1
 8009964:	4616      	mov	r6, r2
 8009966:	d50f      	bpl.n	8009988 <_svfiprintf_r+0x34>
 8009968:	690b      	ldr	r3, [r1, #16]
 800996a:	b96b      	cbnz	r3, 8009988 <_svfiprintf_r+0x34>
 800996c:	2140      	movs	r1, #64	; 0x40
 800996e:	f7fd ffcf 	bl	8007910 <_malloc_r>
 8009972:	6020      	str	r0, [r4, #0]
 8009974:	6120      	str	r0, [r4, #16]
 8009976:	b928      	cbnz	r0, 8009984 <_svfiprintf_r+0x30>
 8009978:	230c      	movs	r3, #12
 800997a:	f8c8 3000 	str.w	r3, [r8]
 800997e:	f04f 30ff 	mov.w	r0, #4294967295
 8009982:	e0c8      	b.n	8009b16 <_svfiprintf_r+0x1c2>
 8009984:	2340      	movs	r3, #64	; 0x40
 8009986:	6163      	str	r3, [r4, #20]
 8009988:	2300      	movs	r3, #0
 800998a:	9309      	str	r3, [sp, #36]	; 0x24
 800998c:	2320      	movs	r3, #32
 800998e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009992:	2330      	movs	r3, #48	; 0x30
 8009994:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009998:	9503      	str	r5, [sp, #12]
 800999a:	f04f 0b01 	mov.w	fp, #1
 800999e:	4637      	mov	r7, r6
 80099a0:	463d      	mov	r5, r7
 80099a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80099a6:	b10b      	cbz	r3, 80099ac <_svfiprintf_r+0x58>
 80099a8:	2b25      	cmp	r3, #37	; 0x25
 80099aa:	d13e      	bne.n	8009a2a <_svfiprintf_r+0xd6>
 80099ac:	ebb7 0a06 	subs.w	sl, r7, r6
 80099b0:	d00b      	beq.n	80099ca <_svfiprintf_r+0x76>
 80099b2:	4653      	mov	r3, sl
 80099b4:	4632      	mov	r2, r6
 80099b6:	4621      	mov	r1, r4
 80099b8:	4640      	mov	r0, r8
 80099ba:	f7ff ff71 	bl	80098a0 <__ssputs_r>
 80099be:	3001      	adds	r0, #1
 80099c0:	f000 80a4 	beq.w	8009b0c <_svfiprintf_r+0x1b8>
 80099c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099c6:	4453      	add	r3, sl
 80099c8:	9309      	str	r3, [sp, #36]	; 0x24
 80099ca:	783b      	ldrb	r3, [r7, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f000 809d 	beq.w	8009b0c <_svfiprintf_r+0x1b8>
 80099d2:	2300      	movs	r3, #0
 80099d4:	f04f 32ff 	mov.w	r2, #4294967295
 80099d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099dc:	9304      	str	r3, [sp, #16]
 80099de:	9307      	str	r3, [sp, #28]
 80099e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099e4:	931a      	str	r3, [sp, #104]	; 0x68
 80099e6:	462f      	mov	r7, r5
 80099e8:	2205      	movs	r2, #5
 80099ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 80099ee:	4850      	ldr	r0, [pc, #320]	; (8009b30 <_svfiprintf_r+0x1dc>)
 80099f0:	f7f6 fbfe 	bl	80001f0 <memchr>
 80099f4:	9b04      	ldr	r3, [sp, #16]
 80099f6:	b9d0      	cbnz	r0, 8009a2e <_svfiprintf_r+0xda>
 80099f8:	06d9      	lsls	r1, r3, #27
 80099fa:	bf44      	itt	mi
 80099fc:	2220      	movmi	r2, #32
 80099fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009a02:	071a      	lsls	r2, r3, #28
 8009a04:	bf44      	itt	mi
 8009a06:	222b      	movmi	r2, #43	; 0x2b
 8009a08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009a0c:	782a      	ldrb	r2, [r5, #0]
 8009a0e:	2a2a      	cmp	r2, #42	; 0x2a
 8009a10:	d015      	beq.n	8009a3e <_svfiprintf_r+0xea>
 8009a12:	9a07      	ldr	r2, [sp, #28]
 8009a14:	462f      	mov	r7, r5
 8009a16:	2000      	movs	r0, #0
 8009a18:	250a      	movs	r5, #10
 8009a1a:	4639      	mov	r1, r7
 8009a1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a20:	3b30      	subs	r3, #48	; 0x30
 8009a22:	2b09      	cmp	r3, #9
 8009a24:	d94d      	bls.n	8009ac2 <_svfiprintf_r+0x16e>
 8009a26:	b1b8      	cbz	r0, 8009a58 <_svfiprintf_r+0x104>
 8009a28:	e00f      	b.n	8009a4a <_svfiprintf_r+0xf6>
 8009a2a:	462f      	mov	r7, r5
 8009a2c:	e7b8      	b.n	80099a0 <_svfiprintf_r+0x4c>
 8009a2e:	4a40      	ldr	r2, [pc, #256]	; (8009b30 <_svfiprintf_r+0x1dc>)
 8009a30:	1a80      	subs	r0, r0, r2
 8009a32:	fa0b f000 	lsl.w	r0, fp, r0
 8009a36:	4318      	orrs	r0, r3
 8009a38:	9004      	str	r0, [sp, #16]
 8009a3a:	463d      	mov	r5, r7
 8009a3c:	e7d3      	b.n	80099e6 <_svfiprintf_r+0x92>
 8009a3e:	9a03      	ldr	r2, [sp, #12]
 8009a40:	1d11      	adds	r1, r2, #4
 8009a42:	6812      	ldr	r2, [r2, #0]
 8009a44:	9103      	str	r1, [sp, #12]
 8009a46:	2a00      	cmp	r2, #0
 8009a48:	db01      	blt.n	8009a4e <_svfiprintf_r+0xfa>
 8009a4a:	9207      	str	r2, [sp, #28]
 8009a4c:	e004      	b.n	8009a58 <_svfiprintf_r+0x104>
 8009a4e:	4252      	negs	r2, r2
 8009a50:	f043 0302 	orr.w	r3, r3, #2
 8009a54:	9207      	str	r2, [sp, #28]
 8009a56:	9304      	str	r3, [sp, #16]
 8009a58:	783b      	ldrb	r3, [r7, #0]
 8009a5a:	2b2e      	cmp	r3, #46	; 0x2e
 8009a5c:	d10c      	bne.n	8009a78 <_svfiprintf_r+0x124>
 8009a5e:	787b      	ldrb	r3, [r7, #1]
 8009a60:	2b2a      	cmp	r3, #42	; 0x2a
 8009a62:	d133      	bne.n	8009acc <_svfiprintf_r+0x178>
 8009a64:	9b03      	ldr	r3, [sp, #12]
 8009a66:	1d1a      	adds	r2, r3, #4
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	9203      	str	r2, [sp, #12]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	bfb8      	it	lt
 8009a70:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a74:	3702      	adds	r7, #2
 8009a76:	9305      	str	r3, [sp, #20]
 8009a78:	4d2e      	ldr	r5, [pc, #184]	; (8009b34 <_svfiprintf_r+0x1e0>)
 8009a7a:	7839      	ldrb	r1, [r7, #0]
 8009a7c:	2203      	movs	r2, #3
 8009a7e:	4628      	mov	r0, r5
 8009a80:	f7f6 fbb6 	bl	80001f0 <memchr>
 8009a84:	b138      	cbz	r0, 8009a96 <_svfiprintf_r+0x142>
 8009a86:	2340      	movs	r3, #64	; 0x40
 8009a88:	1b40      	subs	r0, r0, r5
 8009a8a:	fa03 f000 	lsl.w	r0, r3, r0
 8009a8e:	9b04      	ldr	r3, [sp, #16]
 8009a90:	4303      	orrs	r3, r0
 8009a92:	3701      	adds	r7, #1
 8009a94:	9304      	str	r3, [sp, #16]
 8009a96:	7839      	ldrb	r1, [r7, #0]
 8009a98:	4827      	ldr	r0, [pc, #156]	; (8009b38 <_svfiprintf_r+0x1e4>)
 8009a9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a9e:	2206      	movs	r2, #6
 8009aa0:	1c7e      	adds	r6, r7, #1
 8009aa2:	f7f6 fba5 	bl	80001f0 <memchr>
 8009aa6:	2800      	cmp	r0, #0
 8009aa8:	d038      	beq.n	8009b1c <_svfiprintf_r+0x1c8>
 8009aaa:	4b24      	ldr	r3, [pc, #144]	; (8009b3c <_svfiprintf_r+0x1e8>)
 8009aac:	bb13      	cbnz	r3, 8009af4 <_svfiprintf_r+0x1a0>
 8009aae:	9b03      	ldr	r3, [sp, #12]
 8009ab0:	3307      	adds	r3, #7
 8009ab2:	f023 0307 	bic.w	r3, r3, #7
 8009ab6:	3308      	adds	r3, #8
 8009ab8:	9303      	str	r3, [sp, #12]
 8009aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009abc:	444b      	add	r3, r9
 8009abe:	9309      	str	r3, [sp, #36]	; 0x24
 8009ac0:	e76d      	b.n	800999e <_svfiprintf_r+0x4a>
 8009ac2:	fb05 3202 	mla	r2, r5, r2, r3
 8009ac6:	2001      	movs	r0, #1
 8009ac8:	460f      	mov	r7, r1
 8009aca:	e7a6      	b.n	8009a1a <_svfiprintf_r+0xc6>
 8009acc:	2300      	movs	r3, #0
 8009ace:	3701      	adds	r7, #1
 8009ad0:	9305      	str	r3, [sp, #20]
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	250a      	movs	r5, #10
 8009ad6:	4638      	mov	r0, r7
 8009ad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009adc:	3a30      	subs	r2, #48	; 0x30
 8009ade:	2a09      	cmp	r2, #9
 8009ae0:	d903      	bls.n	8009aea <_svfiprintf_r+0x196>
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d0c8      	beq.n	8009a78 <_svfiprintf_r+0x124>
 8009ae6:	9105      	str	r1, [sp, #20]
 8009ae8:	e7c6      	b.n	8009a78 <_svfiprintf_r+0x124>
 8009aea:	fb05 2101 	mla	r1, r5, r1, r2
 8009aee:	2301      	movs	r3, #1
 8009af0:	4607      	mov	r7, r0
 8009af2:	e7f0      	b.n	8009ad6 <_svfiprintf_r+0x182>
 8009af4:	ab03      	add	r3, sp, #12
 8009af6:	9300      	str	r3, [sp, #0]
 8009af8:	4622      	mov	r2, r4
 8009afa:	4b11      	ldr	r3, [pc, #68]	; (8009b40 <_svfiprintf_r+0x1ec>)
 8009afc:	a904      	add	r1, sp, #16
 8009afe:	4640      	mov	r0, r8
 8009b00:	f7fd fff4 	bl	8007aec <_printf_float>
 8009b04:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009b08:	4681      	mov	r9, r0
 8009b0a:	d1d6      	bne.n	8009aba <_svfiprintf_r+0x166>
 8009b0c:	89a3      	ldrh	r3, [r4, #12]
 8009b0e:	065b      	lsls	r3, r3, #25
 8009b10:	f53f af35 	bmi.w	800997e <_svfiprintf_r+0x2a>
 8009b14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b16:	b01d      	add	sp, #116	; 0x74
 8009b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b1c:	ab03      	add	r3, sp, #12
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	4622      	mov	r2, r4
 8009b22:	4b07      	ldr	r3, [pc, #28]	; (8009b40 <_svfiprintf_r+0x1ec>)
 8009b24:	a904      	add	r1, sp, #16
 8009b26:	4640      	mov	r0, r8
 8009b28:	f7fe fa96 	bl	8008058 <_printf_i>
 8009b2c:	e7ea      	b.n	8009b04 <_svfiprintf_r+0x1b0>
 8009b2e:	bf00      	nop
 8009b30:	0800b15c 	.word	0x0800b15c
 8009b34:	0800b162 	.word	0x0800b162
 8009b38:	0800b166 	.word	0x0800b166
 8009b3c:	08007aed 	.word	0x08007aed
 8009b40:	080098a1 	.word	0x080098a1

08009b44 <_read_r>:
 8009b44:	b538      	push	{r3, r4, r5, lr}
 8009b46:	4c07      	ldr	r4, [pc, #28]	; (8009b64 <_read_r+0x20>)
 8009b48:	4605      	mov	r5, r0
 8009b4a:	4608      	mov	r0, r1
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	2200      	movs	r2, #0
 8009b50:	6022      	str	r2, [r4, #0]
 8009b52:	461a      	mov	r2, r3
 8009b54:	f7f8 f8da 	bl	8001d0c <_read>
 8009b58:	1c43      	adds	r3, r0, #1
 8009b5a:	d102      	bne.n	8009b62 <_read_r+0x1e>
 8009b5c:	6823      	ldr	r3, [r4, #0]
 8009b5e:	b103      	cbz	r3, 8009b62 <_read_r+0x1e>
 8009b60:	602b      	str	r3, [r5, #0]
 8009b62:	bd38      	pop	{r3, r4, r5, pc}
 8009b64:	20001dbc 	.word	0x20001dbc

08009b68 <_fstat_r>:
 8009b68:	b538      	push	{r3, r4, r5, lr}
 8009b6a:	4c07      	ldr	r4, [pc, #28]	; (8009b88 <_fstat_r+0x20>)
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	4605      	mov	r5, r0
 8009b70:	4608      	mov	r0, r1
 8009b72:	4611      	mov	r1, r2
 8009b74:	6023      	str	r3, [r4, #0]
 8009b76:	f7f8 f90e 	bl	8001d96 <_fstat>
 8009b7a:	1c43      	adds	r3, r0, #1
 8009b7c:	d102      	bne.n	8009b84 <_fstat_r+0x1c>
 8009b7e:	6823      	ldr	r3, [r4, #0]
 8009b80:	b103      	cbz	r3, 8009b84 <_fstat_r+0x1c>
 8009b82:	602b      	str	r3, [r5, #0]
 8009b84:	bd38      	pop	{r3, r4, r5, pc}
 8009b86:	bf00      	nop
 8009b88:	20001dbc 	.word	0x20001dbc

08009b8c <_isatty_r>:
 8009b8c:	b538      	push	{r3, r4, r5, lr}
 8009b8e:	4c06      	ldr	r4, [pc, #24]	; (8009ba8 <_isatty_r+0x1c>)
 8009b90:	2300      	movs	r3, #0
 8009b92:	4605      	mov	r5, r0
 8009b94:	4608      	mov	r0, r1
 8009b96:	6023      	str	r3, [r4, #0]
 8009b98:	f7f8 f90d 	bl	8001db6 <_isatty>
 8009b9c:	1c43      	adds	r3, r0, #1
 8009b9e:	d102      	bne.n	8009ba6 <_isatty_r+0x1a>
 8009ba0:	6823      	ldr	r3, [r4, #0]
 8009ba2:	b103      	cbz	r3, 8009ba6 <_isatty_r+0x1a>
 8009ba4:	602b      	str	r3, [r5, #0]
 8009ba6:	bd38      	pop	{r3, r4, r5, pc}
 8009ba8:	20001dbc 	.word	0x20001dbc

08009bac <__ascii_mbtowc>:
 8009bac:	b082      	sub	sp, #8
 8009bae:	b901      	cbnz	r1, 8009bb2 <__ascii_mbtowc+0x6>
 8009bb0:	a901      	add	r1, sp, #4
 8009bb2:	b142      	cbz	r2, 8009bc6 <__ascii_mbtowc+0x1a>
 8009bb4:	b14b      	cbz	r3, 8009bca <__ascii_mbtowc+0x1e>
 8009bb6:	7813      	ldrb	r3, [r2, #0]
 8009bb8:	600b      	str	r3, [r1, #0]
 8009bba:	7812      	ldrb	r2, [r2, #0]
 8009bbc:	1c10      	adds	r0, r2, #0
 8009bbe:	bf18      	it	ne
 8009bc0:	2001      	movne	r0, #1
 8009bc2:	b002      	add	sp, #8
 8009bc4:	4770      	bx	lr
 8009bc6:	4610      	mov	r0, r2
 8009bc8:	e7fb      	b.n	8009bc2 <__ascii_mbtowc+0x16>
 8009bca:	f06f 0001 	mvn.w	r0, #1
 8009bce:	e7f8      	b.n	8009bc2 <__ascii_mbtowc+0x16>

08009bd0 <memmove>:
 8009bd0:	4288      	cmp	r0, r1
 8009bd2:	b510      	push	{r4, lr}
 8009bd4:	eb01 0302 	add.w	r3, r1, r2
 8009bd8:	d807      	bhi.n	8009bea <memmove+0x1a>
 8009bda:	1e42      	subs	r2, r0, #1
 8009bdc:	4299      	cmp	r1, r3
 8009bde:	d00a      	beq.n	8009bf6 <memmove+0x26>
 8009be0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009be4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009be8:	e7f8      	b.n	8009bdc <memmove+0xc>
 8009bea:	4283      	cmp	r3, r0
 8009bec:	d9f5      	bls.n	8009bda <memmove+0xa>
 8009bee:	1881      	adds	r1, r0, r2
 8009bf0:	1ad2      	subs	r2, r2, r3
 8009bf2:	42d3      	cmn	r3, r2
 8009bf4:	d100      	bne.n	8009bf8 <memmove+0x28>
 8009bf6:	bd10      	pop	{r4, pc}
 8009bf8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bfc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009c00:	e7f7      	b.n	8009bf2 <memmove+0x22>

08009c02 <_realloc_r>:
 8009c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c04:	4607      	mov	r7, r0
 8009c06:	4614      	mov	r4, r2
 8009c08:	460e      	mov	r6, r1
 8009c0a:	b921      	cbnz	r1, 8009c16 <_realloc_r+0x14>
 8009c0c:	4611      	mov	r1, r2
 8009c0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009c12:	f7fd be7d 	b.w	8007910 <_malloc_r>
 8009c16:	b922      	cbnz	r2, 8009c22 <_realloc_r+0x20>
 8009c18:	f7fd fe2c 	bl	8007874 <_free_r>
 8009c1c:	4625      	mov	r5, r4
 8009c1e:	4628      	mov	r0, r5
 8009c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c22:	f000 f821 	bl	8009c68 <_malloc_usable_size_r>
 8009c26:	42a0      	cmp	r0, r4
 8009c28:	d20f      	bcs.n	8009c4a <_realloc_r+0x48>
 8009c2a:	4621      	mov	r1, r4
 8009c2c:	4638      	mov	r0, r7
 8009c2e:	f7fd fe6f 	bl	8007910 <_malloc_r>
 8009c32:	4605      	mov	r5, r0
 8009c34:	2800      	cmp	r0, #0
 8009c36:	d0f2      	beq.n	8009c1e <_realloc_r+0x1c>
 8009c38:	4631      	mov	r1, r6
 8009c3a:	4622      	mov	r2, r4
 8009c3c:	f7fd fe06 	bl	800784c <memcpy>
 8009c40:	4631      	mov	r1, r6
 8009c42:	4638      	mov	r0, r7
 8009c44:	f7fd fe16 	bl	8007874 <_free_r>
 8009c48:	e7e9      	b.n	8009c1e <_realloc_r+0x1c>
 8009c4a:	4635      	mov	r5, r6
 8009c4c:	e7e7      	b.n	8009c1e <_realloc_r+0x1c>

08009c4e <__ascii_wctomb>:
 8009c4e:	b149      	cbz	r1, 8009c64 <__ascii_wctomb+0x16>
 8009c50:	2aff      	cmp	r2, #255	; 0xff
 8009c52:	bf85      	ittet	hi
 8009c54:	238a      	movhi	r3, #138	; 0x8a
 8009c56:	6003      	strhi	r3, [r0, #0]
 8009c58:	700a      	strbls	r2, [r1, #0]
 8009c5a:	f04f 30ff 	movhi.w	r0, #4294967295
 8009c5e:	bf98      	it	ls
 8009c60:	2001      	movls	r0, #1
 8009c62:	4770      	bx	lr
 8009c64:	4608      	mov	r0, r1
 8009c66:	4770      	bx	lr

08009c68 <_malloc_usable_size_r>:
 8009c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c6c:	1f18      	subs	r0, r3, #4
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	bfbc      	itt	lt
 8009c72:	580b      	ldrlt	r3, [r1, r0]
 8009c74:	18c0      	addlt	r0, r0, r3
 8009c76:	4770      	bx	lr

08009c78 <pow>:
 8009c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7c:	ed2d 8b04 	vpush	{d8-d9}
 8009c80:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8009f54 <pow+0x2dc>
 8009c84:	b08d      	sub	sp, #52	; 0x34
 8009c86:	ec57 6b10 	vmov	r6, r7, d0
 8009c8a:	ec55 4b11 	vmov	r4, r5, d1
 8009c8e:	f000 f963 	bl	8009f58 <__ieee754_pow>
 8009c92:	f999 3000 	ldrsb.w	r3, [r9]
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	eeb0 8a40 	vmov.f32	s16, s0
 8009c9e:	eef0 8a60 	vmov.f32	s17, s1
 8009ca2:	46c8      	mov	r8, r9
 8009ca4:	d05f      	beq.n	8009d66 <pow+0xee>
 8009ca6:	4622      	mov	r2, r4
 8009ca8:	462b      	mov	r3, r5
 8009caa:	4620      	mov	r0, r4
 8009cac:	4629      	mov	r1, r5
 8009cae:	f7f6 ff45 	bl	8000b3c <__aeabi_dcmpun>
 8009cb2:	4683      	mov	fp, r0
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	d156      	bne.n	8009d66 <pow+0xee>
 8009cb8:	4632      	mov	r2, r6
 8009cba:	463b      	mov	r3, r7
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	4639      	mov	r1, r7
 8009cc0:	f7f6 ff3c 	bl	8000b3c <__aeabi_dcmpun>
 8009cc4:	9001      	str	r0, [sp, #4]
 8009cc6:	b1e8      	cbz	r0, 8009d04 <pow+0x8c>
 8009cc8:	2200      	movs	r2, #0
 8009cca:	2300      	movs	r3, #0
 8009ccc:	4620      	mov	r0, r4
 8009cce:	4629      	mov	r1, r5
 8009cd0:	f7f6 ff02 	bl	8000ad8 <__aeabi_dcmpeq>
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	d046      	beq.n	8009d66 <pow+0xee>
 8009cd8:	2301      	movs	r3, #1
 8009cda:	9302      	str	r3, [sp, #8]
 8009cdc:	4b96      	ldr	r3, [pc, #600]	; (8009f38 <pow+0x2c0>)
 8009cde:	9303      	str	r3, [sp, #12]
 8009ce0:	4b96      	ldr	r3, [pc, #600]	; (8009f3c <pow+0x2c4>)
 8009ce2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009cec:	9b00      	ldr	r3, [sp, #0]
 8009cee:	2b02      	cmp	r3, #2
 8009cf0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009cf4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009cf8:	d033      	beq.n	8009d62 <pow+0xea>
 8009cfa:	a802      	add	r0, sp, #8
 8009cfc:	f000 fefb 	bl	800aaf6 <matherr>
 8009d00:	bb48      	cbnz	r0, 8009d56 <pow+0xde>
 8009d02:	e05d      	b.n	8009dc0 <pow+0x148>
 8009d04:	f04f 0a00 	mov.w	sl, #0
 8009d08:	f04f 0b00 	mov.w	fp, #0
 8009d0c:	4652      	mov	r2, sl
 8009d0e:	465b      	mov	r3, fp
 8009d10:	4630      	mov	r0, r6
 8009d12:	4639      	mov	r1, r7
 8009d14:	f7f6 fee0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d18:	ec4b ab19 	vmov	d9, sl, fp
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d054      	beq.n	8009dca <pow+0x152>
 8009d20:	4652      	mov	r2, sl
 8009d22:	465b      	mov	r3, fp
 8009d24:	4620      	mov	r0, r4
 8009d26:	4629      	mov	r1, r5
 8009d28:	f7f6 fed6 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d2c:	4680      	mov	r8, r0
 8009d2e:	b318      	cbz	r0, 8009d78 <pow+0x100>
 8009d30:	2301      	movs	r3, #1
 8009d32:	9302      	str	r3, [sp, #8]
 8009d34:	4b80      	ldr	r3, [pc, #512]	; (8009f38 <pow+0x2c0>)
 8009d36:	9303      	str	r3, [sp, #12]
 8009d38:	9b01      	ldr	r3, [sp, #4]
 8009d3a:	930a      	str	r3, [sp, #40]	; 0x28
 8009d3c:	9b00      	ldr	r3, [sp, #0]
 8009d3e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009d42:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009d46:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d0d5      	beq.n	8009cfa <pow+0x82>
 8009d4e:	4b7b      	ldr	r3, [pc, #492]	; (8009f3c <pow+0x2c4>)
 8009d50:	2200      	movs	r2, #0
 8009d52:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d58:	b11b      	cbz	r3, 8009d62 <pow+0xea>
 8009d5a:	f7fd fb27 	bl	80073ac <__errno>
 8009d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d60:	6003      	str	r3, [r0, #0]
 8009d62:	ed9d 8b08 	vldr	d8, [sp, #32]
 8009d66:	eeb0 0a48 	vmov.f32	s0, s16
 8009d6a:	eef0 0a68 	vmov.f32	s1, s17
 8009d6e:	b00d      	add	sp, #52	; 0x34
 8009d70:	ecbd 8b04 	vpop	{d8-d9}
 8009d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d78:	ec45 4b10 	vmov	d0, r4, r5
 8009d7c:	f000 feb3 	bl	800aae6 <finite>
 8009d80:	2800      	cmp	r0, #0
 8009d82:	d0f0      	beq.n	8009d66 <pow+0xee>
 8009d84:	4652      	mov	r2, sl
 8009d86:	465b      	mov	r3, fp
 8009d88:	4620      	mov	r0, r4
 8009d8a:	4629      	mov	r1, r5
 8009d8c:	f7f6 feae 	bl	8000aec <__aeabi_dcmplt>
 8009d90:	2800      	cmp	r0, #0
 8009d92:	d0e8      	beq.n	8009d66 <pow+0xee>
 8009d94:	2301      	movs	r3, #1
 8009d96:	9302      	str	r3, [sp, #8]
 8009d98:	4b67      	ldr	r3, [pc, #412]	; (8009f38 <pow+0x2c0>)
 8009d9a:	9303      	str	r3, [sp, #12]
 8009d9c:	f999 3000 	ldrsb.w	r3, [r9]
 8009da0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8009da4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009da8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009dac:	b913      	cbnz	r3, 8009db4 <pow+0x13c>
 8009dae:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009db2:	e7a2      	b.n	8009cfa <pow+0x82>
 8009db4:	4962      	ldr	r1, [pc, #392]	; (8009f40 <pow+0x2c8>)
 8009db6:	2000      	movs	r0, #0
 8009db8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009dbc:	2b02      	cmp	r3, #2
 8009dbe:	d19c      	bne.n	8009cfa <pow+0x82>
 8009dc0:	f7fd faf4 	bl	80073ac <__errno>
 8009dc4:	2321      	movs	r3, #33	; 0x21
 8009dc6:	6003      	str	r3, [r0, #0]
 8009dc8:	e7c5      	b.n	8009d56 <pow+0xde>
 8009dca:	eeb0 0a48 	vmov.f32	s0, s16
 8009dce:	eef0 0a68 	vmov.f32	s1, s17
 8009dd2:	f000 fe88 	bl	800aae6 <finite>
 8009dd6:	9000      	str	r0, [sp, #0]
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	f040 8081 	bne.w	8009ee0 <pow+0x268>
 8009dde:	ec47 6b10 	vmov	d0, r6, r7
 8009de2:	f000 fe80 	bl	800aae6 <finite>
 8009de6:	2800      	cmp	r0, #0
 8009de8:	d07a      	beq.n	8009ee0 <pow+0x268>
 8009dea:	ec45 4b10 	vmov	d0, r4, r5
 8009dee:	f000 fe7a 	bl	800aae6 <finite>
 8009df2:	2800      	cmp	r0, #0
 8009df4:	d074      	beq.n	8009ee0 <pow+0x268>
 8009df6:	ec53 2b18 	vmov	r2, r3, d8
 8009dfa:	ee18 0a10 	vmov	r0, s16
 8009dfe:	4619      	mov	r1, r3
 8009e00:	f7f6 fe9c 	bl	8000b3c <__aeabi_dcmpun>
 8009e04:	f999 9000 	ldrsb.w	r9, [r9]
 8009e08:	4b4b      	ldr	r3, [pc, #300]	; (8009f38 <pow+0x2c0>)
 8009e0a:	b1b0      	cbz	r0, 8009e3a <pow+0x1c2>
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e12:	9b00      	ldr	r3, [sp, #0]
 8009e14:	930a      	str	r3, [sp, #40]	; 0x28
 8009e16:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009e1a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009e1e:	f1b9 0f00 	cmp.w	r9, #0
 8009e22:	d0c4      	beq.n	8009dae <pow+0x136>
 8009e24:	4652      	mov	r2, sl
 8009e26:	465b      	mov	r3, fp
 8009e28:	4650      	mov	r0, sl
 8009e2a:	4659      	mov	r1, fp
 8009e2c:	f7f6 fd16 	bl	800085c <__aeabi_ddiv>
 8009e30:	f1b9 0f02 	cmp.w	r9, #2
 8009e34:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009e38:	e7c1      	b.n	8009dbe <pow+0x146>
 8009e3a:	2203      	movs	r2, #3
 8009e3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e40:	900a      	str	r0, [sp, #40]	; 0x28
 8009e42:	4629      	mov	r1, r5
 8009e44:	4620      	mov	r0, r4
 8009e46:	2200      	movs	r2, #0
 8009e48:	4b3e      	ldr	r3, [pc, #248]	; (8009f44 <pow+0x2cc>)
 8009e4a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009e4e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009e52:	f7f6 fbd9 	bl	8000608 <__aeabi_dmul>
 8009e56:	4604      	mov	r4, r0
 8009e58:	460d      	mov	r5, r1
 8009e5a:	f1b9 0f00 	cmp.w	r9, #0
 8009e5e:	d124      	bne.n	8009eaa <pow+0x232>
 8009e60:	4b39      	ldr	r3, [pc, #228]	; (8009f48 <pow+0x2d0>)
 8009e62:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009e66:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	4652      	mov	r2, sl
 8009e6e:	465b      	mov	r3, fp
 8009e70:	4639      	mov	r1, r7
 8009e72:	f7f6 fe3b 	bl	8000aec <__aeabi_dcmplt>
 8009e76:	2800      	cmp	r0, #0
 8009e78:	d056      	beq.n	8009f28 <pow+0x2b0>
 8009e7a:	ec45 4b10 	vmov	d0, r4, r5
 8009e7e:	f000 fe47 	bl	800ab10 <rint>
 8009e82:	4622      	mov	r2, r4
 8009e84:	462b      	mov	r3, r5
 8009e86:	ec51 0b10 	vmov	r0, r1, d0
 8009e8a:	f7f6 fe25 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e8e:	b920      	cbnz	r0, 8009e9a <pow+0x222>
 8009e90:	4b2e      	ldr	r3, [pc, #184]	; (8009f4c <pow+0x2d4>)
 8009e92:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009e96:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009e9a:	f998 3000 	ldrsb.w	r3, [r8]
 8009e9e:	2b02      	cmp	r3, #2
 8009ea0:	d142      	bne.n	8009f28 <pow+0x2b0>
 8009ea2:	f7fd fa83 	bl	80073ac <__errno>
 8009ea6:	2322      	movs	r3, #34	; 0x22
 8009ea8:	e78d      	b.n	8009dc6 <pow+0x14e>
 8009eaa:	4b29      	ldr	r3, [pc, #164]	; (8009f50 <pow+0x2d8>)
 8009eac:	2200      	movs	r2, #0
 8009eae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	4652      	mov	r2, sl
 8009eb6:	465b      	mov	r3, fp
 8009eb8:	4639      	mov	r1, r7
 8009eba:	f7f6 fe17 	bl	8000aec <__aeabi_dcmplt>
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	d0eb      	beq.n	8009e9a <pow+0x222>
 8009ec2:	ec45 4b10 	vmov	d0, r4, r5
 8009ec6:	f000 fe23 	bl	800ab10 <rint>
 8009eca:	4622      	mov	r2, r4
 8009ecc:	462b      	mov	r3, r5
 8009ece:	ec51 0b10 	vmov	r0, r1, d0
 8009ed2:	f7f6 fe01 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	d1df      	bne.n	8009e9a <pow+0x222>
 8009eda:	2200      	movs	r2, #0
 8009edc:	4b18      	ldr	r3, [pc, #96]	; (8009f40 <pow+0x2c8>)
 8009ede:	e7da      	b.n	8009e96 <pow+0x21e>
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	ec51 0b18 	vmov	r0, r1, d8
 8009ee8:	f7f6 fdf6 	bl	8000ad8 <__aeabi_dcmpeq>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	f43f af3a 	beq.w	8009d66 <pow+0xee>
 8009ef2:	ec47 6b10 	vmov	d0, r6, r7
 8009ef6:	f000 fdf6 	bl	800aae6 <finite>
 8009efa:	2800      	cmp	r0, #0
 8009efc:	f43f af33 	beq.w	8009d66 <pow+0xee>
 8009f00:	ec45 4b10 	vmov	d0, r4, r5
 8009f04:	f000 fdef 	bl	800aae6 <finite>
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	f43f af2c 	beq.w	8009d66 <pow+0xee>
 8009f0e:	2304      	movs	r3, #4
 8009f10:	9302      	str	r3, [sp, #8]
 8009f12:	4b09      	ldr	r3, [pc, #36]	; (8009f38 <pow+0x2c0>)
 8009f14:	9303      	str	r3, [sp, #12]
 8009f16:	2300      	movs	r3, #0
 8009f18:	930a      	str	r3, [sp, #40]	; 0x28
 8009f1a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009f1e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009f22:	ed8d 9b08 	vstr	d9, [sp, #32]
 8009f26:	e7b8      	b.n	8009e9a <pow+0x222>
 8009f28:	a802      	add	r0, sp, #8
 8009f2a:	f000 fde4 	bl	800aaf6 <matherr>
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	f47f af11 	bne.w	8009d56 <pow+0xde>
 8009f34:	e7b5      	b.n	8009ea2 <pow+0x22a>
 8009f36:	bf00      	nop
 8009f38:	0800b278 	.word	0x0800b278
 8009f3c:	3ff00000 	.word	0x3ff00000
 8009f40:	fff00000 	.word	0xfff00000
 8009f44:	3fe00000 	.word	0x3fe00000
 8009f48:	47efffff 	.word	0x47efffff
 8009f4c:	c7efffff 	.word	0xc7efffff
 8009f50:	7ff00000 	.word	0x7ff00000
 8009f54:	200001f8 	.word	0x200001f8

08009f58 <__ieee754_pow>:
 8009f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f5c:	b091      	sub	sp, #68	; 0x44
 8009f5e:	ed8d 1b00 	vstr	d1, [sp]
 8009f62:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009f66:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009f6a:	ea58 0302 	orrs.w	r3, r8, r2
 8009f6e:	ec57 6b10 	vmov	r6, r7, d0
 8009f72:	f000 84be 	beq.w	800a8f2 <__ieee754_pow+0x99a>
 8009f76:	4b7a      	ldr	r3, [pc, #488]	; (800a160 <__ieee754_pow+0x208>)
 8009f78:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009f7c:	429c      	cmp	r4, r3
 8009f7e:	463d      	mov	r5, r7
 8009f80:	ee10 aa10 	vmov	sl, s0
 8009f84:	dc09      	bgt.n	8009f9a <__ieee754_pow+0x42>
 8009f86:	d103      	bne.n	8009f90 <__ieee754_pow+0x38>
 8009f88:	b93e      	cbnz	r6, 8009f9a <__ieee754_pow+0x42>
 8009f8a:	45a0      	cmp	r8, r4
 8009f8c:	dc0d      	bgt.n	8009faa <__ieee754_pow+0x52>
 8009f8e:	e001      	b.n	8009f94 <__ieee754_pow+0x3c>
 8009f90:	4598      	cmp	r8, r3
 8009f92:	dc02      	bgt.n	8009f9a <__ieee754_pow+0x42>
 8009f94:	4598      	cmp	r8, r3
 8009f96:	d10e      	bne.n	8009fb6 <__ieee754_pow+0x5e>
 8009f98:	b16a      	cbz	r2, 8009fb6 <__ieee754_pow+0x5e>
 8009f9a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009f9e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009fa2:	ea54 030a 	orrs.w	r3, r4, sl
 8009fa6:	f000 84a4 	beq.w	800a8f2 <__ieee754_pow+0x99a>
 8009faa:	486e      	ldr	r0, [pc, #440]	; (800a164 <__ieee754_pow+0x20c>)
 8009fac:	b011      	add	sp, #68	; 0x44
 8009fae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb2:	f000 bda5 	b.w	800ab00 <nan>
 8009fb6:	2d00      	cmp	r5, #0
 8009fb8:	da53      	bge.n	800a062 <__ieee754_pow+0x10a>
 8009fba:	4b6b      	ldr	r3, [pc, #428]	; (800a168 <__ieee754_pow+0x210>)
 8009fbc:	4598      	cmp	r8, r3
 8009fbe:	dc4d      	bgt.n	800a05c <__ieee754_pow+0x104>
 8009fc0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009fc4:	4598      	cmp	r8, r3
 8009fc6:	dd4c      	ble.n	800a062 <__ieee754_pow+0x10a>
 8009fc8:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009fcc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009fd0:	2b14      	cmp	r3, #20
 8009fd2:	dd26      	ble.n	800a022 <__ieee754_pow+0xca>
 8009fd4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009fd8:	fa22 f103 	lsr.w	r1, r2, r3
 8009fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d13e      	bne.n	800a062 <__ieee754_pow+0x10a>
 8009fe4:	f001 0101 	and.w	r1, r1, #1
 8009fe8:	f1c1 0b02 	rsb	fp, r1, #2
 8009fec:	2a00      	cmp	r2, #0
 8009fee:	d15b      	bne.n	800a0a8 <__ieee754_pow+0x150>
 8009ff0:	4b5b      	ldr	r3, [pc, #364]	; (800a160 <__ieee754_pow+0x208>)
 8009ff2:	4598      	cmp	r8, r3
 8009ff4:	d124      	bne.n	800a040 <__ieee754_pow+0xe8>
 8009ff6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009ffa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009ffe:	ea53 030a 	orrs.w	r3, r3, sl
 800a002:	f000 8476 	beq.w	800a8f2 <__ieee754_pow+0x99a>
 800a006:	4b59      	ldr	r3, [pc, #356]	; (800a16c <__ieee754_pow+0x214>)
 800a008:	429c      	cmp	r4, r3
 800a00a:	dd2d      	ble.n	800a068 <__ieee754_pow+0x110>
 800a00c:	f1b9 0f00 	cmp.w	r9, #0
 800a010:	f280 8473 	bge.w	800a8fa <__ieee754_pow+0x9a2>
 800a014:	2000      	movs	r0, #0
 800a016:	2100      	movs	r1, #0
 800a018:	ec41 0b10 	vmov	d0, r0, r1
 800a01c:	b011      	add	sp, #68	; 0x44
 800a01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a022:	2a00      	cmp	r2, #0
 800a024:	d13e      	bne.n	800a0a4 <__ieee754_pow+0x14c>
 800a026:	f1c3 0314 	rsb	r3, r3, #20
 800a02a:	fa48 f103 	asr.w	r1, r8, r3
 800a02e:	fa01 f303 	lsl.w	r3, r1, r3
 800a032:	4543      	cmp	r3, r8
 800a034:	f040 8469 	bne.w	800a90a <__ieee754_pow+0x9b2>
 800a038:	f001 0101 	and.w	r1, r1, #1
 800a03c:	f1c1 0b02 	rsb	fp, r1, #2
 800a040:	4b4b      	ldr	r3, [pc, #300]	; (800a170 <__ieee754_pow+0x218>)
 800a042:	4598      	cmp	r8, r3
 800a044:	d118      	bne.n	800a078 <__ieee754_pow+0x120>
 800a046:	f1b9 0f00 	cmp.w	r9, #0
 800a04a:	f280 845a 	bge.w	800a902 <__ieee754_pow+0x9aa>
 800a04e:	4948      	ldr	r1, [pc, #288]	; (800a170 <__ieee754_pow+0x218>)
 800a050:	4632      	mov	r2, r6
 800a052:	463b      	mov	r3, r7
 800a054:	2000      	movs	r0, #0
 800a056:	f7f6 fc01 	bl	800085c <__aeabi_ddiv>
 800a05a:	e7dd      	b.n	800a018 <__ieee754_pow+0xc0>
 800a05c:	f04f 0b02 	mov.w	fp, #2
 800a060:	e7c4      	b.n	8009fec <__ieee754_pow+0x94>
 800a062:	f04f 0b00 	mov.w	fp, #0
 800a066:	e7c1      	b.n	8009fec <__ieee754_pow+0x94>
 800a068:	f1b9 0f00 	cmp.w	r9, #0
 800a06c:	dad2      	bge.n	800a014 <__ieee754_pow+0xbc>
 800a06e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a072:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a076:	e7cf      	b.n	800a018 <__ieee754_pow+0xc0>
 800a078:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a07c:	d106      	bne.n	800a08c <__ieee754_pow+0x134>
 800a07e:	4632      	mov	r2, r6
 800a080:	463b      	mov	r3, r7
 800a082:	4610      	mov	r0, r2
 800a084:	4619      	mov	r1, r3
 800a086:	f7f6 fabf 	bl	8000608 <__aeabi_dmul>
 800a08a:	e7c5      	b.n	800a018 <__ieee754_pow+0xc0>
 800a08c:	4b39      	ldr	r3, [pc, #228]	; (800a174 <__ieee754_pow+0x21c>)
 800a08e:	4599      	cmp	r9, r3
 800a090:	d10a      	bne.n	800a0a8 <__ieee754_pow+0x150>
 800a092:	2d00      	cmp	r5, #0
 800a094:	db08      	blt.n	800a0a8 <__ieee754_pow+0x150>
 800a096:	ec47 6b10 	vmov	d0, r6, r7
 800a09a:	b011      	add	sp, #68	; 0x44
 800a09c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a0:	f000 bc68 	b.w	800a974 <__ieee754_sqrt>
 800a0a4:	f04f 0b00 	mov.w	fp, #0
 800a0a8:	ec47 6b10 	vmov	d0, r6, r7
 800a0ac:	f000 fd12 	bl	800aad4 <fabs>
 800a0b0:	ec51 0b10 	vmov	r0, r1, d0
 800a0b4:	f1ba 0f00 	cmp.w	sl, #0
 800a0b8:	d127      	bne.n	800a10a <__ieee754_pow+0x1b2>
 800a0ba:	b124      	cbz	r4, 800a0c6 <__ieee754_pow+0x16e>
 800a0bc:	4b2c      	ldr	r3, [pc, #176]	; (800a170 <__ieee754_pow+0x218>)
 800a0be:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d121      	bne.n	800a10a <__ieee754_pow+0x1b2>
 800a0c6:	f1b9 0f00 	cmp.w	r9, #0
 800a0ca:	da05      	bge.n	800a0d8 <__ieee754_pow+0x180>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	2000      	movs	r0, #0
 800a0d2:	4927      	ldr	r1, [pc, #156]	; (800a170 <__ieee754_pow+0x218>)
 800a0d4:	f7f6 fbc2 	bl	800085c <__aeabi_ddiv>
 800a0d8:	2d00      	cmp	r5, #0
 800a0da:	da9d      	bge.n	800a018 <__ieee754_pow+0xc0>
 800a0dc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a0e0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a0e4:	ea54 030b 	orrs.w	r3, r4, fp
 800a0e8:	d108      	bne.n	800a0fc <__ieee754_pow+0x1a4>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	4610      	mov	r0, r2
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	f7f6 f8d1 	bl	8000298 <__aeabi_dsub>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	e7ac      	b.n	800a056 <__ieee754_pow+0xfe>
 800a0fc:	f1bb 0f01 	cmp.w	fp, #1
 800a100:	d18a      	bne.n	800a018 <__ieee754_pow+0xc0>
 800a102:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a106:	4619      	mov	r1, r3
 800a108:	e786      	b.n	800a018 <__ieee754_pow+0xc0>
 800a10a:	0fed      	lsrs	r5, r5, #31
 800a10c:	1e6b      	subs	r3, r5, #1
 800a10e:	930d      	str	r3, [sp, #52]	; 0x34
 800a110:	ea5b 0303 	orrs.w	r3, fp, r3
 800a114:	d102      	bne.n	800a11c <__ieee754_pow+0x1c4>
 800a116:	4632      	mov	r2, r6
 800a118:	463b      	mov	r3, r7
 800a11a:	e7e8      	b.n	800a0ee <__ieee754_pow+0x196>
 800a11c:	4b16      	ldr	r3, [pc, #88]	; (800a178 <__ieee754_pow+0x220>)
 800a11e:	4598      	cmp	r8, r3
 800a120:	f340 80fe 	ble.w	800a320 <__ieee754_pow+0x3c8>
 800a124:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a128:	4598      	cmp	r8, r3
 800a12a:	dd0a      	ble.n	800a142 <__ieee754_pow+0x1ea>
 800a12c:	4b0f      	ldr	r3, [pc, #60]	; (800a16c <__ieee754_pow+0x214>)
 800a12e:	429c      	cmp	r4, r3
 800a130:	dc0d      	bgt.n	800a14e <__ieee754_pow+0x1f6>
 800a132:	f1b9 0f00 	cmp.w	r9, #0
 800a136:	f6bf af6d 	bge.w	800a014 <__ieee754_pow+0xbc>
 800a13a:	a307      	add	r3, pc, #28	; (adr r3, 800a158 <__ieee754_pow+0x200>)
 800a13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a140:	e79f      	b.n	800a082 <__ieee754_pow+0x12a>
 800a142:	4b0e      	ldr	r3, [pc, #56]	; (800a17c <__ieee754_pow+0x224>)
 800a144:	429c      	cmp	r4, r3
 800a146:	ddf4      	ble.n	800a132 <__ieee754_pow+0x1da>
 800a148:	4b09      	ldr	r3, [pc, #36]	; (800a170 <__ieee754_pow+0x218>)
 800a14a:	429c      	cmp	r4, r3
 800a14c:	dd18      	ble.n	800a180 <__ieee754_pow+0x228>
 800a14e:	f1b9 0f00 	cmp.w	r9, #0
 800a152:	dcf2      	bgt.n	800a13a <__ieee754_pow+0x1e2>
 800a154:	e75e      	b.n	800a014 <__ieee754_pow+0xbc>
 800a156:	bf00      	nop
 800a158:	8800759c 	.word	0x8800759c
 800a15c:	7e37e43c 	.word	0x7e37e43c
 800a160:	7ff00000 	.word	0x7ff00000
 800a164:	0800b161 	.word	0x0800b161
 800a168:	433fffff 	.word	0x433fffff
 800a16c:	3fefffff 	.word	0x3fefffff
 800a170:	3ff00000 	.word	0x3ff00000
 800a174:	3fe00000 	.word	0x3fe00000
 800a178:	41e00000 	.word	0x41e00000
 800a17c:	3feffffe 	.word	0x3feffffe
 800a180:	2200      	movs	r2, #0
 800a182:	4b63      	ldr	r3, [pc, #396]	; (800a310 <__ieee754_pow+0x3b8>)
 800a184:	f7f6 f888 	bl	8000298 <__aeabi_dsub>
 800a188:	a355      	add	r3, pc, #340	; (adr r3, 800a2e0 <__ieee754_pow+0x388>)
 800a18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18e:	4604      	mov	r4, r0
 800a190:	460d      	mov	r5, r1
 800a192:	f7f6 fa39 	bl	8000608 <__aeabi_dmul>
 800a196:	a354      	add	r3, pc, #336	; (adr r3, 800a2e8 <__ieee754_pow+0x390>)
 800a198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19c:	4606      	mov	r6, r0
 800a19e:	460f      	mov	r7, r1
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	4629      	mov	r1, r5
 800a1a4:	f7f6 fa30 	bl	8000608 <__aeabi_dmul>
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1ae:	4b59      	ldr	r3, [pc, #356]	; (800a314 <__ieee754_pow+0x3bc>)
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	4629      	mov	r1, r5
 800a1b4:	f7f6 fa28 	bl	8000608 <__aeabi_dmul>
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	a14c      	add	r1, pc, #304	; (adr r1, 800a2f0 <__ieee754_pow+0x398>)
 800a1be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1c2:	f7f6 f869 	bl	8000298 <__aeabi_dsub>
 800a1c6:	4622      	mov	r2, r4
 800a1c8:	462b      	mov	r3, r5
 800a1ca:	f7f6 fa1d 	bl	8000608 <__aeabi_dmul>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	2000      	movs	r0, #0
 800a1d4:	4950      	ldr	r1, [pc, #320]	; (800a318 <__ieee754_pow+0x3c0>)
 800a1d6:	f7f6 f85f 	bl	8000298 <__aeabi_dsub>
 800a1da:	4622      	mov	r2, r4
 800a1dc:	462b      	mov	r3, r5
 800a1de:	4680      	mov	r8, r0
 800a1e0:	4689      	mov	r9, r1
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	4629      	mov	r1, r5
 800a1e6:	f7f6 fa0f 	bl	8000608 <__aeabi_dmul>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	4640      	mov	r0, r8
 800a1f0:	4649      	mov	r1, r9
 800a1f2:	f7f6 fa09 	bl	8000608 <__aeabi_dmul>
 800a1f6:	a340      	add	r3, pc, #256	; (adr r3, 800a2f8 <__ieee754_pow+0x3a0>)
 800a1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fc:	f7f6 fa04 	bl	8000608 <__aeabi_dmul>
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a208:	f7f6 f846 	bl	8000298 <__aeabi_dsub>
 800a20c:	4602      	mov	r2, r0
 800a20e:	460b      	mov	r3, r1
 800a210:	4604      	mov	r4, r0
 800a212:	460d      	mov	r5, r1
 800a214:	4630      	mov	r0, r6
 800a216:	4639      	mov	r1, r7
 800a218:	f7f6 f840 	bl	800029c <__adddf3>
 800a21c:	2000      	movs	r0, #0
 800a21e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a222:	4632      	mov	r2, r6
 800a224:	463b      	mov	r3, r7
 800a226:	f7f6 f837 	bl	8000298 <__aeabi_dsub>
 800a22a:	4602      	mov	r2, r0
 800a22c:	460b      	mov	r3, r1
 800a22e:	4620      	mov	r0, r4
 800a230:	4629      	mov	r1, r5
 800a232:	f7f6 f831 	bl	8000298 <__aeabi_dsub>
 800a236:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a238:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a23c:	4313      	orrs	r3, r2
 800a23e:	4606      	mov	r6, r0
 800a240:	460f      	mov	r7, r1
 800a242:	f040 81eb 	bne.w	800a61c <__ieee754_pow+0x6c4>
 800a246:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800a300 <__ieee754_pow+0x3a8>
 800a24a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a24e:	2400      	movs	r4, #0
 800a250:	4622      	mov	r2, r4
 800a252:	462b      	mov	r3, r5
 800a254:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a258:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a25c:	f7f6 f81c 	bl	8000298 <__aeabi_dsub>
 800a260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a264:	f7f6 f9d0 	bl	8000608 <__aeabi_dmul>
 800a268:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a26c:	4680      	mov	r8, r0
 800a26e:	4689      	mov	r9, r1
 800a270:	4630      	mov	r0, r6
 800a272:	4639      	mov	r1, r7
 800a274:	f7f6 f9c8 	bl	8000608 <__aeabi_dmul>
 800a278:	4602      	mov	r2, r0
 800a27a:	460b      	mov	r3, r1
 800a27c:	4640      	mov	r0, r8
 800a27e:	4649      	mov	r1, r9
 800a280:	f7f6 f80c 	bl	800029c <__adddf3>
 800a284:	4622      	mov	r2, r4
 800a286:	462b      	mov	r3, r5
 800a288:	4680      	mov	r8, r0
 800a28a:	4689      	mov	r9, r1
 800a28c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a290:	f7f6 f9ba 	bl	8000608 <__aeabi_dmul>
 800a294:	460b      	mov	r3, r1
 800a296:	4604      	mov	r4, r0
 800a298:	460d      	mov	r5, r1
 800a29a:	4602      	mov	r2, r0
 800a29c:	4649      	mov	r1, r9
 800a29e:	4640      	mov	r0, r8
 800a2a0:	e9cd 4500 	strd	r4, r5, [sp]
 800a2a4:	f7f5 fffa 	bl	800029c <__adddf3>
 800a2a8:	4b1c      	ldr	r3, [pc, #112]	; (800a31c <__ieee754_pow+0x3c4>)
 800a2aa:	4299      	cmp	r1, r3
 800a2ac:	4606      	mov	r6, r0
 800a2ae:	460f      	mov	r7, r1
 800a2b0:	468b      	mov	fp, r1
 800a2b2:	f340 82f7 	ble.w	800a8a4 <__ieee754_pow+0x94c>
 800a2b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a2ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a2be:	4303      	orrs	r3, r0
 800a2c0:	f000 81ea 	beq.w	800a698 <__ieee754_pow+0x740>
 800a2c4:	a310      	add	r3, pc, #64	; (adr r3, 800a308 <__ieee754_pow+0x3b0>)
 800a2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2ce:	f7f6 f99b 	bl	8000608 <__aeabi_dmul>
 800a2d2:	a30d      	add	r3, pc, #52	; (adr r3, 800a308 <__ieee754_pow+0x3b0>)
 800a2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d8:	e6d5      	b.n	800a086 <__ieee754_pow+0x12e>
 800a2da:	bf00      	nop
 800a2dc:	f3af 8000 	nop.w
 800a2e0:	60000000 	.word	0x60000000
 800a2e4:	3ff71547 	.word	0x3ff71547
 800a2e8:	f85ddf44 	.word	0xf85ddf44
 800a2ec:	3e54ae0b 	.word	0x3e54ae0b
 800a2f0:	55555555 	.word	0x55555555
 800a2f4:	3fd55555 	.word	0x3fd55555
 800a2f8:	652b82fe 	.word	0x652b82fe
 800a2fc:	3ff71547 	.word	0x3ff71547
 800a300:	00000000 	.word	0x00000000
 800a304:	bff00000 	.word	0xbff00000
 800a308:	8800759c 	.word	0x8800759c
 800a30c:	7e37e43c 	.word	0x7e37e43c
 800a310:	3ff00000 	.word	0x3ff00000
 800a314:	3fd00000 	.word	0x3fd00000
 800a318:	3fe00000 	.word	0x3fe00000
 800a31c:	408fffff 	.word	0x408fffff
 800a320:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a324:	f04f 0200 	mov.w	r2, #0
 800a328:	da05      	bge.n	800a336 <__ieee754_pow+0x3de>
 800a32a:	4bd3      	ldr	r3, [pc, #844]	; (800a678 <__ieee754_pow+0x720>)
 800a32c:	f7f6 f96c 	bl	8000608 <__aeabi_dmul>
 800a330:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a334:	460c      	mov	r4, r1
 800a336:	1523      	asrs	r3, r4, #20
 800a338:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a33c:	4413      	add	r3, r2
 800a33e:	9309      	str	r3, [sp, #36]	; 0x24
 800a340:	4bce      	ldr	r3, [pc, #824]	; (800a67c <__ieee754_pow+0x724>)
 800a342:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a346:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a34a:	429c      	cmp	r4, r3
 800a34c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a350:	dd08      	ble.n	800a364 <__ieee754_pow+0x40c>
 800a352:	4bcb      	ldr	r3, [pc, #812]	; (800a680 <__ieee754_pow+0x728>)
 800a354:	429c      	cmp	r4, r3
 800a356:	f340 815e 	ble.w	800a616 <__ieee754_pow+0x6be>
 800a35a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a35c:	3301      	adds	r3, #1
 800a35e:	9309      	str	r3, [sp, #36]	; 0x24
 800a360:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a364:	f04f 0a00 	mov.w	sl, #0
 800a368:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a36c:	930c      	str	r3, [sp, #48]	; 0x30
 800a36e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a370:	4bc4      	ldr	r3, [pc, #784]	; (800a684 <__ieee754_pow+0x72c>)
 800a372:	4413      	add	r3, r2
 800a374:	ed93 7b00 	vldr	d7, [r3]
 800a378:	4629      	mov	r1, r5
 800a37a:	ec53 2b17 	vmov	r2, r3, d7
 800a37e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a382:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a386:	f7f5 ff87 	bl	8000298 <__aeabi_dsub>
 800a38a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a38e:	4606      	mov	r6, r0
 800a390:	460f      	mov	r7, r1
 800a392:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a396:	f7f5 ff81 	bl	800029c <__adddf3>
 800a39a:	4602      	mov	r2, r0
 800a39c:	460b      	mov	r3, r1
 800a39e:	2000      	movs	r0, #0
 800a3a0:	49b9      	ldr	r1, [pc, #740]	; (800a688 <__ieee754_pow+0x730>)
 800a3a2:	f7f6 fa5b 	bl	800085c <__aeabi_ddiv>
 800a3a6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	4639      	mov	r1, r7
 800a3b2:	f7f6 f929 	bl	8000608 <__aeabi_dmul>
 800a3b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3ba:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a3be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	9302      	str	r3, [sp, #8]
 800a3c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a3ca:	106d      	asrs	r5, r5, #1
 800a3cc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a3d0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a3da:	4640      	mov	r0, r8
 800a3dc:	4649      	mov	r1, r9
 800a3de:	4614      	mov	r4, r2
 800a3e0:	461d      	mov	r5, r3
 800a3e2:	f7f6 f911 	bl	8000608 <__aeabi_dmul>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	4639      	mov	r1, r7
 800a3ee:	f7f5 ff53 	bl	8000298 <__aeabi_dsub>
 800a3f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3f6:	4606      	mov	r6, r0
 800a3f8:	460f      	mov	r7, r1
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	4629      	mov	r1, r5
 800a3fe:	f7f5 ff4b 	bl	8000298 <__aeabi_dsub>
 800a402:	4602      	mov	r2, r0
 800a404:	460b      	mov	r3, r1
 800a406:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a40a:	f7f5 ff45 	bl	8000298 <__aeabi_dsub>
 800a40e:	4642      	mov	r2, r8
 800a410:	464b      	mov	r3, r9
 800a412:	f7f6 f8f9 	bl	8000608 <__aeabi_dmul>
 800a416:	4602      	mov	r2, r0
 800a418:	460b      	mov	r3, r1
 800a41a:	4630      	mov	r0, r6
 800a41c:	4639      	mov	r1, r7
 800a41e:	f7f5 ff3b 	bl	8000298 <__aeabi_dsub>
 800a422:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a426:	f7f6 f8ef 	bl	8000608 <__aeabi_dmul>
 800a42a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a42e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a432:	4610      	mov	r0, r2
 800a434:	4619      	mov	r1, r3
 800a436:	f7f6 f8e7 	bl	8000608 <__aeabi_dmul>
 800a43a:	a37b      	add	r3, pc, #492	; (adr r3, 800a628 <__ieee754_pow+0x6d0>)
 800a43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a440:	4604      	mov	r4, r0
 800a442:	460d      	mov	r5, r1
 800a444:	f7f6 f8e0 	bl	8000608 <__aeabi_dmul>
 800a448:	a379      	add	r3, pc, #484	; (adr r3, 800a630 <__ieee754_pow+0x6d8>)
 800a44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44e:	f7f5 ff25 	bl	800029c <__adddf3>
 800a452:	4622      	mov	r2, r4
 800a454:	462b      	mov	r3, r5
 800a456:	f7f6 f8d7 	bl	8000608 <__aeabi_dmul>
 800a45a:	a377      	add	r3, pc, #476	; (adr r3, 800a638 <__ieee754_pow+0x6e0>)
 800a45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a460:	f7f5 ff1c 	bl	800029c <__adddf3>
 800a464:	4622      	mov	r2, r4
 800a466:	462b      	mov	r3, r5
 800a468:	f7f6 f8ce 	bl	8000608 <__aeabi_dmul>
 800a46c:	a374      	add	r3, pc, #464	; (adr r3, 800a640 <__ieee754_pow+0x6e8>)
 800a46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a472:	f7f5 ff13 	bl	800029c <__adddf3>
 800a476:	4622      	mov	r2, r4
 800a478:	462b      	mov	r3, r5
 800a47a:	f7f6 f8c5 	bl	8000608 <__aeabi_dmul>
 800a47e:	a372      	add	r3, pc, #456	; (adr r3, 800a648 <__ieee754_pow+0x6f0>)
 800a480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a484:	f7f5 ff0a 	bl	800029c <__adddf3>
 800a488:	4622      	mov	r2, r4
 800a48a:	462b      	mov	r3, r5
 800a48c:	f7f6 f8bc 	bl	8000608 <__aeabi_dmul>
 800a490:	a36f      	add	r3, pc, #444	; (adr r3, 800a650 <__ieee754_pow+0x6f8>)
 800a492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a496:	f7f5 ff01 	bl	800029c <__adddf3>
 800a49a:	4622      	mov	r2, r4
 800a49c:	4606      	mov	r6, r0
 800a49e:	460f      	mov	r7, r1
 800a4a0:	462b      	mov	r3, r5
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	4629      	mov	r1, r5
 800a4a6:	f7f6 f8af 	bl	8000608 <__aeabi_dmul>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	4639      	mov	r1, r7
 800a4b2:	f7f6 f8a9 	bl	8000608 <__aeabi_dmul>
 800a4b6:	4642      	mov	r2, r8
 800a4b8:	4604      	mov	r4, r0
 800a4ba:	460d      	mov	r5, r1
 800a4bc:	464b      	mov	r3, r9
 800a4be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4c2:	f7f5 feeb 	bl	800029c <__adddf3>
 800a4c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a4ca:	f7f6 f89d 	bl	8000608 <__aeabi_dmul>
 800a4ce:	4622      	mov	r2, r4
 800a4d0:	462b      	mov	r3, r5
 800a4d2:	f7f5 fee3 	bl	800029c <__adddf3>
 800a4d6:	4642      	mov	r2, r8
 800a4d8:	4606      	mov	r6, r0
 800a4da:	460f      	mov	r7, r1
 800a4dc:	464b      	mov	r3, r9
 800a4de:	4640      	mov	r0, r8
 800a4e0:	4649      	mov	r1, r9
 800a4e2:	f7f6 f891 	bl	8000608 <__aeabi_dmul>
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	4b68      	ldr	r3, [pc, #416]	; (800a68c <__ieee754_pow+0x734>)
 800a4ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a4ee:	f7f5 fed5 	bl	800029c <__adddf3>
 800a4f2:	4632      	mov	r2, r6
 800a4f4:	463b      	mov	r3, r7
 800a4f6:	f7f5 fed1 	bl	800029c <__adddf3>
 800a4fa:	9802      	ldr	r0, [sp, #8]
 800a4fc:	460d      	mov	r5, r1
 800a4fe:	4604      	mov	r4, r0
 800a500:	4602      	mov	r2, r0
 800a502:	460b      	mov	r3, r1
 800a504:	4640      	mov	r0, r8
 800a506:	4649      	mov	r1, r9
 800a508:	f7f6 f87e 	bl	8000608 <__aeabi_dmul>
 800a50c:	2200      	movs	r2, #0
 800a50e:	4680      	mov	r8, r0
 800a510:	4689      	mov	r9, r1
 800a512:	4b5e      	ldr	r3, [pc, #376]	; (800a68c <__ieee754_pow+0x734>)
 800a514:	4620      	mov	r0, r4
 800a516:	4629      	mov	r1, r5
 800a518:	f7f5 febe 	bl	8000298 <__aeabi_dsub>
 800a51c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a520:	f7f5 feba 	bl	8000298 <__aeabi_dsub>
 800a524:	4602      	mov	r2, r0
 800a526:	460b      	mov	r3, r1
 800a528:	4630      	mov	r0, r6
 800a52a:	4639      	mov	r1, r7
 800a52c:	f7f5 feb4 	bl	8000298 <__aeabi_dsub>
 800a530:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a534:	f7f6 f868 	bl	8000608 <__aeabi_dmul>
 800a538:	4622      	mov	r2, r4
 800a53a:	4606      	mov	r6, r0
 800a53c:	460f      	mov	r7, r1
 800a53e:	462b      	mov	r3, r5
 800a540:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a544:	f7f6 f860 	bl	8000608 <__aeabi_dmul>
 800a548:	4602      	mov	r2, r0
 800a54a:	460b      	mov	r3, r1
 800a54c:	4630      	mov	r0, r6
 800a54e:	4639      	mov	r1, r7
 800a550:	f7f5 fea4 	bl	800029c <__adddf3>
 800a554:	4606      	mov	r6, r0
 800a556:	460f      	mov	r7, r1
 800a558:	4602      	mov	r2, r0
 800a55a:	460b      	mov	r3, r1
 800a55c:	4640      	mov	r0, r8
 800a55e:	4649      	mov	r1, r9
 800a560:	f7f5 fe9c 	bl	800029c <__adddf3>
 800a564:	9802      	ldr	r0, [sp, #8]
 800a566:	a33c      	add	r3, pc, #240	; (adr r3, 800a658 <__ieee754_pow+0x700>)
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	4604      	mov	r4, r0
 800a56e:	460d      	mov	r5, r1
 800a570:	f7f6 f84a 	bl	8000608 <__aeabi_dmul>
 800a574:	4642      	mov	r2, r8
 800a576:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a57a:	464b      	mov	r3, r9
 800a57c:	4620      	mov	r0, r4
 800a57e:	4629      	mov	r1, r5
 800a580:	f7f5 fe8a 	bl	8000298 <__aeabi_dsub>
 800a584:	4602      	mov	r2, r0
 800a586:	460b      	mov	r3, r1
 800a588:	4630      	mov	r0, r6
 800a58a:	4639      	mov	r1, r7
 800a58c:	f7f5 fe84 	bl	8000298 <__aeabi_dsub>
 800a590:	a333      	add	r3, pc, #204	; (adr r3, 800a660 <__ieee754_pow+0x708>)
 800a592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a596:	f7f6 f837 	bl	8000608 <__aeabi_dmul>
 800a59a:	a333      	add	r3, pc, #204	; (adr r3, 800a668 <__ieee754_pow+0x710>)
 800a59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a0:	4606      	mov	r6, r0
 800a5a2:	460f      	mov	r7, r1
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	4629      	mov	r1, r5
 800a5a8:	f7f6 f82e 	bl	8000608 <__aeabi_dmul>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	4639      	mov	r1, r7
 800a5b4:	f7f5 fe72 	bl	800029c <__adddf3>
 800a5b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5ba:	4b35      	ldr	r3, [pc, #212]	; (800a690 <__ieee754_pow+0x738>)
 800a5bc:	4413      	add	r3, r2
 800a5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c2:	f7f5 fe6b 	bl	800029c <__adddf3>
 800a5c6:	4604      	mov	r4, r0
 800a5c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5ca:	460d      	mov	r5, r1
 800a5cc:	f7f5 ffb2 	bl	8000534 <__aeabi_i2d>
 800a5d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5d2:	4b30      	ldr	r3, [pc, #192]	; (800a694 <__ieee754_pow+0x73c>)
 800a5d4:	4413      	add	r3, r2
 800a5d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5da:	4606      	mov	r6, r0
 800a5dc:	460f      	mov	r7, r1
 800a5de:	4622      	mov	r2, r4
 800a5e0:	462b      	mov	r3, r5
 800a5e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5e6:	f7f5 fe59 	bl	800029c <__adddf3>
 800a5ea:	4642      	mov	r2, r8
 800a5ec:	464b      	mov	r3, r9
 800a5ee:	f7f5 fe55 	bl	800029c <__adddf3>
 800a5f2:	4632      	mov	r2, r6
 800a5f4:	463b      	mov	r3, r7
 800a5f6:	f7f5 fe51 	bl	800029c <__adddf3>
 800a5fa:	9802      	ldr	r0, [sp, #8]
 800a5fc:	4632      	mov	r2, r6
 800a5fe:	463b      	mov	r3, r7
 800a600:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a604:	f7f5 fe48 	bl	8000298 <__aeabi_dsub>
 800a608:	4642      	mov	r2, r8
 800a60a:	464b      	mov	r3, r9
 800a60c:	f7f5 fe44 	bl	8000298 <__aeabi_dsub>
 800a610:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a614:	e607      	b.n	800a226 <__ieee754_pow+0x2ce>
 800a616:	f04f 0a01 	mov.w	sl, #1
 800a61a:	e6a5      	b.n	800a368 <__ieee754_pow+0x410>
 800a61c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800a670 <__ieee754_pow+0x718>
 800a620:	e613      	b.n	800a24a <__ieee754_pow+0x2f2>
 800a622:	bf00      	nop
 800a624:	f3af 8000 	nop.w
 800a628:	4a454eef 	.word	0x4a454eef
 800a62c:	3fca7e28 	.word	0x3fca7e28
 800a630:	93c9db65 	.word	0x93c9db65
 800a634:	3fcd864a 	.word	0x3fcd864a
 800a638:	a91d4101 	.word	0xa91d4101
 800a63c:	3fd17460 	.word	0x3fd17460
 800a640:	518f264d 	.word	0x518f264d
 800a644:	3fd55555 	.word	0x3fd55555
 800a648:	db6fabff 	.word	0xdb6fabff
 800a64c:	3fdb6db6 	.word	0x3fdb6db6
 800a650:	33333303 	.word	0x33333303
 800a654:	3fe33333 	.word	0x3fe33333
 800a658:	e0000000 	.word	0xe0000000
 800a65c:	3feec709 	.word	0x3feec709
 800a660:	dc3a03fd 	.word	0xdc3a03fd
 800a664:	3feec709 	.word	0x3feec709
 800a668:	145b01f5 	.word	0x145b01f5
 800a66c:	be3e2fe0 	.word	0xbe3e2fe0
 800a670:	00000000 	.word	0x00000000
 800a674:	3ff00000 	.word	0x3ff00000
 800a678:	43400000 	.word	0x43400000
 800a67c:	0003988e 	.word	0x0003988e
 800a680:	000bb679 	.word	0x000bb679
 800a684:	0800b280 	.word	0x0800b280
 800a688:	3ff00000 	.word	0x3ff00000
 800a68c:	40080000 	.word	0x40080000
 800a690:	0800b2a0 	.word	0x0800b2a0
 800a694:	0800b290 	.word	0x0800b290
 800a698:	a3b4      	add	r3, pc, #720	; (adr r3, 800a96c <__ieee754_pow+0xa14>)
 800a69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69e:	4640      	mov	r0, r8
 800a6a0:	4649      	mov	r1, r9
 800a6a2:	f7f5 fdfb 	bl	800029c <__adddf3>
 800a6a6:	4622      	mov	r2, r4
 800a6a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a6ac:	462b      	mov	r3, r5
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	4639      	mov	r1, r7
 800a6b2:	f7f5 fdf1 	bl	8000298 <__aeabi_dsub>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6be:	f7f6 fa33 	bl	8000b28 <__aeabi_dcmpgt>
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	f47f adfe 	bne.w	800a2c4 <__ieee754_pow+0x36c>
 800a6c8:	4aa3      	ldr	r2, [pc, #652]	; (800a958 <__ieee754_pow+0xa00>)
 800a6ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	f340 810a 	ble.w	800a8e8 <__ieee754_pow+0x990>
 800a6d4:	151b      	asrs	r3, r3, #20
 800a6d6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a6da:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a6de:	fa4a f303 	asr.w	r3, sl, r3
 800a6e2:	445b      	add	r3, fp
 800a6e4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a6e8:	4e9c      	ldr	r6, [pc, #624]	; (800a95c <__ieee754_pow+0xa04>)
 800a6ea:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a6ee:	4116      	asrs	r6, r2
 800a6f0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	ea23 0106 	bic.w	r1, r3, r6
 800a6fa:	f1c2 0214 	rsb	r2, r2, #20
 800a6fe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a702:	fa4a fa02 	asr.w	sl, sl, r2
 800a706:	f1bb 0f00 	cmp.w	fp, #0
 800a70a:	4602      	mov	r2, r0
 800a70c:	460b      	mov	r3, r1
 800a70e:	4620      	mov	r0, r4
 800a710:	4629      	mov	r1, r5
 800a712:	bfb8      	it	lt
 800a714:	f1ca 0a00 	rsblt	sl, sl, #0
 800a718:	f7f5 fdbe 	bl	8000298 <__aeabi_dsub>
 800a71c:	e9cd 0100 	strd	r0, r1, [sp]
 800a720:	4642      	mov	r2, r8
 800a722:	464b      	mov	r3, r9
 800a724:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a728:	f7f5 fdb8 	bl	800029c <__adddf3>
 800a72c:	2000      	movs	r0, #0
 800a72e:	a378      	add	r3, pc, #480	; (adr r3, 800a910 <__ieee754_pow+0x9b8>)
 800a730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a734:	4604      	mov	r4, r0
 800a736:	460d      	mov	r5, r1
 800a738:	f7f5 ff66 	bl	8000608 <__aeabi_dmul>
 800a73c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a740:	4606      	mov	r6, r0
 800a742:	460f      	mov	r7, r1
 800a744:	4620      	mov	r0, r4
 800a746:	4629      	mov	r1, r5
 800a748:	f7f5 fda6 	bl	8000298 <__aeabi_dsub>
 800a74c:	4602      	mov	r2, r0
 800a74e:	460b      	mov	r3, r1
 800a750:	4640      	mov	r0, r8
 800a752:	4649      	mov	r1, r9
 800a754:	f7f5 fda0 	bl	8000298 <__aeabi_dsub>
 800a758:	a36f      	add	r3, pc, #444	; (adr r3, 800a918 <__ieee754_pow+0x9c0>)
 800a75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75e:	f7f5 ff53 	bl	8000608 <__aeabi_dmul>
 800a762:	a36f      	add	r3, pc, #444	; (adr r3, 800a920 <__ieee754_pow+0x9c8>)
 800a764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a768:	4680      	mov	r8, r0
 800a76a:	4689      	mov	r9, r1
 800a76c:	4620      	mov	r0, r4
 800a76e:	4629      	mov	r1, r5
 800a770:	f7f5 ff4a 	bl	8000608 <__aeabi_dmul>
 800a774:	4602      	mov	r2, r0
 800a776:	460b      	mov	r3, r1
 800a778:	4640      	mov	r0, r8
 800a77a:	4649      	mov	r1, r9
 800a77c:	f7f5 fd8e 	bl	800029c <__adddf3>
 800a780:	4604      	mov	r4, r0
 800a782:	460d      	mov	r5, r1
 800a784:	4602      	mov	r2, r0
 800a786:	460b      	mov	r3, r1
 800a788:	4630      	mov	r0, r6
 800a78a:	4639      	mov	r1, r7
 800a78c:	f7f5 fd86 	bl	800029c <__adddf3>
 800a790:	4632      	mov	r2, r6
 800a792:	463b      	mov	r3, r7
 800a794:	4680      	mov	r8, r0
 800a796:	4689      	mov	r9, r1
 800a798:	f7f5 fd7e 	bl	8000298 <__aeabi_dsub>
 800a79c:	4602      	mov	r2, r0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	4629      	mov	r1, r5
 800a7a4:	f7f5 fd78 	bl	8000298 <__aeabi_dsub>
 800a7a8:	4642      	mov	r2, r8
 800a7aa:	4606      	mov	r6, r0
 800a7ac:	460f      	mov	r7, r1
 800a7ae:	464b      	mov	r3, r9
 800a7b0:	4640      	mov	r0, r8
 800a7b2:	4649      	mov	r1, r9
 800a7b4:	f7f5 ff28 	bl	8000608 <__aeabi_dmul>
 800a7b8:	a35b      	add	r3, pc, #364	; (adr r3, 800a928 <__ieee754_pow+0x9d0>)
 800a7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7be:	4604      	mov	r4, r0
 800a7c0:	460d      	mov	r5, r1
 800a7c2:	f7f5 ff21 	bl	8000608 <__aeabi_dmul>
 800a7c6:	a35a      	add	r3, pc, #360	; (adr r3, 800a930 <__ieee754_pow+0x9d8>)
 800a7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7cc:	f7f5 fd64 	bl	8000298 <__aeabi_dsub>
 800a7d0:	4622      	mov	r2, r4
 800a7d2:	462b      	mov	r3, r5
 800a7d4:	f7f5 ff18 	bl	8000608 <__aeabi_dmul>
 800a7d8:	a357      	add	r3, pc, #348	; (adr r3, 800a938 <__ieee754_pow+0x9e0>)
 800a7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7de:	f7f5 fd5d 	bl	800029c <__adddf3>
 800a7e2:	4622      	mov	r2, r4
 800a7e4:	462b      	mov	r3, r5
 800a7e6:	f7f5 ff0f 	bl	8000608 <__aeabi_dmul>
 800a7ea:	a355      	add	r3, pc, #340	; (adr r3, 800a940 <__ieee754_pow+0x9e8>)
 800a7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f0:	f7f5 fd52 	bl	8000298 <__aeabi_dsub>
 800a7f4:	4622      	mov	r2, r4
 800a7f6:	462b      	mov	r3, r5
 800a7f8:	f7f5 ff06 	bl	8000608 <__aeabi_dmul>
 800a7fc:	a352      	add	r3, pc, #328	; (adr r3, 800a948 <__ieee754_pow+0x9f0>)
 800a7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a802:	f7f5 fd4b 	bl	800029c <__adddf3>
 800a806:	4622      	mov	r2, r4
 800a808:	462b      	mov	r3, r5
 800a80a:	f7f5 fefd 	bl	8000608 <__aeabi_dmul>
 800a80e:	4602      	mov	r2, r0
 800a810:	460b      	mov	r3, r1
 800a812:	4640      	mov	r0, r8
 800a814:	4649      	mov	r1, r9
 800a816:	f7f5 fd3f 	bl	8000298 <__aeabi_dsub>
 800a81a:	4604      	mov	r4, r0
 800a81c:	460d      	mov	r5, r1
 800a81e:	4602      	mov	r2, r0
 800a820:	460b      	mov	r3, r1
 800a822:	4640      	mov	r0, r8
 800a824:	4649      	mov	r1, r9
 800a826:	f7f5 feef 	bl	8000608 <__aeabi_dmul>
 800a82a:	2200      	movs	r2, #0
 800a82c:	e9cd 0100 	strd	r0, r1, [sp]
 800a830:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a834:	4620      	mov	r0, r4
 800a836:	4629      	mov	r1, r5
 800a838:	f7f5 fd2e 	bl	8000298 <__aeabi_dsub>
 800a83c:	4602      	mov	r2, r0
 800a83e:	460b      	mov	r3, r1
 800a840:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a844:	f7f6 f80a 	bl	800085c <__aeabi_ddiv>
 800a848:	4632      	mov	r2, r6
 800a84a:	4604      	mov	r4, r0
 800a84c:	460d      	mov	r5, r1
 800a84e:	463b      	mov	r3, r7
 800a850:	4640      	mov	r0, r8
 800a852:	4649      	mov	r1, r9
 800a854:	f7f5 fed8 	bl	8000608 <__aeabi_dmul>
 800a858:	4632      	mov	r2, r6
 800a85a:	463b      	mov	r3, r7
 800a85c:	f7f5 fd1e 	bl	800029c <__adddf3>
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	4620      	mov	r0, r4
 800a866:	4629      	mov	r1, r5
 800a868:	f7f5 fd16 	bl	8000298 <__aeabi_dsub>
 800a86c:	4642      	mov	r2, r8
 800a86e:	464b      	mov	r3, r9
 800a870:	f7f5 fd12 	bl	8000298 <__aeabi_dsub>
 800a874:	4602      	mov	r2, r0
 800a876:	460b      	mov	r3, r1
 800a878:	2000      	movs	r0, #0
 800a87a:	4939      	ldr	r1, [pc, #228]	; (800a960 <__ieee754_pow+0xa08>)
 800a87c:	f7f5 fd0c 	bl	8000298 <__aeabi_dsub>
 800a880:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a884:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a888:	4602      	mov	r2, r0
 800a88a:	460b      	mov	r3, r1
 800a88c:	da2f      	bge.n	800a8ee <__ieee754_pow+0x996>
 800a88e:	4650      	mov	r0, sl
 800a890:	ec43 2b10 	vmov	d0, r2, r3
 800a894:	f000 f9c0 	bl	800ac18 <scalbn>
 800a898:	ec51 0b10 	vmov	r0, r1, d0
 800a89c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8a0:	f7ff bbf1 	b.w	800a086 <__ieee754_pow+0x12e>
 800a8a4:	4b2f      	ldr	r3, [pc, #188]	; (800a964 <__ieee754_pow+0xa0c>)
 800a8a6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a8aa:	429e      	cmp	r6, r3
 800a8ac:	f77f af0c 	ble.w	800a6c8 <__ieee754_pow+0x770>
 800a8b0:	4b2d      	ldr	r3, [pc, #180]	; (800a968 <__ieee754_pow+0xa10>)
 800a8b2:	440b      	add	r3, r1
 800a8b4:	4303      	orrs	r3, r0
 800a8b6:	d00b      	beq.n	800a8d0 <__ieee754_pow+0x978>
 800a8b8:	a325      	add	r3, pc, #148	; (adr r3, 800a950 <__ieee754_pow+0x9f8>)
 800a8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8c2:	f7f5 fea1 	bl	8000608 <__aeabi_dmul>
 800a8c6:	a322      	add	r3, pc, #136	; (adr r3, 800a950 <__ieee754_pow+0x9f8>)
 800a8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8cc:	f7ff bbdb 	b.w	800a086 <__ieee754_pow+0x12e>
 800a8d0:	4622      	mov	r2, r4
 800a8d2:	462b      	mov	r3, r5
 800a8d4:	f7f5 fce0 	bl	8000298 <__aeabi_dsub>
 800a8d8:	4642      	mov	r2, r8
 800a8da:	464b      	mov	r3, r9
 800a8dc:	f7f6 f91a 	bl	8000b14 <__aeabi_dcmpge>
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	f43f aef1 	beq.w	800a6c8 <__ieee754_pow+0x770>
 800a8e6:	e7e7      	b.n	800a8b8 <__ieee754_pow+0x960>
 800a8e8:	f04f 0a00 	mov.w	sl, #0
 800a8ec:	e718      	b.n	800a720 <__ieee754_pow+0x7c8>
 800a8ee:	4621      	mov	r1, r4
 800a8f0:	e7d4      	b.n	800a89c <__ieee754_pow+0x944>
 800a8f2:	2000      	movs	r0, #0
 800a8f4:	491a      	ldr	r1, [pc, #104]	; (800a960 <__ieee754_pow+0xa08>)
 800a8f6:	f7ff bb8f 	b.w	800a018 <__ieee754_pow+0xc0>
 800a8fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8fe:	f7ff bb8b 	b.w	800a018 <__ieee754_pow+0xc0>
 800a902:	4630      	mov	r0, r6
 800a904:	4639      	mov	r1, r7
 800a906:	f7ff bb87 	b.w	800a018 <__ieee754_pow+0xc0>
 800a90a:	4693      	mov	fp, r2
 800a90c:	f7ff bb98 	b.w	800a040 <__ieee754_pow+0xe8>
 800a910:	00000000 	.word	0x00000000
 800a914:	3fe62e43 	.word	0x3fe62e43
 800a918:	fefa39ef 	.word	0xfefa39ef
 800a91c:	3fe62e42 	.word	0x3fe62e42
 800a920:	0ca86c39 	.word	0x0ca86c39
 800a924:	be205c61 	.word	0xbe205c61
 800a928:	72bea4d0 	.word	0x72bea4d0
 800a92c:	3e663769 	.word	0x3e663769
 800a930:	c5d26bf1 	.word	0xc5d26bf1
 800a934:	3ebbbd41 	.word	0x3ebbbd41
 800a938:	af25de2c 	.word	0xaf25de2c
 800a93c:	3f11566a 	.word	0x3f11566a
 800a940:	16bebd93 	.word	0x16bebd93
 800a944:	3f66c16c 	.word	0x3f66c16c
 800a948:	5555553e 	.word	0x5555553e
 800a94c:	3fc55555 	.word	0x3fc55555
 800a950:	c2f8f359 	.word	0xc2f8f359
 800a954:	01a56e1f 	.word	0x01a56e1f
 800a958:	3fe00000 	.word	0x3fe00000
 800a95c:	000fffff 	.word	0x000fffff
 800a960:	3ff00000 	.word	0x3ff00000
 800a964:	4090cbff 	.word	0x4090cbff
 800a968:	3f6f3400 	.word	0x3f6f3400
 800a96c:	652b82fe 	.word	0x652b82fe
 800a970:	3c971547 	.word	0x3c971547

0800a974 <__ieee754_sqrt>:
 800a974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a978:	4955      	ldr	r1, [pc, #340]	; (800aad0 <__ieee754_sqrt+0x15c>)
 800a97a:	ec55 4b10 	vmov	r4, r5, d0
 800a97e:	43a9      	bics	r1, r5
 800a980:	462b      	mov	r3, r5
 800a982:	462a      	mov	r2, r5
 800a984:	d112      	bne.n	800a9ac <__ieee754_sqrt+0x38>
 800a986:	ee10 2a10 	vmov	r2, s0
 800a98a:	ee10 0a10 	vmov	r0, s0
 800a98e:	4629      	mov	r1, r5
 800a990:	f7f5 fe3a 	bl	8000608 <__aeabi_dmul>
 800a994:	4602      	mov	r2, r0
 800a996:	460b      	mov	r3, r1
 800a998:	4620      	mov	r0, r4
 800a99a:	4629      	mov	r1, r5
 800a99c:	f7f5 fc7e 	bl	800029c <__adddf3>
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	460d      	mov	r5, r1
 800a9a4:	ec45 4b10 	vmov	d0, r4, r5
 800a9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9ac:	2d00      	cmp	r5, #0
 800a9ae:	ee10 0a10 	vmov	r0, s0
 800a9b2:	4621      	mov	r1, r4
 800a9b4:	dc0f      	bgt.n	800a9d6 <__ieee754_sqrt+0x62>
 800a9b6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a9ba:	4330      	orrs	r0, r6
 800a9bc:	d0f2      	beq.n	800a9a4 <__ieee754_sqrt+0x30>
 800a9be:	b155      	cbz	r5, 800a9d6 <__ieee754_sqrt+0x62>
 800a9c0:	ee10 2a10 	vmov	r2, s0
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	4629      	mov	r1, r5
 800a9c8:	f7f5 fc66 	bl	8000298 <__aeabi_dsub>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	460b      	mov	r3, r1
 800a9d0:	f7f5 ff44 	bl	800085c <__aeabi_ddiv>
 800a9d4:	e7e4      	b.n	800a9a0 <__ieee754_sqrt+0x2c>
 800a9d6:	151b      	asrs	r3, r3, #20
 800a9d8:	d073      	beq.n	800aac2 <__ieee754_sqrt+0x14e>
 800a9da:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a9de:	07dd      	lsls	r5, r3, #31
 800a9e0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a9e4:	bf48      	it	mi
 800a9e6:	0fc8      	lsrmi	r0, r1, #31
 800a9e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a9ec:	bf44      	itt	mi
 800a9ee:	0049      	lslmi	r1, r1, #1
 800a9f0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800a9f4:	2500      	movs	r5, #0
 800a9f6:	1058      	asrs	r0, r3, #1
 800a9f8:	0fcb      	lsrs	r3, r1, #31
 800a9fa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800a9fe:	0049      	lsls	r1, r1, #1
 800aa00:	2316      	movs	r3, #22
 800aa02:	462c      	mov	r4, r5
 800aa04:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800aa08:	19a7      	adds	r7, r4, r6
 800aa0a:	4297      	cmp	r7, r2
 800aa0c:	bfde      	ittt	le
 800aa0e:	19bc      	addle	r4, r7, r6
 800aa10:	1bd2      	suble	r2, r2, r7
 800aa12:	19ad      	addle	r5, r5, r6
 800aa14:	0fcf      	lsrs	r7, r1, #31
 800aa16:	3b01      	subs	r3, #1
 800aa18:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800aa1c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800aa20:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800aa24:	d1f0      	bne.n	800aa08 <__ieee754_sqrt+0x94>
 800aa26:	f04f 0c20 	mov.w	ip, #32
 800aa2a:	469e      	mov	lr, r3
 800aa2c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800aa30:	42a2      	cmp	r2, r4
 800aa32:	eb06 070e 	add.w	r7, r6, lr
 800aa36:	dc02      	bgt.n	800aa3e <__ieee754_sqrt+0xca>
 800aa38:	d112      	bne.n	800aa60 <__ieee754_sqrt+0xec>
 800aa3a:	428f      	cmp	r7, r1
 800aa3c:	d810      	bhi.n	800aa60 <__ieee754_sqrt+0xec>
 800aa3e:	2f00      	cmp	r7, #0
 800aa40:	eb07 0e06 	add.w	lr, r7, r6
 800aa44:	da42      	bge.n	800aacc <__ieee754_sqrt+0x158>
 800aa46:	f1be 0f00 	cmp.w	lr, #0
 800aa4a:	db3f      	blt.n	800aacc <__ieee754_sqrt+0x158>
 800aa4c:	f104 0801 	add.w	r8, r4, #1
 800aa50:	1b12      	subs	r2, r2, r4
 800aa52:	428f      	cmp	r7, r1
 800aa54:	bf88      	it	hi
 800aa56:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800aa5a:	1bc9      	subs	r1, r1, r7
 800aa5c:	4433      	add	r3, r6
 800aa5e:	4644      	mov	r4, r8
 800aa60:	0052      	lsls	r2, r2, #1
 800aa62:	f1bc 0c01 	subs.w	ip, ip, #1
 800aa66:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800aa6a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800aa6e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800aa72:	d1dd      	bne.n	800aa30 <__ieee754_sqrt+0xbc>
 800aa74:	430a      	orrs	r2, r1
 800aa76:	d006      	beq.n	800aa86 <__ieee754_sqrt+0x112>
 800aa78:	1c5c      	adds	r4, r3, #1
 800aa7a:	bf13      	iteet	ne
 800aa7c:	3301      	addne	r3, #1
 800aa7e:	3501      	addeq	r5, #1
 800aa80:	4663      	moveq	r3, ip
 800aa82:	f023 0301 	bicne.w	r3, r3, #1
 800aa86:	106a      	asrs	r2, r5, #1
 800aa88:	085b      	lsrs	r3, r3, #1
 800aa8a:	07e9      	lsls	r1, r5, #31
 800aa8c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800aa90:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800aa94:	bf48      	it	mi
 800aa96:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800aa9a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800aa9e:	461c      	mov	r4, r3
 800aaa0:	e780      	b.n	800a9a4 <__ieee754_sqrt+0x30>
 800aaa2:	0aca      	lsrs	r2, r1, #11
 800aaa4:	3815      	subs	r0, #21
 800aaa6:	0549      	lsls	r1, r1, #21
 800aaa8:	2a00      	cmp	r2, #0
 800aaaa:	d0fa      	beq.n	800aaa2 <__ieee754_sqrt+0x12e>
 800aaac:	02d6      	lsls	r6, r2, #11
 800aaae:	d50a      	bpl.n	800aac6 <__ieee754_sqrt+0x152>
 800aab0:	f1c3 0420 	rsb	r4, r3, #32
 800aab4:	fa21 f404 	lsr.w	r4, r1, r4
 800aab8:	1e5d      	subs	r5, r3, #1
 800aaba:	4099      	lsls	r1, r3
 800aabc:	4322      	orrs	r2, r4
 800aabe:	1b43      	subs	r3, r0, r5
 800aac0:	e78b      	b.n	800a9da <__ieee754_sqrt+0x66>
 800aac2:	4618      	mov	r0, r3
 800aac4:	e7f0      	b.n	800aaa8 <__ieee754_sqrt+0x134>
 800aac6:	0052      	lsls	r2, r2, #1
 800aac8:	3301      	adds	r3, #1
 800aaca:	e7ef      	b.n	800aaac <__ieee754_sqrt+0x138>
 800aacc:	46a0      	mov	r8, r4
 800aace:	e7bf      	b.n	800aa50 <__ieee754_sqrt+0xdc>
 800aad0:	7ff00000 	.word	0x7ff00000

0800aad4 <fabs>:
 800aad4:	ec51 0b10 	vmov	r0, r1, d0
 800aad8:	ee10 2a10 	vmov	r2, s0
 800aadc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aae0:	ec43 2b10 	vmov	d0, r2, r3
 800aae4:	4770      	bx	lr

0800aae6 <finite>:
 800aae6:	ee10 3a90 	vmov	r3, s1
 800aaea:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800aaee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800aaf2:	0fc0      	lsrs	r0, r0, #31
 800aaf4:	4770      	bx	lr

0800aaf6 <matherr>:
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	4770      	bx	lr
 800aafa:	0000      	movs	r0, r0
 800aafc:	0000      	movs	r0, r0
	...

0800ab00 <nan>:
 800ab00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ab08 <nan+0x8>
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop
 800ab08:	00000000 	.word	0x00000000
 800ab0c:	7ff80000 	.word	0x7ff80000

0800ab10 <rint>:
 800ab10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab12:	ec51 0b10 	vmov	r0, r1, d0
 800ab16:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ab1a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ab1e:	2e13      	cmp	r6, #19
 800ab20:	460b      	mov	r3, r1
 800ab22:	ee10 4a10 	vmov	r4, s0
 800ab26:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800ab2a:	dc56      	bgt.n	800abda <rint+0xca>
 800ab2c:	2e00      	cmp	r6, #0
 800ab2e:	da2b      	bge.n	800ab88 <rint+0x78>
 800ab30:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ab34:	4302      	orrs	r2, r0
 800ab36:	d023      	beq.n	800ab80 <rint+0x70>
 800ab38:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800ab3c:	4302      	orrs	r2, r0
 800ab3e:	4254      	negs	r4, r2
 800ab40:	4314      	orrs	r4, r2
 800ab42:	0c4b      	lsrs	r3, r1, #17
 800ab44:	0b24      	lsrs	r4, r4, #12
 800ab46:	045b      	lsls	r3, r3, #17
 800ab48:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800ab4c:	ea44 0103 	orr.w	r1, r4, r3
 800ab50:	460b      	mov	r3, r1
 800ab52:	492f      	ldr	r1, [pc, #188]	; (800ac10 <rint+0x100>)
 800ab54:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800ab58:	e9d1 6700 	ldrd	r6, r7, [r1]
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	4639      	mov	r1, r7
 800ab60:	4630      	mov	r0, r6
 800ab62:	f7f5 fb9b 	bl	800029c <__adddf3>
 800ab66:	e9cd 0100 	strd	r0, r1, [sp]
 800ab6a:	463b      	mov	r3, r7
 800ab6c:	4632      	mov	r2, r6
 800ab6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab72:	f7f5 fb91 	bl	8000298 <__aeabi_dsub>
 800ab76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ab7a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800ab7e:	4639      	mov	r1, r7
 800ab80:	ec41 0b10 	vmov	d0, r0, r1
 800ab84:	b003      	add	sp, #12
 800ab86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab88:	4a22      	ldr	r2, [pc, #136]	; (800ac14 <rint+0x104>)
 800ab8a:	4132      	asrs	r2, r6
 800ab8c:	ea01 0702 	and.w	r7, r1, r2
 800ab90:	4307      	orrs	r7, r0
 800ab92:	d0f5      	beq.n	800ab80 <rint+0x70>
 800ab94:	0852      	lsrs	r2, r2, #1
 800ab96:	4011      	ands	r1, r2
 800ab98:	430c      	orrs	r4, r1
 800ab9a:	d00b      	beq.n	800abb4 <rint+0xa4>
 800ab9c:	ea23 0202 	bic.w	r2, r3, r2
 800aba0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800aba4:	2e13      	cmp	r6, #19
 800aba6:	fa43 f306 	asr.w	r3, r3, r6
 800abaa:	bf0c      	ite	eq
 800abac:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800abb0:	2400      	movne	r4, #0
 800abb2:	4313      	orrs	r3, r2
 800abb4:	4916      	ldr	r1, [pc, #88]	; (800ac10 <rint+0x100>)
 800abb6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800abba:	4622      	mov	r2, r4
 800abbc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800abc0:	4620      	mov	r0, r4
 800abc2:	4629      	mov	r1, r5
 800abc4:	f7f5 fb6a 	bl	800029c <__adddf3>
 800abc8:	e9cd 0100 	strd	r0, r1, [sp]
 800abcc:	4622      	mov	r2, r4
 800abce:	462b      	mov	r3, r5
 800abd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abd4:	f7f5 fb60 	bl	8000298 <__aeabi_dsub>
 800abd8:	e7d2      	b.n	800ab80 <rint+0x70>
 800abda:	2e33      	cmp	r6, #51	; 0x33
 800abdc:	dd07      	ble.n	800abee <rint+0xde>
 800abde:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800abe2:	d1cd      	bne.n	800ab80 <rint+0x70>
 800abe4:	ee10 2a10 	vmov	r2, s0
 800abe8:	f7f5 fb58 	bl	800029c <__adddf3>
 800abec:	e7c8      	b.n	800ab80 <rint+0x70>
 800abee:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800abf2:	f04f 32ff 	mov.w	r2, #4294967295
 800abf6:	40f2      	lsrs	r2, r6
 800abf8:	4210      	tst	r0, r2
 800abfa:	d0c1      	beq.n	800ab80 <rint+0x70>
 800abfc:	0852      	lsrs	r2, r2, #1
 800abfe:	4210      	tst	r0, r2
 800ac00:	bf1f      	itttt	ne
 800ac02:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800ac06:	ea20 0202 	bicne.w	r2, r0, r2
 800ac0a:	4134      	asrne	r4, r6
 800ac0c:	4314      	orrne	r4, r2
 800ac0e:	e7d1      	b.n	800abb4 <rint+0xa4>
 800ac10:	0800b2b0 	.word	0x0800b2b0
 800ac14:	000fffff 	.word	0x000fffff

0800ac18 <scalbn>:
 800ac18:	b570      	push	{r4, r5, r6, lr}
 800ac1a:	ec55 4b10 	vmov	r4, r5, d0
 800ac1e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ac22:	4606      	mov	r6, r0
 800ac24:	462b      	mov	r3, r5
 800ac26:	b9aa      	cbnz	r2, 800ac54 <scalbn+0x3c>
 800ac28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ac2c:	4323      	orrs	r3, r4
 800ac2e:	d03b      	beq.n	800aca8 <scalbn+0x90>
 800ac30:	4b31      	ldr	r3, [pc, #196]	; (800acf8 <scalbn+0xe0>)
 800ac32:	4629      	mov	r1, r5
 800ac34:	2200      	movs	r2, #0
 800ac36:	ee10 0a10 	vmov	r0, s0
 800ac3a:	f7f5 fce5 	bl	8000608 <__aeabi_dmul>
 800ac3e:	4b2f      	ldr	r3, [pc, #188]	; (800acfc <scalbn+0xe4>)
 800ac40:	429e      	cmp	r6, r3
 800ac42:	4604      	mov	r4, r0
 800ac44:	460d      	mov	r5, r1
 800ac46:	da12      	bge.n	800ac6e <scalbn+0x56>
 800ac48:	a327      	add	r3, pc, #156	; (adr r3, 800ace8 <scalbn+0xd0>)
 800ac4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4e:	f7f5 fcdb 	bl	8000608 <__aeabi_dmul>
 800ac52:	e009      	b.n	800ac68 <scalbn+0x50>
 800ac54:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ac58:	428a      	cmp	r2, r1
 800ac5a:	d10c      	bne.n	800ac76 <scalbn+0x5e>
 800ac5c:	ee10 2a10 	vmov	r2, s0
 800ac60:	4620      	mov	r0, r4
 800ac62:	4629      	mov	r1, r5
 800ac64:	f7f5 fb1a 	bl	800029c <__adddf3>
 800ac68:	4604      	mov	r4, r0
 800ac6a:	460d      	mov	r5, r1
 800ac6c:	e01c      	b.n	800aca8 <scalbn+0x90>
 800ac6e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ac72:	460b      	mov	r3, r1
 800ac74:	3a36      	subs	r2, #54	; 0x36
 800ac76:	4432      	add	r2, r6
 800ac78:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ac7c:	428a      	cmp	r2, r1
 800ac7e:	dd0b      	ble.n	800ac98 <scalbn+0x80>
 800ac80:	ec45 4b11 	vmov	d1, r4, r5
 800ac84:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800acf0 <scalbn+0xd8>
 800ac88:	f000 f83c 	bl	800ad04 <copysign>
 800ac8c:	a318      	add	r3, pc, #96	; (adr r3, 800acf0 <scalbn+0xd8>)
 800ac8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac92:	ec51 0b10 	vmov	r0, r1, d0
 800ac96:	e7da      	b.n	800ac4e <scalbn+0x36>
 800ac98:	2a00      	cmp	r2, #0
 800ac9a:	dd08      	ble.n	800acae <scalbn+0x96>
 800ac9c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aca0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aca4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aca8:	ec45 4b10 	vmov	d0, r4, r5
 800acac:	bd70      	pop	{r4, r5, r6, pc}
 800acae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800acb2:	da0d      	bge.n	800acd0 <scalbn+0xb8>
 800acb4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800acb8:	429e      	cmp	r6, r3
 800acba:	ec45 4b11 	vmov	d1, r4, r5
 800acbe:	dce1      	bgt.n	800ac84 <scalbn+0x6c>
 800acc0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800ace8 <scalbn+0xd0>
 800acc4:	f000 f81e 	bl	800ad04 <copysign>
 800acc8:	a307      	add	r3, pc, #28	; (adr r3, 800ace8 <scalbn+0xd0>)
 800acca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acce:	e7e0      	b.n	800ac92 <scalbn+0x7a>
 800acd0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800acd4:	3236      	adds	r2, #54	; 0x36
 800acd6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800acda:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800acde:	4620      	mov	r0, r4
 800ace0:	4629      	mov	r1, r5
 800ace2:	2200      	movs	r2, #0
 800ace4:	4b06      	ldr	r3, [pc, #24]	; (800ad00 <scalbn+0xe8>)
 800ace6:	e7b2      	b.n	800ac4e <scalbn+0x36>
 800ace8:	c2f8f359 	.word	0xc2f8f359
 800acec:	01a56e1f 	.word	0x01a56e1f
 800acf0:	8800759c 	.word	0x8800759c
 800acf4:	7e37e43c 	.word	0x7e37e43c
 800acf8:	43500000 	.word	0x43500000
 800acfc:	ffff3cb0 	.word	0xffff3cb0
 800ad00:	3c900000 	.word	0x3c900000

0800ad04 <copysign>:
 800ad04:	ec51 0b10 	vmov	r0, r1, d0
 800ad08:	ee11 0a90 	vmov	r0, s3
 800ad0c:	ee10 2a10 	vmov	r2, s0
 800ad10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ad14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800ad18:	ea41 0300 	orr.w	r3, r1, r0
 800ad1c:	ec43 2b10 	vmov	d0, r2, r3
 800ad20:	4770      	bx	lr
	...

0800ad24 <_init>:
 800ad24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad26:	bf00      	nop
 800ad28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad2a:	bc08      	pop	{r3}
 800ad2c:	469e      	mov	lr, r3
 800ad2e:	4770      	bx	lr

0800ad30 <_fini>:
 800ad30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad32:	bf00      	nop
 800ad34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad36:	bc08      	pop	{r3}
 800ad38:	469e      	mov	lr, r3
 800ad3a:	4770      	bx	lr
