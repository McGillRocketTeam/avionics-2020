
ejection_telemetry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007198  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08007338  08007338  00017338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007498  08007498  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08007498  08007498  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007498  08007498  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007498  08007498  00017498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800749c  0800749c  0001749c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080074a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bc4  2000008c  0800752c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c50  0800752c  00021c50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000193be  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f89  00000000  00000000  0003947a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001390  00000000  00000000  0003c408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001268  00000000  00000000  0003d798  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002f56  00000000  00000000  0003ea00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001120e  00000000  00000000  00041956  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d31da  00000000  00000000  00052b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00125d3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005650  00000000  00000000  00125dbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007320 	.word	0x08007320

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	08007320 	.word	0x08007320

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ac0:	f000 fd86 	bl	80015d0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ac4:	f000 f826 	bl	8000b14 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ac8:	f000 f8b2 	bl	8000c30 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000acc:	f000 f880 	bl	8000bd0 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000ad0:	f003 faea 	bl	80040a8 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of ejection */
	ejectionHandle = osThreadNew(StartEjection, NULL, &ejection_attributes);
 8000ad4:	4a09      	ldr	r2, [pc, #36]	; (8000afc <main+0x40>)
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4809      	ldr	r0, [pc, #36]	; (8000b00 <main+0x44>)
 8000ada:	f003 fb4d 	bl	8004178 <osThreadNew>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <main+0x48>)
 8000ae2:	601a      	str	r2, [r3, #0]

	/* creation of telemetry */
	telemetryHandle = osThreadNew(StartTelemetry, NULL, &telemetry_attributes);
 8000ae4:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <main+0x4c>)
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4808      	ldr	r0, [pc, #32]	; (8000b0c <main+0x50>)
 8000aea:	f003 fb45 	bl	8004178 <osThreadNew>
 8000aee:	4602      	mov	r2, r0
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <main+0x54>)
 8000af2:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000af4:	f003 fb0c 	bl	8004110 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000af8:	e7fe      	b.n	8000af8 <main+0x3c>
 8000afa:	bf00      	nop
 8000afc:	080073e4 	.word	0x080073e4
 8000b00:	080012d1 	.word	0x080012d1
 8000b04:	200019d0 	.word	0x200019d0
 8000b08:	08007408 	.word	0x08007408
 8000b0c:	080012eb 	.word	0x080012eb
 8000b10:	20001b28 	.word	0x20001b28

08000b14 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b0a6      	sub	sp, #152	; 0x98
 8000b18:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b1e:	2228      	movs	r2, #40	; 0x28
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f005 fff7 	bl	8006b16 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b28:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2258      	movs	r2, #88	; 0x58
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f005 ffe9 	bl	8006b16 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b44:	2302      	movs	r3, #2
 8000b46:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b4c:	2310      	movs	r3, #16
 8000b4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b52:	2302      	movs	r3, #2
 8000b54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b60:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b72:	4618      	mov	r0, r3
 8000b74:	f001 f808 	bl	8001b88 <HAL_RCC_OscConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0x6e>
	{
		Error_Handler();
 8000b7e:	f000 fbcf 	bl	8001320 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b82:	230f      	movs	r3, #15
 8000b84:	65fb      	str	r3, [r7, #92]	; 0x5c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b86:	2302      	movs	r3, #2
 8000b88:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b92:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b98:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 ff08 	bl	80029b4 <HAL_RCC_ClockConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000baa:	f000 fbb9 	bl	8001320 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f002 f963 	bl	8002e84 <HAL_RCCEx_PeriphCLKConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <SystemClock_Config+0xb4>
	{
		Error_Handler();
 8000bc4:	f000 fbac 	bl	8001320 <Error_Handler>
	}
}
 8000bc8:	bf00      	nop
 8000bca:	3798      	adds	r7, #152	; 0x98
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000bd6:	4a15      	ldr	r2, [pc, #84]	; (8000c2c <MX_USART2_UART_Init+0x5c>)
 8000bd8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000bdc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000be0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000c14:	f002 fe2a 	bl	800386c <HAL_UART_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8000c1e:	f000 fb7f 	bl	8001320 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20001b30 	.word	0x20001b30
 8000c2c:	40004400 	.word	0x40004400

08000c30 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c46:	4b3b      	ldr	r3, [pc, #236]	; (8000d34 <MX_GPIO_Init+0x104>)
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	4a3a      	ldr	r2, [pc, #232]	; (8000d34 <MX_GPIO_Init+0x104>)
 8000c4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c50:	6153      	str	r3, [r2, #20]
 8000c52:	4b38      	ldr	r3, [pc, #224]	; (8000d34 <MX_GPIO_Init+0x104>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000c5e:	4b35      	ldr	r3, [pc, #212]	; (8000d34 <MX_GPIO_Init+0x104>)
 8000c60:	695b      	ldr	r3, [r3, #20]
 8000c62:	4a34      	ldr	r2, [pc, #208]	; (8000d34 <MX_GPIO_Init+0x104>)
 8000c64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c68:	6153      	str	r3, [r2, #20]
 8000c6a:	4b32      	ldr	r3, [pc, #200]	; (8000d34 <MX_GPIO_Init+0x104>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <MX_GPIO_Init+0x104>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	4a2e      	ldr	r2, [pc, #184]	; (8000d34 <MX_GPIO_Init+0x104>)
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c80:	6153      	str	r3, [r2, #20]
 8000c82:	4b2c      	ldr	r3, [pc, #176]	; (8000d34 <MX_GPIO_Init+0x104>)
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8e:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <MX_GPIO_Init+0x104>)
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	4a28      	ldr	r2, [pc, #160]	; (8000d34 <MX_GPIO_Init+0x104>)
 8000c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c98:	6153      	str	r3, [r2, #20]
 8000c9a:	4b26      	ldr	r3, [pc, #152]	; (8000d34 <MX_GPIO_Init+0x104>)
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, buzzer_Pin|LED_Pin|main1_Pin|main2_Pin, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	21f0      	movs	r1, #240	; 0xf0
 8000caa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cae:	f000 ff53 	bl	8001b58 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, drogue1_Pin|drogue2_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2130      	movs	r1, #48	; 0x30
 8000cb6:	4820      	ldr	r0, [pc, #128]	; (8000d38 <MX_GPIO_Init+0x108>)
 8000cb8:	f000 ff4e 	bl	8001b58 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cc2:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <MX_GPIO_Init+0x10c>)
 8000cc4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4819      	ldr	r0, [pc, #100]	; (8000d38 <MX_GPIO_Init+0x108>)
 8000cd2:	f000 fdb7 	bl	8001844 <HAL_GPIO_Init>

	/*Configure GPIO pins : buzzer_Pin LED_Pin main1_Pin main2_Pin */
	GPIO_InitStruct.Pin = buzzer_Pin|LED_Pin|main1_Pin|main2_Pin;
 8000cd6:	23f0      	movs	r3, #240	; 0xf0
 8000cd8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf0:	f000 fda8 	bl	8001844 <HAL_GPIO_Init>

	/*Configure GPIO pins : drogue1_Pin drogue2_Pin */
	GPIO_InitStruct.Pin = drogue1_Pin|drogue2_Pin;
 8000cf4:	2330      	movs	r3, #48	; 0x30
 8000cf6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480b      	ldr	r0, [pc, #44]	; (8000d38 <MX_GPIO_Init+0x108>)
 8000d0c:	f000 fd9a 	bl	8001844 <HAL_GPIO_Init>

	/*Configure GPIO pins : in22_Pin in21_Pin in12_Pin in11_Pin */
	GPIO_InitStruct.Pin = in22_Pin|in21_Pin|in12_Pin|in11_Pin;
 8000d10:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000d14:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d28:	f000 fd8c 	bl	8001844 <HAL_GPIO_Init>

}
 8000d2c:	bf00      	nop
 8000d2e:	3728      	adds	r7, #40	; 0x28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40021000 	.word	0x40021000
 8000d38:	48000800 	.word	0x48000800
 8000d3c:	10210000 	.word	0x10210000

08000d40 <begin>:

/* USER CODE BEGIN 4 */
int begin(void){
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
	return 1;
 8000d44:	2301      	movs	r3, #1
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <readAltitude>:

float readAltitude(float local_pressure){
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	ed87 0a01 	vstr	s0, [r7, #4]
	return local_pressure;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	ee07 3a90 	vmov	s15, r3
}
 8000d60:	eeb0 0a67 	vmov.f32	s0, s15
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <setup>:

///Empty functions end here
#define false 0
#define true 1

void setup() {
 8000d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(drogue1_GPIO_Port, drogue1_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2110      	movs	r1, #16
 8000d7a:	485d      	ldr	r0, [pc, #372]	; (8000ef0 <setup+0x180>)
 8000d7c:	f000 feec 	bl	8001b58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(drogue2_GPIO_Port, drogue2_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2120      	movs	r1, #32
 8000d84:	485a      	ldr	r0, [pc, #360]	; (8000ef0 <setup+0x180>)
 8000d86:	f000 fee7 	bl	8001b58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(main1_GPIO_Port, main1_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2140      	movs	r1, #64	; 0x40
 8000d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d92:	f000 fee1 	bl	8001b58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(main2_GPIO_Port, main2_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9e:	f000 fedb 	bl	8001b58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2110      	movs	r1, #16
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000daa:	f000 fed5 	bl	8001b58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000dae:	2201      	movs	r2, #1
 8000db0:	2120      	movs	r1, #32
 8000db2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db6:	f000 fecf 	bl	8001b58 <HAL_GPIO_WritePin>

	if (!begin()){
 8000dba:	f7ff ffc1 	bl	8000d40 <begin>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d136      	bne.n	8000e32 <setup+0xc2>
		///printf("\r\nCould not find a valid BME280 sensor, check wiring!");
		size = sprintf((char *)Data, "Could not find a valid BME280 sensor, check wiring\n");
 8000dc4:	4b4b      	ldr	r3, [pc, #300]	; (8000ef4 <setup+0x184>)
 8000dc6:	4a4c      	ldr	r2, [pc, #304]	; (8000ef8 <setup+0x188>)
 8000dc8:	4614      	mov	r4, r2
 8000dca:	469c      	mov	ip, r3
 8000dcc:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000dd0:	4665      	mov	r5, ip
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000dd6:	6028      	str	r0, [r5, #0]
 8000dd8:	6069      	str	r1, [r5, #4]
 8000dda:	60aa      	str	r2, [r5, #8]
 8000ddc:	60eb      	str	r3, [r5, #12]
 8000dde:	3410      	adds	r4, #16
 8000de0:	f10c 0c10 	add.w	ip, ip, #16
 8000de4:	4574      	cmp	r4, lr
 8000de6:	d1f3      	bne.n	8000dd0 <setup+0x60>
 8000de8:	4663      	mov	r3, ip
 8000dea:	4622      	mov	r2, r4
 8000dec:	6810      	ldr	r0, [r2, #0]
 8000dee:	6018      	str	r0, [r3, #0]
 8000df0:	2333      	movs	r3, #51	; 0x33
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	4b41      	ldr	r3, [pc, #260]	; (8000efc <setup+0x18c>)
 8000df6:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, Data, size, 1000);
 8000df8:	4b40      	ldr	r3, [pc, #256]	; (8000efc <setup+0x18c>)
 8000dfa:	881a      	ldrh	r2, [r3, #0]
 8000dfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e00:	493c      	ldr	r1, [pc, #240]	; (8000ef4 <setup+0x184>)
 8000e02:	483f      	ldr	r0, [pc, #252]	; (8000f00 <setup+0x190>)
 8000e04:	f002 fd80 	bl	8003908 <HAL_UART_Transmit>
		HAL_Delay(2000);
 8000e08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e0c:	f000 fc16 	bl	800163c <HAL_Delay>

		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2110      	movs	r1, #16
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e18:	f000 fe9e 	bl	8001b58 <HAL_GPIO_WritePin>

		HAL_Delay(5000);
 8000e1c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e20:	f000 fc0c 	bl	800163c <HAL_Delay>
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2110      	movs	r1, #16
 8000e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2c:	f000 fe94 	bl	8001b58 <HAL_GPIO_WritePin>
		while (1);
 8000e30:	e7fe      	b.n	8000e30 <setup+0xc0>
	} else {
		int i;
		for (i = 0 ; i < 3; i++){
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	e014      	b.n	8000e62 <setup+0xf2>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2110      	movs	r1, #16
 8000e3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e40:	f000 fe8a 	bl	8001b58 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000e44:	2064      	movs	r0, #100	; 0x64
 8000e46:	f000 fbf9 	bl	800163c <HAL_Delay>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2110      	movs	r1, #16
 8000e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e52:	f000 fe81 	bl	8001b58 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000e56:	2064      	movs	r0, #100	; 0x64
 8000e58:	f000 fbf0 	bl	800163c <HAL_Delay>
		for (i = 0 ; i < 3; i++){
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	dde7      	ble.n	8000e38 <setup+0xc8>
		}
	}

	for (int i = 0; i < 500; i++){
 8000e68:	2300      	movs	r3, #0
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	e017      	b.n	8000e9e <setup+0x12e>
		ground_alt += readAltitude(local_pressure/100.0); //takes sea-level pressure and reads alt 500 times
 8000e6e:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <setup+0x194>)
 8000e70:	edd3 7a00 	vldr	s15, [r3]
 8000e74:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000f08 <setup+0x198>
 8000e78:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000e7c:	eeb0 0a66 	vmov.f32	s0, s13
 8000e80:	f7ff ff66 	bl	8000d50 <readAltitude>
 8000e84:	eeb0 7a40 	vmov.f32	s14, s0
 8000e88:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <setup+0x19c>)
 8000e8a:	edd3 7a00 	vldr	s15, [r3]
 8000e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e92:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <setup+0x19c>)
 8000e94:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 500; i++){
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	603b      	str	r3, [r7, #0]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ea4:	dbe3      	blt.n	8000e6e <setup+0xfe>
	}
	ground_alt = ground_alt/500.0; //average of alt readings
 8000ea6:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <setup+0x19c>)
 8000ea8:	ed93 7a00 	vldr	s14, [r3]
 8000eac:	eddf 6a18 	vldr	s13, [pc, #96]	; 8000f10 <setup+0x1a0>
 8000eb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eb4:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <setup+0x19c>)
 8000eb6:	edc3 7a00 	vstr	s15, [r3]
	a = 2*3.14159*a;
 8000eba:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <setup+0x1a4>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fb42 	bl	8000548 <__aeabi_f2d>
 8000ec4:	a308      	add	r3, pc, #32	; (adr r3, 8000ee8 <setup+0x178>)
 8000ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eca:	f7ff fb95 	bl	80005f8 <__aeabi_dmul>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	460c      	mov	r4, r1
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	4621      	mov	r1, r4
 8000ed6:	f7ff fda1 	bl	8000a1c <__aeabi_d2f>
 8000eda:	4602      	mov	r2, r0
 8000edc:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <setup+0x1a4>)
 8000ede:	601a      	str	r2, [r3, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ee8:	f01b866e 	.word	0xf01b866e
 8000eec:	401921f9 	.word	0x401921f9
 8000ef0:	48000800 	.word	0x48000800
 8000ef4:	20001a20 	.word	0x20001a20
 8000ef8:	08007350 	.word	0x08007350
 8000efc:	20001b24 	.word	0x20001b24
 8000f00:	20001b30 	.word	0x20001b30
 8000f04:	20000000 	.word	0x20000000
 8000f08:	42c80000 	.word	0x42c80000
 8000f0c:	200000a8 	.word	0x200000a8
 8000f10:	43fa0000 	.word	0x43fa0000
 8000f14:	20000014 	.word	0x20000014

08000f18 <loop>:

void loop() {
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
	if (main_deployed == false){
 8000f1e:	4b9c      	ldr	r3, [pc, #624]	; (8001190 <loop+0x278>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	f040 815c 	bne.w	80011e0 <loop+0x2c8>
		T = (HAL_GetTick() - t_previous_loop)/1000; //millis() = time since program start running T running time of curr loop (s)
 8000f28:	f000 fb7c 	bl	8001624 <HAL_GetTick>
 8000f2c:	ee07 0a90 	vmov	s15, r0
 8000f30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f34:	4b97      	ldr	r3, [pc, #604]	; (8001194 <loop+0x27c>)
 8000f36:	edd3 7a00 	vldr	s15, [r3]
 8000f3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f3e:	eddf 6a96 	vldr	s13, [pc, #600]	; 8001198 <loop+0x280>
 8000f42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f46:	4b95      	ldr	r3, [pc, #596]	; (800119c <loop+0x284>)
 8000f48:	edc3 7a00 	vstr	s15, [r3]
		t_previous_loop = HAL_GetTick(); //total time
 8000f4c:	f000 fb6a 	bl	8001624 <HAL_GetTick>
 8000f50:	ee07 0a90 	vmov	s15, r0
 8000f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f58:	4b8e      	ldr	r3, [pc, #568]	; (8001194 <loop+0x27c>)
 8000f5a:	edc3 7a00 	vstr	s15, [r3]

		alt_meas = (readAltitude(local_pressure/100) - ground_alt)*3.28084; //Measures AGL altitude in feet
 8000f5e:	4b90      	ldr	r3, [pc, #576]	; (80011a0 <loop+0x288>)
 8000f60:	edd3 7a00 	vldr	s15, [r3]
 8000f64:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80011a4 <loop+0x28c>
 8000f68:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000f6c:	eeb0 0a66 	vmov.f32	s0, s13
 8000f70:	f7ff feee 	bl	8000d50 <readAltitude>
 8000f74:	eeb0 7a40 	vmov.f32	s14, s0
 8000f78:	4b8b      	ldr	r3, [pc, #556]	; (80011a8 <loop+0x290>)
 8000f7a:	edd3 7a00 	vldr	s15, [r3]
 8000f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f82:	ee17 0a90 	vmov	r0, s15
 8000f86:	f7ff fadf 	bl	8000548 <__aeabi_f2d>
 8000f8a:	a37f      	add	r3, pc, #508	; (adr r3, 8001188 <loop+0x270>)
 8000f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f90:	f7ff fb32 	bl	80005f8 <__aeabi_dmul>
 8000f94:	4603      	mov	r3, r0
 8000f96:	460c      	mov	r4, r1
 8000f98:	4618      	mov	r0, r3
 8000f9a:	4621      	mov	r1, r4
 8000f9c:	f7ff fd3e 	bl	8000a1c <__aeabi_d2f>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	4b82      	ldr	r3, [pc, #520]	; (80011ac <loop+0x294>)
 8000fa4:	601a      	str	r2, [r3, #0]

		// Low-pass filter - rocket at high speeds pressure fluctuates and affects altitude reading, usaully at a high frequency, so low pass filter filters those high freuqency changes out
		//and keeps just the overall, low frequency changes (caused by altitude change)
		alt_filtered = (1 - T * a) * alt_previous[num_meas-1] + a * T * alt_meas;
 8000fa6:	4b7d      	ldr	r3, [pc, #500]	; (800119c <loop+0x284>)
 8000fa8:	ed93 7a00 	vldr	s14, [r3]
 8000fac:	4b80      	ldr	r3, [pc, #512]	; (80011b0 <loop+0x298>)
 8000fae:	edd3 7a00 	vldr	s15, [r3]
 8000fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fbe:	4b7d      	ldr	r3, [pc, #500]	; (80011b4 <loop+0x29c>)
 8000fc0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000fc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc8:	4b79      	ldr	r3, [pc, #484]	; (80011b0 <loop+0x298>)
 8000fca:	edd3 6a00 	vldr	s13, [r3]
 8000fce:	4b73      	ldr	r3, [pc, #460]	; (800119c <loop+0x284>)
 8000fd0:	edd3 7a00 	vldr	s15, [r3]
 8000fd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000fd8:	4b74      	ldr	r3, [pc, #464]	; (80011ac <loop+0x294>)
 8000fda:	edd3 7a00 	vldr	s15, [r3]
 8000fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe6:	4b74      	ldr	r3, [pc, #464]	; (80011b8 <loop+0x2a0>)
 8000fe8:	edc3 7a00 	vstr	s15, [r3]

		// Slide window of 10 measurement history.
		for (int i = 0; i < num_meas-1; i++){
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	e00d      	b.n	800100e <loop+0xf6>
			alt_previous[i] = alt_previous[i+1];
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	4a6f      	ldr	r2, [pc, #444]	; (80011b4 <loop+0x29c>)
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	496d      	ldr	r1, [pc, #436]	; (80011b4 <loop+0x29c>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	440b      	add	r3, r1
 8001006:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < num_meas-1; i++){
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3301      	adds	r3, #1
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b08      	cmp	r3, #8
 8001012:	ddee      	ble.n	8000ff2 <loop+0xda>
		}
		alt_previous[num_meas-1] = alt_filtered;
 8001014:	4b68      	ldr	r3, [pc, #416]	; (80011b8 <loop+0x2a0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a66      	ldr	r2, [pc, #408]	; (80011b4 <loop+0x29c>)
 800101a:	6253      	str	r3, [r2, #36]	; 0x24

		// Launch Detection
		if (alt_filtered > 150 && launched == false){
 800101c:	4b66      	ldr	r3, [pc, #408]	; (80011b8 <loop+0x2a0>)
 800101e:	edd3 7a00 	vldr	s15, [r3]
 8001022:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80011bc <loop+0x2a4>
 8001026:	eef4 7ac7 	vcmpe.f32	s15, s14
 800102a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102e:	dd06      	ble.n	800103e <loop+0x126>
 8001030:	4b63      	ldr	r3, [pc, #396]	; (80011c0 <loop+0x2a8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <loop+0x126>
			launched = true;
 8001038:	4b61      	ldr	r3, [pc, #388]	; (80011c0 <loop+0x2a8>)
 800103a:	2201      	movs	r2, #1
 800103c:	601a      	str	r2, [r3, #0]
		}

		//Average gradient of 10 past measurements.
		average_gradient = 0;
 800103e:	4b61      	ldr	r3, [pc, #388]	; (80011c4 <loop+0x2ac>)
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < num_meas-1; i++){
 8001046:	2300      	movs	r3, #0
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	e019      	b.n	8001080 <loop+0x168>
			average_gradient += (alt_previous[i+1]- alt_previous[i]);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	4a58      	ldr	r2, [pc, #352]	; (80011b4 <loop+0x29c>)
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	ed93 7a00 	vldr	s14, [r3]
 800105a:	4a56      	ldr	r2, [pc, #344]	; (80011b4 <loop+0x29c>)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	edd3 7a00 	vldr	s15, [r3]
 8001066:	ee37 7a67 	vsub.f32	s14, s14, s15
 800106a:	4b56      	ldr	r3, [pc, #344]	; (80011c4 <loop+0x2ac>)
 800106c:	edd3 7a00 	vldr	s15, [r3]
 8001070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001074:	4b53      	ldr	r3, [pc, #332]	; (80011c4 <loop+0x2ac>)
 8001076:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < num_meas-1; i++){
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2b08      	cmp	r3, #8
 8001084:	dde2      	ble.n	800104c <loop+0x134>
		}
		if (T>0){
 8001086:	4b45      	ldr	r3, [pc, #276]	; (800119c <loop+0x284>)
 8001088:	edd3 7a00 	vldr	s15, [r3]
 800108c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001094:	dd09      	ble.n	80010aa <loop+0x192>
			average_gradient /= (num_meas);
 8001096:	4b4b      	ldr	r3, [pc, #300]	; (80011c4 <loop+0x2ac>)
 8001098:	ed93 7a00 	vldr	s14, [r3]
 800109c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80010a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a4:	4b47      	ldr	r3, [pc, #284]	; (80011c4 <loop+0x2ac>)
 80010a6:	edc3 7a00 	vstr	s15, [r3]
		}

		// Apogee detection
		if (alt_filtered > threshold_altitude && launched && apogee_reached == false){
 80010aa:	4b43      	ldr	r3, [pc, #268]	; (80011b8 <loop+0x2a0>)
 80010ac:	ed93 7a00 	vldr	s14, [r3]
 80010b0:	4b45      	ldr	r3, [pc, #276]	; (80011c8 <loop+0x2b0>)
 80010b2:	edd3 7a00 	vldr	s15, [r3]
 80010b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010be:	dd2d      	ble.n	800111c <loop+0x204>
 80010c0:	4b3f      	ldr	r3, [pc, #252]	; (80011c0 <loop+0x2a8>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d029      	beq.n	800111c <loop+0x204>
 80010c8:	4b40      	ldr	r3, [pc, #256]	; (80011cc <loop+0x2b4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d125      	bne.n	800111c <loop+0x204>

			if (average_gradient < -2){ //what is the purpose of this -2?
 80010d0:	4b3c      	ldr	r3, [pc, #240]	; (80011c4 <loop+0x2ac>)
 80010d2:	edd3 7a00 	vldr	s15, [r3]
 80010d6:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80010da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e2:	d51b      	bpl.n	800111c <loop+0x204>
				apogee_reached = true;
 80010e4:	4b39      	ldr	r3, [pc, #228]	; (80011cc <loop+0x2b4>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(drogue1_GPIO_Port, drogue1_Pin, GPIO_PIN_SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	2110      	movs	r1, #16
 80010ee:	4838      	ldr	r0, [pc, #224]	; (80011d0 <loop+0x2b8>)
 80010f0:	f000 fd32 	bl	8001b58 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(drogue2_GPIO_Port, drogue2_Pin, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	2120      	movs	r1, #32
 80010f8:	4835      	ldr	r0, [pc, #212]	; (80011d0 <loop+0x2b8>)
 80010fa:	f000 fd2d 	bl	8001b58 <HAL_GPIO_WritePin>
				HAL_Delay(drogue_delay);
 80010fe:	4b35      	ldr	r3, [pc, #212]	; (80011d4 <loop+0x2bc>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f000 fa9a 	bl	800163c <HAL_Delay>
					time12 = HAL_GetTick();
				}
				 */


				HAL_GPIO_WritePin(drogue1_GPIO_Port, drogue1_Pin, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	2110      	movs	r1, #16
 800110c:	4830      	ldr	r0, [pc, #192]	; (80011d0 <loop+0x2b8>)
 800110e:	f000 fd23 	bl	8001b58 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(drogue2_GPIO_Port, drogue2_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2120      	movs	r1, #32
 8001116:	482e      	ldr	r0, [pc, #184]	; (80011d0 <loop+0x2b8>)
 8001118:	f000 fd1e 	bl	8001b58 <HAL_GPIO_WritePin>
			}
		}

		// Main Deployment detection
		if (apogee_reached && alt_filtered < main_deployment && main_deployed == false){
 800111c:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <loop+0x2b4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d071      	beq.n	8001208 <loop+0x2f0>
 8001124:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <loop+0x2a0>)
 8001126:	ed93 7a00 	vldr	s14, [r3]
 800112a:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <loop+0x2c0>)
 800112c:	edd3 7a00 	vldr	s15, [r3]
 8001130:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001138:	d566      	bpl.n	8001208 <loop+0x2f0>
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <loop+0x278>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d162      	bne.n	8001208 <loop+0x2f0>
			main_deployed = true;
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <loop+0x278>)
 8001144:	2201      	movs	r2, #1
 8001146:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(main1_GPIO_Port, main1_Pin, GPIO_PIN_SET);
 8001148:	2201      	movs	r2, #1
 800114a:	2140      	movs	r1, #64	; 0x40
 800114c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001150:	f000 fd02 	bl	8001b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(main2_GPIO_Port, main2_Pin, GPIO_PIN_SET);
 8001154:	2201      	movs	r2, #1
 8001156:	2180      	movs	r1, #128	; 0x80
 8001158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115c:	f000 fcfc 	bl	8001b58 <HAL_GPIO_WritePin>
			HAL_Delay(main_delay);
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <loop+0x2c4>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fa69 	bl	800163c <HAL_Delay>
			}if(R22){
				time22 = HAL_GetTick();
			}
			 */

			HAL_GPIO_WritePin(main1_GPIO_Port, main1_Pin, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	2140      	movs	r1, #64	; 0x40
 800116e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001172:	f000 fcf1 	bl	8001b58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(main2_GPIO_Port, main2_Pin, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	2180      	movs	r1, #128	; 0x80
 800117a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117e:	f000 fceb 	bl	8001b58 <HAL_GPIO_WritePin>
 8001182:	e041      	b.n	8001208 <loop+0x2f0>
 8001184:	f3af 8000 	nop.w
 8001188:	0abb44e5 	.word	0x0abb44e5
 800118c:	400a3f29 	.word	0x400a3f29
 8001190:	200000b4 	.word	0x200000b4
 8001194:	200019e4 	.word	0x200019e4
 8001198:	447a0000 	.word	0x447a0000
 800119c:	200019e8 	.word	0x200019e8
 80011a0:	20000000 	.word	0x20000000
 80011a4:	42c80000 	.word	0x42c80000
 80011a8:	200000a8 	.word	0x200000a8
 80011ac:	200019d8 	.word	0x200019d8
 80011b0:	20000014 	.word	0x20000014
 80011b4:	200019ec 	.word	0x200019ec
 80011b8:	20001bb4 	.word	0x20001bb4
 80011bc:	43160000 	.word	0x43160000
 80011c0:	200000b0 	.word	0x200000b0
 80011c4:	20001bb8 	.word	0x20001bb8
 80011c8:	20000004 	.word	0x20000004
 80011cc:	200000ac 	.word	0x200000ac
 80011d0:	48000800 	.word	0x48000800
 80011d4:	2000000c 	.word	0x2000000c
 80011d8:	20000008 	.word	0x20000008
 80011dc:	20000010 	.word	0x20000010


	}
	else{ //Longer buzz to indicate program completion

		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2110      	movs	r1, #16
 80011e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e8:	f000 fcb6 	bl	8001b58 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80011ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011f0:	f000 fa24 	bl	800163c <HAL_Delay>
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2110      	movs	r1, #16
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fc:	f000 fcac 	bl	8001b58 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001200:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001204:	f000 fa1a 	bl	800163c <HAL_Delay>

	}
	//Just for debuggging.
	// printf("alt_meas = %d,  average_gradient = %d, alt_filtered = %d",alt_meas,average_gradient,alt_filtered);

	size = sprintf((char *)Data,", alt_meas: %.2d\n", alt_meas);
 8001208:	4b28      	ldr	r3, [pc, #160]	; (80012ac <loop+0x394>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f99b 	bl	8000548 <__aeabi_f2d>
 8001212:	4603      	mov	r3, r0
 8001214:	460c      	mov	r4, r1
 8001216:	461a      	mov	r2, r3
 8001218:	4623      	mov	r3, r4
 800121a:	4925      	ldr	r1, [pc, #148]	; (80012b0 <loop+0x398>)
 800121c:	4825      	ldr	r0, [pc, #148]	; (80012b4 <loop+0x39c>)
 800121e:	f005 fc83 	bl	8006b28 <siprintf>
 8001222:	4603      	mov	r3, r0
 8001224:	b29a      	uxth	r2, r3
 8001226:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <loop+0x3a0>)
 8001228:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, Data, size, 1000);
 800122a:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <loop+0x3a0>)
 800122c:	881a      	ldrh	r2, [r3, #0]
 800122e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001232:	4920      	ldr	r1, [pc, #128]	; (80012b4 <loop+0x39c>)
 8001234:	4821      	ldr	r0, [pc, #132]	; (80012bc <loop+0x3a4>)
 8001236:	f002 fb67 	bl	8003908 <HAL_UART_Transmit>

	size = sprintf((char *)Data,", average_gradient: %.2d\n", average_gradient);
 800123a:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <loop+0x3a8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f982 	bl	8000548 <__aeabi_f2d>
 8001244:	4603      	mov	r3, r0
 8001246:	460c      	mov	r4, r1
 8001248:	461a      	mov	r2, r3
 800124a:	4623      	mov	r3, r4
 800124c:	491d      	ldr	r1, [pc, #116]	; (80012c4 <loop+0x3ac>)
 800124e:	4819      	ldr	r0, [pc, #100]	; (80012b4 <loop+0x39c>)
 8001250:	f005 fc6a 	bl	8006b28 <siprintf>
 8001254:	4603      	mov	r3, r0
 8001256:	b29a      	uxth	r2, r3
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <loop+0x3a0>)
 800125a:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, Data, size, 1000);
 800125c:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <loop+0x3a0>)
 800125e:	881a      	ldrh	r2, [r3, #0]
 8001260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001264:	4913      	ldr	r1, [pc, #76]	; (80012b4 <loop+0x39c>)
 8001266:	4815      	ldr	r0, [pc, #84]	; (80012bc <loop+0x3a4>)
 8001268:	f002 fb4e 	bl	8003908 <HAL_UART_Transmit>

	size = sprintf((char *)Data,", alt_filtered: %.2d\n", alt_filtered);
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <loop+0x3b0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f969 	bl	8000548 <__aeabi_f2d>
 8001276:	4603      	mov	r3, r0
 8001278:	460c      	mov	r4, r1
 800127a:	461a      	mov	r2, r3
 800127c:	4623      	mov	r3, r4
 800127e:	4913      	ldr	r1, [pc, #76]	; (80012cc <loop+0x3b4>)
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <loop+0x39c>)
 8001282:	f005 fc51 	bl	8006b28 <siprintf>
 8001286:	4603      	mov	r3, r0
 8001288:	b29a      	uxth	r2, r3
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <loop+0x3a0>)
 800128c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, Data, size, 1000);
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <loop+0x3a0>)
 8001290:	881a      	ldrh	r2, [r3, #0]
 8001292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001296:	4907      	ldr	r1, [pc, #28]	; (80012b4 <loop+0x39c>)
 8001298:	4808      	ldr	r0, [pc, #32]	; (80012bc <loop+0x3a4>)
 800129a:	f002 fb35 	bl	8003908 <HAL_UART_Transmit>

	HAL_Delay(5);
 800129e:	2005      	movs	r0, #5
 80012a0:	f000 f9cc 	bl	800163c <HAL_Delay>
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd90      	pop	{r4, r7, pc}
 80012ac:	200019d8 	.word	0x200019d8
 80012b0:	08007384 	.word	0x08007384
 80012b4:	20001a20 	.word	0x20001a20
 80012b8:	20001b24 	.word	0x20001b24
 80012bc:	20001b30 	.word	0x20001b30
 80012c0:	20001bb8 	.word	0x20001bb8
 80012c4:	08007398 	.word	0x08007398
 80012c8:	20001bb4 	.word	0x20001bb4
 80012cc:	080073b4 	.word	0x080073b4

080012d0 <StartEjection>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEjection */
void StartEjection(void *argument)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		setup();
 80012d8:	f7ff fd4a 	bl	8000d70 <setup>
		loop();
 80012dc:	f7ff fe1c 	bl	8000f18 <loop>
		osDelay(500);
 80012e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012e4:	f002 fff2 	bl	80042cc <osDelay>
		setup();
 80012e8:	e7f6      	b.n	80012d8 <StartEjection+0x8>

080012ea <StartTelemetry>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTelemetry */
void StartTelemetry(void *argument)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTelemetry */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 80012f2:	2001      	movs	r0, #1
 80012f4:	f002 ffea 	bl	80042cc <osDelay>
 80012f8:	e7fb      	b.n	80012f2 <StartTelemetry+0x8>
	...

080012fc <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d101      	bne.n	8001312 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800130e:	f000 f975 	bl	80015fc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40001000 	.word	0x40001000

08001320 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001324:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001326:	e7fe      	b.n	8001326 <Error_Handler+0x6>

08001328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <HAL_MspInit+0x4c>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	4a10      	ldr	r2, [pc, #64]	; (8001374 <HAL_MspInit+0x4c>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6193      	str	r3, [r2, #24]
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <HAL_MspInit+0x4c>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_MspInit+0x4c>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <HAL_MspInit+0x4c>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001350:	61d3      	str	r3, [r2, #28]
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_MspInit+0x4c>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	210f      	movs	r1, #15
 8001362:	f06f 0001 	mvn.w	r0, #1
 8001366:	f000 fa43 	bl	80017f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40021000 	.word	0x40021000

08001378 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a17      	ldr	r2, [pc, #92]	; (80013f4 <HAL_UART_MspInit+0x7c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d128      	bne.n	80013ec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <HAL_UART_MspInit+0x80>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a16      	ldr	r2, [pc, #88]	; (80013f8 <HAL_UART_MspInit+0x80>)
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	61d3      	str	r3, [r2, #28]
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <HAL_UART_MspInit+0x80>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_UART_MspInit+0x80>)
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <HAL_UART_MspInit+0x80>)
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013bc:	6153      	str	r3, [r2, #20]
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_UART_MspInit+0x80>)
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013ca:	230c      	movs	r3, #12
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013da:	2307      	movs	r3, #7
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e8:	f000 fa2c 	bl	8001844 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40004400 	.word	0x40004400
 80013f8:	40021000 	.word	0x40021000

080013fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08c      	sub	sp, #48	; 0x30
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800140c:	2200      	movs	r2, #0
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	2036      	movs	r0, #54	; 0x36
 8001412:	f000 f9ed 	bl	80017f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001416:	2036      	movs	r0, #54	; 0x36
 8001418:	f000 fa06 	bl	8001828 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800141c:	4b1f      	ldr	r3, [pc, #124]	; (800149c <HAL_InitTick+0xa0>)
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	4a1e      	ldr	r2, [pc, #120]	; (800149c <HAL_InitTick+0xa0>)
 8001422:	f043 0310 	orr.w	r3, r3, #16
 8001426:	61d3      	str	r3, [r2, #28]
 8001428:	4b1c      	ldr	r3, [pc, #112]	; (800149c <HAL_InitTick+0xa0>)
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	f003 0310 	and.w	r3, r3, #16
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001434:	f107 0210 	add.w	r2, r7, #16
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4611      	mov	r1, r2
 800143e:	4618      	mov	r0, r3
 8001440:	f001 fcee 	bl	8002e20 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001444:	f001 fca8 	bl	8002d98 <HAL_RCC_GetPCLK1Freq>
 8001448:	4603      	mov	r3, r0
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800144e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001450:	4a13      	ldr	r2, [pc, #76]	; (80014a0 <HAL_InitTick+0xa4>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	0c9b      	lsrs	r3, r3, #18
 8001458:	3b01      	subs	r3, #1
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <HAL_InitTick+0xa8>)
 800145e:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <HAL_InitTick+0xac>)
 8001460:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <HAL_InitTick+0xa8>)
 8001464:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001468:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800146a:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <HAL_InitTick+0xa8>)
 800146c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <HAL_InitTick+0xa8>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_InitTick+0xa8>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800147c:	4809      	ldr	r0, [pc, #36]	; (80014a4 <HAL_InitTick+0xa8>)
 800147e:	f001 ff1f 	bl	80032c0 <HAL_TIM_Base_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d104      	bne.n	8001492 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001488:	4806      	ldr	r0, [pc, #24]	; (80014a4 <HAL_InitTick+0xa8>)
 800148a:	f001 ff7b 	bl	8003384 <HAL_TIM_Base_Start_IT>
 800148e:	4603      	mov	r3, r0
 8001490:	e000      	b.n	8001494 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
}
 8001494:	4618      	mov	r0, r3
 8001496:	3730      	adds	r7, #48	; 0x30
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40021000 	.word	0x40021000
 80014a0:	431bde83 	.word	0x431bde83
 80014a4:	20001bbc 	.word	0x20001bbc
 80014a8:	40001000 	.word	0x40001000

080014ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <NMI_Handler+0x4>

080014b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <HardFault_Handler+0x4>

080014b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <MemManage_Handler+0x4>

080014be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <BusFault_Handler+0x4>

080014c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <UsageFault_Handler+0x4>

080014ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <TIM6_DAC_IRQHandler+0x10>)
 80014de:	f001 ffc1 	bl	8003464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20001bbc 	.word	0x20001bbc

080014ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f4:	4a14      	ldr	r2, [pc, #80]	; (8001548 <_sbrk+0x5c>)
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <_sbrk+0x60>)
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <_sbrk+0x64>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <_sbrk+0x64>)
 800150a:	4a12      	ldr	r2, [pc, #72]	; (8001554 <_sbrk+0x68>)
 800150c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <_sbrk+0x64>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	429a      	cmp	r2, r3
 800151a:	d207      	bcs.n	800152c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800151c:	f005 fac6 	bl	8006aac <__errno>
 8001520:	4602      	mov	r2, r0
 8001522:	230c      	movs	r3, #12
 8001524:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
 800152a:	e009      	b.n	8001540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001532:	4b07      	ldr	r3, [pc, #28]	; (8001550 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <_sbrk+0x64>)
 800153c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153e:	68fb      	ldr	r3, [r7, #12]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20010000 	.word	0x20010000
 800154c:	00000400 	.word	0x00000400
 8001550:	200000b8 	.word	0x200000b8
 8001554:	20001c50 	.word	0x20001c50

08001558 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <SystemInit+0x20>)
 800155e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001562:	4a05      	ldr	r2, [pc, #20]	; (8001578 <SystemInit+0x20>)
 8001564:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800157c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001580:	480d      	ldr	r0, [pc, #52]	; (80015b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001582:	490e      	ldr	r1, [pc, #56]	; (80015bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001584:	4a0e      	ldr	r2, [pc, #56]	; (80015c0 <LoopForever+0xe>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001588:	e002      	b.n	8001590 <LoopCopyDataInit>

0800158a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800158c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158e:	3304      	adds	r3, #4

08001590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001594:	d3f9      	bcc.n	800158a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001596:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001598:	4c0b      	ldr	r4, [pc, #44]	; (80015c8 <LoopForever+0x16>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800159c:	e001      	b.n	80015a2 <LoopFillZerobss>

0800159e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a0:	3204      	adds	r2, #4

080015a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a4:	d3fb      	bcc.n	800159e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015a6:	f7ff ffd7 	bl	8001558 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015aa:	f005 fa85 	bl	8006ab8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ae:	f7ff fa85 	bl	8000abc <main>

080015b2 <LoopForever>:

LoopForever:
    b LoopForever
 80015b2:	e7fe      	b.n	80015b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015bc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80015c0:	080074a0 	.word	0x080074a0
  ldr r2, =_sbss
 80015c4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80015c8:	20001c50 	.word	0x20001c50

080015cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015cc:	e7fe      	b.n	80015cc <ADC1_2_IRQHandler>
	...

080015d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_Init+0x28>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_Init+0x28>)
 80015da:	f043 0310 	orr.w	r3, r3, #16
 80015de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e0:	2003      	movs	r0, #3
 80015e2:	f000 f8fa 	bl	80017da <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f7ff ff08 	bl	80013fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ec:	f7ff fe9c 	bl	8001328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40022000 	.word	0x40022000

080015fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_IncTick+0x20>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_IncTick+0x24>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <HAL_IncTick+0x24>)
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000020 	.word	0x20000020
 8001620:	20001c08 	.word	0x20001c08

08001624 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return uwTick;  
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <HAL_GetTick+0x14>)
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20001c08 	.word	0x20001c08

0800163c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff ffee 	bl	8001624 <HAL_GetTick>
 8001648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	d005      	beq.n	8001662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_Delay+0x40>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001662:	bf00      	nop
 8001664:	f7ff ffde 	bl	8001624 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	429a      	cmp	r2, r3
 8001672:	d8f7      	bhi.n	8001664 <HAL_Delay+0x28>
  {
  }
}
 8001674:	bf00      	nop
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000020 	.word	0x20000020

08001680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800169c:	4013      	ands	r3, r2
 800169e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b2:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	60d3      	str	r3, [r2, #12]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	f003 0307 	and.w	r3, r3, #7
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	db0b      	blt.n	800170e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	f003 021f 	and.w	r2, r3, #31
 80016fc:	4907      	ldr	r1, [pc, #28]	; (800171c <__NVIC_EnableIRQ+0x38>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	2001      	movs	r0, #1
 8001706:	fa00 f202 	lsl.w	r2, r0, r2
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000e100 	.word	0xe000e100

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db0a      	blt.n	800174a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	490c      	ldr	r1, [pc, #48]	; (800176c <__NVIC_SetPriority+0x4c>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	0112      	lsls	r2, r2, #4
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	440b      	add	r3, r1
 8001744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001748:	e00a      	b.n	8001760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4908      	ldr	r1, [pc, #32]	; (8001770 <__NVIC_SetPriority+0x50>)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	3b04      	subs	r3, #4
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	440b      	add	r3, r1
 800175e:	761a      	strb	r2, [r3, #24]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f1c3 0307 	rsb	r3, r3, #7
 800178e:	2b04      	cmp	r3, #4
 8001790:	bf28      	it	cs
 8001792:	2304      	movcs	r3, #4
 8001794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3304      	adds	r3, #4
 800179a:	2b06      	cmp	r3, #6
 800179c:	d902      	bls.n	80017a4 <NVIC_EncodePriority+0x30>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3b03      	subs	r3, #3
 80017a2:	e000      	b.n	80017a6 <NVIC_EncodePriority+0x32>
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43d9      	mvns	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	4313      	orrs	r3, r2
         );
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3724      	adds	r7, #36	; 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff ff4c 	bl	8001680 <__NVIC_SetPriorityGrouping>
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001802:	f7ff ff61 	bl	80016c8 <__NVIC_GetPriorityGrouping>
 8001806:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	68b9      	ldr	r1, [r7, #8]
 800180c:	6978      	ldr	r0, [r7, #20]
 800180e:	f7ff ffb1 	bl	8001774 <NVIC_EncodePriority>
 8001812:	4602      	mov	r2, r0
 8001814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001818:	4611      	mov	r1, r2
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ff80 	bl	8001720 <__NVIC_SetPriority>
}
 8001820:	bf00      	nop
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff ff54 	bl	80016e4 <__NVIC_EnableIRQ>
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001852:	e160      	b.n	8001b16 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	2101      	movs	r1, #1
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	fa01 f303 	lsl.w	r3, r1, r3
 8001860:	4013      	ands	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 8152 	beq.w	8001b10 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d00b      	beq.n	800188c <HAL_GPIO_Init+0x48>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d007      	beq.n	800188c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001880:	2b11      	cmp	r3, #17
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b12      	cmp	r3, #18
 800188a:	d130      	bne.n	80018ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	2203      	movs	r2, #3
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018c2:	2201      	movs	r2, #1
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	091b      	lsrs	r3, r3, #4
 80018d8:	f003 0201 	and.w	r2, r3, #1
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	2203      	movs	r2, #3
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0xea>
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b12      	cmp	r3, #18
 800192c:	d123      	bne.n	8001976 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	08da      	lsrs	r2, r3, #3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3208      	adds	r2, #8
 8001936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800193a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	220f      	movs	r2, #15
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4013      	ands	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	691a      	ldr	r2, [r3, #16]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	08da      	lsrs	r2, r3, #3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3208      	adds	r2, #8
 8001970:	6939      	ldr	r1, [r7, #16]
 8001972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	2203      	movs	r2, #3
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0203 	and.w	r2, r3, #3
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 80ac 	beq.w	8001b10 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b8:	4b5e      	ldr	r3, [pc, #376]	; (8001b34 <HAL_GPIO_Init+0x2f0>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	4a5d      	ldr	r2, [pc, #372]	; (8001b34 <HAL_GPIO_Init+0x2f0>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6193      	str	r3, [r2, #24]
 80019c4:	4b5b      	ldr	r3, [pc, #364]	; (8001b34 <HAL_GPIO_Init+0x2f0>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019d0:	4a59      	ldr	r2, [pc, #356]	; (8001b38 <HAL_GPIO_Init+0x2f4>)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	089b      	lsrs	r3, r3, #2
 80019d6:	3302      	adds	r3, #2
 80019d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	220f      	movs	r2, #15
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019fa:	d025      	beq.n	8001a48 <HAL_GPIO_Init+0x204>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a4f      	ldr	r2, [pc, #316]	; (8001b3c <HAL_GPIO_Init+0x2f8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d01f      	beq.n	8001a44 <HAL_GPIO_Init+0x200>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a4e      	ldr	r2, [pc, #312]	; (8001b40 <HAL_GPIO_Init+0x2fc>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d019      	beq.n	8001a40 <HAL_GPIO_Init+0x1fc>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a4d      	ldr	r2, [pc, #308]	; (8001b44 <HAL_GPIO_Init+0x300>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d013      	beq.n	8001a3c <HAL_GPIO_Init+0x1f8>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a4c      	ldr	r2, [pc, #304]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d00d      	beq.n	8001a38 <HAL_GPIO_Init+0x1f4>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a4b      	ldr	r2, [pc, #300]	; (8001b4c <HAL_GPIO_Init+0x308>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d007      	beq.n	8001a34 <HAL_GPIO_Init+0x1f0>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a4a      	ldr	r2, [pc, #296]	; (8001b50 <HAL_GPIO_Init+0x30c>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d101      	bne.n	8001a30 <HAL_GPIO_Init+0x1ec>
 8001a2c:	2306      	movs	r3, #6
 8001a2e:	e00c      	b.n	8001a4a <HAL_GPIO_Init+0x206>
 8001a30:	2307      	movs	r3, #7
 8001a32:	e00a      	b.n	8001a4a <HAL_GPIO_Init+0x206>
 8001a34:	2305      	movs	r3, #5
 8001a36:	e008      	b.n	8001a4a <HAL_GPIO_Init+0x206>
 8001a38:	2304      	movs	r3, #4
 8001a3a:	e006      	b.n	8001a4a <HAL_GPIO_Init+0x206>
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e004      	b.n	8001a4a <HAL_GPIO_Init+0x206>
 8001a40:	2302      	movs	r3, #2
 8001a42:	e002      	b.n	8001a4a <HAL_GPIO_Init+0x206>
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <HAL_GPIO_Init+0x206>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	f002 0203 	and.w	r2, r2, #3
 8001a50:	0092      	lsls	r2, r2, #2
 8001a52:	4093      	lsls	r3, r2
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a5a:	4937      	ldr	r1, [pc, #220]	; (8001b38 <HAL_GPIO_Init+0x2f4>)
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	089b      	lsrs	r3, r3, #2
 8001a60:	3302      	adds	r3, #2
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a68:	4b3a      	ldr	r3, [pc, #232]	; (8001b54 <HAL_GPIO_Init+0x310>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a8c:	4a31      	ldr	r2, [pc, #196]	; (8001b54 <HAL_GPIO_Init+0x310>)
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a92:	4b30      	ldr	r3, [pc, #192]	; (8001b54 <HAL_GPIO_Init+0x310>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ab6:	4a27      	ldr	r2, [pc, #156]	; (8001b54 <HAL_GPIO_Init+0x310>)
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001abc:	4b25      	ldr	r3, [pc, #148]	; (8001b54 <HAL_GPIO_Init+0x310>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ae0:	4a1c      	ldr	r2, [pc, #112]	; (8001b54 <HAL_GPIO_Init+0x310>)
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <HAL_GPIO_Init+0x310>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	43db      	mvns	r3, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b0a:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <HAL_GPIO_Init+0x310>)
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	3301      	adds	r3, #1
 8001b14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f47f ae97 	bne.w	8001854 <HAL_GPIO_Init+0x10>
  }
}
 8001b26:	bf00      	nop
 8001b28:	371c      	adds	r7, #28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40010000 	.word	0x40010000
 8001b3c:	48000400 	.word	0x48000400
 8001b40:	48000800 	.word	0x48000800
 8001b44:	48000c00 	.word	0x48000c00
 8001b48:	48001000 	.word	0x48001000
 8001b4c:	48001400 	.word	0x48001400
 8001b50:	48001800 	.word	0x48001800
 8001b54:	40010400 	.word	0x40010400

08001b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	807b      	strh	r3, [r7, #2]
 8001b64:	4613      	mov	r3, r2
 8001b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b68:	787b      	ldrb	r3, [r7, #1]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b6e:	887a      	ldrh	r2, [r7, #2]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b74:	e002      	b.n	8001b7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b76:	887a      	ldrh	r2, [r7, #2]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	f000 bf01 	b.w	80029a4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 8160 	beq.w	8001e72 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bb2:	4bae      	ldr	r3, [pc, #696]	; (8001e6c <HAL_RCC_OscConfig+0x2e4>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d00c      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bbe:	4bab      	ldr	r3, [pc, #684]	; (8001e6c <HAL_RCC_OscConfig+0x2e4>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d159      	bne.n	8001c7e <HAL_RCC_OscConfig+0xf6>
 8001bca:	4ba8      	ldr	r3, [pc, #672]	; (8001e6c <HAL_RCC_OscConfig+0x2e4>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd6:	d152      	bne.n	8001c7e <HAL_RCC_OscConfig+0xf6>
 8001bd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bdc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001be4:	fa93 f3a3 	rbit	r3, r3
 8001be8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf0:	fab3 f383 	clz	r3, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d102      	bne.n	8001c0a <HAL_RCC_OscConfig+0x82>
 8001c04:	4b99      	ldr	r3, [pc, #612]	; (8001e6c <HAL_RCC_OscConfig+0x2e4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	e015      	b.n	8001c36 <HAL_RCC_OscConfig+0xae>
 8001c0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c0e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001c1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c22:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001c26:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c2a:	fa93 f3a3 	rbit	r3, r3
 8001c2e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001c32:	4b8e      	ldr	r3, [pc, #568]	; (8001e6c <HAL_RCC_OscConfig+0x2e4>)
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c3a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001c3e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001c42:	fa92 f2a2 	rbit	r2, r2
 8001c46:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001c4a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c4e:	fab2 f282 	clz	r2, r2
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	f042 0220 	orr.w	r2, r2, #32
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	f002 021f 	and.w	r2, r2, #31
 8001c5e:	2101      	movs	r1, #1
 8001c60:	fa01 f202 	lsl.w	r2, r1, r2
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 8102 	beq.w	8001e70 <HAL_RCC_OscConfig+0x2e8>
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f040 80fc 	bne.w	8001e70 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	f000 be93 	b.w	80029a4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c88:	d106      	bne.n	8001c98 <HAL_RCC_OscConfig+0x110>
 8001c8a:	4b78      	ldr	r3, [pc, #480]	; (8001e6c <HAL_RCC_OscConfig+0x2e4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a77      	ldr	r2, [pc, #476]	; (8001e6c <HAL_RCC_OscConfig+0x2e4>)
 8001c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e030      	b.n	8001cfa <HAL_RCC_OscConfig+0x172>
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x134>
 8001ca2:	4b72      	ldr	r3, [pc, #456]	; (8001e6c <HAL_RCC_OscConfig+0x2e4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a71      	ldr	r2, [pc, #452]	; (8001e6c <HAL_RCC_OscConfig+0x2e4>)
 8001ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	4b6f      	ldr	r3, [pc, #444]	; (8001e6c <HAL_RCC_OscConfig+0x2e4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a6e      	ldr	r2, [pc, #440]	; (8001e6c <HAL_RCC_OscConfig+0x2e4>)
 8001cb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e01e      	b.n	8001cfa <HAL_RCC_OscConfig+0x172>
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cc6:	d10c      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x15a>
 8001cc8:	4b68      	ldr	r3, [pc, #416]	; (8001e6c <HAL_RCC_OscConfig+0x2e4>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a67      	ldr	r2, [pc, #412]	; (8001e6c <HAL_RCC_OscConfig+0x2e4>)
 8001cce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	4b65      	ldr	r3, [pc, #404]	; (8001e6c <HAL_RCC_OscConfig+0x2e4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a64      	ldr	r2, [pc, #400]	; (8001e6c <HAL_RCC_OscConfig+0x2e4>)
 8001cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	e00b      	b.n	8001cfa <HAL_RCC_OscConfig+0x172>
 8001ce2:	4b62      	ldr	r3, [pc, #392]	; (8001e6c <HAL_RCC_OscConfig+0x2e4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a61      	ldr	r2, [pc, #388]	; (8001e6c <HAL_RCC_OscConfig+0x2e4>)
 8001ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	4b5f      	ldr	r3, [pc, #380]	; (8001e6c <HAL_RCC_OscConfig+0x2e4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a5e      	ldr	r2, [pc, #376]	; (8001e6c <HAL_RCC_OscConfig+0x2e4>)
 8001cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d059      	beq.n	8001db8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7ff fc8e 	bl	8001624 <HAL_GetTick>
 8001d08:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0c:	e00a      	b.n	8001d24 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d0e:	f7ff fc89 	bl	8001624 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d902      	bls.n	8001d24 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	f000 be40 	b.w	80029a4 <HAL_RCC_OscConfig+0xe1c>
 8001d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d28:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001d30:	fa93 f3a3 	rbit	r3, r3
 8001d34:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001d38:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3c:	fab3 f383 	clz	r3, r3
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	095b      	lsrs	r3, r3, #5
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d102      	bne.n	8001d56 <HAL_RCC_OscConfig+0x1ce>
 8001d50:	4b46      	ldr	r3, [pc, #280]	; (8001e6c <HAL_RCC_OscConfig+0x2e4>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	e015      	b.n	8001d82 <HAL_RCC_OscConfig+0x1fa>
 8001d56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d5a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001d6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d6e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d72:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d7e:	4b3b      	ldr	r3, [pc, #236]	; (8001e6c <HAL_RCC_OscConfig+0x2e4>)
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d86:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001d8a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001d8e:	fa92 f2a2 	rbit	r2, r2
 8001d92:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001d96:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d9a:	fab2 f282 	clz	r2, r2
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	f042 0220 	orr.w	r2, r2, #32
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	f002 021f 	and.w	r2, r2, #31
 8001daa:	2101      	movs	r1, #1
 8001dac:	fa01 f202 	lsl.w	r2, r1, r2
 8001db0:	4013      	ands	r3, r2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0ab      	beq.n	8001d0e <HAL_RCC_OscConfig+0x186>
 8001db6:	e05c      	b.n	8001e72 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff fc34 	bl	8001624 <HAL_GetTick>
 8001dbc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc0:	e00a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc2:	f7ff fc2f 	bl	8001624 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	; 0x64
 8001dd0:	d902      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	f000 bde6 	b.w	80029a4 <HAL_RCC_OscConfig+0xe1c>
 8001dd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ddc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001de4:	fa93 f3a3 	rbit	r3, r3
 8001de8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001dec:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df0:	fab3 f383 	clz	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	095b      	lsrs	r3, r3, #5
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d102      	bne.n	8001e0a <HAL_RCC_OscConfig+0x282>
 8001e04:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <HAL_RCC_OscConfig+0x2e4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	e015      	b.n	8001e36 <HAL_RCC_OscConfig+0x2ae>
 8001e0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e0e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001e1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e22:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e26:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <HAL_RCC_OscConfig+0x2e4>)
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e3a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001e3e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001e42:	fa92 f2a2 	rbit	r2, r2
 8001e46:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001e4a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e4e:	fab2 f282 	clz	r2, r2
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	f042 0220 	orr.w	r2, r2, #32
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	f002 021f 	and.w	r2, r2, #31
 8001e5e:	2101      	movs	r1, #1
 8001e60:	fa01 f202 	lsl.w	r2, r1, r2
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1ab      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x23a>
 8001e6a:	e002      	b.n	8001e72 <HAL_RCC_OscConfig+0x2ea>
 8001e6c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 8170 	beq.w	8002162 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e82:	4bd0      	ldr	r3, [pc, #832]	; (80021c4 <HAL_RCC_OscConfig+0x63c>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00c      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e8e:	4bcd      	ldr	r3, [pc, #820]	; (80021c4 <HAL_RCC_OscConfig+0x63c>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d16d      	bne.n	8001f76 <HAL_RCC_OscConfig+0x3ee>
 8001e9a:	4bca      	ldr	r3, [pc, #808]	; (80021c4 <HAL_RCC_OscConfig+0x63c>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ea6:	d166      	bne.n	8001f76 <HAL_RCC_OscConfig+0x3ee>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eae:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001eb2:	fa93 f3a3 	rbit	r3, r3
 8001eb6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001eba:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebe:	fab3 f383 	clz	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	095b      	lsrs	r3, r3, #5
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d102      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x350>
 8001ed2:	4bbc      	ldr	r3, [pc, #752]	; (80021c4 <HAL_RCC_OscConfig+0x63c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	e013      	b.n	8001f00 <HAL_RCC_OscConfig+0x378>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001eea:	2302      	movs	r3, #2
 8001eec:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001ef0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001ef4:	fa93 f3a3 	rbit	r3, r3
 8001ef8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001efc:	4bb1      	ldr	r3, [pc, #708]	; (80021c4 <HAL_RCC_OscConfig+0x63c>)
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	2202      	movs	r2, #2
 8001f02:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001f06:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001f0a:	fa92 f2a2 	rbit	r2, r2
 8001f0e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001f12:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f16:	fab2 f282 	clz	r2, r2
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	f042 0220 	orr.w	r2, r2, #32
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	f002 021f 	and.w	r2, r2, #31
 8001f26:	2101      	movs	r1, #1
 8001f28:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <HAL_RCC_OscConfig+0x3ba>
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d002      	beq.n	8001f42 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	f000 bd31 	b.w	80029a4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f42:	4ba0      	ldr	r3, [pc, #640]	; (80021c4 <HAL_RCC_OscConfig+0x63c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	21f8      	movs	r1, #248	; 0xf8
 8001f52:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001f5a:	fa91 f1a1 	rbit	r1, r1
 8001f5e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001f62:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001f66:	fab1 f181 	clz	r1, r1
 8001f6a:	b2c9      	uxtb	r1, r1
 8001f6c:	408b      	lsls	r3, r1
 8001f6e:	4995      	ldr	r1, [pc, #596]	; (80021c4 <HAL_RCC_OscConfig+0x63c>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f74:	e0f5      	b.n	8002162 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 8085 	beq.w	800208c <HAL_RCC_OscConfig+0x504>
 8001f82:	2301      	movs	r3, #1
 8001f84:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001f8c:	fa93 f3a3 	rbit	r3, r3
 8001f90:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001f94:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fa2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	461a      	mov	r2, r3
 8001faa:	2301      	movs	r3, #1
 8001fac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fae:	f7ff fb39 	bl	8001624 <HAL_GetTick>
 8001fb2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb6:	e00a      	b.n	8001fce <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fb8:	f7ff fb34 	bl	8001624 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d902      	bls.n	8001fce <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	f000 bceb 	b.w	80029a4 <HAL_RCC_OscConfig+0xe1c>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001fe0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe4:	fab3 f383 	clz	r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d102      	bne.n	8001ffe <HAL_RCC_OscConfig+0x476>
 8001ff8:	4b72      	ldr	r3, [pc, #456]	; (80021c4 <HAL_RCC_OscConfig+0x63c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	e013      	b.n	8002026 <HAL_RCC_OscConfig+0x49e>
 8001ffe:	2302      	movs	r3, #2
 8002000:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002010:	2302      	movs	r3, #2
 8002012:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002016:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002022:	4b68      	ldr	r3, [pc, #416]	; (80021c4 <HAL_RCC_OscConfig+0x63c>)
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	2202      	movs	r2, #2
 8002028:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800202c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002030:	fa92 f2a2 	rbit	r2, r2
 8002034:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002038:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800203c:	fab2 f282 	clz	r2, r2
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	f042 0220 	orr.w	r2, r2, #32
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	f002 021f 	and.w	r2, r2, #31
 800204c:	2101      	movs	r1, #1
 800204e:	fa01 f202 	lsl.w	r2, r1, r2
 8002052:	4013      	ands	r3, r2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0af      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002058:	4b5a      	ldr	r3, [pc, #360]	; (80021c4 <HAL_RCC_OscConfig+0x63c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	21f8      	movs	r1, #248	; 0xf8
 8002068:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002070:	fa91 f1a1 	rbit	r1, r1
 8002074:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002078:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800207c:	fab1 f181 	clz	r1, r1
 8002080:	b2c9      	uxtb	r1, r1
 8002082:	408b      	lsls	r3, r1
 8002084:	494f      	ldr	r1, [pc, #316]	; (80021c4 <HAL_RCC_OscConfig+0x63c>)
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]
 800208a:	e06a      	b.n	8002162 <HAL_RCC_OscConfig+0x5da>
 800208c:	2301      	movs	r3, #1
 800208e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800209e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	461a      	mov	r2, r3
 80020b4:	2300      	movs	r3, #0
 80020b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7ff fab4 	bl	8001624 <HAL_GetTick>
 80020bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c0:	e00a      	b.n	80020d8 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c2:	f7ff faaf 	bl	8001624 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d902      	bls.n	80020d8 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	f000 bc66 	b.w	80029a4 <HAL_RCC_OscConfig+0xe1c>
 80020d8:	2302      	movs	r3, #2
 80020da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80020ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	095b      	lsrs	r3, r3, #5
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d102      	bne.n	8002108 <HAL_RCC_OscConfig+0x580>
 8002102:	4b30      	ldr	r3, [pc, #192]	; (80021c4 <HAL_RCC_OscConfig+0x63c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	e013      	b.n	8002130 <HAL_RCC_OscConfig+0x5a8>
 8002108:	2302      	movs	r3, #2
 800210a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002112:	fa93 f3a3 	rbit	r3, r3
 8002116:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800211a:	2302      	movs	r3, #2
 800211c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002120:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002124:	fa93 f3a3 	rbit	r3, r3
 8002128:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800212c:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <HAL_RCC_OscConfig+0x63c>)
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	2202      	movs	r2, #2
 8002132:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002136:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800213a:	fa92 f2a2 	rbit	r2, r2
 800213e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002142:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002146:	fab2 f282 	clz	r2, r2
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	f042 0220 	orr.w	r2, r2, #32
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	f002 021f 	and.w	r2, r2, #31
 8002156:	2101      	movs	r1, #1
 8002158:	fa01 f202 	lsl.w	r2, r1, r2
 800215c:	4013      	ands	r3, r2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1af      	bne.n	80020c2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80da 	beq.w	8002326 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d069      	beq.n	8002250 <HAL_RCC_OscConfig+0x6c8>
 800217c:	2301      	movs	r3, #1
 800217e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800218e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002192:	fab3 f383 	clz	r3, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	461a      	mov	r2, r3
 800219a:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_RCC_OscConfig+0x640>)
 800219c:	4413      	add	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	461a      	mov	r2, r3
 80021a2:	2301      	movs	r3, #1
 80021a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a6:	f7ff fa3d 	bl	8001624 <HAL_GetTick>
 80021aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ae:	e00d      	b.n	80021cc <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b0:	f7ff fa38 	bl	8001624 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d905      	bls.n	80021cc <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e3ef      	b.n	80029a4 <HAL_RCC_OscConfig+0xe1c>
 80021c4:	40021000 	.word	0x40021000
 80021c8:	10908120 	.word	0x10908120
 80021cc:	2302      	movs	r3, #2
 80021ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80021d6:	fa93 f2a3 	rbit	r2, r3
 80021da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80021e4:	2202      	movs	r2, #2
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	fa93 f2a3 	rbit	r2, r3
 80021f2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80021fc:	2202      	movs	r2, #2
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	fa93 f2a3 	rbit	r2, r3
 800220a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800220e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002210:	4ba4      	ldr	r3, [pc, #656]	; (80024a4 <HAL_RCC_OscConfig+0x91c>)
 8002212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002214:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002218:	2102      	movs	r1, #2
 800221a:	6019      	str	r1, [r3, #0]
 800221c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	fa93 f1a3 	rbit	r1, r3
 8002226:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800222a:	6019      	str	r1, [r3, #0]
  return result;
 800222c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800223c:	b2db      	uxtb	r3, r3
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	2101      	movs	r1, #1
 8002244:	fa01 f303 	lsl.w	r3, r1, r3
 8002248:	4013      	ands	r3, r2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0b0      	beq.n	80021b0 <HAL_RCC_OscConfig+0x628>
 800224e:	e06a      	b.n	8002326 <HAL_RCC_OscConfig+0x79e>
 8002250:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002254:	2201      	movs	r2, #1
 8002256:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002258:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	fa93 f2a3 	rbit	r2, r3
 8002262:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002266:	601a      	str	r2, [r3, #0]
  return result;
 8002268:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800226c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800226e:	fab3 f383 	clz	r3, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	461a      	mov	r2, r3
 8002276:	4b8c      	ldr	r3, [pc, #560]	; (80024a8 <HAL_RCC_OscConfig+0x920>)
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	461a      	mov	r2, r3
 800227e:	2300      	movs	r3, #0
 8002280:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002282:	f7ff f9cf 	bl	8001624 <HAL_GetTick>
 8002286:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800228a:	e009      	b.n	80022a0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800228c:	f7ff f9ca 	bl	8001624 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e381      	b.n	80029a4 <HAL_RCC_OscConfig+0xe1c>
 80022a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022a4:	2202      	movs	r2, #2
 80022a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	fa93 f2a3 	rbit	r2, r3
 80022b2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022bc:	2202      	movs	r2, #2
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	fa93 f2a3 	rbit	r2, r3
 80022ca:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022d4:	2202      	movs	r2, #2
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	fa93 f2a3 	rbit	r2, r3
 80022e2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80022e6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e8:	4b6e      	ldr	r3, [pc, #440]	; (80024a4 <HAL_RCC_OscConfig+0x91c>)
 80022ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022f0:	2102      	movs	r1, #2
 80022f2:	6019      	str	r1, [r3, #0]
 80022f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	fa93 f1a3 	rbit	r1, r3
 80022fe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002302:	6019      	str	r1, [r3, #0]
  return result;
 8002304:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002314:	b2db      	uxtb	r3, r3
 8002316:	f003 031f 	and.w	r3, r3, #31
 800231a:	2101      	movs	r1, #1
 800231c:	fa01 f303 	lsl.w	r3, r1, r3
 8002320:	4013      	ands	r3, r2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1b2      	bne.n	800228c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002326:	1d3b      	adds	r3, r7, #4
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 8157 	beq.w	80025e4 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002336:	2300      	movs	r3, #0
 8002338:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800233c:	4b59      	ldr	r3, [pc, #356]	; (80024a4 <HAL_RCC_OscConfig+0x91c>)
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d112      	bne.n	800236e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002348:	4b56      	ldr	r3, [pc, #344]	; (80024a4 <HAL_RCC_OscConfig+0x91c>)
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	4a55      	ldr	r2, [pc, #340]	; (80024a4 <HAL_RCC_OscConfig+0x91c>)
 800234e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002352:	61d3      	str	r3, [r2, #28]
 8002354:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <HAL_RCC_OscConfig+0x91c>)
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800235c:	f107 030c 	add.w	r3, r7, #12
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	f107 030c 	add.w	r3, r7, #12
 8002366:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002368:	2301      	movs	r3, #1
 800236a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236e:	4b4f      	ldr	r3, [pc, #316]	; (80024ac <HAL_RCC_OscConfig+0x924>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002376:	2b00      	cmp	r3, #0
 8002378:	d11a      	bne.n	80023b0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237a:	4b4c      	ldr	r3, [pc, #304]	; (80024ac <HAL_RCC_OscConfig+0x924>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a4b      	ldr	r2, [pc, #300]	; (80024ac <HAL_RCC_OscConfig+0x924>)
 8002380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002384:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002386:	f7ff f94d 	bl	8001624 <HAL_GetTick>
 800238a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238e:	e009      	b.n	80023a4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002390:	f7ff f948 	bl	8001624 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b64      	cmp	r3, #100	; 0x64
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e2ff      	b.n	80029a4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a4:	4b41      	ldr	r3, [pc, #260]	; (80024ac <HAL_RCC_OscConfig+0x924>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0ef      	beq.n	8002390 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d106      	bne.n	80023c8 <HAL_RCC_OscConfig+0x840>
 80023ba:	4b3a      	ldr	r3, [pc, #232]	; (80024a4 <HAL_RCC_OscConfig+0x91c>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4a39      	ldr	r2, [pc, #228]	; (80024a4 <HAL_RCC_OscConfig+0x91c>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6213      	str	r3, [r2, #32]
 80023c6:	e02f      	b.n	8002428 <HAL_RCC_OscConfig+0x8a0>
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0x864>
 80023d2:	4b34      	ldr	r3, [pc, #208]	; (80024a4 <HAL_RCC_OscConfig+0x91c>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	4a33      	ldr	r2, [pc, #204]	; (80024a4 <HAL_RCC_OscConfig+0x91c>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6213      	str	r3, [r2, #32]
 80023de:	4b31      	ldr	r3, [pc, #196]	; (80024a4 <HAL_RCC_OscConfig+0x91c>)
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	4a30      	ldr	r2, [pc, #192]	; (80024a4 <HAL_RCC_OscConfig+0x91c>)
 80023e4:	f023 0304 	bic.w	r3, r3, #4
 80023e8:	6213      	str	r3, [r2, #32]
 80023ea:	e01d      	b.n	8002428 <HAL_RCC_OscConfig+0x8a0>
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b05      	cmp	r3, #5
 80023f4:	d10c      	bne.n	8002410 <HAL_RCC_OscConfig+0x888>
 80023f6:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <HAL_RCC_OscConfig+0x91c>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	4a2a      	ldr	r2, [pc, #168]	; (80024a4 <HAL_RCC_OscConfig+0x91c>)
 80023fc:	f043 0304 	orr.w	r3, r3, #4
 8002400:	6213      	str	r3, [r2, #32]
 8002402:	4b28      	ldr	r3, [pc, #160]	; (80024a4 <HAL_RCC_OscConfig+0x91c>)
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4a27      	ldr	r2, [pc, #156]	; (80024a4 <HAL_RCC_OscConfig+0x91c>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6213      	str	r3, [r2, #32]
 800240e:	e00b      	b.n	8002428 <HAL_RCC_OscConfig+0x8a0>
 8002410:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <HAL_RCC_OscConfig+0x91c>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	4a23      	ldr	r2, [pc, #140]	; (80024a4 <HAL_RCC_OscConfig+0x91c>)
 8002416:	f023 0301 	bic.w	r3, r3, #1
 800241a:	6213      	str	r3, [r2, #32]
 800241c:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <HAL_RCC_OscConfig+0x91c>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4a20      	ldr	r2, [pc, #128]	; (80024a4 <HAL_RCC_OscConfig+0x91c>)
 8002422:	f023 0304 	bic.w	r3, r3, #4
 8002426:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002428:	1d3b      	adds	r3, r7, #4
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d06a      	beq.n	8002508 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002432:	f7ff f8f7 	bl	8001624 <HAL_GetTick>
 8002436:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243a:	e00b      	b.n	8002454 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7ff f8f2 	bl	8001624 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f241 3288 	movw	r2, #5000	; 0x1388
 800244c:	4293      	cmp	r3, r2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e2a7      	b.n	80029a4 <HAL_RCC_OscConfig+0xe1c>
 8002454:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002458:	2202      	movs	r2, #2
 800245a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	fa93 f2a3 	rbit	r2, r3
 8002466:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002470:	2202      	movs	r2, #2
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	fa93 f2a3 	rbit	r2, r3
 800247e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002482:	601a      	str	r2, [r3, #0]
  return result;
 8002484:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002488:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	b2db      	uxtb	r3, r3
 8002494:	f043 0302 	orr.w	r3, r3, #2
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d108      	bne.n	80024b0 <HAL_RCC_OscConfig+0x928>
 800249e:	4b01      	ldr	r3, [pc, #4]	; (80024a4 <HAL_RCC_OscConfig+0x91c>)
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	e013      	b.n	80024cc <HAL_RCC_OscConfig+0x944>
 80024a4:	40021000 	.word	0x40021000
 80024a8:	10908120 	.word	0x10908120
 80024ac:	40007000 	.word	0x40007000
 80024b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80024b4:	2202      	movs	r2, #2
 80024b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	fa93 f2a3 	rbit	r2, r3
 80024c2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	4bc0      	ldr	r3, [pc, #768]	; (80027cc <HAL_RCC_OscConfig+0xc44>)
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80024d0:	2102      	movs	r1, #2
 80024d2:	6011      	str	r1, [r2, #0]
 80024d4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	fa92 f1a2 	rbit	r1, r2
 80024de:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024e2:	6011      	str	r1, [r2, #0]
  return result;
 80024e4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024e8:	6812      	ldr	r2, [r2, #0]
 80024ea:	fab2 f282 	clz	r2, r2
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	f002 021f 	and.w	r2, r2, #31
 80024fa:	2101      	movs	r1, #1
 80024fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002500:	4013      	ands	r3, r2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d09a      	beq.n	800243c <HAL_RCC_OscConfig+0x8b4>
 8002506:	e063      	b.n	80025d0 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002508:	f7ff f88c 	bl	8001624 <HAL_GetTick>
 800250c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002510:	e00b      	b.n	800252a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002512:	f7ff f887 	bl	8001624 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002522:	4293      	cmp	r3, r2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e23c      	b.n	80029a4 <HAL_RCC_OscConfig+0xe1c>
 800252a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800252e:	2202      	movs	r2, #2
 8002530:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	fa93 f2a3 	rbit	r2, r3
 800253c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002546:	2202      	movs	r2, #2
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	fa93 f2a3 	rbit	r2, r3
 8002554:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002558:	601a      	str	r2, [r3, #0]
  return result;
 800255a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800255e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002560:	fab3 f383 	clz	r3, r3
 8002564:	b2db      	uxtb	r3, r3
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f043 0302 	orr.w	r3, r3, #2
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d102      	bne.n	800257a <HAL_RCC_OscConfig+0x9f2>
 8002574:	4b95      	ldr	r3, [pc, #596]	; (80027cc <HAL_RCC_OscConfig+0xc44>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	e00d      	b.n	8002596 <HAL_RCC_OscConfig+0xa0e>
 800257a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800257e:	2202      	movs	r2, #2
 8002580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002582:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	fa93 f2a3 	rbit	r2, r3
 800258c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	4b8e      	ldr	r3, [pc, #568]	; (80027cc <HAL_RCC_OscConfig+0xc44>)
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800259a:	2102      	movs	r1, #2
 800259c:	6011      	str	r1, [r2, #0]
 800259e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	fa92 f1a2 	rbit	r1, r2
 80025a8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80025ac:	6011      	str	r1, [r2, #0]
  return result;
 80025ae:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	fab2 f282 	clz	r2, r2
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	f002 021f 	and.w	r2, r2, #31
 80025c4:	2101      	movs	r1, #1
 80025c6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1a0      	bne.n	8002512 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025d0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d105      	bne.n	80025e4 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d8:	4b7c      	ldr	r3, [pc, #496]	; (80027cc <HAL_RCC_OscConfig+0xc44>)
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	4a7b      	ldr	r2, [pc, #492]	; (80027cc <HAL_RCC_OscConfig+0xc44>)
 80025de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e4:	1d3b      	adds	r3, r7, #4
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 81d9 	beq.w	80029a2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f0:	4b76      	ldr	r3, [pc, #472]	; (80027cc <HAL_RCC_OscConfig+0xc44>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 030c 	and.w	r3, r3, #12
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	f000 81a6 	beq.w	800294a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	2b02      	cmp	r3, #2
 8002606:	f040 811e 	bne.w	8002846 <HAL_RCC_OscConfig+0xcbe>
 800260a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800260e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002612:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	fa93 f2a3 	rbit	r2, r3
 800261e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002622:	601a      	str	r2, [r3, #0]
  return result;
 8002624:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002628:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002634:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	461a      	mov	r2, r3
 800263c:	2300      	movs	r3, #0
 800263e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7fe fff0 	bl	8001624 <HAL_GetTick>
 8002644:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002648:	e009      	b.n	800265e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800264a:	f7fe ffeb 	bl	8001624 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e1a2      	b.n	80029a4 <HAL_RCC_OscConfig+0xe1c>
 800265e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002662:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002666:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	fa93 f2a3 	rbit	r2, r3
 8002672:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002676:	601a      	str	r2, [r3, #0]
  return result;
 8002678:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800267c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800267e:	fab3 f383 	clz	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	095b      	lsrs	r3, r3, #5
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b01      	cmp	r3, #1
 8002690:	d102      	bne.n	8002698 <HAL_RCC_OscConfig+0xb10>
 8002692:	4b4e      	ldr	r3, [pc, #312]	; (80027cc <HAL_RCC_OscConfig+0xc44>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	e01b      	b.n	80026d0 <HAL_RCC_OscConfig+0xb48>
 8002698:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800269c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	fa93 f2a3 	rbit	r2, r3
 80026ac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	fa93 f2a3 	rbit	r2, r3
 80026c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	4b3f      	ldr	r3, [pc, #252]	; (80027cc <HAL_RCC_OscConfig+0xc44>)
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80026d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026d8:	6011      	str	r1, [r2, #0]
 80026da:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	fa92 f1a2 	rbit	r1, r2
 80026e4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026e8:	6011      	str	r1, [r2, #0]
  return result;
 80026ea:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	fab2 f282 	clz	r2, r2
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	f042 0220 	orr.w	r2, r2, #32
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	f002 021f 	and.w	r2, r2, #31
 8002700:	2101      	movs	r1, #1
 8002702:	fa01 f202 	lsl.w	r2, r1, r2
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d19e      	bne.n	800264a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800270c:	4b2f      	ldr	r3, [pc, #188]	; (80027cc <HAL_RCC_OscConfig+0xc44>)
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	f023 020f 	bic.w	r2, r3, #15
 8002714:	1d3b      	adds	r3, r7, #4
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	492c      	ldr	r1, [pc, #176]	; (80027cc <HAL_RCC_OscConfig+0xc44>)
 800271c:	4313      	orrs	r3, r2
 800271e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002720:	4b2a      	ldr	r3, [pc, #168]	; (80027cc <HAL_RCC_OscConfig+0xc44>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6a19      	ldr	r1, [r3, #32]
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	430b      	orrs	r3, r1
 8002736:	4925      	ldr	r1, [pc, #148]	; (80027cc <HAL_RCC_OscConfig+0xc44>)
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]
 800273c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002740:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002744:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	fa93 f2a3 	rbit	r2, r3
 8002750:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002754:	601a      	str	r2, [r3, #0]
  return result;
 8002756:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800275a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800275c:	fab3 f383 	clz	r3, r3
 8002760:	b2db      	uxtb	r3, r3
 8002762:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002766:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	461a      	mov	r2, r3
 800276e:	2301      	movs	r3, #1
 8002770:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002772:	f7fe ff57 	bl	8001624 <HAL_GetTick>
 8002776:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800277a:	e009      	b.n	8002790 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277c:	f7fe ff52 	bl	8001624 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e109      	b.n	80029a4 <HAL_RCC_OscConfig+0xe1c>
 8002790:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002794:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002798:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	fa93 f2a3 	rbit	r2, r3
 80027a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027a8:	601a      	str	r2, [r3, #0]
  return result;
 80027aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027b0:	fab3 f383 	clz	r3, r3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d105      	bne.n	80027d0 <HAL_RCC_OscConfig+0xc48>
 80027c4:	4b01      	ldr	r3, [pc, #4]	; (80027cc <HAL_RCC_OscConfig+0xc44>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	e01e      	b.n	8002808 <HAL_RCC_OscConfig+0xc80>
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
 80027d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	fa93 f2a3 	rbit	r2, r3
 80027e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	fa93 f2a3 	rbit	r2, r3
 80027fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	4b6a      	ldr	r3, [pc, #424]	; (80029b0 <HAL_RCC_OscConfig+0xe28>)
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800280c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002810:	6011      	str	r1, [r2, #0]
 8002812:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	fa92 f1a2 	rbit	r1, r2
 800281c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002820:	6011      	str	r1, [r2, #0]
  return result;
 8002822:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	fab2 f282 	clz	r2, r2
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	f042 0220 	orr.w	r2, r2, #32
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	f002 021f 	and.w	r2, r2, #31
 8002838:	2101      	movs	r1, #1
 800283a:	fa01 f202 	lsl.w	r2, r1, r2
 800283e:	4013      	ands	r3, r2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d09b      	beq.n	800277c <HAL_RCC_OscConfig+0xbf4>
 8002844:	e0ad      	b.n	80029a2 <HAL_RCC_OscConfig+0xe1a>
 8002846:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800284a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800284e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	fa93 f2a3 	rbit	r2, r3
 800285a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800285e:	601a      	str	r2, [r3, #0]
  return result;
 8002860:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002864:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002870:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	461a      	mov	r2, r3
 8002878:	2300      	movs	r3, #0
 800287a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7fe fed2 	bl	8001624 <HAL_GetTick>
 8002880:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002884:	e009      	b.n	800289a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002886:	f7fe fecd 	bl	8001624 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e084      	b.n	80029a4 <HAL_RCC_OscConfig+0xe1c>
 800289a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800289e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	fa93 f2a3 	rbit	r2, r3
 80028ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028b2:	601a      	str	r2, [r3, #0]
  return result;
 80028b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ba:	fab3 f383 	clz	r3, r3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	095b      	lsrs	r3, r3, #5
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d102      	bne.n	80028d4 <HAL_RCC_OscConfig+0xd4c>
 80028ce:	4b38      	ldr	r3, [pc, #224]	; (80029b0 <HAL_RCC_OscConfig+0xe28>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	e01b      	b.n	800290c <HAL_RCC_OscConfig+0xd84>
 80028d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	fa93 f2a3 	rbit	r2, r3
 80028e8:	f107 0320 	add.w	r3, r7, #32
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	f107 031c 	add.w	r3, r7, #28
 80028f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	f107 031c 	add.w	r3, r7, #28
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	fa93 f2a3 	rbit	r2, r3
 8002902:	f107 0318 	add.w	r3, r7, #24
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	4b29      	ldr	r3, [pc, #164]	; (80029b0 <HAL_RCC_OscConfig+0xe28>)
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	f107 0214 	add.w	r2, r7, #20
 8002910:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002914:	6011      	str	r1, [r2, #0]
 8002916:	f107 0214 	add.w	r2, r7, #20
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	fa92 f1a2 	rbit	r1, r2
 8002920:	f107 0210 	add.w	r2, r7, #16
 8002924:	6011      	str	r1, [r2, #0]
  return result;
 8002926:	f107 0210 	add.w	r2, r7, #16
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	fab2 f282 	clz	r2, r2
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	f042 0220 	orr.w	r2, r2, #32
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	f002 021f 	and.w	r2, r2, #31
 800293c:	2101      	movs	r1, #1
 800293e:	fa01 f202 	lsl.w	r2, r1, r2
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d19e      	bne.n	8002886 <HAL_RCC_OscConfig+0xcfe>
 8002948:	e02b      	b.n	80029a2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e025      	b.n	80029a4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002958:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <HAL_RCC_OscConfig+0xe28>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002960:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <HAL_RCC_OscConfig+0xe28>)
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002968:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800296c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002970:	1d3b      	adds	r3, r7, #4
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	429a      	cmp	r2, r3
 8002978:	d111      	bne.n	800299e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800297a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800297e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002982:	1d3b      	adds	r3, r7, #4
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002988:	429a      	cmp	r2, r3
 800298a:	d108      	bne.n	800299e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800298c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002990:	f003 020f 	and.w	r2, r3, #15
 8002994:	1d3b      	adds	r3, r7, #4
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800299a:	429a      	cmp	r2, r3
 800299c:	d001      	beq.n	80029a2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000

080029b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b09e      	sub	sp, #120	; 0x78
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029be:	2300      	movs	r3, #0
 80029c0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e162      	b.n	8002c92 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029cc:	4b90      	ldr	r3, [pc, #576]	; (8002c10 <HAL_RCC_ClockConfig+0x25c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d910      	bls.n	80029fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	4b8d      	ldr	r3, [pc, #564]	; (8002c10 <HAL_RCC_ClockConfig+0x25c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 0207 	bic.w	r2, r3, #7
 80029e2:	498b      	ldr	r1, [pc, #556]	; (8002c10 <HAL_RCC_ClockConfig+0x25c>)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b89      	ldr	r3, [pc, #548]	; (8002c10 <HAL_RCC_ClockConfig+0x25c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e14a      	b.n	8002c92 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a08:	4b82      	ldr	r3, [pc, #520]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	497f      	ldr	r1, [pc, #508]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 80dc 	beq.w	8002be0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d13c      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xf6>
 8002a30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a34:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d102      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xa6>
 8002a54:	4b6f      	ldr	r3, [pc, #444]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	e00f      	b.n	8002a7a <HAL_RCC_ClockConfig+0xc6>
 8002a5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	667b      	str	r3, [r7, #100]	; 0x64
 8002a68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a6c:	663b      	str	r3, [r7, #96]	; 0x60
 8002a6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a70:	fa93 f3a3 	rbit	r3, r3
 8002a74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a76:	4b67      	ldr	r3, [pc, #412]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a82:	fa92 f2a2 	rbit	r2, r2
 8002a86:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002a88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a8a:	fab2 f282 	clz	r2, r2
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	f042 0220 	orr.w	r2, r2, #32
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	f002 021f 	and.w	r2, r2, #31
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d17b      	bne.n	8002b9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e0f3      	b.n	8002c92 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d13c      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x178>
 8002ab2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ab6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aba:	fa93 f3a3 	rbit	r3, r3
 8002abe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac2:	fab3 f383 	clz	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	095b      	lsrs	r3, r3, #5
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d102      	bne.n	8002adc <HAL_RCC_ClockConfig+0x128>
 8002ad6:	4b4f      	ldr	r3, [pc, #316]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	e00f      	b.n	8002afc <HAL_RCC_ClockConfig+0x148>
 8002adc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ae0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	647b      	str	r3, [r7, #68]	; 0x44
 8002aea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aee:	643b      	str	r3, [r7, #64]	; 0x40
 8002af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002af8:	4b46      	ldr	r3, [pc, #280]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b00:	63ba      	str	r2, [r7, #56]	; 0x38
 8002b02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b04:	fa92 f2a2 	rbit	r2, r2
 8002b08:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002b0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b0c:	fab2 f282 	clz	r2, r2
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	f042 0220 	orr.w	r2, r2, #32
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	f002 021f 	and.w	r2, r2, #31
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d13a      	bne.n	8002b9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0b2      	b.n	8002c92 <HAL_RCC_ClockConfig+0x2de>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b32:	fa93 f3a3 	rbit	r3, r3
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	095b      	lsrs	r3, r3, #5
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d102      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x1a0>
 8002b4e:	4b31      	ldr	r3, [pc, #196]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	e00d      	b.n	8002b70 <HAL_RCC_ClockConfig+0x1bc>
 8002b54:	2302      	movs	r3, #2
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b60:	2302      	movs	r3, #2
 8002b62:	623b      	str	r3, [r7, #32]
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	fa93 f3a3 	rbit	r3, r3
 8002b6a:	61fb      	str	r3, [r7, #28]
 8002b6c:	4b29      	ldr	r3, [pc, #164]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	2202      	movs	r2, #2
 8002b72:	61ba      	str	r2, [r7, #24]
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	fa92 f2a2 	rbit	r2, r2
 8002b7a:	617a      	str	r2, [r7, #20]
  return result;
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	fab2 f282 	clz	r2, r2
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	f042 0220 	orr.w	r2, r2, #32
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	f002 021f 	and.w	r2, r2, #31
 8002b8e:	2101      	movs	r1, #1
 8002b90:	fa01 f202 	lsl.w	r2, r1, r2
 8002b94:	4013      	ands	r3, r2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e079      	b.n	8002c92 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b9e:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f023 0203 	bic.w	r2, r3, #3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	491a      	ldr	r1, [pc, #104]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb0:	f7fe fd38 	bl	8001624 <HAL_GetTick>
 8002bb4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb6:	e00a      	b.n	8002bce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb8:	f7fe fd34 	bl	8001624 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e061      	b.n	8002c92 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bce:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 020c 	and.w	r2, r3, #12
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d1eb      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_RCC_ClockConfig+0x25c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d214      	bcs.n	8002c18 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <HAL_RCC_ClockConfig+0x25c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 0207 	bic.w	r2, r3, #7
 8002bf6:	4906      	ldr	r1, [pc, #24]	; (8002c10 <HAL_RCC_ClockConfig+0x25c>)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <HAL_RCC_ClockConfig+0x25c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d005      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e040      	b.n	8002c92 <HAL_RCC_ClockConfig+0x2de>
 8002c10:	40022000 	.word	0x40022000
 8002c14:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c24:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <HAL_RCC_ClockConfig+0x2e8>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	491a      	ldr	r1, [pc, #104]	; (8002c9c <HAL_RCC_ClockConfig+0x2e8>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d009      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c42:	4b16      	ldr	r3, [pc, #88]	; (8002c9c <HAL_RCC_ClockConfig+0x2e8>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4912      	ldr	r1, [pc, #72]	; (8002c9c <HAL_RCC_ClockConfig+0x2e8>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c56:	f000 f829 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8002c5a:	4601      	mov	r1, r0
 8002c5c:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <HAL_RCC_ClockConfig+0x2e8>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c64:	22f0      	movs	r2, #240	; 0xf0
 8002c66:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	fa92 f2a2 	rbit	r2, r2
 8002c6e:	60fa      	str	r2, [r7, #12]
  return result;
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	fab2 f282 	clz	r2, r2
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	40d3      	lsrs	r3, r2
 8002c7a:	4a09      	ldr	r2, [pc, #36]	; (8002ca0 <HAL_RCC_ClockConfig+0x2ec>)
 8002c7c:	5cd3      	ldrb	r3, [r2, r3]
 8002c7e:	fa21 f303 	lsr.w	r3, r1, r3
 8002c82:	4a08      	ldr	r2, [pc, #32]	; (8002ca4 <HAL_RCC_ClockConfig+0x2f0>)
 8002c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <HAL_RCC_ClockConfig+0x2f4>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe fbb6 	bl	80013fc <HAL_InitTick>
  
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3778      	adds	r7, #120	; 0x78
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	0800742c 	.word	0x0800742c
 8002ca4:	20000018 	.word	0x20000018
 8002ca8:	2000001c 	.word	0x2000001c

08002cac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b08b      	sub	sp, #44	; 0x2c
 8002cb0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002cc6:	4b2a      	ldr	r3, [pc, #168]	; (8002d70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d002      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x30>
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d003      	beq.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x36>
 8002cda:	e03f      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cdc:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cde:	623b      	str	r3, [r7, #32]
      break;
 8002ce0:	e03f      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002ce8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002cec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	fa92 f2a2 	rbit	r2, r2
 8002cf4:	607a      	str	r2, [r7, #4]
  return result;
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	fab2 f282 	clz	r2, r2
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	40d3      	lsrs	r3, r2
 8002d00:	4a1d      	ldr	r2, [pc, #116]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d02:	5cd3      	ldrb	r3, [r2, r3]
 8002d04:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002d06:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	220f      	movs	r2, #15
 8002d10:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	fa92 f2a2 	rbit	r2, r2
 8002d18:	60fa      	str	r2, [r7, #12]
  return result;
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	fab2 f282 	clz	r2, r2
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	40d3      	lsrs	r3, r2
 8002d24:	4a15      	ldr	r2, [pc, #84]	; (8002d7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d26:	5cd3      	ldrb	r3, [r2, r3]
 8002d28:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d34:	4a0f      	ldr	r2, [pc, #60]	; (8002d74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	fb02 f303 	mul.w	r3, r2, r3
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
 8002d44:	e007      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d46:	4a0b      	ldr	r2, [pc, #44]	; (8002d74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	fb02 f303 	mul.w	r3, r2, r3
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	623b      	str	r3, [r7, #32]
      break;
 8002d5a:	e002      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d5c:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d5e:	623b      	str	r3, [r7, #32]
      break;
 8002d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d62:	6a3b      	ldr	r3, [r7, #32]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	372c      	adds	r7, #44	; 0x2c
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	40021000 	.word	0x40021000
 8002d74:	007a1200 	.word	0x007a1200
 8002d78:	08007444 	.word	0x08007444
 8002d7c:	08007454 	.word	0x08007454

08002d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d84:	4b03      	ldr	r3, [pc, #12]	; (8002d94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d86:	681b      	ldr	r3, [r3, #0]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	20000018 	.word	0x20000018

08002d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d9e:	f7ff ffef 	bl	8002d80 <HAL_RCC_GetHCLKFreq>
 8002da2:	4601      	mov	r1, r0
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002dac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002db0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	fa92 f2a2 	rbit	r2, r2
 8002db8:	603a      	str	r2, [r7, #0]
  return result;
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	fab2 f282 	clz	r2, r2
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	40d3      	lsrs	r3, r2
 8002dc4:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002dc6:	5cd3      	ldrb	r3, [r2, r3]
 8002dc8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	0800743c 	.word	0x0800743c

08002ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002de2:	f7ff ffcd 	bl	8002d80 <HAL_RCC_GetHCLKFreq>
 8002de6:	4601      	mov	r1, r0
 8002de8:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002df0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002df4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	fa92 f2a2 	rbit	r2, r2
 8002dfc:	603a      	str	r2, [r7, #0]
  return result;
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	fab2 f282 	clz	r2, r2
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	40d3      	lsrs	r3, r2
 8002e08:	4a04      	ldr	r2, [pc, #16]	; (8002e1c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002e0a:	5cd3      	ldrb	r3, [r2, r3]
 8002e0c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002e10:	4618      	mov	r0, r3
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	0800743c 	.word	0x0800743c

08002e20 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	220f      	movs	r2, #15
 8002e2e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e30:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <HAL_RCC_GetClockConfig+0x5c>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 0203 	and.w	r2, r3, #3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <HAL_RCC_GetClockConfig+0x5c>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002e48:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <HAL_RCC_GetClockConfig+0x5c>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e54:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <HAL_RCC_GetClockConfig+0x5c>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	08db      	lsrs	r3, r3, #3
 8002e5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002e62:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <HAL_RCC_GetClockConfig+0x60>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0207 	and.w	r2, r3, #7
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	601a      	str	r2, [r3, #0]
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	40022000 	.word	0x40022000

08002e84 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b092      	sub	sp, #72	; 0x48
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002e94:	2300      	movs	r3, #0
 8002e96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 80d4 	beq.w	8003050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea8:	4b4e      	ldr	r3, [pc, #312]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10e      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb4:	4b4b      	ldr	r3, [pc, #300]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	4a4a      	ldr	r2, [pc, #296]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	61d3      	str	r3, [r2, #28]
 8002ec0:	4b48      	ldr	r3, [pc, #288]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed2:	4b45      	ldr	r3, [pc, #276]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d118      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ede:	4b42      	ldr	r3, [pc, #264]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a41      	ldr	r2, [pc, #260]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eea:	f7fe fb9b 	bl	8001624 <HAL_GetTick>
 8002eee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef0:	e008      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef2:	f7fe fb97 	bl	8001624 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b64      	cmp	r3, #100	; 0x64
 8002efe:	d901      	bls.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e1d6      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f04:	4b38      	ldr	r3, [pc, #224]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f10:	4b34      	ldr	r3, [pc, #208]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f18:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 8084 	beq.w	800302a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d07c      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f30:	4b2c      	ldr	r3, [pc, #176]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	fa93 f3a3 	rbit	r3, r3
 8002f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f4a:	fab3 f383 	clz	r3, r3
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	4b26      	ldr	r3, [pc, #152]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	461a      	mov	r2, r3
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f6e:	fab3 f383 	clz	r3, r3
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	461a      	mov	r2, r3
 8002f76:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	2300      	movs	r3, #0
 8002f80:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f82:	4a18      	ldr	r2, [pc, #96]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f86:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d04b      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f92:	f7fe fb47 	bl	8001624 <HAL_GetTick>
 8002f96:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f98:	e00a      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9a:	f7fe fb43 	bl	8001624 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e180      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	623b      	str	r3, [r7, #32]
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	fa93 f3a3 	rbit	r3, r3
 8002fc6:	61fb      	str	r3, [r7, #28]
  return result;
 8002fc8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	095b      	lsrs	r3, r3, #5
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	f043 0302 	orr.w	r3, r3, #2
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d108      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002fde:	4b01      	ldr	r3, [pc, #4]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	e00d      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40007000 	.word	0x40007000
 8002fec:	10908100 	.word	0x10908100
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	fa93 f3a3 	rbit	r3, r3
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	4ba0      	ldr	r3, [pc, #640]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	2202      	movs	r2, #2
 8003002:	613a      	str	r2, [r7, #16]
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	fa92 f2a2 	rbit	r2, r2
 800300a:	60fa      	str	r2, [r7, #12]
  return result;
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	fab2 f282 	clz	r2, r2
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	f002 021f 	and.w	r2, r2, #31
 800301e:	2101      	movs	r1, #1
 8003020:	fa01 f202 	lsl.w	r2, r1, r2
 8003024:	4013      	ands	r3, r2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0b7      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800302a:	4b95      	ldr	r3, [pc, #596]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	4992      	ldr	r1, [pc, #584]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003038:	4313      	orrs	r3, r2
 800303a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800303c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003040:	2b01      	cmp	r3, #1
 8003042:	d105      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003044:	4b8e      	ldr	r3, [pc, #568]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	4a8d      	ldr	r2, [pc, #564]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800304a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800304e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800305c:	4b88      	ldr	r3, [pc, #544]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800305e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003060:	f023 0203 	bic.w	r2, r3, #3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	4985      	ldr	r1, [pc, #532]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800306a:	4313      	orrs	r3, r2
 800306c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d008      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800307a:	4b81      	ldr	r3, [pc, #516]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	497e      	ldr	r1, [pc, #504]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003088:	4313      	orrs	r3, r2
 800308a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d008      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003098:	4b79      	ldr	r3, [pc, #484]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	4976      	ldr	r1, [pc, #472]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d008      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030b6:	4b72      	ldr	r3, [pc, #456]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	f023 0210 	bic.w	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	496f      	ldr	r1, [pc, #444]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80030d4:	4b6a      	ldr	r3, [pc, #424]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e0:	4967      	ldr	r1, [pc, #412]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d008      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030f2:	4b63      	ldr	r3, [pc, #396]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	f023 0220 	bic.w	r2, r3, #32
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	4960      	ldr	r1, [pc, #384]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003100:	4313      	orrs	r3, r2
 8003102:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003110:	4b5b      	ldr	r3, [pc, #364]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	4958      	ldr	r1, [pc, #352]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800311e:	4313      	orrs	r3, r2
 8003120:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d008      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800312e:	4b54      	ldr	r3, [pc, #336]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	4951      	ldr	r1, [pc, #324]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800313c:	4313      	orrs	r3, r2
 800313e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0310 	and.w	r3, r3, #16
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800314c:	4b4c      	ldr	r3, [pc, #304]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	4949      	ldr	r1, [pc, #292]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800315a:	4313      	orrs	r3, r2
 800315c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003166:	2b00      	cmp	r3, #0
 8003168:	d008      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800316a:	4b45      	ldr	r3, [pc, #276]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	4942      	ldr	r1, [pc, #264]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003178:	4313      	orrs	r3, r2
 800317a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003188:	4b3d      	ldr	r3, [pc, #244]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	493a      	ldr	r1, [pc, #232]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003196:	4313      	orrs	r3, r2
 8003198:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d008      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80031a6:	4b36      	ldr	r3, [pc, #216]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031aa:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	4933      	ldr	r1, [pc, #204]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80031c4:	4b2e      	ldr	r3, [pc, #184]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d0:	492b      	ldr	r1, [pc, #172]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d008      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80031e2:	4b27      	ldr	r3, [pc, #156]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	4924      	ldr	r1, [pc, #144]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003200:	4b1f      	ldr	r3, [pc, #124]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003204:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	491c      	ldr	r1, [pc, #112]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800320e:	4313      	orrs	r3, r2
 8003210:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d008      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800321e:	4b18      	ldr	r3, [pc, #96]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322a:	4915      	ldr	r1, [pc, #84]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800322c:	4313      	orrs	r3, r2
 800322e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800323c:	4b10      	ldr	r3, [pc, #64]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003248:	490d      	ldr	r1, [pc, #52]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800324a:	4313      	orrs	r3, r2
 800324c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d008      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003266:	4906      	ldr	r1, [pc, #24]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003268:	4313      	orrs	r3, r2
 800326a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00c      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003278:	4b01      	ldr	r3, [pc, #4]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	e002      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000
 8003284:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328c:	490b      	ldr	r1, [pc, #44]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800328e:	4313      	orrs	r3, r2
 8003290:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d008      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800329e:	4b07      	ldr	r3, [pc, #28]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032aa:	4904      	ldr	r1, [pc, #16]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3748      	adds	r7, #72	; 0x48
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40021000 	.word	0x40021000

080032c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e049      	b.n	8003366 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d106      	bne.n	80032ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f841 	bl	800336e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3304      	adds	r3, #4
 80032fc:	4619      	mov	r1, r3
 80032fe:	4610      	mov	r0, r2
 8003300:	f000 f9f8 	bl	80036f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d001      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e04f      	b.n	800343c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0201 	orr.w	r2, r2, #1
 80033b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a23      	ldr	r2, [pc, #140]	; (8003448 <HAL_TIM_Base_Start_IT+0xc4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d01d      	beq.n	80033fa <HAL_TIM_Base_Start_IT+0x76>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c6:	d018      	beq.n	80033fa <HAL_TIM_Base_Start_IT+0x76>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a1f      	ldr	r2, [pc, #124]	; (800344c <HAL_TIM_Base_Start_IT+0xc8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d013      	beq.n	80033fa <HAL_TIM_Base_Start_IT+0x76>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a1e      	ldr	r2, [pc, #120]	; (8003450 <HAL_TIM_Base_Start_IT+0xcc>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00e      	beq.n	80033fa <HAL_TIM_Base_Start_IT+0x76>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a1c      	ldr	r2, [pc, #112]	; (8003454 <HAL_TIM_Base_Start_IT+0xd0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d009      	beq.n	80033fa <HAL_TIM_Base_Start_IT+0x76>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1b      	ldr	r2, [pc, #108]	; (8003458 <HAL_TIM_Base_Start_IT+0xd4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d004      	beq.n	80033fa <HAL_TIM_Base_Start_IT+0x76>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a19      	ldr	r2, [pc, #100]	; (800345c <HAL_TIM_Base_Start_IT+0xd8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d115      	bne.n	8003426 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	4b17      	ldr	r3, [pc, #92]	; (8003460 <HAL_TIM_Base_Start_IT+0xdc>)
 8003402:	4013      	ands	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2b06      	cmp	r3, #6
 800340a:	d015      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0xb4>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003412:	d011      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003424:	e008      	b.n	8003438 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0201 	orr.w	r2, r2, #1
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	e000      	b.n	800343a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003438:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	40012c00 	.word	0x40012c00
 800344c:	40000400 	.word	0x40000400
 8003450:	40000800 	.word	0x40000800
 8003454:	40013400 	.word	0x40013400
 8003458:	40014000 	.word	0x40014000
 800345c:	40015000 	.word	0x40015000
 8003460:	00010007 	.word	0x00010007

08003464 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b02      	cmp	r3, #2
 8003478:	d122      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b02      	cmp	r3, #2
 8003486:	d11b      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f06f 0202 	mvn.w	r2, #2
 8003490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f905 	bl	80036b6 <HAL_TIM_IC_CaptureCallback>
 80034ac:	e005      	b.n	80034ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f8f7 	bl	80036a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f908 	bl	80036ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d122      	bne.n	8003514 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d11b      	bne.n	8003514 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f06f 0204 	mvn.w	r2, #4
 80034e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2202      	movs	r2, #2
 80034ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f8db 	bl	80036b6 <HAL_TIM_IC_CaptureCallback>
 8003500:	e005      	b.n	800350e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f8cd 	bl	80036a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f8de 	bl	80036ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b08      	cmp	r3, #8
 8003520:	d122      	bne.n	8003568 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b08      	cmp	r3, #8
 800352e:	d11b      	bne.n	8003568 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0208 	mvn.w	r2, #8
 8003538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2204      	movs	r2, #4
 800353e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f8b1 	bl	80036b6 <HAL_TIM_IC_CaptureCallback>
 8003554:	e005      	b.n	8003562 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f8a3 	bl	80036a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f8b4 	bl	80036ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f003 0310 	and.w	r3, r3, #16
 8003572:	2b10      	cmp	r3, #16
 8003574:	d122      	bne.n	80035bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b10      	cmp	r3, #16
 8003582:	d11b      	bne.n	80035bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0210 	mvn.w	r2, #16
 800358c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2208      	movs	r2, #8
 8003592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f887 	bl	80036b6 <HAL_TIM_IC_CaptureCallback>
 80035a8:	e005      	b.n	80035b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f879 	bl	80036a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f88a 	bl	80036ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d10e      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d107      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0201 	mvn.w	r2, #1
 80035e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fd fe8a 	bl	80012fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f2:	2b80      	cmp	r3, #128	; 0x80
 80035f4:	d10e      	bne.n	8003614 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003600:	2b80      	cmp	r3, #128	; 0x80
 8003602:	d107      	bne.n	8003614 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800360c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f918 	bl	8003844 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003622:	d10e      	bne.n	8003642 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362e:	2b80      	cmp	r3, #128	; 0x80
 8003630:	d107      	bne.n	8003642 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800363a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f90b 	bl	8003858 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364c:	2b40      	cmp	r3, #64	; 0x40
 800364e:	d10e      	bne.n	800366e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365a:	2b40      	cmp	r3, #64	; 0x40
 800365c:	d107      	bne.n	800366e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f838 	bl	80036de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b20      	cmp	r3, #32
 800367a:	d10e      	bne.n	800369a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b20      	cmp	r3, #32
 8003688:	d107      	bne.n	800369a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f06f 0220 	mvn.w	r2, #32
 8003692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f8cb 	bl	8003830 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a42      	ldr	r2, [pc, #264]	; (8003810 <TIM_Base_SetConfig+0x11c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d013      	beq.n	8003734 <TIM_Base_SetConfig+0x40>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003712:	d00f      	beq.n	8003734 <TIM_Base_SetConfig+0x40>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a3f      	ldr	r2, [pc, #252]	; (8003814 <TIM_Base_SetConfig+0x120>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d00b      	beq.n	8003734 <TIM_Base_SetConfig+0x40>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a3e      	ldr	r2, [pc, #248]	; (8003818 <TIM_Base_SetConfig+0x124>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d007      	beq.n	8003734 <TIM_Base_SetConfig+0x40>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a3d      	ldr	r2, [pc, #244]	; (800381c <TIM_Base_SetConfig+0x128>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d003      	beq.n	8003734 <TIM_Base_SetConfig+0x40>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a3c      	ldr	r2, [pc, #240]	; (8003820 <TIM_Base_SetConfig+0x12c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d108      	bne.n	8003746 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a31      	ldr	r2, [pc, #196]	; (8003810 <TIM_Base_SetConfig+0x11c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d01f      	beq.n	800378e <TIM_Base_SetConfig+0x9a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003754:	d01b      	beq.n	800378e <TIM_Base_SetConfig+0x9a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a2e      	ldr	r2, [pc, #184]	; (8003814 <TIM_Base_SetConfig+0x120>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d017      	beq.n	800378e <TIM_Base_SetConfig+0x9a>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a2d      	ldr	r2, [pc, #180]	; (8003818 <TIM_Base_SetConfig+0x124>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d013      	beq.n	800378e <TIM_Base_SetConfig+0x9a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a2c      	ldr	r2, [pc, #176]	; (800381c <TIM_Base_SetConfig+0x128>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d00f      	beq.n	800378e <TIM_Base_SetConfig+0x9a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a2c      	ldr	r2, [pc, #176]	; (8003824 <TIM_Base_SetConfig+0x130>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d00b      	beq.n	800378e <TIM_Base_SetConfig+0x9a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a2b      	ldr	r2, [pc, #172]	; (8003828 <TIM_Base_SetConfig+0x134>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d007      	beq.n	800378e <TIM_Base_SetConfig+0x9a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a2a      	ldr	r2, [pc, #168]	; (800382c <TIM_Base_SetConfig+0x138>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d003      	beq.n	800378e <TIM_Base_SetConfig+0x9a>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a25      	ldr	r2, [pc, #148]	; (8003820 <TIM_Base_SetConfig+0x12c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d108      	bne.n	80037a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	4313      	orrs	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a12      	ldr	r2, [pc, #72]	; (8003810 <TIM_Base_SetConfig+0x11c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d013      	beq.n	80037f4 <TIM_Base_SetConfig+0x100>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a13      	ldr	r2, [pc, #76]	; (800381c <TIM_Base_SetConfig+0x128>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d00f      	beq.n	80037f4 <TIM_Base_SetConfig+0x100>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a13      	ldr	r2, [pc, #76]	; (8003824 <TIM_Base_SetConfig+0x130>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00b      	beq.n	80037f4 <TIM_Base_SetConfig+0x100>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a12      	ldr	r2, [pc, #72]	; (8003828 <TIM_Base_SetConfig+0x134>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d007      	beq.n	80037f4 <TIM_Base_SetConfig+0x100>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a11      	ldr	r2, [pc, #68]	; (800382c <TIM_Base_SetConfig+0x138>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d003      	beq.n	80037f4 <TIM_Base_SetConfig+0x100>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a0c      	ldr	r2, [pc, #48]	; (8003820 <TIM_Base_SetConfig+0x12c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d103      	bne.n	80037fc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	615a      	str	r2, [r3, #20]
}
 8003802:	bf00      	nop
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40012c00 	.word	0x40012c00
 8003814:	40000400 	.word	0x40000400
 8003818:	40000800 	.word	0x40000800
 800381c:	40013400 	.word	0x40013400
 8003820:	40015000 	.word	0x40015000
 8003824:	40014000 	.word	0x40014000
 8003828:	40014400 	.word	0x40014400
 800382c:	40014800 	.word	0x40014800

08003830 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e040      	b.n	8003900 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003882:	2b00      	cmp	r3, #0
 8003884:	d106      	bne.n	8003894 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7fd fd72 	bl	8001378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2224      	movs	r2, #36	; 0x24
 8003898:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0201 	bic.w	r2, r2, #1
 80038a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f8c0 	bl	8003a30 <UART_SetConfig>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d101      	bne.n	80038ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e022      	b.n	8003900 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fa88 	bl	8003dd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 fb0f 	bl	8003f1c <UART_CheckIdleState>
 80038fe:	4603      	mov	r3, r0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08a      	sub	sp, #40	; 0x28
 800390c:	af02      	add	r7, sp, #8
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	603b      	str	r3, [r7, #0]
 8003914:	4613      	mov	r3, r2
 8003916:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800391c:	2b20      	cmp	r3, #32
 800391e:	f040 8082 	bne.w	8003a26 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <HAL_UART_Transmit+0x26>
 8003928:	88fb      	ldrh	r3, [r7, #6]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e07a      	b.n	8003a28 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_UART_Transmit+0x38>
 800393c:	2302      	movs	r3, #2
 800393e:	e073      	b.n	8003a28 <HAL_UART_Transmit+0x120>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2221      	movs	r2, #33	; 0x21
 8003954:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003956:	f7fd fe65 	bl	8001624 <HAL_GetTick>
 800395a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	88fa      	ldrh	r2, [r7, #6]
 8003960:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	88fa      	ldrh	r2, [r7, #6]
 8003968:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003974:	d108      	bne.n	8003988 <HAL_UART_Transmit+0x80>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d104      	bne.n	8003988 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800397e:	2300      	movs	r3, #0
 8003980:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	61bb      	str	r3, [r7, #24]
 8003986:	e003      	b.n	8003990 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800398c:	2300      	movs	r3, #0
 800398e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003998:	e02d      	b.n	80039f6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2200      	movs	r2, #0
 80039a2:	2180      	movs	r1, #128	; 0x80
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 fb02 	bl	8003fae <UART_WaitOnFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e039      	b.n	8003a28 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10b      	bne.n	80039d2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	881a      	ldrh	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039c6:	b292      	uxth	r2, r2
 80039c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	3302      	adds	r3, #2
 80039ce:	61bb      	str	r3, [r7, #24]
 80039d0:	e008      	b.n	80039e4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	781a      	ldrb	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	b292      	uxth	r2, r2
 80039dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	3301      	adds	r3, #1
 80039e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1cb      	bne.n	800399a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2140      	movs	r1, #64	; 0x40
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 face 	bl	8003fae <UART_WaitOnFlagUntilTimeout>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e005      	b.n	8003a28 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e000      	b.n	8003a28 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003a26:	2302      	movs	r3, #2
  }
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3720      	adds	r7, #32
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	4baa      	ldr	r3, [pc, #680]	; (8003d04 <UART_SetConfig+0x2d4>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6812      	ldr	r2, [r2, #0]
 8003a62:	6979      	ldr	r1, [r7, #20]
 8003a64:	430b      	orrs	r3, r1
 8003a66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a98      	ldr	r2, [pc, #608]	; (8003d08 <UART_SetConfig+0x2d8>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d121      	bne.n	8003af0 <UART_SetConfig+0xc0>
 8003aac:	4b97      	ldr	r3, [pc, #604]	; (8003d0c <UART_SetConfig+0x2dc>)
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	f003 0303 	and.w	r3, r3, #3
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d817      	bhi.n	8003ae8 <UART_SetConfig+0xb8>
 8003ab8:	a201      	add	r2, pc, #4	; (adr r2, 8003ac0 <UART_SetConfig+0x90>)
 8003aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abe:	bf00      	nop
 8003ac0:	08003ad1 	.word	0x08003ad1
 8003ac4:	08003add 	.word	0x08003add
 8003ac8:	08003ae3 	.word	0x08003ae3
 8003acc:	08003ad7 	.word	0x08003ad7
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	77fb      	strb	r3, [r7, #31]
 8003ad4:	e0b2      	b.n	8003c3c <UART_SetConfig+0x20c>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	77fb      	strb	r3, [r7, #31]
 8003ada:	e0af      	b.n	8003c3c <UART_SetConfig+0x20c>
 8003adc:	2304      	movs	r3, #4
 8003ade:	77fb      	strb	r3, [r7, #31]
 8003ae0:	e0ac      	b.n	8003c3c <UART_SetConfig+0x20c>
 8003ae2:	2308      	movs	r3, #8
 8003ae4:	77fb      	strb	r3, [r7, #31]
 8003ae6:	e0a9      	b.n	8003c3c <UART_SetConfig+0x20c>
 8003ae8:	2310      	movs	r3, #16
 8003aea:	77fb      	strb	r3, [r7, #31]
 8003aec:	bf00      	nop
 8003aee:	e0a5      	b.n	8003c3c <UART_SetConfig+0x20c>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a86      	ldr	r2, [pc, #536]	; (8003d10 <UART_SetConfig+0x2e0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d123      	bne.n	8003b42 <UART_SetConfig+0x112>
 8003afa:	4b84      	ldr	r3, [pc, #528]	; (8003d0c <UART_SetConfig+0x2dc>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b06:	d012      	beq.n	8003b2e <UART_SetConfig+0xfe>
 8003b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b0c:	d802      	bhi.n	8003b14 <UART_SetConfig+0xe4>
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d007      	beq.n	8003b22 <UART_SetConfig+0xf2>
 8003b12:	e012      	b.n	8003b3a <UART_SetConfig+0x10a>
 8003b14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b18:	d00c      	beq.n	8003b34 <UART_SetConfig+0x104>
 8003b1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b1e:	d003      	beq.n	8003b28 <UART_SetConfig+0xf8>
 8003b20:	e00b      	b.n	8003b3a <UART_SetConfig+0x10a>
 8003b22:	2300      	movs	r3, #0
 8003b24:	77fb      	strb	r3, [r7, #31]
 8003b26:	e089      	b.n	8003c3c <UART_SetConfig+0x20c>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	77fb      	strb	r3, [r7, #31]
 8003b2c:	e086      	b.n	8003c3c <UART_SetConfig+0x20c>
 8003b2e:	2304      	movs	r3, #4
 8003b30:	77fb      	strb	r3, [r7, #31]
 8003b32:	e083      	b.n	8003c3c <UART_SetConfig+0x20c>
 8003b34:	2308      	movs	r3, #8
 8003b36:	77fb      	strb	r3, [r7, #31]
 8003b38:	e080      	b.n	8003c3c <UART_SetConfig+0x20c>
 8003b3a:	2310      	movs	r3, #16
 8003b3c:	77fb      	strb	r3, [r7, #31]
 8003b3e:	bf00      	nop
 8003b40:	e07c      	b.n	8003c3c <UART_SetConfig+0x20c>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a73      	ldr	r2, [pc, #460]	; (8003d14 <UART_SetConfig+0x2e4>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d123      	bne.n	8003b94 <UART_SetConfig+0x164>
 8003b4c:	4b6f      	ldr	r3, [pc, #444]	; (8003d0c <UART_SetConfig+0x2dc>)
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b50:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003b54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b58:	d012      	beq.n	8003b80 <UART_SetConfig+0x150>
 8003b5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b5e:	d802      	bhi.n	8003b66 <UART_SetConfig+0x136>
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d007      	beq.n	8003b74 <UART_SetConfig+0x144>
 8003b64:	e012      	b.n	8003b8c <UART_SetConfig+0x15c>
 8003b66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b6a:	d00c      	beq.n	8003b86 <UART_SetConfig+0x156>
 8003b6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b70:	d003      	beq.n	8003b7a <UART_SetConfig+0x14a>
 8003b72:	e00b      	b.n	8003b8c <UART_SetConfig+0x15c>
 8003b74:	2300      	movs	r3, #0
 8003b76:	77fb      	strb	r3, [r7, #31]
 8003b78:	e060      	b.n	8003c3c <UART_SetConfig+0x20c>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	77fb      	strb	r3, [r7, #31]
 8003b7e:	e05d      	b.n	8003c3c <UART_SetConfig+0x20c>
 8003b80:	2304      	movs	r3, #4
 8003b82:	77fb      	strb	r3, [r7, #31]
 8003b84:	e05a      	b.n	8003c3c <UART_SetConfig+0x20c>
 8003b86:	2308      	movs	r3, #8
 8003b88:	77fb      	strb	r3, [r7, #31]
 8003b8a:	e057      	b.n	8003c3c <UART_SetConfig+0x20c>
 8003b8c:	2310      	movs	r3, #16
 8003b8e:	77fb      	strb	r3, [r7, #31]
 8003b90:	bf00      	nop
 8003b92:	e053      	b.n	8003c3c <UART_SetConfig+0x20c>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a5f      	ldr	r2, [pc, #380]	; (8003d18 <UART_SetConfig+0x2e8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d123      	bne.n	8003be6 <UART_SetConfig+0x1b6>
 8003b9e:	4b5b      	ldr	r3, [pc, #364]	; (8003d0c <UART_SetConfig+0x2dc>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003baa:	d012      	beq.n	8003bd2 <UART_SetConfig+0x1a2>
 8003bac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bb0:	d802      	bhi.n	8003bb8 <UART_SetConfig+0x188>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d007      	beq.n	8003bc6 <UART_SetConfig+0x196>
 8003bb6:	e012      	b.n	8003bde <UART_SetConfig+0x1ae>
 8003bb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bbc:	d00c      	beq.n	8003bd8 <UART_SetConfig+0x1a8>
 8003bbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bc2:	d003      	beq.n	8003bcc <UART_SetConfig+0x19c>
 8003bc4:	e00b      	b.n	8003bde <UART_SetConfig+0x1ae>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	77fb      	strb	r3, [r7, #31]
 8003bca:	e037      	b.n	8003c3c <UART_SetConfig+0x20c>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	77fb      	strb	r3, [r7, #31]
 8003bd0:	e034      	b.n	8003c3c <UART_SetConfig+0x20c>
 8003bd2:	2304      	movs	r3, #4
 8003bd4:	77fb      	strb	r3, [r7, #31]
 8003bd6:	e031      	b.n	8003c3c <UART_SetConfig+0x20c>
 8003bd8:	2308      	movs	r3, #8
 8003bda:	77fb      	strb	r3, [r7, #31]
 8003bdc:	e02e      	b.n	8003c3c <UART_SetConfig+0x20c>
 8003bde:	2310      	movs	r3, #16
 8003be0:	77fb      	strb	r3, [r7, #31]
 8003be2:	bf00      	nop
 8003be4:	e02a      	b.n	8003c3c <UART_SetConfig+0x20c>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a4c      	ldr	r2, [pc, #304]	; (8003d1c <UART_SetConfig+0x2ec>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d123      	bne.n	8003c38 <UART_SetConfig+0x208>
 8003bf0:	4b46      	ldr	r3, [pc, #280]	; (8003d0c <UART_SetConfig+0x2dc>)
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003bf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bfc:	d012      	beq.n	8003c24 <UART_SetConfig+0x1f4>
 8003bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c02:	d802      	bhi.n	8003c0a <UART_SetConfig+0x1da>
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d007      	beq.n	8003c18 <UART_SetConfig+0x1e8>
 8003c08:	e012      	b.n	8003c30 <UART_SetConfig+0x200>
 8003c0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c0e:	d00c      	beq.n	8003c2a <UART_SetConfig+0x1fa>
 8003c10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c14:	d003      	beq.n	8003c1e <UART_SetConfig+0x1ee>
 8003c16:	e00b      	b.n	8003c30 <UART_SetConfig+0x200>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	77fb      	strb	r3, [r7, #31]
 8003c1c:	e00e      	b.n	8003c3c <UART_SetConfig+0x20c>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	77fb      	strb	r3, [r7, #31]
 8003c22:	e00b      	b.n	8003c3c <UART_SetConfig+0x20c>
 8003c24:	2304      	movs	r3, #4
 8003c26:	77fb      	strb	r3, [r7, #31]
 8003c28:	e008      	b.n	8003c3c <UART_SetConfig+0x20c>
 8003c2a:	2308      	movs	r3, #8
 8003c2c:	77fb      	strb	r3, [r7, #31]
 8003c2e:	e005      	b.n	8003c3c <UART_SetConfig+0x20c>
 8003c30:	2310      	movs	r3, #16
 8003c32:	77fb      	strb	r3, [r7, #31]
 8003c34:	bf00      	nop
 8003c36:	e001      	b.n	8003c3c <UART_SetConfig+0x20c>
 8003c38:	2310      	movs	r3, #16
 8003c3a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c44:	d16e      	bne.n	8003d24 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003c46:	7ffb      	ldrb	r3, [r7, #31]
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d828      	bhi.n	8003c9e <UART_SetConfig+0x26e>
 8003c4c:	a201      	add	r2, pc, #4	; (adr r2, 8003c54 <UART_SetConfig+0x224>)
 8003c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c52:	bf00      	nop
 8003c54:	08003c79 	.word	0x08003c79
 8003c58:	08003c81 	.word	0x08003c81
 8003c5c:	08003c89 	.word	0x08003c89
 8003c60:	08003c9f 	.word	0x08003c9f
 8003c64:	08003c8f 	.word	0x08003c8f
 8003c68:	08003c9f 	.word	0x08003c9f
 8003c6c:	08003c9f 	.word	0x08003c9f
 8003c70:	08003c9f 	.word	0x08003c9f
 8003c74:	08003c97 	.word	0x08003c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c78:	f7ff f88e 	bl	8002d98 <HAL_RCC_GetPCLK1Freq>
 8003c7c:	61b8      	str	r0, [r7, #24]
        break;
 8003c7e:	e013      	b.n	8003ca8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c80:	f7ff f8ac 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 8003c84:	61b8      	str	r0, [r7, #24]
        break;
 8003c86:	e00f      	b.n	8003ca8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c88:	4b25      	ldr	r3, [pc, #148]	; (8003d20 <UART_SetConfig+0x2f0>)
 8003c8a:	61bb      	str	r3, [r7, #24]
        break;
 8003c8c:	e00c      	b.n	8003ca8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c8e:	f7ff f80d 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8003c92:	61b8      	str	r0, [r7, #24]
        break;
 8003c94:	e008      	b.n	8003ca8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c9a:	61bb      	str	r3, [r7, #24]
        break;
 8003c9c:	e004      	b.n	8003ca8 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	77bb      	strb	r3, [r7, #30]
        break;
 8003ca6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 8086 	beq.w	8003dbc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	005a      	lsls	r2, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	085b      	lsrs	r3, r3, #1
 8003cba:	441a      	add	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	2b0f      	cmp	r3, #15
 8003ccc:	d916      	bls.n	8003cfc <UART_SetConfig+0x2cc>
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd4:	d212      	bcs.n	8003cfc <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	f023 030f 	bic.w	r3, r3, #15
 8003cde:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	085b      	lsrs	r3, r3, #1
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	89fb      	ldrh	r3, [r7, #14]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	89fa      	ldrh	r2, [r7, #14]
 8003cf8:	60da      	str	r2, [r3, #12]
 8003cfa:	e05f      	b.n	8003dbc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	77bb      	strb	r3, [r7, #30]
 8003d00:	e05c      	b.n	8003dbc <UART_SetConfig+0x38c>
 8003d02:	bf00      	nop
 8003d04:	efff69f3 	.word	0xefff69f3
 8003d08:	40013800 	.word	0x40013800
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	40004400 	.word	0x40004400
 8003d14:	40004800 	.word	0x40004800
 8003d18:	40004c00 	.word	0x40004c00
 8003d1c:	40005000 	.word	0x40005000
 8003d20:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d24:	7ffb      	ldrb	r3, [r7, #31]
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d827      	bhi.n	8003d7a <UART_SetConfig+0x34a>
 8003d2a:	a201      	add	r2, pc, #4	; (adr r2, 8003d30 <UART_SetConfig+0x300>)
 8003d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d30:	08003d55 	.word	0x08003d55
 8003d34:	08003d5d 	.word	0x08003d5d
 8003d38:	08003d65 	.word	0x08003d65
 8003d3c:	08003d7b 	.word	0x08003d7b
 8003d40:	08003d6b 	.word	0x08003d6b
 8003d44:	08003d7b 	.word	0x08003d7b
 8003d48:	08003d7b 	.word	0x08003d7b
 8003d4c:	08003d7b 	.word	0x08003d7b
 8003d50:	08003d73 	.word	0x08003d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d54:	f7ff f820 	bl	8002d98 <HAL_RCC_GetPCLK1Freq>
 8003d58:	61b8      	str	r0, [r7, #24]
        break;
 8003d5a:	e013      	b.n	8003d84 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d5c:	f7ff f83e 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 8003d60:	61b8      	str	r0, [r7, #24]
        break;
 8003d62:	e00f      	b.n	8003d84 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d64:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <UART_SetConfig+0x3a4>)
 8003d66:	61bb      	str	r3, [r7, #24]
        break;
 8003d68:	e00c      	b.n	8003d84 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d6a:	f7fe ff9f 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8003d6e:	61b8      	str	r0, [r7, #24]
        break;
 8003d70:	e008      	b.n	8003d84 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d76:	61bb      	str	r3, [r7, #24]
        break;
 8003d78:	e004      	b.n	8003d84 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	77bb      	strb	r3, [r7, #30]
        break;
 8003d82:	bf00      	nop
    }

    if (pclk != 0U)
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d018      	beq.n	8003dbc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	085a      	lsrs	r2, r3, #1
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	441a      	add	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	2b0f      	cmp	r3, #15
 8003da4:	d908      	bls.n	8003db8 <UART_SetConfig+0x388>
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dac:	d204      	bcs.n	8003db8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	60da      	str	r2, [r3, #12]
 8003db6:	e001      	b.n	8003dbc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003dc8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3720      	adds	r7, #32
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	007a1200 	.word	0x007a1200

08003dd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00a      	beq.n	8003e02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d01a      	beq.n	8003eee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ed6:	d10a      	bne.n	8003eee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	605a      	str	r2, [r3, #4]
  }
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f2c:	f7fd fb7a 	bl	8001624 <HAL_GetTick>
 8003f30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d10e      	bne.n	8003f5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f82d 	bl	8003fae <UART_WaitOnFlagUntilTimeout>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e023      	b.n	8003fa6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d10e      	bne.n	8003f8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f817 	bl	8003fae <UART_WaitOnFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e00d      	b.n	8003fa6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	60f8      	str	r0, [r7, #12]
 8003fb6:	60b9      	str	r1, [r7, #8]
 8003fb8:	603b      	str	r3, [r7, #0]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fbe:	e05e      	b.n	800407e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc6:	d05a      	beq.n	800407e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc8:	f7fd fb2c 	bl	8001624 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d302      	bcc.n	8003fde <UART_WaitOnFlagUntilTimeout+0x30>
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d11b      	bne.n	8004016 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0201 	bic.w	r2, r2, #1
 8003ffc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2220      	movs	r2, #32
 8004002:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e043      	b.n	800409e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	d02c      	beq.n	800407e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800402e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004032:	d124      	bne.n	800407e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800403c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800404c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0201 	bic.w	r2, r2, #1
 800405c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2220      	movs	r2, #32
 8004062:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2220      	movs	r2, #32
 8004068:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2220      	movs	r2, #32
 800406e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e00f      	b.n	800409e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	69da      	ldr	r2, [r3, #28]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4013      	ands	r3, r2
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	429a      	cmp	r2, r3
 800408c:	bf0c      	ite	eq
 800408e:	2301      	moveq	r3, #1
 8004090:	2300      	movne	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	461a      	mov	r2, r3
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	429a      	cmp	r2, r3
 800409a:	d091      	beq.n	8003fc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040ae:	f3ef 8305 	mrs	r3, IPSR
 80040b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80040b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10f      	bne.n	80040da <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ba:	f3ef 8310 	mrs	r3, PRIMASK
 80040be:	607b      	str	r3, [r7, #4]
  return(result);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <osKernelInitialize+0x32>
 80040c6:	4b11      	ldr	r3, [pc, #68]	; (800410c <osKernelInitialize+0x64>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d109      	bne.n	80040e2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040ce:	f3ef 8311 	mrs	r3, BASEPRI
 80040d2:	603b      	str	r3, [r7, #0]
  return(result);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80040da:	f06f 0305 	mvn.w	r3, #5
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	e00c      	b.n	80040fc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80040e2:	4b0a      	ldr	r3, [pc, #40]	; (800410c <osKernelInitialize+0x64>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d105      	bne.n	80040f6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80040ea:	4b08      	ldr	r3, [pc, #32]	; (800410c <osKernelInitialize+0x64>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	e002      	b.n	80040fc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80040f6:	f04f 33ff 	mov.w	r3, #4294967295
 80040fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80040fc:	68fb      	ldr	r3, [r7, #12]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	200000bc 	.word	0x200000bc

08004110 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004116:	f3ef 8305 	mrs	r3, IPSR
 800411a:	60bb      	str	r3, [r7, #8]
  return(result);
 800411c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10f      	bne.n	8004142 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004122:	f3ef 8310 	mrs	r3, PRIMASK
 8004126:	607b      	str	r3, [r7, #4]
  return(result);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <osKernelStart+0x32>
 800412e:	4b11      	ldr	r3, [pc, #68]	; (8004174 <osKernelStart+0x64>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d109      	bne.n	800414a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004136:	f3ef 8311 	mrs	r3, BASEPRI
 800413a:	603b      	str	r3, [r7, #0]
  return(result);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004142:	f06f 0305 	mvn.w	r3, #5
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	e00e      	b.n	8004168 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800414a:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <osKernelStart+0x64>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d107      	bne.n	8004162 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004152:	4b08      	ldr	r3, [pc, #32]	; (8004174 <osKernelStart+0x64>)
 8004154:	2202      	movs	r2, #2
 8004156:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004158:	f001 f86a 	bl	8005230 <vTaskStartScheduler>
      stat = osOK;
 800415c:	2300      	movs	r3, #0
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	e002      	b.n	8004168 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004162:	f04f 33ff 	mov.w	r3, #4294967295
 8004166:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004168:	68fb      	ldr	r3, [r7, #12]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	200000bc 	.word	0x200000bc

08004178 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004178:	b580      	push	{r7, lr}
 800417a:	b092      	sub	sp, #72	; 0x48
 800417c:	af04      	add	r7, sp, #16
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004184:	2300      	movs	r3, #0
 8004186:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004188:	f3ef 8305 	mrs	r3, IPSR
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004190:	2b00      	cmp	r3, #0
 8004192:	f040 8094 	bne.w	80042be <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004196:	f3ef 8310 	mrs	r3, PRIMASK
 800419a:	623b      	str	r3, [r7, #32]
  return(result);
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f040 808d 	bne.w	80042be <osThreadNew+0x146>
 80041a4:	4b48      	ldr	r3, [pc, #288]	; (80042c8 <osThreadNew+0x150>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d106      	bne.n	80041ba <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041ac:	f3ef 8311 	mrs	r3, BASEPRI
 80041b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f040 8082 	bne.w	80042be <osThreadNew+0x146>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d07e      	beq.n	80042be <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80041c0:	2380      	movs	r3, #128	; 0x80
 80041c2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80041c4:	2318      	movs	r3, #24
 80041c6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80041c8:	2300      	movs	r3, #0
 80041ca:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80041cc:	f107 031b 	add.w	r3, r7, #27
 80041d0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80041d2:	f04f 33ff 	mov.w	r3, #4294967295
 80041d6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d045      	beq.n	800426a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <osThreadNew+0x74>
        name = attr->name;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80041fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d008      	beq.n	8004212 <osThreadNew+0x9a>
 8004200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004202:	2b38      	cmp	r3, #56	; 0x38
 8004204:	d805      	bhi.n	8004212 <osThreadNew+0x9a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <osThreadNew+0x9e>
        return (NULL);
 8004212:	2300      	movs	r3, #0
 8004214:	e054      	b.n	80042c0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	089b      	lsrs	r3, r3, #2
 8004224:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00e      	beq.n	800424c <osThreadNew+0xd4>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	2b5b      	cmp	r3, #91	; 0x5b
 8004234:	d90a      	bls.n	800424c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800423a:	2b00      	cmp	r3, #0
 800423c:	d006      	beq.n	800424c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d002      	beq.n	800424c <osThreadNew+0xd4>
        mem = 1;
 8004246:	2301      	movs	r3, #1
 8004248:	62bb      	str	r3, [r7, #40]	; 0x28
 800424a:	e010      	b.n	800426e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10c      	bne.n	800426e <osThreadNew+0xf6>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d108      	bne.n	800426e <osThreadNew+0xf6>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d104      	bne.n	800426e <osThreadNew+0xf6>
          mem = 0;
 8004264:	2300      	movs	r3, #0
 8004266:	62bb      	str	r3, [r7, #40]	; 0x28
 8004268:	e001      	b.n	800426e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800426a:	2300      	movs	r3, #0
 800426c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004270:	2b01      	cmp	r3, #1
 8004272:	d110      	bne.n	8004296 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800427c:	9202      	str	r2, [sp, #8]
 800427e:	9301      	str	r3, [sp, #4]
 8004280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004288:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 fe08 	bl	8004ea0 <xTaskCreateStatic>
 8004290:	4603      	mov	r3, r0
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	e013      	b.n	80042be <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004298:	2b00      	cmp	r3, #0
 800429a:	d110      	bne.n	80042be <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429e:	b29a      	uxth	r2, r3
 80042a0:	f107 0314 	add.w	r3, r7, #20
 80042a4:	9301      	str	r3, [sp, #4]
 80042a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 fe4f 	bl	8004f52 <xTaskCreate>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d001      	beq.n	80042be <osThreadNew+0x146>
          hTask = NULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80042be:	697b      	ldr	r3, [r7, #20]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3738      	adds	r7, #56	; 0x38
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	200000bc 	.word	0x200000bc

080042cc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042d4:	f3ef 8305 	mrs	r3, IPSR
 80042d8:	613b      	str	r3, [r7, #16]
  return(result);
 80042da:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10f      	bne.n	8004300 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042e0:	f3ef 8310 	mrs	r3, PRIMASK
 80042e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d109      	bne.n	8004300 <osDelay+0x34>
 80042ec:	4b0d      	ldr	r3, [pc, #52]	; (8004324 <osDelay+0x58>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d109      	bne.n	8004308 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80042f4:	f3ef 8311 	mrs	r3, BASEPRI
 80042f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <osDelay+0x3c>
    stat = osErrorISR;
 8004300:	f06f 0305 	mvn.w	r3, #5
 8004304:	617b      	str	r3, [r7, #20]
 8004306:	e007      	b.n	8004318 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004308:	2300      	movs	r3, #0
 800430a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 ff58 	bl	80051c8 <vTaskDelay>
    }
  }

  return (stat);
 8004318:	697b      	ldr	r3, [r7, #20]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	200000bc 	.word	0x200000bc

08004328 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4a07      	ldr	r2, [pc, #28]	; (8004354 <vApplicationGetIdleTaskMemory+0x2c>)
 8004338:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	4a06      	ldr	r2, [pc, #24]	; (8004358 <vApplicationGetIdleTaskMemory+0x30>)
 800433e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2280      	movs	r2, #128	; 0x80
 8004344:	601a      	str	r2, [r3, #0]
}
 8004346:	bf00      	nop
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	200000c0 	.word	0x200000c0
 8004358:	2000011c 	.word	0x2000011c

0800435c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4a07      	ldr	r2, [pc, #28]	; (8004388 <vApplicationGetTimerTaskMemory+0x2c>)
 800436c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	4a06      	ldr	r2, [pc, #24]	; (800438c <vApplicationGetTimerTaskMemory+0x30>)
 8004372:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800437a:	601a      	str	r2, [r3, #0]
}
 800437c:	bf00      	nop
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	2000031c 	.word	0x2000031c
 800438c:	20000378 	.word	0x20000378

08004390 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f103 0208 	add.w	r2, r3, #8
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f04f 32ff 	mov.w	r2, #4294967295
 80043a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f103 0208 	add.w	r2, r3, #8
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f103 0208 	add.w	r2, r3, #8
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043ea:	b480      	push	{r7}
 80043ec:	b085      	sub	sp, #20
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	601a      	str	r2, [r3, #0]
}
 8004426:	bf00      	nop
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004432:	b480      	push	{r7}
 8004434:	b085      	sub	sp, #20
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004448:	d103      	bne.n	8004452 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	e00c      	b.n	800446c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	3308      	adds	r3, #8
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	e002      	b.n	8004460 <vListInsert+0x2e>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	429a      	cmp	r2, r3
 800446a:	d2f6      	bcs.n	800445a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	601a      	str	r2, [r3, #0]
}
 8004498:	bf00      	nop
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6892      	ldr	r2, [r2, #8]
 80044ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6852      	ldr	r2, [r2, #4]
 80044c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d103      	bne.n	80044d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	1e5a      	subs	r2, r3, #1
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d109      	bne.n	8004520 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800450c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	60bb      	str	r3, [r7, #8]
 800451e:	e7fe      	b.n	800451e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004520:	f001 ffd4 	bl	80064cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452c:	68f9      	ldr	r1, [r7, #12]
 800452e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004530:	fb01 f303 	mul.w	r3, r1, r3
 8004534:	441a      	add	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004550:	3b01      	subs	r3, #1
 8004552:	68f9      	ldr	r1, [r7, #12]
 8004554:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004556:	fb01 f303 	mul.w	r3, r1, r3
 800455a:	441a      	add	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	22ff      	movs	r2, #255	; 0xff
 8004564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	22ff      	movs	r2, #255	; 0xff
 800456c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d114      	bne.n	80045a0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d01a      	beq.n	80045b4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3310      	adds	r3, #16
 8004582:	4618      	mov	r0, r3
 8004584:	f001 f8da 	bl	800573c <xTaskRemoveFromEventList>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d012      	beq.n	80045b4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800458e:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <xQueueGenericReset+0xcc>)
 8004590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	e009      	b.n	80045b4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	3310      	adds	r3, #16
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff fef3 	bl	8004390 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	3324      	adds	r3, #36	; 0x24
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff feee 	bl	8004390 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045b4:	f001 ffb8 	bl	8006528 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045b8:	2301      	movs	r3, #1
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	e000ed04 	.word	0xe000ed04

080045c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08e      	sub	sp, #56	; 0x38
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d109      	bne.n	80045f0 <xQueueGenericCreateStatic+0x28>
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80045ee:	e7fe      	b.n	80045ee <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d109      	bne.n	800460a <xQueueGenericCreateStatic+0x42>
 80045f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	627b      	str	r3, [r7, #36]	; 0x24
 8004608:	e7fe      	b.n	8004608 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <xQueueGenericCreateStatic+0x4e>
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <xQueueGenericCreateStatic+0x52>
 8004616:	2301      	movs	r3, #1
 8004618:	e000      	b.n	800461c <xQueueGenericCreateStatic+0x54>
 800461a:	2300      	movs	r3, #0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d109      	bne.n	8004634 <xQueueGenericCreateStatic+0x6c>
 8004620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	623b      	str	r3, [r7, #32]
 8004632:	e7fe      	b.n	8004632 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d102      	bne.n	8004640 <xQueueGenericCreateStatic+0x78>
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <xQueueGenericCreateStatic+0x7c>
 8004640:	2301      	movs	r3, #1
 8004642:	e000      	b.n	8004646 <xQueueGenericCreateStatic+0x7e>
 8004644:	2300      	movs	r3, #0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d109      	bne.n	800465e <xQueueGenericCreateStatic+0x96>
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	61fb      	str	r3, [r7, #28]
 800465c:	e7fe      	b.n	800465c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800465e:	2350      	movs	r3, #80	; 0x50
 8004660:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2b50      	cmp	r3, #80	; 0x50
 8004666:	d009      	beq.n	800467c <xQueueGenericCreateStatic+0xb4>
 8004668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	61bb      	str	r3, [r7, #24]
 800467a:	e7fe      	b.n	800467a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00d      	beq.n	80046a2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800468e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	4613      	mov	r3, r2
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 f805 	bl	80046ac <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80046a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3730      	adds	r7, #48	; 0x30
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d103      	bne.n	80046c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	e002      	b.n	80046ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80046da:	2101      	movs	r1, #1
 80046dc:	69b8      	ldr	r0, [r7, #24]
 80046de:	f7ff ff0b 	bl	80044f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	78fa      	ldrb	r2, [r7, #3]
 80046e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80046ea:	bf00      	nop
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
	...

080046f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08e      	sub	sp, #56	; 0x38
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
 8004700:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004702:	2300      	movs	r3, #0
 8004704:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800470a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470c:	2b00      	cmp	r3, #0
 800470e:	d109      	bne.n	8004724 <xQueueGenericSend+0x30>
 8004710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	62bb      	str	r3, [r7, #40]	; 0x28
 8004722:	e7fe      	b.n	8004722 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d103      	bne.n	8004732 <xQueueGenericSend+0x3e>
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <xQueueGenericSend+0x42>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <xQueueGenericSend+0x44>
 8004736:	2300      	movs	r3, #0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d109      	bne.n	8004750 <xQueueGenericSend+0x5c>
 800473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
 800474e:	e7fe      	b.n	800474e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	2b02      	cmp	r3, #2
 8004754:	d103      	bne.n	800475e <xQueueGenericSend+0x6a>
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <xQueueGenericSend+0x6e>
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <xQueueGenericSend+0x70>
 8004762:	2300      	movs	r3, #0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d109      	bne.n	800477c <xQueueGenericSend+0x88>
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	623b      	str	r3, [r7, #32]
 800477a:	e7fe      	b.n	800477a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800477c:	f001 f99a 	bl	8005ab4 <xTaskGetSchedulerState>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d102      	bne.n	800478c <xQueueGenericSend+0x98>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <xQueueGenericSend+0x9c>
 800478c:	2301      	movs	r3, #1
 800478e:	e000      	b.n	8004792 <xQueueGenericSend+0x9e>
 8004790:	2300      	movs	r3, #0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d109      	bne.n	80047aa <xQueueGenericSend+0xb6>
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	61fb      	str	r3, [r7, #28]
 80047a8:	e7fe      	b.n	80047a8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047aa:	f001 fe8f 	bl	80064cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d302      	bcc.n	80047c0 <xQueueGenericSend+0xcc>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d129      	bne.n	8004814 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	68b9      	ldr	r1, [r7, #8]
 80047c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047c6:	f000 f9ff 	bl	8004bc8 <prvCopyDataToQueue>
 80047ca:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d010      	beq.n	80047f6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d6:	3324      	adds	r3, #36	; 0x24
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 ffaf 	bl	800573c <xTaskRemoveFromEventList>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d013      	beq.n	800480c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80047e4:	4b3f      	ldr	r3, [pc, #252]	; (80048e4 <xQueueGenericSend+0x1f0>)
 80047e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	f3bf 8f6f 	isb	sy
 80047f4:	e00a      	b.n	800480c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80047f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d007      	beq.n	800480c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80047fc:	4b39      	ldr	r3, [pc, #228]	; (80048e4 <xQueueGenericSend+0x1f0>)
 80047fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800480c:	f001 fe8c 	bl	8006528 <vPortExitCritical>
				return pdPASS;
 8004810:	2301      	movs	r3, #1
 8004812:	e063      	b.n	80048dc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d103      	bne.n	8004822 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800481a:	f001 fe85 	bl	8006528 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800481e:	2300      	movs	r3, #0
 8004820:	e05c      	b.n	80048dc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004824:	2b00      	cmp	r3, #0
 8004826:	d106      	bne.n	8004836 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004828:	f107 0314 	add.w	r3, r7, #20
 800482c:	4618      	mov	r0, r3
 800482e:	f000 ffe7 	bl	8005800 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004832:	2301      	movs	r3, #1
 8004834:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004836:	f001 fe77 	bl	8006528 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800483a:	f000 fd5d 	bl	80052f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800483e:	f001 fe45 	bl	80064cc <vPortEnterCritical>
 8004842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004844:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004848:	b25b      	sxtb	r3, r3
 800484a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484e:	d103      	bne.n	8004858 <xQueueGenericSend+0x164>
 8004850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800485e:	b25b      	sxtb	r3, r3
 8004860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004864:	d103      	bne.n	800486e <xQueueGenericSend+0x17a>
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800486e:	f001 fe5b 	bl	8006528 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004872:	1d3a      	adds	r2, r7, #4
 8004874:	f107 0314 	add.w	r3, r7, #20
 8004878:	4611      	mov	r1, r2
 800487a:	4618      	mov	r0, r3
 800487c:	f000 ffd6 	bl	800582c <xTaskCheckForTimeOut>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d124      	bne.n	80048d0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004886:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004888:	f000 fa96 	bl	8004db8 <prvIsQueueFull>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d018      	beq.n	80048c4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	3310      	adds	r3, #16
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	4611      	mov	r1, r2
 800489a:	4618      	mov	r0, r3
 800489c:	f000 ff00 	bl	80056a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80048a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048a2:	f000 fa21 	bl	8004ce8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80048a6:	f000 fd35 	bl	8005314 <xTaskResumeAll>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f47f af7c 	bne.w	80047aa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80048b2:	4b0c      	ldr	r3, [pc, #48]	; (80048e4 <xQueueGenericSend+0x1f0>)
 80048b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	e772      	b.n	80047aa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80048c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048c6:	f000 fa0f 	bl	8004ce8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048ca:	f000 fd23 	bl	8005314 <xTaskResumeAll>
 80048ce:	e76c      	b.n	80047aa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80048d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048d2:	f000 fa09 	bl	8004ce8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048d6:	f000 fd1d 	bl	8005314 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048da:	2300      	movs	r3, #0
		}
	}
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3738      	adds	r7, #56	; 0x38
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	e000ed04 	.word	0xe000ed04

080048e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08e      	sub	sp, #56	; 0x38
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80048fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d109      	bne.n	8004914 <xQueueGenericSendFromISR+0x2c>
 8004900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	627b      	str	r3, [r7, #36]	; 0x24
 8004912:	e7fe      	b.n	8004912 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d103      	bne.n	8004922 <xQueueGenericSendFromISR+0x3a>
 800491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <xQueueGenericSendFromISR+0x3e>
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <xQueueGenericSendFromISR+0x40>
 8004926:	2300      	movs	r3, #0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d109      	bne.n	8004940 <xQueueGenericSendFromISR+0x58>
 800492c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004930:	f383 8811 	msr	BASEPRI, r3
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	623b      	str	r3, [r7, #32]
 800493e:	e7fe      	b.n	800493e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d103      	bne.n	800494e <xQueueGenericSendFromISR+0x66>
 8004946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <xQueueGenericSendFromISR+0x6a>
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <xQueueGenericSendFromISR+0x6c>
 8004952:	2300      	movs	r3, #0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d109      	bne.n	800496c <xQueueGenericSendFromISR+0x84>
 8004958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495c:	f383 8811 	msr	BASEPRI, r3
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	61fb      	str	r3, [r7, #28]
 800496a:	e7fe      	b.n	800496a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800496c:	f001 fe8a 	bl	8006684 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004970:	f3ef 8211 	mrs	r2, BASEPRI
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	61ba      	str	r2, [r7, #24]
 8004986:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004988:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800498a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800498c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004994:	429a      	cmp	r2, r3
 8004996:	d302      	bcc.n	800499e <xQueueGenericSendFromISR+0xb6>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d12c      	bne.n	80049f8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800499e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	68b9      	ldr	r1, [r7, #8]
 80049ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049ae:	f000 f90b 	bl	8004bc8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049b2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80049b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ba:	d112      	bne.n	80049e2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d016      	beq.n	80049f2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c6:	3324      	adds	r3, #36	; 0x24
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 feb7 	bl	800573c <xTaskRemoveFromEventList>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00e      	beq.n	80049f2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00b      	beq.n	80049f2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	e007      	b.n	80049f2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80049e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80049e6:	3301      	adds	r3, #1
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	b25a      	sxtb	r2, r3
 80049ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80049f2:	2301      	movs	r3, #1
 80049f4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80049f6:	e001      	b.n	80049fc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80049f8:	2300      	movs	r3, #0
 80049fa:	637b      	str	r3, [r7, #52]	; 0x34
 80049fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fe:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3738      	adds	r7, #56	; 0x38
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08c      	sub	sp, #48	; 0x30
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d109      	bne.n	8004a3e <xQueueReceive+0x2e>
	__asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	623b      	str	r3, [r7, #32]
 8004a3c:	e7fe      	b.n	8004a3c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d103      	bne.n	8004a4c <xQueueReceive+0x3c>
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <xQueueReceive+0x40>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e000      	b.n	8004a52 <xQueueReceive+0x42>
 8004a50:	2300      	movs	r3, #0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d109      	bne.n	8004a6a <xQueueReceive+0x5a>
 8004a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5a:	f383 8811 	msr	BASEPRI, r3
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	61fb      	str	r3, [r7, #28]
 8004a68:	e7fe      	b.n	8004a68 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a6a:	f001 f823 	bl	8005ab4 <xTaskGetSchedulerState>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d102      	bne.n	8004a7a <xQueueReceive+0x6a>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <xQueueReceive+0x6e>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <xQueueReceive+0x70>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d109      	bne.n	8004a98 <xQueueReceive+0x88>
 8004a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	61bb      	str	r3, [r7, #24]
 8004a96:	e7fe      	b.n	8004a96 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a98:	f001 fd18 	bl	80064cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01f      	beq.n	8004ae8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004aa8:	68b9      	ldr	r1, [r7, #8]
 8004aaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aac:	f000 f8f6 	bl	8004c9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	1e5a      	subs	r2, r3, #1
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00f      	beq.n	8004ae0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac2:	3310      	adds	r3, #16
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fe39 	bl	800573c <xTaskRemoveFromEventList>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d007      	beq.n	8004ae0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ad0:	4b3c      	ldr	r3, [pc, #240]	; (8004bc4 <xQueueReceive+0x1b4>)
 8004ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ae0:	f001 fd22 	bl	8006528 <vPortExitCritical>
				return pdPASS;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e069      	b.n	8004bbc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d103      	bne.n	8004af6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004aee:	f001 fd1b 	bl	8006528 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004af2:	2300      	movs	r3, #0
 8004af4:	e062      	b.n	8004bbc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d106      	bne.n	8004b0a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004afc:	f107 0310 	add.w	r3, r7, #16
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fe7d 	bl	8005800 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b06:	2301      	movs	r3, #1
 8004b08:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b0a:	f001 fd0d 	bl	8006528 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b0e:	f000 fbf3 	bl	80052f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b12:	f001 fcdb 	bl	80064cc <vPortEnterCritical>
 8004b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b1c:	b25b      	sxtb	r3, r3
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b22:	d103      	bne.n	8004b2c <xQueueReceive+0x11c>
 8004b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b32:	b25b      	sxtb	r3, r3
 8004b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b38:	d103      	bne.n	8004b42 <xQueueReceive+0x132>
 8004b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b42:	f001 fcf1 	bl	8006528 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b46:	1d3a      	adds	r2, r7, #4
 8004b48:	f107 0310 	add.w	r3, r7, #16
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fe6c 	bl	800582c <xTaskCheckForTimeOut>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d123      	bne.n	8004ba2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b5c:	f000 f916 	bl	8004d8c <prvIsQueueEmpty>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d017      	beq.n	8004b96 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	3324      	adds	r3, #36	; 0x24
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	4611      	mov	r1, r2
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fd96 	bl	80056a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b76:	f000 f8b7 	bl	8004ce8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b7a:	f000 fbcb 	bl	8005314 <xTaskResumeAll>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d189      	bne.n	8004a98 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004b84:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <xQueueReceive+0x1b4>)
 8004b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	e780      	b.n	8004a98 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b98:	f000 f8a6 	bl	8004ce8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b9c:	f000 fbba 	bl	8005314 <xTaskResumeAll>
 8004ba0:	e77a      	b.n	8004a98 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ba2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ba4:	f000 f8a0 	bl	8004ce8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ba8:	f000 fbb4 	bl	8005314 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bae:	f000 f8ed 	bl	8004d8c <prvIsQueueEmpty>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f43f af6f 	beq.w	8004a98 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004bba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3730      	adds	r7, #48	; 0x30
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	e000ed04 	.word	0xe000ed04

08004bc8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10d      	bne.n	8004c02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d14d      	bne.n	8004c8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 ff7c 	bl	8005af0 <xTaskPriorityDisinherit>
 8004bf8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	605a      	str	r2, [r3, #4]
 8004c00:	e043      	b.n	8004c8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d119      	bne.n	8004c3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6898      	ldr	r0, [r3, #8]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	461a      	mov	r2, r3
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	f001 ff74 	bl	8006b00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c20:	441a      	add	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d32b      	bcc.n	8004c8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	609a      	str	r2, [r3, #8]
 8004c3a:	e026      	b.n	8004c8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	68d8      	ldr	r0, [r3, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	461a      	mov	r2, r3
 8004c46:	68b9      	ldr	r1, [r7, #8]
 8004c48:	f001 ff5a 	bl	8006b00 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c54:	425b      	negs	r3, r3
 8004c56:	441a      	add	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d207      	bcs.n	8004c78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	425b      	negs	r3, r3
 8004c72:	441a      	add	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d105      	bne.n	8004c8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c92:	697b      	ldr	r3, [r7, #20]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d018      	beq.n	8004ce0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	441a      	add	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d303      	bcc.n	8004cd0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68d9      	ldr	r1, [r3, #12]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd8:	461a      	mov	r2, r3
 8004cda:	6838      	ldr	r0, [r7, #0]
 8004cdc:	f001 ff10 	bl	8006b00 <memcpy>
	}
}
 8004ce0:	bf00      	nop
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004cf0:	f001 fbec 	bl	80064cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cfa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cfc:	e011      	b.n	8004d22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d012      	beq.n	8004d2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	3324      	adds	r3, #36	; 0x24
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fd16 	bl	800573c <xTaskRemoveFromEventList>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d16:	f000 fde9 	bl	80058ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	dce9      	bgt.n	8004cfe <prvUnlockQueue+0x16>
 8004d2a:	e000      	b.n	8004d2e <prvUnlockQueue+0x46>
					break;
 8004d2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	22ff      	movs	r2, #255	; 0xff
 8004d32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d36:	f001 fbf7 	bl	8006528 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d3a:	f001 fbc7 	bl	80064cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d46:	e011      	b.n	8004d6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d012      	beq.n	8004d76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3310      	adds	r3, #16
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 fcf1 	bl	800573c <xTaskRemoveFromEventList>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d60:	f000 fdc4 	bl	80058ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d64:	7bbb      	ldrb	r3, [r7, #14]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	dce9      	bgt.n	8004d48 <prvUnlockQueue+0x60>
 8004d74:	e000      	b.n	8004d78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	22ff      	movs	r2, #255	; 0xff
 8004d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d80:	f001 fbd2 	bl	8006528 <vPortExitCritical>
}
 8004d84:	bf00      	nop
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d94:	f001 fb9a 	bl	80064cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d102      	bne.n	8004da6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004da0:	2301      	movs	r3, #1
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	e001      	b.n	8004daa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004daa:	f001 fbbd 	bl	8006528 <vPortExitCritical>

	return xReturn;
 8004dae:	68fb      	ldr	r3, [r7, #12]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004dc0:	f001 fb84 	bl	80064cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d102      	bne.n	8004dd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	e001      	b.n	8004dda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dda:	f001 fba5 	bl	8006528 <vPortExitCritical>

	return xReturn;
 8004dde:	68fb      	ldr	r3, [r7, #12]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	e014      	b.n	8004e22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004df8:	4a0e      	ldr	r2, [pc, #56]	; (8004e34 <vQueueAddToRegistry+0x4c>)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10b      	bne.n	8004e1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e04:	490b      	ldr	r1, [pc, #44]	; (8004e34 <vQueueAddToRegistry+0x4c>)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e0e:	4a09      	ldr	r2, [pc, #36]	; (8004e34 <vQueueAddToRegistry+0x4c>)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	4413      	add	r3, r2
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e1a:	e005      	b.n	8004e28 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b07      	cmp	r3, #7
 8004e26:	d9e7      	bls.n	8004df8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e28:	bf00      	nop
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	20001c0c 	.word	0x20001c0c

08004e38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e48:	f001 fb40 	bl	80064cc <vPortEnterCritical>
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e52:	b25b      	sxtb	r3, r3
 8004e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e58:	d103      	bne.n	8004e62 <vQueueWaitForMessageRestricted+0x2a>
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e68:	b25b      	sxtb	r3, r3
 8004e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6e:	d103      	bne.n	8004e78 <vQueueWaitForMessageRestricted+0x40>
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e78:	f001 fb56 	bl	8006528 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d106      	bne.n	8004e92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	3324      	adds	r3, #36	; 0x24
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	68b9      	ldr	r1, [r7, #8]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 fc2b 	bl	80056e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004e92:	6978      	ldr	r0, [r7, #20]
 8004e94:	f7ff ff28 	bl	8004ce8 <prvUnlockQueue>
	}
 8004e98:	bf00      	nop
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08e      	sub	sp, #56	; 0x38
 8004ea4:	af04      	add	r7, sp, #16
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
 8004eac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d109      	bne.n	8004ec8 <xTaskCreateStatic+0x28>
 8004eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	623b      	str	r3, [r7, #32]
 8004ec6:	e7fe      	b.n	8004ec6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d109      	bne.n	8004ee2 <xTaskCreateStatic+0x42>
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	61fb      	str	r3, [r7, #28]
 8004ee0:	e7fe      	b.n	8004ee0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ee2:	235c      	movs	r3, #92	; 0x5c
 8004ee4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	2b5c      	cmp	r3, #92	; 0x5c
 8004eea:	d009      	beq.n	8004f00 <xTaskCreateStatic+0x60>
 8004eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef0:	f383 8811 	msr	BASEPRI, r3
 8004ef4:	f3bf 8f6f 	isb	sy
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	61bb      	str	r3, [r7, #24]
 8004efe:	e7fe      	b.n	8004efe <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d01e      	beq.n	8004f44 <xTaskCreateStatic+0xa4>
 8004f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d01b      	beq.n	8004f44 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	2202      	movs	r2, #2
 8004f1a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f1e:	2300      	movs	r3, #0
 8004f20:	9303      	str	r3, [sp, #12]
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	9302      	str	r3, [sp, #8]
 8004f26:	f107 0314 	add.w	r3, r7, #20
 8004f2a:	9301      	str	r3, [sp, #4]
 8004f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	68b9      	ldr	r1, [r7, #8]
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 f850 	bl	8004fdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f3e:	f000 f8d3 	bl	80050e8 <prvAddNewTaskToReadyList>
 8004f42:	e001      	b.n	8004f48 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004f44:	2300      	movs	r3, #0
 8004f46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f48:	697b      	ldr	r3, [r7, #20]
	}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3728      	adds	r7, #40	; 0x28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b08c      	sub	sp, #48	; 0x30
 8004f56:	af04      	add	r7, sp, #16
 8004f58:	60f8      	str	r0, [r7, #12]
 8004f5a:	60b9      	str	r1, [r7, #8]
 8004f5c:	603b      	str	r3, [r7, #0]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f62:	88fb      	ldrh	r3, [r7, #6]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4618      	mov	r0, r3
 8004f68:	f001 fbca 	bl	8006700 <pvPortMalloc>
 8004f6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00e      	beq.n	8004f92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004f74:	205c      	movs	r0, #92	; 0x5c
 8004f76:	f001 fbc3 	bl	8006700 <pvPortMalloc>
 8004f7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	631a      	str	r2, [r3, #48]	; 0x30
 8004f88:	e005      	b.n	8004f96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f8a:	6978      	ldr	r0, [r7, #20]
 8004f8c:	f001 fc7a 	bl	8006884 <vPortFree>
 8004f90:	e001      	b.n	8004f96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f92:	2300      	movs	r3, #0
 8004f94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d017      	beq.n	8004fcc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004fa4:	88fa      	ldrh	r2, [r7, #6]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	9303      	str	r3, [sp, #12]
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	9302      	str	r3, [sp, #8]
 8004fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb0:	9301      	str	r3, [sp, #4]
 8004fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68b9      	ldr	r1, [r7, #8]
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f000 f80e 	bl	8004fdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fc0:	69f8      	ldr	r0, [r7, #28]
 8004fc2:	f000 f891 	bl	80050e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	61bb      	str	r3, [r7, #24]
 8004fca:	e002      	b.n	8004fd2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004fd2:	69bb      	ldr	r3, [r7, #24]
	}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3720      	adds	r7, #32
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b088      	sub	sp, #32
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	21a5      	movs	r1, #165	; 0xa5
 8004ff6:	f001 fd8e 	bl	8006b16 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005004:	3b01      	subs	r3, #1
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	f023 0307 	bic.w	r3, r3, #7
 8005012:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	2b00      	cmp	r3, #0
 800501c:	d009      	beq.n	8005032 <prvInitialiseNewTask+0x56>
 800501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	e7fe      	b.n	8005030 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005032:	2300      	movs	r3, #0
 8005034:	61fb      	str	r3, [r7, #28]
 8005036:	e012      	b.n	800505e <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	4413      	add	r3, r2
 800503e:	7819      	ldrb	r1, [r3, #0]
 8005040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	4413      	add	r3, r2
 8005046:	3334      	adds	r3, #52	; 0x34
 8005048:	460a      	mov	r2, r1
 800504a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	4413      	add	r3, r2
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d006      	beq.n	8005066 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	3301      	adds	r3, #1
 800505c:	61fb      	str	r3, [r7, #28]
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	2b0f      	cmp	r3, #15
 8005062:	d9e9      	bls.n	8005038 <prvInitialiseNewTask+0x5c>
 8005064:	e000      	b.n	8005068 <prvInitialiseNewTask+0x8c>
		{
			break;
 8005066:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	2b37      	cmp	r3, #55	; 0x37
 8005074:	d901      	bls.n	800507a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005076:	2337      	movs	r3, #55	; 0x37
 8005078:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800507e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005084:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005088:	2200      	movs	r2, #0
 800508a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508e:	3304      	adds	r3, #4
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff f99d 	bl	80043d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	3318      	adds	r3, #24
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff f998 	bl	80043d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80050a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80050b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050b4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80050b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b8:	2200      	movs	r2, #0
 80050ba:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	68f9      	ldr	r1, [r7, #12]
 80050c8:	69b8      	ldr	r0, [r7, #24]
 80050ca:	f001 f8db 	bl	8006284 <pxPortInitialiseStack>
 80050ce:	4602      	mov	r2, r0
 80050d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80050d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d002      	beq.n	80050e0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050e0:	bf00      	nop
 80050e2:	3720      	adds	r7, #32
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050f0:	f001 f9ec 	bl	80064cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050f4:	4b2d      	ldr	r3, [pc, #180]	; (80051ac <prvAddNewTaskToReadyList+0xc4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3301      	adds	r3, #1
 80050fa:	4a2c      	ldr	r2, [pc, #176]	; (80051ac <prvAddNewTaskToReadyList+0xc4>)
 80050fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050fe:	4b2c      	ldr	r3, [pc, #176]	; (80051b0 <prvAddNewTaskToReadyList+0xc8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d109      	bne.n	800511a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005106:	4a2a      	ldr	r2, [pc, #168]	; (80051b0 <prvAddNewTaskToReadyList+0xc8>)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800510c:	4b27      	ldr	r3, [pc, #156]	; (80051ac <prvAddNewTaskToReadyList+0xc4>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d110      	bne.n	8005136 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005114:	f000 fc0e 	bl	8005934 <prvInitialiseTaskLists>
 8005118:	e00d      	b.n	8005136 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800511a:	4b26      	ldr	r3, [pc, #152]	; (80051b4 <prvAddNewTaskToReadyList+0xcc>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d109      	bne.n	8005136 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005122:	4b23      	ldr	r3, [pc, #140]	; (80051b0 <prvAddNewTaskToReadyList+0xc8>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512c:	429a      	cmp	r2, r3
 800512e:	d802      	bhi.n	8005136 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005130:	4a1f      	ldr	r2, [pc, #124]	; (80051b0 <prvAddNewTaskToReadyList+0xc8>)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005136:	4b20      	ldr	r3, [pc, #128]	; (80051b8 <prvAddNewTaskToReadyList+0xd0>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	3301      	adds	r3, #1
 800513c:	4a1e      	ldr	r2, [pc, #120]	; (80051b8 <prvAddNewTaskToReadyList+0xd0>)
 800513e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005140:	4b1d      	ldr	r3, [pc, #116]	; (80051b8 <prvAddNewTaskToReadyList+0xd0>)
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800514c:	4b1b      	ldr	r3, [pc, #108]	; (80051bc <prvAddNewTaskToReadyList+0xd4>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d903      	bls.n	800515c <prvAddNewTaskToReadyList+0x74>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	4a18      	ldr	r2, [pc, #96]	; (80051bc <prvAddNewTaskToReadyList+0xd4>)
 800515a:	6013      	str	r3, [r2, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005160:	4613      	mov	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4a15      	ldr	r2, [pc, #84]	; (80051c0 <prvAddNewTaskToReadyList+0xd8>)
 800516a:	441a      	add	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3304      	adds	r3, #4
 8005170:	4619      	mov	r1, r3
 8005172:	4610      	mov	r0, r2
 8005174:	f7ff f939 	bl	80043ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005178:	f001 f9d6 	bl	8006528 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800517c:	4b0d      	ldr	r3, [pc, #52]	; (80051b4 <prvAddNewTaskToReadyList+0xcc>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00e      	beq.n	80051a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005184:	4b0a      	ldr	r3, [pc, #40]	; (80051b0 <prvAddNewTaskToReadyList+0xc8>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518e:	429a      	cmp	r2, r3
 8005190:	d207      	bcs.n	80051a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005192:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <prvAddNewTaskToReadyList+0xdc>)
 8005194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051a2:	bf00      	nop
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20000c4c 	.word	0x20000c4c
 80051b0:	20000778 	.word	0x20000778
 80051b4:	20000c58 	.word	0x20000c58
 80051b8:	20000c68 	.word	0x20000c68
 80051bc:	20000c54 	.word	0x20000c54
 80051c0:	2000077c 	.word	0x2000077c
 80051c4:	e000ed04 	.word	0xe000ed04

080051c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d016      	beq.n	8005208 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80051da:	4b13      	ldr	r3, [pc, #76]	; (8005228 <vTaskDelay+0x60>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d009      	beq.n	80051f6 <vTaskDelay+0x2e>
 80051e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e6:	f383 8811 	msr	BASEPRI, r3
 80051ea:	f3bf 8f6f 	isb	sy
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	60bb      	str	r3, [r7, #8]
 80051f4:	e7fe      	b.n	80051f4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80051f6:	f000 f87f 	bl	80052f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051fa:	2100      	movs	r1, #0
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 fce3 	bl	8005bc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005202:	f000 f887 	bl	8005314 <xTaskResumeAll>
 8005206:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d107      	bne.n	800521e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800520e:	4b07      	ldr	r3, [pc, #28]	; (800522c <vTaskDelay+0x64>)
 8005210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800521e:	bf00      	nop
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	20000c74 	.word	0x20000c74
 800522c:	e000ed04 	.word	0xe000ed04

08005230 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b08a      	sub	sp, #40	; 0x28
 8005234:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005236:	2300      	movs	r3, #0
 8005238:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800523a:	2300      	movs	r3, #0
 800523c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800523e:	463a      	mov	r2, r7
 8005240:	1d39      	adds	r1, r7, #4
 8005242:	f107 0308 	add.w	r3, r7, #8
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff f86e 	bl	8004328 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800524c:	6839      	ldr	r1, [r7, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	9202      	str	r2, [sp, #8]
 8005254:	9301      	str	r3, [sp, #4]
 8005256:	2300      	movs	r3, #0
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	2300      	movs	r3, #0
 800525c:	460a      	mov	r2, r1
 800525e:	4920      	ldr	r1, [pc, #128]	; (80052e0 <vTaskStartScheduler+0xb0>)
 8005260:	4820      	ldr	r0, [pc, #128]	; (80052e4 <vTaskStartScheduler+0xb4>)
 8005262:	f7ff fe1d 	bl	8004ea0 <xTaskCreateStatic>
 8005266:	4602      	mov	r2, r0
 8005268:	4b1f      	ldr	r3, [pc, #124]	; (80052e8 <vTaskStartScheduler+0xb8>)
 800526a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800526c:	4b1e      	ldr	r3, [pc, #120]	; (80052e8 <vTaskStartScheduler+0xb8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005274:	2301      	movs	r3, #1
 8005276:	617b      	str	r3, [r7, #20]
 8005278:	e001      	b.n	800527e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d102      	bne.n	800528a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005284:	f000 fcf4 	bl	8005c70 <xTimerCreateTimerTask>
 8005288:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d115      	bne.n	80052bc <vTaskStartScheduler+0x8c>
 8005290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80052a2:	4b12      	ldr	r3, [pc, #72]	; (80052ec <vTaskStartScheduler+0xbc>)
 80052a4:	f04f 32ff 	mov.w	r2, #4294967295
 80052a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80052aa:	4b11      	ldr	r3, [pc, #68]	; (80052f0 <vTaskStartScheduler+0xc0>)
 80052ac:	2201      	movs	r2, #1
 80052ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80052b0:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <vTaskStartScheduler+0xc4>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80052b6:	f001 f86b 	bl	8006390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80052ba:	e00d      	b.n	80052d8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c2:	d109      	bne.n	80052d8 <vTaskStartScheduler+0xa8>
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	e7fe      	b.n	80052d6 <vTaskStartScheduler+0xa6>
}
 80052d8:	bf00      	nop
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	080073cc 	.word	0x080073cc
 80052e4:	08005905 	.word	0x08005905
 80052e8:	20000c70 	.word	0x20000c70
 80052ec:	20000c6c 	.word	0x20000c6c
 80052f0:	20000c58 	.word	0x20000c58
 80052f4:	20000c50 	.word	0x20000c50

080052f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80052fc:	4b04      	ldr	r3, [pc, #16]	; (8005310 <vTaskSuspendAll+0x18>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3301      	adds	r3, #1
 8005302:	4a03      	ldr	r2, [pc, #12]	; (8005310 <vTaskSuspendAll+0x18>)
 8005304:	6013      	str	r3, [r2, #0]
}
 8005306:	bf00      	nop
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	20000c74 	.word	0x20000c74

08005314 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800531a:	2300      	movs	r3, #0
 800531c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800531e:	2300      	movs	r3, #0
 8005320:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005322:	4b41      	ldr	r3, [pc, #260]	; (8005428 <xTaskResumeAll+0x114>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d109      	bne.n	800533e <xTaskResumeAll+0x2a>
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	603b      	str	r3, [r7, #0]
 800533c:	e7fe      	b.n	800533c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800533e:	f001 f8c5 	bl	80064cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005342:	4b39      	ldr	r3, [pc, #228]	; (8005428 <xTaskResumeAll+0x114>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	3b01      	subs	r3, #1
 8005348:	4a37      	ldr	r2, [pc, #220]	; (8005428 <xTaskResumeAll+0x114>)
 800534a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800534c:	4b36      	ldr	r3, [pc, #216]	; (8005428 <xTaskResumeAll+0x114>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d162      	bne.n	800541a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005354:	4b35      	ldr	r3, [pc, #212]	; (800542c <xTaskResumeAll+0x118>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d05e      	beq.n	800541a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800535c:	e02f      	b.n	80053be <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800535e:	4b34      	ldr	r3, [pc, #208]	; (8005430 <xTaskResumeAll+0x11c>)
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	3318      	adds	r3, #24
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff f89a 	bl	80044a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3304      	adds	r3, #4
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff f895 	bl	80044a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800537e:	4b2d      	ldr	r3, [pc, #180]	; (8005434 <xTaskResumeAll+0x120>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d903      	bls.n	800538e <xTaskResumeAll+0x7a>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538a:	4a2a      	ldr	r2, [pc, #168]	; (8005434 <xTaskResumeAll+0x120>)
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005392:	4613      	mov	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4a27      	ldr	r2, [pc, #156]	; (8005438 <xTaskResumeAll+0x124>)
 800539c:	441a      	add	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3304      	adds	r3, #4
 80053a2:	4619      	mov	r1, r3
 80053a4:	4610      	mov	r0, r2
 80053a6:	f7ff f820 	bl	80043ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ae:	4b23      	ldr	r3, [pc, #140]	; (800543c <xTaskResumeAll+0x128>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d302      	bcc.n	80053be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80053b8:	4b21      	ldr	r3, [pc, #132]	; (8005440 <xTaskResumeAll+0x12c>)
 80053ba:	2201      	movs	r2, #1
 80053bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053be:	4b1c      	ldr	r3, [pc, #112]	; (8005430 <xTaskResumeAll+0x11c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1cb      	bne.n	800535e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053cc:	f000 fb4c 	bl	8005a68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80053d0:	4b1c      	ldr	r3, [pc, #112]	; (8005444 <xTaskResumeAll+0x130>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d010      	beq.n	80053fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80053dc:	f000 f846 	bl	800546c <xTaskIncrementTick>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80053e6:	4b16      	ldr	r3, [pc, #88]	; (8005440 <xTaskResumeAll+0x12c>)
 80053e8:	2201      	movs	r2, #1
 80053ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3b01      	subs	r3, #1
 80053f0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1f1      	bne.n	80053dc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80053f8:	4b12      	ldr	r3, [pc, #72]	; (8005444 <xTaskResumeAll+0x130>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80053fe:	4b10      	ldr	r3, [pc, #64]	; (8005440 <xTaskResumeAll+0x12c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d009      	beq.n	800541a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005406:	2301      	movs	r3, #1
 8005408:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800540a:	4b0f      	ldr	r3, [pc, #60]	; (8005448 <xTaskResumeAll+0x134>)
 800540c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800541a:	f001 f885 	bl	8006528 <vPortExitCritical>

	return xAlreadyYielded;
 800541e:	68bb      	ldr	r3, [r7, #8]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	20000c74 	.word	0x20000c74
 800542c:	20000c4c 	.word	0x20000c4c
 8005430:	20000c0c 	.word	0x20000c0c
 8005434:	20000c54 	.word	0x20000c54
 8005438:	2000077c 	.word	0x2000077c
 800543c:	20000778 	.word	0x20000778
 8005440:	20000c60 	.word	0x20000c60
 8005444:	20000c5c 	.word	0x20000c5c
 8005448:	e000ed04 	.word	0xe000ed04

0800544c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005452:	4b05      	ldr	r3, [pc, #20]	; (8005468 <xTaskGetTickCount+0x1c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005458:	687b      	ldr	r3, [r7, #4]
}
 800545a:	4618      	mov	r0, r3
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	20000c50 	.word	0x20000c50

0800546c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005472:	2300      	movs	r3, #0
 8005474:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005476:	4b51      	ldr	r3, [pc, #324]	; (80055bc <xTaskIncrementTick+0x150>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	f040 808d 	bne.w	800559a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005480:	4b4f      	ldr	r3, [pc, #316]	; (80055c0 <xTaskIncrementTick+0x154>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3301      	adds	r3, #1
 8005486:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005488:	4a4d      	ldr	r2, [pc, #308]	; (80055c0 <xTaskIncrementTick+0x154>)
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d11f      	bne.n	80054d4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005494:	4b4b      	ldr	r3, [pc, #300]	; (80055c4 <xTaskIncrementTick+0x158>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <xTaskIncrementTick+0x46>
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	603b      	str	r3, [r7, #0]
 80054b0:	e7fe      	b.n	80054b0 <xTaskIncrementTick+0x44>
 80054b2:	4b44      	ldr	r3, [pc, #272]	; (80055c4 <xTaskIncrementTick+0x158>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	4b43      	ldr	r3, [pc, #268]	; (80055c8 <xTaskIncrementTick+0x15c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a41      	ldr	r2, [pc, #260]	; (80055c4 <xTaskIncrementTick+0x158>)
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	4a41      	ldr	r2, [pc, #260]	; (80055c8 <xTaskIncrementTick+0x15c>)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	4b41      	ldr	r3, [pc, #260]	; (80055cc <xTaskIncrementTick+0x160>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3301      	adds	r3, #1
 80054cc:	4a3f      	ldr	r2, [pc, #252]	; (80055cc <xTaskIncrementTick+0x160>)
 80054ce:	6013      	str	r3, [r2, #0]
 80054d0:	f000 faca 	bl	8005a68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80054d4:	4b3e      	ldr	r3, [pc, #248]	; (80055d0 <xTaskIncrementTick+0x164>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d34e      	bcc.n	800557c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054de:	4b39      	ldr	r3, [pc, #228]	; (80055c4 <xTaskIncrementTick+0x158>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <xTaskIncrementTick+0x80>
 80054e8:	2301      	movs	r3, #1
 80054ea:	e000      	b.n	80054ee <xTaskIncrementTick+0x82>
 80054ec:	2300      	movs	r3, #0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d004      	beq.n	80054fc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054f2:	4b37      	ldr	r3, [pc, #220]	; (80055d0 <xTaskIncrementTick+0x164>)
 80054f4:	f04f 32ff 	mov.w	r2, #4294967295
 80054f8:	601a      	str	r2, [r3, #0]
					break;
 80054fa:	e03f      	b.n	800557c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80054fc:	4b31      	ldr	r3, [pc, #196]	; (80055c4 <xTaskIncrementTick+0x158>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	429a      	cmp	r2, r3
 8005512:	d203      	bcs.n	800551c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005514:	4a2e      	ldr	r2, [pc, #184]	; (80055d0 <xTaskIncrementTick+0x164>)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6013      	str	r3, [r2, #0]
						break;
 800551a:	e02f      	b.n	800557c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	3304      	adds	r3, #4
 8005520:	4618      	mov	r0, r3
 8005522:	f7fe ffbf 	bl	80044a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552a:	2b00      	cmp	r3, #0
 800552c:	d004      	beq.n	8005538 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	3318      	adds	r3, #24
 8005532:	4618      	mov	r0, r3
 8005534:	f7fe ffb6 	bl	80044a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553c:	4b25      	ldr	r3, [pc, #148]	; (80055d4 <xTaskIncrementTick+0x168>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d903      	bls.n	800554c <xTaskIncrementTick+0xe0>
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005548:	4a22      	ldr	r2, [pc, #136]	; (80055d4 <xTaskIncrementTick+0x168>)
 800554a:	6013      	str	r3, [r2, #0]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005550:	4613      	mov	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4a1f      	ldr	r2, [pc, #124]	; (80055d8 <xTaskIncrementTick+0x16c>)
 800555a:	441a      	add	r2, r3
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	3304      	adds	r3, #4
 8005560:	4619      	mov	r1, r3
 8005562:	4610      	mov	r0, r2
 8005564:	f7fe ff41 	bl	80043ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800556c:	4b1b      	ldr	r3, [pc, #108]	; (80055dc <xTaskIncrementTick+0x170>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005572:	429a      	cmp	r2, r3
 8005574:	d3b3      	bcc.n	80054de <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005576:	2301      	movs	r3, #1
 8005578:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800557a:	e7b0      	b.n	80054de <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800557c:	4b17      	ldr	r3, [pc, #92]	; (80055dc <xTaskIncrementTick+0x170>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005582:	4915      	ldr	r1, [pc, #84]	; (80055d8 <xTaskIncrementTick+0x16c>)
 8005584:	4613      	mov	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	440b      	add	r3, r1
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d907      	bls.n	80055a4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005594:	2301      	movs	r3, #1
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	e004      	b.n	80055a4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800559a:	4b11      	ldr	r3, [pc, #68]	; (80055e0 <xTaskIncrementTick+0x174>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3301      	adds	r3, #1
 80055a0:	4a0f      	ldr	r2, [pc, #60]	; (80055e0 <xTaskIncrementTick+0x174>)
 80055a2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80055a4:	4b0f      	ldr	r3, [pc, #60]	; (80055e4 <xTaskIncrementTick+0x178>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80055ac:	2301      	movs	r3, #1
 80055ae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80055b0:	697b      	ldr	r3, [r7, #20]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	20000c74 	.word	0x20000c74
 80055c0:	20000c50 	.word	0x20000c50
 80055c4:	20000c04 	.word	0x20000c04
 80055c8:	20000c08 	.word	0x20000c08
 80055cc:	20000c64 	.word	0x20000c64
 80055d0:	20000c6c 	.word	0x20000c6c
 80055d4:	20000c54 	.word	0x20000c54
 80055d8:	2000077c 	.word	0x2000077c
 80055dc:	20000778 	.word	0x20000778
 80055e0:	20000c5c 	.word	0x20000c5c
 80055e4:	20000c60 	.word	0x20000c60

080055e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055ee:	4b27      	ldr	r3, [pc, #156]	; (800568c <vTaskSwitchContext+0xa4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055f6:	4b26      	ldr	r3, [pc, #152]	; (8005690 <vTaskSwitchContext+0xa8>)
 80055f8:	2201      	movs	r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055fc:	e040      	b.n	8005680 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80055fe:	4b24      	ldr	r3, [pc, #144]	; (8005690 <vTaskSwitchContext+0xa8>)
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005604:	4b23      	ldr	r3, [pc, #140]	; (8005694 <vTaskSwitchContext+0xac>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	e00f      	b.n	800562c <vTaskSwitchContext+0x44>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d109      	bne.n	8005626 <vTaskSwitchContext+0x3e>
 8005612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	607b      	str	r3, [r7, #4]
 8005624:	e7fe      	b.n	8005624 <vTaskSwitchContext+0x3c>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	3b01      	subs	r3, #1
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	491a      	ldr	r1, [pc, #104]	; (8005698 <vTaskSwitchContext+0xb0>)
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4613      	mov	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	440b      	add	r3, r1
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0e5      	beq.n	800560c <vTaskSwitchContext+0x24>
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	4613      	mov	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4a13      	ldr	r2, [pc, #76]	; (8005698 <vTaskSwitchContext+0xb0>)
 800564c:	4413      	add	r3, r2
 800564e:	60bb      	str	r3, [r7, #8]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	605a      	str	r2, [r3, #4]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	3308      	adds	r3, #8
 8005662:	429a      	cmp	r2, r3
 8005664:	d104      	bne.n	8005670 <vTaskSwitchContext+0x88>
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	605a      	str	r2, [r3, #4]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	4a09      	ldr	r2, [pc, #36]	; (800569c <vTaskSwitchContext+0xb4>)
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	4a06      	ldr	r2, [pc, #24]	; (8005694 <vTaskSwitchContext+0xac>)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6013      	str	r3, [r2, #0]
}
 8005680:	bf00      	nop
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	20000c74 	.word	0x20000c74
 8005690:	20000c60 	.word	0x20000c60
 8005694:	20000c54 	.word	0x20000c54
 8005698:	2000077c 	.word	0x2000077c
 800569c:	20000778 	.word	0x20000778

080056a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d109      	bne.n	80056c4 <vTaskPlaceOnEventList+0x24>
 80056b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	e7fe      	b.n	80056c2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056c4:	4b07      	ldr	r3, [pc, #28]	; (80056e4 <vTaskPlaceOnEventList+0x44>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3318      	adds	r3, #24
 80056ca:	4619      	mov	r1, r3
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f7fe feb0 	bl	8004432 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80056d2:	2101      	movs	r1, #1
 80056d4:	6838      	ldr	r0, [r7, #0]
 80056d6:	f000 fa77 	bl	8005bc8 <prvAddCurrentTaskToDelayedList>
}
 80056da:	bf00      	nop
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	20000778 	.word	0x20000778

080056e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d109      	bne.n	800570e <vTaskPlaceOnEventListRestricted+0x26>
 80056fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	e7fe      	b.n	800570c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800570e:	4b0a      	ldr	r3, [pc, #40]	; (8005738 <vTaskPlaceOnEventListRestricted+0x50>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3318      	adds	r3, #24
 8005714:	4619      	mov	r1, r3
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f7fe fe67 	bl	80043ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005722:	f04f 33ff 	mov.w	r3, #4294967295
 8005726:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005728:	6879      	ldr	r1, [r7, #4]
 800572a:	68b8      	ldr	r0, [r7, #8]
 800572c:	f000 fa4c 	bl	8005bc8 <prvAddCurrentTaskToDelayedList>
	}
 8005730:	bf00      	nop
 8005732:	3718      	adds	r7, #24
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	20000778 	.word	0x20000778

0800573c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d109      	bne.n	8005766 <xTaskRemoveFromEventList+0x2a>
 8005752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	e7fe      	b.n	8005764 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	3318      	adds	r3, #24
 800576a:	4618      	mov	r0, r3
 800576c:	f7fe fe9a 	bl	80044a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005770:	4b1d      	ldr	r3, [pc, #116]	; (80057e8 <xTaskRemoveFromEventList+0xac>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d11d      	bne.n	80057b4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	3304      	adds	r3, #4
 800577c:	4618      	mov	r0, r3
 800577e:	f7fe fe91 	bl	80044a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005786:	4b19      	ldr	r3, [pc, #100]	; (80057ec <xTaskRemoveFromEventList+0xb0>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	429a      	cmp	r2, r3
 800578c:	d903      	bls.n	8005796 <xTaskRemoveFromEventList+0x5a>
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005792:	4a16      	ldr	r2, [pc, #88]	; (80057ec <xTaskRemoveFromEventList+0xb0>)
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800579a:	4613      	mov	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4a13      	ldr	r2, [pc, #76]	; (80057f0 <xTaskRemoveFromEventList+0xb4>)
 80057a4:	441a      	add	r2, r3
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	3304      	adds	r3, #4
 80057aa:	4619      	mov	r1, r3
 80057ac:	4610      	mov	r0, r2
 80057ae:	f7fe fe1c 	bl	80043ea <vListInsertEnd>
 80057b2:	e005      	b.n	80057c0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	3318      	adds	r3, #24
 80057b8:	4619      	mov	r1, r3
 80057ba:	480e      	ldr	r0, [pc, #56]	; (80057f4 <xTaskRemoveFromEventList+0xb8>)
 80057bc:	f7fe fe15 	bl	80043ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c4:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <xTaskRemoveFromEventList+0xbc>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d905      	bls.n	80057da <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80057ce:	2301      	movs	r3, #1
 80057d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80057d2:	4b0a      	ldr	r3, [pc, #40]	; (80057fc <xTaskRemoveFromEventList+0xc0>)
 80057d4:	2201      	movs	r2, #1
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	e001      	b.n	80057de <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80057da:	2300      	movs	r3, #0
 80057dc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80057de:	697b      	ldr	r3, [r7, #20]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	20000c74 	.word	0x20000c74
 80057ec:	20000c54 	.word	0x20000c54
 80057f0:	2000077c 	.word	0x2000077c
 80057f4:	20000c0c 	.word	0x20000c0c
 80057f8:	20000778 	.word	0x20000778
 80057fc:	20000c60 	.word	0x20000c60

08005800 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005808:	4b06      	ldr	r3, [pc, #24]	; (8005824 <vTaskInternalSetTimeOutState+0x24>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005810:	4b05      	ldr	r3, [pc, #20]	; (8005828 <vTaskInternalSetTimeOutState+0x28>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	605a      	str	r2, [r3, #4]
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	20000c64 	.word	0x20000c64
 8005828:	20000c50 	.word	0x20000c50

0800582c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d109      	bne.n	8005850 <xTaskCheckForTimeOut+0x24>
 800583c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	613b      	str	r3, [r7, #16]
 800584e:	e7fe      	b.n	800584e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d109      	bne.n	800586a <xTaskCheckForTimeOut+0x3e>
 8005856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	e7fe      	b.n	8005868 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800586a:	f000 fe2f 	bl	80064cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800586e:	4b1d      	ldr	r3, [pc, #116]	; (80058e4 <xTaskCheckForTimeOut+0xb8>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005886:	d102      	bne.n	800588e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005888:	2300      	movs	r3, #0
 800588a:	61fb      	str	r3, [r7, #28]
 800588c:	e023      	b.n	80058d6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	4b15      	ldr	r3, [pc, #84]	; (80058e8 <xTaskCheckForTimeOut+0xbc>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	429a      	cmp	r2, r3
 8005898:	d007      	beq.n	80058aa <xTaskCheckForTimeOut+0x7e>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d302      	bcc.n	80058aa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80058a4:	2301      	movs	r3, #1
 80058a6:	61fb      	str	r3, [r7, #28]
 80058a8:	e015      	b.n	80058d6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d20b      	bcs.n	80058cc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	1ad2      	subs	r2, r2, r3
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7ff ff9d 	bl	8005800 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80058c6:	2300      	movs	r3, #0
 80058c8:	61fb      	str	r3, [r7, #28]
 80058ca:	e004      	b.n	80058d6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80058d2:	2301      	movs	r3, #1
 80058d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80058d6:	f000 fe27 	bl	8006528 <vPortExitCritical>

	return xReturn;
 80058da:	69fb      	ldr	r3, [r7, #28]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3720      	adds	r7, #32
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	20000c50 	.word	0x20000c50
 80058e8:	20000c64 	.word	0x20000c64

080058ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80058f0:	4b03      	ldr	r3, [pc, #12]	; (8005900 <vTaskMissedYield+0x14>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	601a      	str	r2, [r3, #0]
}
 80058f6:	bf00      	nop
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	20000c60 	.word	0x20000c60

08005904 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800590c:	f000 f852 	bl	80059b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005910:	4b06      	ldr	r3, [pc, #24]	; (800592c <prvIdleTask+0x28>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d9f9      	bls.n	800590c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005918:	4b05      	ldr	r3, [pc, #20]	; (8005930 <prvIdleTask+0x2c>)
 800591a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005928:	e7f0      	b.n	800590c <prvIdleTask+0x8>
 800592a:	bf00      	nop
 800592c:	2000077c 	.word	0x2000077c
 8005930:	e000ed04 	.word	0xe000ed04

08005934 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800593a:	2300      	movs	r3, #0
 800593c:	607b      	str	r3, [r7, #4]
 800593e:	e00c      	b.n	800595a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4a12      	ldr	r2, [pc, #72]	; (8005994 <prvInitialiseTaskLists+0x60>)
 800594c:	4413      	add	r3, r2
 800594e:	4618      	mov	r0, r3
 8005950:	f7fe fd1e 	bl	8004390 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3301      	adds	r3, #1
 8005958:	607b      	str	r3, [r7, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b37      	cmp	r3, #55	; 0x37
 800595e:	d9ef      	bls.n	8005940 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005960:	480d      	ldr	r0, [pc, #52]	; (8005998 <prvInitialiseTaskLists+0x64>)
 8005962:	f7fe fd15 	bl	8004390 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005966:	480d      	ldr	r0, [pc, #52]	; (800599c <prvInitialiseTaskLists+0x68>)
 8005968:	f7fe fd12 	bl	8004390 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800596c:	480c      	ldr	r0, [pc, #48]	; (80059a0 <prvInitialiseTaskLists+0x6c>)
 800596e:	f7fe fd0f 	bl	8004390 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005972:	480c      	ldr	r0, [pc, #48]	; (80059a4 <prvInitialiseTaskLists+0x70>)
 8005974:	f7fe fd0c 	bl	8004390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005978:	480b      	ldr	r0, [pc, #44]	; (80059a8 <prvInitialiseTaskLists+0x74>)
 800597a:	f7fe fd09 	bl	8004390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800597e:	4b0b      	ldr	r3, [pc, #44]	; (80059ac <prvInitialiseTaskLists+0x78>)
 8005980:	4a05      	ldr	r2, [pc, #20]	; (8005998 <prvInitialiseTaskLists+0x64>)
 8005982:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005984:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <prvInitialiseTaskLists+0x7c>)
 8005986:	4a05      	ldr	r2, [pc, #20]	; (800599c <prvInitialiseTaskLists+0x68>)
 8005988:	601a      	str	r2, [r3, #0]
}
 800598a:	bf00      	nop
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	2000077c 	.word	0x2000077c
 8005998:	20000bdc 	.word	0x20000bdc
 800599c:	20000bf0 	.word	0x20000bf0
 80059a0:	20000c0c 	.word	0x20000c0c
 80059a4:	20000c20 	.word	0x20000c20
 80059a8:	20000c38 	.word	0x20000c38
 80059ac:	20000c04 	.word	0x20000c04
 80059b0:	20000c08 	.word	0x20000c08

080059b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059ba:	e019      	b.n	80059f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059bc:	f000 fd86 	bl	80064cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80059c0:	4b0f      	ldr	r3, [pc, #60]	; (8005a00 <prvCheckTasksWaitingTermination+0x4c>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	3304      	adds	r3, #4
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fe fd69 	bl	80044a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059d2:	4b0c      	ldr	r3, [pc, #48]	; (8005a04 <prvCheckTasksWaitingTermination+0x50>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	4a0a      	ldr	r2, [pc, #40]	; (8005a04 <prvCheckTasksWaitingTermination+0x50>)
 80059da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059dc:	4b0a      	ldr	r3, [pc, #40]	; (8005a08 <prvCheckTasksWaitingTermination+0x54>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3b01      	subs	r3, #1
 80059e2:	4a09      	ldr	r2, [pc, #36]	; (8005a08 <prvCheckTasksWaitingTermination+0x54>)
 80059e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059e6:	f000 fd9f 	bl	8006528 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f80e 	bl	8005a0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059f0:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <prvCheckTasksWaitingTermination+0x54>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1e1      	bne.n	80059bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80059f8:	bf00      	nop
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	20000c20 	.word	0x20000c20
 8005a04:	20000c4c 	.word	0x20000c4c
 8005a08:	20000c34 	.word	0x20000c34

08005a0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d108      	bne.n	8005a30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 ff2e 	bl	8006884 <vPortFree>
				vPortFree( pxTCB );
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 ff2b 	bl	8006884 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a2e:	e017      	b.n	8005a60 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d103      	bne.n	8005a42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 ff22 	bl	8006884 <vPortFree>
	}
 8005a40:	e00e      	b.n	8005a60 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d009      	beq.n	8005a60 <prvDeleteTCB+0x54>
 8005a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	e7fe      	b.n	8005a5e <prvDeleteTCB+0x52>
	}
 8005a60:	bf00      	nop
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a6e:	4b0f      	ldr	r3, [pc, #60]	; (8005aac <prvResetNextTaskUnblockTime+0x44>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <prvResetNextTaskUnblockTime+0x14>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e000      	b.n	8005a7e <prvResetNextTaskUnblockTime+0x16>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d004      	beq.n	8005a8c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a82:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <prvResetNextTaskUnblockTime+0x48>)
 8005a84:	f04f 32ff 	mov.w	r2, #4294967295
 8005a88:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a8a:	e008      	b.n	8005a9e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005a8c:	4b07      	ldr	r3, [pc, #28]	; (8005aac <prvResetNextTaskUnblockTime+0x44>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	4a05      	ldr	r2, [pc, #20]	; (8005ab0 <prvResetNextTaskUnblockTime+0x48>)
 8005a9c:	6013      	str	r3, [r2, #0]
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	20000c04 	.word	0x20000c04
 8005ab0:	20000c6c 	.word	0x20000c6c

08005ab4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005aba:	4b0b      	ldr	r3, [pc, #44]	; (8005ae8 <xTaskGetSchedulerState+0x34>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d102      	bne.n	8005ac8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	607b      	str	r3, [r7, #4]
 8005ac6:	e008      	b.n	8005ada <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ac8:	4b08      	ldr	r3, [pc, #32]	; (8005aec <xTaskGetSchedulerState+0x38>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d102      	bne.n	8005ad6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	607b      	str	r3, [r7, #4]
 8005ad4:	e001      	b.n	8005ada <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ada:	687b      	ldr	r3, [r7, #4]
	}
 8005adc:	4618      	mov	r0, r3
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	20000c58 	.word	0x20000c58
 8005aec:	20000c74 	.word	0x20000c74

08005af0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005afc:	2300      	movs	r3, #0
 8005afe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d054      	beq.n	8005bb0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b06:	4b2d      	ldr	r3, [pc, #180]	; (8005bbc <xTaskPriorityDisinherit+0xcc>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d009      	beq.n	8005b24 <xTaskPriorityDisinherit+0x34>
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	e7fe      	b.n	8005b22 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d109      	bne.n	8005b40 <xTaskPriorityDisinherit+0x50>
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	60bb      	str	r3, [r7, #8]
 8005b3e:	e7fe      	b.n	8005b3e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b44:	1e5a      	subs	r2, r3, #1
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d02c      	beq.n	8005bb0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d128      	bne.n	8005bb0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	3304      	adds	r3, #4
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fe fc9e 	bl	80044a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b74:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b80:	4b0f      	ldr	r3, [pc, #60]	; (8005bc0 <xTaskPriorityDisinherit+0xd0>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d903      	bls.n	8005b90 <xTaskPriorityDisinherit+0xa0>
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8c:	4a0c      	ldr	r2, [pc, #48]	; (8005bc0 <xTaskPriorityDisinherit+0xd0>)
 8005b8e:	6013      	str	r3, [r2, #0]
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b94:	4613      	mov	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4a09      	ldr	r2, [pc, #36]	; (8005bc4 <xTaskPriorityDisinherit+0xd4>)
 8005b9e:	441a      	add	r2, r3
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	f7fe fc1f 	bl	80043ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005bac:	2301      	movs	r3, #1
 8005bae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005bb0:	697b      	ldr	r3, [r7, #20]
	}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	20000778 	.word	0x20000778
 8005bc0:	20000c54 	.word	0x20000c54
 8005bc4:	2000077c 	.word	0x2000077c

08005bc8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005bd2:	4b21      	ldr	r3, [pc, #132]	; (8005c58 <prvAddCurrentTaskToDelayedList+0x90>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bd8:	4b20      	ldr	r3, [pc, #128]	; (8005c5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3304      	adds	r3, #4
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fe fc60 	bl	80044a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bea:	d10a      	bne.n	8005c02 <prvAddCurrentTaskToDelayedList+0x3a>
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d007      	beq.n	8005c02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bf2:	4b1a      	ldr	r3, [pc, #104]	; (8005c5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4819      	ldr	r0, [pc, #100]	; (8005c60 <prvAddCurrentTaskToDelayedList+0x98>)
 8005bfc:	f7fe fbf5 	bl	80043ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c00:	e026      	b.n	8005c50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4413      	add	r3, r2
 8005c08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c0a:	4b14      	ldr	r3, [pc, #80]	; (8005c5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d209      	bcs.n	8005c2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c1a:	4b12      	ldr	r3, [pc, #72]	; (8005c64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	4b0f      	ldr	r3, [pc, #60]	; (8005c5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3304      	adds	r3, #4
 8005c24:	4619      	mov	r1, r3
 8005c26:	4610      	mov	r0, r2
 8005c28:	f7fe fc03 	bl	8004432 <vListInsert>
}
 8005c2c:	e010      	b.n	8005c50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c2e:	4b0e      	ldr	r3, [pc, #56]	; (8005c68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	4b0a      	ldr	r3, [pc, #40]	; (8005c5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3304      	adds	r3, #4
 8005c38:	4619      	mov	r1, r3
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	f7fe fbf9 	bl	8004432 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c40:	4b0a      	ldr	r3, [pc, #40]	; (8005c6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d202      	bcs.n	8005c50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005c4a:	4a08      	ldr	r2, [pc, #32]	; (8005c6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	6013      	str	r3, [r2, #0]
}
 8005c50:	bf00      	nop
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	20000c50 	.word	0x20000c50
 8005c5c:	20000778 	.word	0x20000778
 8005c60:	20000c38 	.word	0x20000c38
 8005c64:	20000c08 	.word	0x20000c08
 8005c68:	20000c04 	.word	0x20000c04
 8005c6c:	20000c6c 	.word	0x20000c6c

08005c70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b08a      	sub	sp, #40	; 0x28
 8005c74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005c76:	2300      	movs	r3, #0
 8005c78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005c7a:	f000 fac3 	bl	8006204 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005c7e:	4b1c      	ldr	r3, [pc, #112]	; (8005cf0 <xTimerCreateTimerTask+0x80>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d021      	beq.n	8005cca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c8e:	1d3a      	adds	r2, r7, #4
 8005c90:	f107 0108 	add.w	r1, r7, #8
 8005c94:	f107 030c 	add.w	r3, r7, #12
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fe fb5f 	bl	800435c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005c9e:	6879      	ldr	r1, [r7, #4]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	9202      	str	r2, [sp, #8]
 8005ca6:	9301      	str	r3, [sp, #4]
 8005ca8:	2302      	movs	r3, #2
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	2300      	movs	r3, #0
 8005cae:	460a      	mov	r2, r1
 8005cb0:	4910      	ldr	r1, [pc, #64]	; (8005cf4 <xTimerCreateTimerTask+0x84>)
 8005cb2:	4811      	ldr	r0, [pc, #68]	; (8005cf8 <xTimerCreateTimerTask+0x88>)
 8005cb4:	f7ff f8f4 	bl	8004ea0 <xTaskCreateStatic>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	4b10      	ldr	r3, [pc, #64]	; (8005cfc <xTimerCreateTimerTask+0x8c>)
 8005cbc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005cbe:	4b0f      	ldr	r3, [pc, #60]	; (8005cfc <xTimerCreateTimerTask+0x8c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d109      	bne.n	8005ce4 <xTimerCreateTimerTask+0x74>
 8005cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	613b      	str	r3, [r7, #16]
 8005ce2:	e7fe      	b.n	8005ce2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005ce4:	697b      	ldr	r3, [r7, #20]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	20000ca8 	.word	0x20000ca8
 8005cf4:	080073d4 	.word	0x080073d4
 8005cf8:	08005e19 	.word	0x08005e19
 8005cfc:	20000cac 	.word	0x20000cac

08005d00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08a      	sub	sp, #40	; 0x28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
 8005d0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d109      	bne.n	8005d2c <xTimerGenericCommand+0x2c>
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	623b      	str	r3, [r7, #32]
 8005d2a:	e7fe      	b.n	8005d2a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d2c:	4b19      	ldr	r3, [pc, #100]	; (8005d94 <xTimerGenericCommand+0x94>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d02a      	beq.n	8005d8a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2b05      	cmp	r3, #5
 8005d44:	dc18      	bgt.n	8005d78 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d46:	f7ff feb5 	bl	8005ab4 <xTaskGetSchedulerState>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d109      	bne.n	8005d64 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d50:	4b10      	ldr	r3, [pc, #64]	; (8005d94 <xTimerGenericCommand+0x94>)
 8005d52:	6818      	ldr	r0, [r3, #0]
 8005d54:	f107 0110 	add.w	r1, r7, #16
 8005d58:	2300      	movs	r3, #0
 8005d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d5c:	f7fe fcca 	bl	80046f4 <xQueueGenericSend>
 8005d60:	6278      	str	r0, [r7, #36]	; 0x24
 8005d62:	e012      	b.n	8005d8a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d64:	4b0b      	ldr	r3, [pc, #44]	; (8005d94 <xTimerGenericCommand+0x94>)
 8005d66:	6818      	ldr	r0, [r3, #0]
 8005d68:	f107 0110 	add.w	r1, r7, #16
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f7fe fcc0 	bl	80046f4 <xQueueGenericSend>
 8005d74:	6278      	str	r0, [r7, #36]	; 0x24
 8005d76:	e008      	b.n	8005d8a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d78:	4b06      	ldr	r3, [pc, #24]	; (8005d94 <xTimerGenericCommand+0x94>)
 8005d7a:	6818      	ldr	r0, [r3, #0]
 8005d7c:	f107 0110 	add.w	r1, r7, #16
 8005d80:	2300      	movs	r3, #0
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	f7fe fdb0 	bl	80048e8 <xQueueGenericSendFromISR>
 8005d88:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3728      	adds	r7, #40	; 0x28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	20000ca8 	.word	0x20000ca8

08005d98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af02      	add	r7, sp, #8
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005da2:	4b1c      	ldr	r3, [pc, #112]	; (8005e14 <prvProcessExpiredTimer+0x7c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	3304      	adds	r3, #4
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7fe fb77 	bl	80044a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d121      	bne.n	8005e02 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	699a      	ldr	r2, [r3, #24]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	18d1      	adds	r1, r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	6978      	ldr	r0, [r7, #20]
 8005dcc:	f000 f8c8 	bl	8005f60 <prvInsertTimerInActiveList>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d015      	beq.n	8005e02 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	2100      	movs	r1, #0
 8005de0:	6978      	ldr	r0, [r7, #20]
 8005de2:	f7ff ff8d 	bl	8005d00 <xTimerGenericCommand>
 8005de6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d109      	bne.n	8005e02 <prvProcessExpiredTimer+0x6a>
 8005dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	e7fe      	b.n	8005e00 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	6978      	ldr	r0, [r7, #20]
 8005e08:	4798      	blx	r3
}
 8005e0a:	bf00      	nop
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	20000ca0 	.word	0x20000ca0

08005e18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e20:	f107 0308 	add.w	r3, r7, #8
 8005e24:	4618      	mov	r0, r3
 8005e26:	f000 f857 	bl	8005ed8 <prvGetNextExpireTime>
 8005e2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	4619      	mov	r1, r3
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 f803 	bl	8005e3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e36:	f000 f8d5 	bl	8005fe4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e3a:	e7f1      	b.n	8005e20 <prvTimerTask+0x8>

08005e3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e46:	f7ff fa57 	bl	80052f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e4a:	f107 0308 	add.w	r3, r7, #8
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 f866 	bl	8005f20 <prvSampleTimeNow>
 8005e54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d130      	bne.n	8005ebe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10a      	bne.n	8005e78 <prvProcessTimerOrBlockTask+0x3c>
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d806      	bhi.n	8005e78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e6a:	f7ff fa53 	bl	8005314 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e6e:	68f9      	ldr	r1, [r7, #12]
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7ff ff91 	bl	8005d98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e76:	e024      	b.n	8005ec2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d008      	beq.n	8005e90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e7e:	4b13      	ldr	r3, [pc, #76]	; (8005ecc <prvProcessTimerOrBlockTask+0x90>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	bf0c      	ite	eq
 8005e88:	2301      	moveq	r3, #1
 8005e8a:	2300      	movne	r3, #0
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e90:	4b0f      	ldr	r3, [pc, #60]	; (8005ed0 <prvProcessTimerOrBlockTask+0x94>)
 8005e92:	6818      	ldr	r0, [r3, #0]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	f7fe ffcb 	bl	8004e38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ea2:	f7ff fa37 	bl	8005314 <xTaskResumeAll>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10a      	bne.n	8005ec2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005eac:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <prvProcessTimerOrBlockTask+0x98>)
 8005eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eb2:	601a      	str	r2, [r3, #0]
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	f3bf 8f6f 	isb	sy
}
 8005ebc:	e001      	b.n	8005ec2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005ebe:	f7ff fa29 	bl	8005314 <xTaskResumeAll>
}
 8005ec2:	bf00      	nop
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20000ca4 	.word	0x20000ca4
 8005ed0:	20000ca8 	.word	0x20000ca8
 8005ed4:	e000ed04 	.word	0xe000ed04

08005ed8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005ee0:	4b0e      	ldr	r3, [pc, #56]	; (8005f1c <prvGetNextExpireTime+0x44>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	bf0c      	ite	eq
 8005eea:	2301      	moveq	r3, #1
 8005eec:	2300      	movne	r3, #0
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d105      	bne.n	8005f0a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005efe:	4b07      	ldr	r3, [pc, #28]	; (8005f1c <prvGetNextExpireTime+0x44>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	e001      	b.n	8005f0e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	20000ca0 	.word	0x20000ca0

08005f20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f28:	f7ff fa90 	bl	800544c <xTaskGetTickCount>
 8005f2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f2e:	4b0b      	ldr	r3, [pc, #44]	; (8005f5c <prvSampleTimeNow+0x3c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d205      	bcs.n	8005f44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f38:	f000 f904 	bl	8006144 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	601a      	str	r2, [r3, #0]
 8005f42:	e002      	b.n	8005f4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f4a:	4a04      	ldr	r2, [pc, #16]	; (8005f5c <prvSampleTimeNow+0x3c>)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f50:	68fb      	ldr	r3, [r7, #12]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20000cb0 	.word	0x20000cb0

08005f60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
 8005f6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d812      	bhi.n	8005fac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	1ad2      	subs	r2, r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d302      	bcc.n	8005f9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f94:	2301      	movs	r3, #1
 8005f96:	617b      	str	r3, [r7, #20]
 8005f98:	e01b      	b.n	8005fd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f9a:	4b10      	ldr	r3, [pc, #64]	; (8005fdc <prvInsertTimerInActiveList+0x7c>)
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	f7fe fa44 	bl	8004432 <vListInsert>
 8005faa:	e012      	b.n	8005fd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d206      	bcs.n	8005fc2 <prvInsertTimerInActiveList+0x62>
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d302      	bcc.n	8005fc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	617b      	str	r3, [r7, #20]
 8005fc0:	e007      	b.n	8005fd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fc2:	4b07      	ldr	r3, [pc, #28]	; (8005fe0 <prvInsertTimerInActiveList+0x80>)
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3304      	adds	r3, #4
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4610      	mov	r0, r2
 8005fce:	f7fe fa30 	bl	8004432 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005fd2:	697b      	ldr	r3, [r7, #20]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3718      	adds	r7, #24
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	20000ca4 	.word	0x20000ca4
 8005fe0:	20000ca0 	.word	0x20000ca0

08005fe4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b08e      	sub	sp, #56	; 0x38
 8005fe8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005fea:	e099      	b.n	8006120 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	da17      	bge.n	8006022 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005ff2:	1d3b      	adds	r3, r7, #4
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d109      	bne.n	8006012 <prvProcessReceivedCommands+0x2e>
 8005ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	61fb      	str	r3, [r7, #28]
 8006010:	e7fe      	b.n	8006010 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006018:	6850      	ldr	r0, [r2, #4]
 800601a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800601c:	6892      	ldr	r2, [r2, #8]
 800601e:	4611      	mov	r1, r2
 8006020:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	db7a      	blt.n	800611e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800602c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d004      	beq.n	800603e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006036:	3304      	adds	r3, #4
 8006038:	4618      	mov	r0, r3
 800603a:	f7fe fa33 	bl	80044a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800603e:	463b      	mov	r3, r7
 8006040:	4618      	mov	r0, r3
 8006042:	f7ff ff6d 	bl	8005f20 <prvSampleTimeNow>
 8006046:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b09      	cmp	r3, #9
 800604c:	d868      	bhi.n	8006120 <prvProcessReceivedCommands+0x13c>
 800604e:	a201      	add	r2, pc, #4	; (adr r2, 8006054 <prvProcessReceivedCommands+0x70>)
 8006050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006054:	0800607d 	.word	0x0800607d
 8006058:	0800607d 	.word	0x0800607d
 800605c:	0800607d 	.word	0x0800607d
 8006060:	08006121 	.word	0x08006121
 8006064:	080060d7 	.word	0x080060d7
 8006068:	0800610d 	.word	0x0800610d
 800606c:	0800607d 	.word	0x0800607d
 8006070:	0800607d 	.word	0x0800607d
 8006074:	08006121 	.word	0x08006121
 8006078:	080060d7 	.word	0x080060d7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	18d1      	adds	r1, r2, r3
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800608a:	f7ff ff69 	bl	8005f60 <prvInsertTimerInActiveList>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d045      	beq.n	8006120 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800609a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d13d      	bne.n	8006120 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	441a      	add	r2, r3
 80060ac:	2300      	movs	r3, #0
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	2300      	movs	r3, #0
 80060b2:	2100      	movs	r1, #0
 80060b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060b6:	f7ff fe23 	bl	8005d00 <xTimerGenericCommand>
 80060ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80060bc:	6a3b      	ldr	r3, [r7, #32]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d12e      	bne.n	8006120 <prvProcessReceivedCommands+0x13c>
 80060c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	61bb      	str	r3, [r7, #24]
 80060d4:	e7fe      	b.n	80060d4 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80060dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d109      	bne.n	80060f8 <prvProcessReceivedCommands+0x114>
 80060e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e8:	f383 8811 	msr	BASEPRI, r3
 80060ec:	f3bf 8f6f 	isb	sy
 80060f0:	f3bf 8f4f 	dsb	sy
 80060f4:	617b      	str	r3, [r7, #20]
 80060f6:	e7fe      	b.n	80060f6 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80060f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fa:	699a      	ldr	r2, [r3, #24]
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	18d1      	adds	r1, r2, r3
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006106:	f7ff ff2b 	bl	8005f60 <prvInsertTimerInActiveList>
					break;
 800610a:	e009      	b.n	8006120 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006112:	2b00      	cmp	r3, #0
 8006114:	d104      	bne.n	8006120 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8006116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006118:	f000 fbb4 	bl	8006884 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800611c:	e000      	b.n	8006120 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800611e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006120:	4b07      	ldr	r3, [pc, #28]	; (8006140 <prvProcessReceivedCommands+0x15c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	1d39      	adds	r1, r7, #4
 8006126:	2200      	movs	r2, #0
 8006128:	4618      	mov	r0, r3
 800612a:	f7fe fc71 	bl	8004a10 <xQueueReceive>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	f47f af5b 	bne.w	8005fec <prvProcessReceivedCommands+0x8>
	}
}
 8006136:	bf00      	nop
 8006138:	3730      	adds	r7, #48	; 0x30
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20000ca8 	.word	0x20000ca8

08006144 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800614a:	e044      	b.n	80061d6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800614c:	4b2b      	ldr	r3, [pc, #172]	; (80061fc <prvSwitchTimerLists+0xb8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006156:	4b29      	ldr	r3, [pc, #164]	; (80061fc <prvSwitchTimerLists+0xb8>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	3304      	adds	r3, #4
 8006164:	4618      	mov	r0, r3
 8006166:	f7fe f99d 	bl	80044a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d12d      	bne.n	80061d6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	4413      	add	r3, r2
 8006182:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	429a      	cmp	r2, r3
 800618a:	d90e      	bls.n	80061aa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006198:	4b18      	ldr	r3, [pc, #96]	; (80061fc <prvSwitchTimerLists+0xb8>)
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	3304      	adds	r3, #4
 80061a0:	4619      	mov	r1, r3
 80061a2:	4610      	mov	r0, r2
 80061a4:	f7fe f945 	bl	8004432 <vListInsert>
 80061a8:	e015      	b.n	80061d6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061aa:	2300      	movs	r3, #0
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	2300      	movs	r3, #0
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	2100      	movs	r1, #0
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f7ff fda3 	bl	8005d00 <xTimerGenericCommand>
 80061ba:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d109      	bne.n	80061d6 <prvSwitchTimerLists+0x92>
 80061c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c6:	f383 8811 	msr	BASEPRI, r3
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	603b      	str	r3, [r7, #0]
 80061d4:	e7fe      	b.n	80061d4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061d6:	4b09      	ldr	r3, [pc, #36]	; (80061fc <prvSwitchTimerLists+0xb8>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1b5      	bne.n	800614c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80061e0:	4b06      	ldr	r3, [pc, #24]	; (80061fc <prvSwitchTimerLists+0xb8>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80061e6:	4b06      	ldr	r3, [pc, #24]	; (8006200 <prvSwitchTimerLists+0xbc>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a04      	ldr	r2, [pc, #16]	; (80061fc <prvSwitchTimerLists+0xb8>)
 80061ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80061ee:	4a04      	ldr	r2, [pc, #16]	; (8006200 <prvSwitchTimerLists+0xbc>)
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	6013      	str	r3, [r2, #0]
}
 80061f4:	bf00      	nop
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	20000ca0 	.word	0x20000ca0
 8006200:	20000ca4 	.word	0x20000ca4

08006204 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800620a:	f000 f95f 	bl	80064cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800620e:	4b15      	ldr	r3, [pc, #84]	; (8006264 <prvCheckForValidListAndQueue+0x60>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d120      	bne.n	8006258 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006216:	4814      	ldr	r0, [pc, #80]	; (8006268 <prvCheckForValidListAndQueue+0x64>)
 8006218:	f7fe f8ba 	bl	8004390 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800621c:	4813      	ldr	r0, [pc, #76]	; (800626c <prvCheckForValidListAndQueue+0x68>)
 800621e:	f7fe f8b7 	bl	8004390 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006222:	4b13      	ldr	r3, [pc, #76]	; (8006270 <prvCheckForValidListAndQueue+0x6c>)
 8006224:	4a10      	ldr	r2, [pc, #64]	; (8006268 <prvCheckForValidListAndQueue+0x64>)
 8006226:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006228:	4b12      	ldr	r3, [pc, #72]	; (8006274 <prvCheckForValidListAndQueue+0x70>)
 800622a:	4a10      	ldr	r2, [pc, #64]	; (800626c <prvCheckForValidListAndQueue+0x68>)
 800622c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800622e:	2300      	movs	r3, #0
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	4b11      	ldr	r3, [pc, #68]	; (8006278 <prvCheckForValidListAndQueue+0x74>)
 8006234:	4a11      	ldr	r2, [pc, #68]	; (800627c <prvCheckForValidListAndQueue+0x78>)
 8006236:	2110      	movs	r1, #16
 8006238:	200a      	movs	r0, #10
 800623a:	f7fe f9c5 	bl	80045c8 <xQueueGenericCreateStatic>
 800623e:	4602      	mov	r2, r0
 8006240:	4b08      	ldr	r3, [pc, #32]	; (8006264 <prvCheckForValidListAndQueue+0x60>)
 8006242:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006244:	4b07      	ldr	r3, [pc, #28]	; (8006264 <prvCheckForValidListAndQueue+0x60>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800624c:	4b05      	ldr	r3, [pc, #20]	; (8006264 <prvCheckForValidListAndQueue+0x60>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	490b      	ldr	r1, [pc, #44]	; (8006280 <prvCheckForValidListAndQueue+0x7c>)
 8006252:	4618      	mov	r0, r3
 8006254:	f7fe fdc8 	bl	8004de8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006258:	f000 f966 	bl	8006528 <vPortExitCritical>
}
 800625c:	bf00      	nop
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	20000ca8 	.word	0x20000ca8
 8006268:	20000c78 	.word	0x20000c78
 800626c:	20000c8c 	.word	0x20000c8c
 8006270:	20000ca0 	.word	0x20000ca0
 8006274:	20000ca4 	.word	0x20000ca4
 8006278:	20000d54 	.word	0x20000d54
 800627c:	20000cb4 	.word	0x20000cb4
 8006280:	080073dc 	.word	0x080073dc

08006284 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	3b04      	subs	r3, #4
 8006294:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800629c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	3b04      	subs	r3, #4
 80062a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f023 0201 	bic.w	r2, r3, #1
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	3b04      	subs	r3, #4
 80062b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80062b4:	4a0c      	ldr	r2, [pc, #48]	; (80062e8 <pxPortInitialiseStack+0x64>)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	3b14      	subs	r3, #20
 80062be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3b04      	subs	r3, #4
 80062ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f06f 0202 	mvn.w	r2, #2
 80062d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	3b20      	subs	r3, #32
 80062d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80062da:	68fb      	ldr	r3, [r7, #12]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	080062ed 	.word	0x080062ed

080062ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80062f2:	2300      	movs	r3, #0
 80062f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80062f6:	4b11      	ldr	r3, [pc, #68]	; (800633c <prvTaskExitError+0x50>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fe:	d009      	beq.n	8006314 <prvTaskExitError+0x28>
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	e7fe      	b.n	8006312 <prvTaskExitError+0x26>
 8006314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006326:	bf00      	nop
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d0fc      	beq.n	8006328 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800632e:	bf00      	nop
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	20000024 	.word	0x20000024

08006340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006340:	4b07      	ldr	r3, [pc, #28]	; (8006360 <pxCurrentTCBConst2>)
 8006342:	6819      	ldr	r1, [r3, #0]
 8006344:	6808      	ldr	r0, [r1, #0]
 8006346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800634a:	f380 8809 	msr	PSP, r0
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f04f 0000 	mov.w	r0, #0
 8006356:	f380 8811 	msr	BASEPRI, r0
 800635a:	4770      	bx	lr
 800635c:	f3af 8000 	nop.w

08006360 <pxCurrentTCBConst2>:
 8006360:	20000778 	.word	0x20000778
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006364:	bf00      	nop
 8006366:	bf00      	nop

08006368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006368:	4808      	ldr	r0, [pc, #32]	; (800638c <prvPortStartFirstTask+0x24>)
 800636a:	6800      	ldr	r0, [r0, #0]
 800636c:	6800      	ldr	r0, [r0, #0]
 800636e:	f380 8808 	msr	MSP, r0
 8006372:	f04f 0000 	mov.w	r0, #0
 8006376:	f380 8814 	msr	CONTROL, r0
 800637a:	b662      	cpsie	i
 800637c:	b661      	cpsie	f
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	df00      	svc	0
 8006388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800638a:	bf00      	nop
 800638c:	e000ed08 	.word	0xe000ed08

08006390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006396:	4b44      	ldr	r3, [pc, #272]	; (80064a8 <xPortStartScheduler+0x118>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a44      	ldr	r2, [pc, #272]	; (80064ac <xPortStartScheduler+0x11c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d109      	bne.n	80063b4 <xPortStartScheduler+0x24>
 80063a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	613b      	str	r3, [r7, #16]
 80063b2:	e7fe      	b.n	80063b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80063b4:	4b3c      	ldr	r3, [pc, #240]	; (80064a8 <xPortStartScheduler+0x118>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a3d      	ldr	r2, [pc, #244]	; (80064b0 <xPortStartScheduler+0x120>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d109      	bne.n	80063d2 <xPortStartScheduler+0x42>
 80063be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	e7fe      	b.n	80063d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063d2:	4b38      	ldr	r3, [pc, #224]	; (80064b4 <xPortStartScheduler+0x124>)
 80063d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	22ff      	movs	r2, #255	; 0xff
 80063e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063ec:	78fb      	ldrb	r3, [r7, #3]
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	4b30      	ldr	r3, [pc, #192]	; (80064b8 <xPortStartScheduler+0x128>)
 80063f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063fa:	4b30      	ldr	r3, [pc, #192]	; (80064bc <xPortStartScheduler+0x12c>)
 80063fc:	2207      	movs	r2, #7
 80063fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006400:	e009      	b.n	8006416 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006402:	4b2e      	ldr	r3, [pc, #184]	; (80064bc <xPortStartScheduler+0x12c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3b01      	subs	r3, #1
 8006408:	4a2c      	ldr	r2, [pc, #176]	; (80064bc <xPortStartScheduler+0x12c>)
 800640a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800640c:	78fb      	ldrb	r3, [r7, #3]
 800640e:	b2db      	uxtb	r3, r3
 8006410:	005b      	lsls	r3, r3, #1
 8006412:	b2db      	uxtb	r3, r3
 8006414:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006416:	78fb      	ldrb	r3, [r7, #3]
 8006418:	b2db      	uxtb	r3, r3
 800641a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800641e:	2b80      	cmp	r3, #128	; 0x80
 8006420:	d0ef      	beq.n	8006402 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006422:	4b26      	ldr	r3, [pc, #152]	; (80064bc <xPortStartScheduler+0x12c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f1c3 0307 	rsb	r3, r3, #7
 800642a:	2b04      	cmp	r3, #4
 800642c:	d009      	beq.n	8006442 <xPortStartScheduler+0xb2>
 800642e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	60bb      	str	r3, [r7, #8]
 8006440:	e7fe      	b.n	8006440 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006442:	4b1e      	ldr	r3, [pc, #120]	; (80064bc <xPortStartScheduler+0x12c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	021b      	lsls	r3, r3, #8
 8006448:	4a1c      	ldr	r2, [pc, #112]	; (80064bc <xPortStartScheduler+0x12c>)
 800644a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800644c:	4b1b      	ldr	r3, [pc, #108]	; (80064bc <xPortStartScheduler+0x12c>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006454:	4a19      	ldr	r2, [pc, #100]	; (80064bc <xPortStartScheduler+0x12c>)
 8006456:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	b2da      	uxtb	r2, r3
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006460:	4b17      	ldr	r3, [pc, #92]	; (80064c0 <xPortStartScheduler+0x130>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a16      	ldr	r2, [pc, #88]	; (80064c0 <xPortStartScheduler+0x130>)
 8006466:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800646a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800646c:	4b14      	ldr	r3, [pc, #80]	; (80064c0 <xPortStartScheduler+0x130>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a13      	ldr	r2, [pc, #76]	; (80064c0 <xPortStartScheduler+0x130>)
 8006472:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006476:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006478:	f000 f8d6 	bl	8006628 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800647c:	4b11      	ldr	r3, [pc, #68]	; (80064c4 <xPortStartScheduler+0x134>)
 800647e:	2200      	movs	r2, #0
 8006480:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006482:	f000 f8f5 	bl	8006670 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006486:	4b10      	ldr	r3, [pc, #64]	; (80064c8 <xPortStartScheduler+0x138>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a0f      	ldr	r2, [pc, #60]	; (80064c8 <xPortStartScheduler+0x138>)
 800648c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006490:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006492:	f7ff ff69 	bl	8006368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006496:	f7ff f8a7 	bl	80055e8 <vTaskSwitchContext>
	prvTaskExitError();
 800649a:	f7ff ff27 	bl	80062ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3718      	adds	r7, #24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	e000ed00 	.word	0xe000ed00
 80064ac:	410fc271 	.word	0x410fc271
 80064b0:	410fc270 	.word	0x410fc270
 80064b4:	e000e400 	.word	0xe000e400
 80064b8:	20000da4 	.word	0x20000da4
 80064bc:	20000da8 	.word	0x20000da8
 80064c0:	e000ed20 	.word	0xe000ed20
 80064c4:	20000024 	.word	0x20000024
 80064c8:	e000ef34 	.word	0xe000ef34

080064cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064e4:	4b0e      	ldr	r3, [pc, #56]	; (8006520 <vPortEnterCritical+0x54>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3301      	adds	r3, #1
 80064ea:	4a0d      	ldr	r2, [pc, #52]	; (8006520 <vPortEnterCritical+0x54>)
 80064ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064ee:	4b0c      	ldr	r3, [pc, #48]	; (8006520 <vPortEnterCritical+0x54>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d10e      	bne.n	8006514 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064f6:	4b0b      	ldr	r3, [pc, #44]	; (8006524 <vPortEnterCritical+0x58>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d009      	beq.n	8006514 <vPortEnterCritical+0x48>
 8006500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	603b      	str	r3, [r7, #0]
 8006512:	e7fe      	b.n	8006512 <vPortEnterCritical+0x46>
	}
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	20000024 	.word	0x20000024
 8006524:	e000ed04 	.word	0xe000ed04

08006528 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800652e:	4b11      	ldr	r3, [pc, #68]	; (8006574 <vPortExitCritical+0x4c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d109      	bne.n	800654a <vPortExitCritical+0x22>
 8006536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653a:	f383 8811 	msr	BASEPRI, r3
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f3bf 8f4f 	dsb	sy
 8006546:	607b      	str	r3, [r7, #4]
 8006548:	e7fe      	b.n	8006548 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800654a:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <vPortExitCritical+0x4c>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	3b01      	subs	r3, #1
 8006550:	4a08      	ldr	r2, [pc, #32]	; (8006574 <vPortExitCritical+0x4c>)
 8006552:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006554:	4b07      	ldr	r3, [pc, #28]	; (8006574 <vPortExitCritical+0x4c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d104      	bne.n	8006566 <vPortExitCritical+0x3e>
 800655c:	2300      	movs	r3, #0
 800655e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	20000024 	.word	0x20000024
	...

08006580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006580:	f3ef 8009 	mrs	r0, PSP
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	4b15      	ldr	r3, [pc, #84]	; (80065e0 <pxCurrentTCBConst>)
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	f01e 0f10 	tst.w	lr, #16
 8006590:	bf08      	it	eq
 8006592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800659a:	6010      	str	r0, [r2, #0]
 800659c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80065a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80065a4:	f380 8811 	msr	BASEPRI, r0
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f7ff f81a 	bl	80055e8 <vTaskSwitchContext>
 80065b4:	f04f 0000 	mov.w	r0, #0
 80065b8:	f380 8811 	msr	BASEPRI, r0
 80065bc:	bc09      	pop	{r0, r3}
 80065be:	6819      	ldr	r1, [r3, #0]
 80065c0:	6808      	ldr	r0, [r1, #0]
 80065c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c6:	f01e 0f10 	tst.w	lr, #16
 80065ca:	bf08      	it	eq
 80065cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065d0:	f380 8809 	msr	PSP, r0
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	f3af 8000 	nop.w

080065e0 <pxCurrentTCBConst>:
 80065e0:	20000778 	.word	0x20000778
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065e4:	bf00      	nop
 80065e6:	bf00      	nop

080065e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006600:	f7fe ff34 	bl	800546c <xTaskIncrementTick>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800660a:	4b06      	ldr	r3, [pc, #24]	; (8006624 <SysTick_Handler+0x3c>)
 800660c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006610:	601a      	str	r2, [r3, #0]
 8006612:	2300      	movs	r3, #0
 8006614:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800661c:	bf00      	nop
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	e000ed04 	.word	0xe000ed04

08006628 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006628:	b480      	push	{r7}
 800662a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800662c:	4b0b      	ldr	r3, [pc, #44]	; (800665c <vPortSetupTimerInterrupt+0x34>)
 800662e:	2200      	movs	r2, #0
 8006630:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006632:	4b0b      	ldr	r3, [pc, #44]	; (8006660 <vPortSetupTimerInterrupt+0x38>)
 8006634:	2200      	movs	r2, #0
 8006636:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006638:	4b0a      	ldr	r3, [pc, #40]	; (8006664 <vPortSetupTimerInterrupt+0x3c>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a0a      	ldr	r2, [pc, #40]	; (8006668 <vPortSetupTimerInterrupt+0x40>)
 800663e:	fba2 2303 	umull	r2, r3, r2, r3
 8006642:	099b      	lsrs	r3, r3, #6
 8006644:	4a09      	ldr	r2, [pc, #36]	; (800666c <vPortSetupTimerInterrupt+0x44>)
 8006646:	3b01      	subs	r3, #1
 8006648:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800664a:	4b04      	ldr	r3, [pc, #16]	; (800665c <vPortSetupTimerInterrupt+0x34>)
 800664c:	2207      	movs	r2, #7
 800664e:	601a      	str	r2, [r3, #0]
}
 8006650:	bf00      	nop
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	e000e010 	.word	0xe000e010
 8006660:	e000e018 	.word	0xe000e018
 8006664:	20000018 	.word	0x20000018
 8006668:	10624dd3 	.word	0x10624dd3
 800666c:	e000e014 	.word	0xe000e014

08006670 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006670:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006680 <vPortEnableVFP+0x10>
 8006674:	6801      	ldr	r1, [r0, #0]
 8006676:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800667a:	6001      	str	r1, [r0, #0]
 800667c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800667e:	bf00      	nop
 8006680:	e000ed88 	.word	0xe000ed88

08006684 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800668a:	f3ef 8305 	mrs	r3, IPSR
 800668e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2b0f      	cmp	r3, #15
 8006694:	d913      	bls.n	80066be <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006696:	4a16      	ldr	r2, [pc, #88]	; (80066f0 <vPortValidateInterruptPriority+0x6c>)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4413      	add	r3, r2
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80066a0:	4b14      	ldr	r3, [pc, #80]	; (80066f4 <vPortValidateInterruptPriority+0x70>)
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	7afa      	ldrb	r2, [r7, #11]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d209      	bcs.n	80066be <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	607b      	str	r3, [r7, #4]
 80066bc:	e7fe      	b.n	80066bc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80066be:	4b0e      	ldr	r3, [pc, #56]	; (80066f8 <vPortValidateInterruptPriority+0x74>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80066c6:	4b0d      	ldr	r3, [pc, #52]	; (80066fc <vPortValidateInterruptPriority+0x78>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d909      	bls.n	80066e2 <vPortValidateInterruptPriority+0x5e>
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	603b      	str	r3, [r7, #0]
 80066e0:	e7fe      	b.n	80066e0 <vPortValidateInterruptPriority+0x5c>
	}
 80066e2:	bf00      	nop
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	e000e3f0 	.word	0xe000e3f0
 80066f4:	20000da4 	.word	0x20000da4
 80066f8:	e000ed0c 	.word	0xe000ed0c
 80066fc:	20000da8 	.word	0x20000da8

08006700 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b08a      	sub	sp, #40	; 0x28
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006708:	2300      	movs	r3, #0
 800670a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800670c:	f7fe fdf4 	bl	80052f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006710:	4b57      	ldr	r3, [pc, #348]	; (8006870 <pvPortMalloc+0x170>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006718:	f000 f90c 	bl	8006934 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800671c:	4b55      	ldr	r3, [pc, #340]	; (8006874 <pvPortMalloc+0x174>)
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4013      	ands	r3, r2
 8006724:	2b00      	cmp	r3, #0
 8006726:	f040 808c 	bne.w	8006842 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d01c      	beq.n	800676a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006730:	2208      	movs	r2, #8
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4413      	add	r3, r2
 8006736:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f003 0307 	and.w	r3, r3, #7
 800673e:	2b00      	cmp	r3, #0
 8006740:	d013      	beq.n	800676a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f023 0307 	bic.w	r3, r3, #7
 8006748:	3308      	adds	r3, #8
 800674a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	2b00      	cmp	r3, #0
 8006754:	d009      	beq.n	800676a <pvPortMalloc+0x6a>
 8006756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675a:	f383 8811 	msr	BASEPRI, r3
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	617b      	str	r3, [r7, #20]
 8006768:	e7fe      	b.n	8006768 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d068      	beq.n	8006842 <pvPortMalloc+0x142>
 8006770:	4b41      	ldr	r3, [pc, #260]	; (8006878 <pvPortMalloc+0x178>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	429a      	cmp	r2, r3
 8006778:	d863      	bhi.n	8006842 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800677a:	4b40      	ldr	r3, [pc, #256]	; (800687c <pvPortMalloc+0x17c>)
 800677c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800677e:	4b3f      	ldr	r3, [pc, #252]	; (800687c <pvPortMalloc+0x17c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006784:	e004      	b.n	8006790 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	429a      	cmp	r2, r3
 8006798:	d903      	bls.n	80067a2 <pvPortMalloc+0xa2>
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1f1      	bne.n	8006786 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80067a2:	4b33      	ldr	r3, [pc, #204]	; (8006870 <pvPortMalloc+0x170>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d04a      	beq.n	8006842 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2208      	movs	r2, #8
 80067b2:	4413      	add	r3, r2
 80067b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	685a      	ldr	r2, [r3, #4]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	1ad2      	subs	r2, r2, r3
 80067c6:	2308      	movs	r3, #8
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d91e      	bls.n	800680c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4413      	add	r3, r2
 80067d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	f003 0307 	and.w	r3, r3, #7
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d009      	beq.n	80067f4 <pvPortMalloc+0xf4>
 80067e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e4:	f383 8811 	msr	BASEPRI, r3
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	613b      	str	r3, [r7, #16]
 80067f2:	e7fe      	b.n	80067f2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	1ad2      	subs	r2, r2, r3
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006806:	69b8      	ldr	r0, [r7, #24]
 8006808:	f000 f8f6 	bl	80069f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800680c:	4b1a      	ldr	r3, [pc, #104]	; (8006878 <pvPortMalloc+0x178>)
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	4a18      	ldr	r2, [pc, #96]	; (8006878 <pvPortMalloc+0x178>)
 8006818:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800681a:	4b17      	ldr	r3, [pc, #92]	; (8006878 <pvPortMalloc+0x178>)
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	4b18      	ldr	r3, [pc, #96]	; (8006880 <pvPortMalloc+0x180>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	429a      	cmp	r2, r3
 8006824:	d203      	bcs.n	800682e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006826:	4b14      	ldr	r3, [pc, #80]	; (8006878 <pvPortMalloc+0x178>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a15      	ldr	r2, [pc, #84]	; (8006880 <pvPortMalloc+0x180>)
 800682c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	4b10      	ldr	r3, [pc, #64]	; (8006874 <pvPortMalloc+0x174>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	431a      	orrs	r2, r3
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	2200      	movs	r2, #0
 8006840:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006842:	f7fe fd67 	bl	8005314 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	f003 0307 	and.w	r3, r3, #7
 800684c:	2b00      	cmp	r3, #0
 800684e:	d009      	beq.n	8006864 <pvPortMalloc+0x164>
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	e7fe      	b.n	8006862 <pvPortMalloc+0x162>
	return pvReturn;
 8006864:	69fb      	ldr	r3, [r7, #28]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3728      	adds	r7, #40	; 0x28
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	200019b4 	.word	0x200019b4
 8006874:	200019c0 	.word	0x200019c0
 8006878:	200019b8 	.word	0x200019b8
 800687c:	200019ac 	.word	0x200019ac
 8006880:	200019bc 	.word	0x200019bc

08006884 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d046      	beq.n	8006924 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006896:	2308      	movs	r3, #8
 8006898:	425b      	negs	r3, r3
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	4413      	add	r3, r2
 800689e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	4b20      	ldr	r3, [pc, #128]	; (800692c <vPortFree+0xa8>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4013      	ands	r3, r2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d109      	bne.n	80068c6 <vPortFree+0x42>
 80068b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	e7fe      	b.n	80068c4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d009      	beq.n	80068e2 <vPortFree+0x5e>
 80068ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	60bb      	str	r3, [r7, #8]
 80068e0:	e7fe      	b.n	80068e0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	4b11      	ldr	r3, [pc, #68]	; (800692c <vPortFree+0xa8>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4013      	ands	r3, r2
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d019      	beq.n	8006924 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d115      	bne.n	8006924 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	4b0b      	ldr	r3, [pc, #44]	; (800692c <vPortFree+0xa8>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	43db      	mvns	r3, r3
 8006902:	401a      	ands	r2, r3
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006908:	f7fe fcf6 	bl	80052f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	4b07      	ldr	r3, [pc, #28]	; (8006930 <vPortFree+0xac>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4413      	add	r3, r2
 8006916:	4a06      	ldr	r2, [pc, #24]	; (8006930 <vPortFree+0xac>)
 8006918:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800691a:	6938      	ldr	r0, [r7, #16]
 800691c:	f000 f86c 	bl	80069f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006920:	f7fe fcf8 	bl	8005314 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006924:	bf00      	nop
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	200019c0 	.word	0x200019c0
 8006930:	200019b8 	.word	0x200019b8

08006934 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800693a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800693e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006940:	4b27      	ldr	r3, [pc, #156]	; (80069e0 <prvHeapInit+0xac>)
 8006942:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f003 0307 	and.w	r3, r3, #7
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00c      	beq.n	8006968 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3307      	adds	r3, #7
 8006952:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f023 0307 	bic.w	r3, r3, #7
 800695a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	4a1f      	ldr	r2, [pc, #124]	; (80069e0 <prvHeapInit+0xac>)
 8006964:	4413      	add	r3, r2
 8006966:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800696c:	4a1d      	ldr	r2, [pc, #116]	; (80069e4 <prvHeapInit+0xb0>)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006972:	4b1c      	ldr	r3, [pc, #112]	; (80069e4 <prvHeapInit+0xb0>)
 8006974:	2200      	movs	r2, #0
 8006976:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	4413      	add	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006980:	2208      	movs	r2, #8
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	1a9b      	subs	r3, r3, r2
 8006986:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 0307 	bic.w	r3, r3, #7
 800698e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4a15      	ldr	r2, [pc, #84]	; (80069e8 <prvHeapInit+0xb4>)
 8006994:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006996:	4b14      	ldr	r3, [pc, #80]	; (80069e8 <prvHeapInit+0xb4>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2200      	movs	r2, #0
 800699c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800699e:	4b12      	ldr	r3, [pc, #72]	; (80069e8 <prvHeapInit+0xb4>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2200      	movs	r2, #0
 80069a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	1ad2      	subs	r2, r2, r3
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069b4:	4b0c      	ldr	r3, [pc, #48]	; (80069e8 <prvHeapInit+0xb4>)
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	4a0a      	ldr	r2, [pc, #40]	; (80069ec <prvHeapInit+0xb8>)
 80069c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	4a09      	ldr	r2, [pc, #36]	; (80069f0 <prvHeapInit+0xbc>)
 80069ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069cc:	4b09      	ldr	r3, [pc, #36]	; (80069f4 <prvHeapInit+0xc0>)
 80069ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80069d2:	601a      	str	r2, [r3, #0]
}
 80069d4:	bf00      	nop
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	20000dac 	.word	0x20000dac
 80069e4:	200019ac 	.word	0x200019ac
 80069e8:	200019b4 	.word	0x200019b4
 80069ec:	200019bc 	.word	0x200019bc
 80069f0:	200019b8 	.word	0x200019b8
 80069f4:	200019c0 	.word	0x200019c0

080069f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a00:	4b28      	ldr	r3, [pc, #160]	; (8006aa4 <prvInsertBlockIntoFreeList+0xac>)
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	e002      	b.n	8006a0c <prvInsertBlockIntoFreeList+0x14>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d8f7      	bhi.n	8006a06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	4413      	add	r3, r2
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d108      	bne.n	8006a3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	441a      	add	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	441a      	add	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d118      	bne.n	8006a80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	4b15      	ldr	r3, [pc, #84]	; (8006aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d00d      	beq.n	8006a76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	441a      	add	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	e008      	b.n	8006a88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a76:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	e003      	b.n	8006a88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d002      	beq.n	8006a96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a96:	bf00      	nop
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	200019ac 	.word	0x200019ac
 8006aa8:	200019b4 	.word	0x200019b4

08006aac <__errno>:
 8006aac:	4b01      	ldr	r3, [pc, #4]	; (8006ab4 <__errno+0x8>)
 8006aae:	6818      	ldr	r0, [r3, #0]
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	20000028 	.word	0x20000028

08006ab8 <__libc_init_array>:
 8006ab8:	b570      	push	{r4, r5, r6, lr}
 8006aba:	4e0d      	ldr	r6, [pc, #52]	; (8006af0 <__libc_init_array+0x38>)
 8006abc:	4c0d      	ldr	r4, [pc, #52]	; (8006af4 <__libc_init_array+0x3c>)
 8006abe:	1ba4      	subs	r4, r4, r6
 8006ac0:	10a4      	asrs	r4, r4, #2
 8006ac2:	2500      	movs	r5, #0
 8006ac4:	42a5      	cmp	r5, r4
 8006ac6:	d109      	bne.n	8006adc <__libc_init_array+0x24>
 8006ac8:	4e0b      	ldr	r6, [pc, #44]	; (8006af8 <__libc_init_array+0x40>)
 8006aca:	4c0c      	ldr	r4, [pc, #48]	; (8006afc <__libc_init_array+0x44>)
 8006acc:	f000 fc28 	bl	8007320 <_init>
 8006ad0:	1ba4      	subs	r4, r4, r6
 8006ad2:	10a4      	asrs	r4, r4, #2
 8006ad4:	2500      	movs	r5, #0
 8006ad6:	42a5      	cmp	r5, r4
 8006ad8:	d105      	bne.n	8006ae6 <__libc_init_array+0x2e>
 8006ada:	bd70      	pop	{r4, r5, r6, pc}
 8006adc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ae0:	4798      	blx	r3
 8006ae2:	3501      	adds	r5, #1
 8006ae4:	e7ee      	b.n	8006ac4 <__libc_init_array+0xc>
 8006ae6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006aea:	4798      	blx	r3
 8006aec:	3501      	adds	r5, #1
 8006aee:	e7f2      	b.n	8006ad6 <__libc_init_array+0x1e>
 8006af0:	08007498 	.word	0x08007498
 8006af4:	08007498 	.word	0x08007498
 8006af8:	08007498 	.word	0x08007498
 8006afc:	0800749c 	.word	0x0800749c

08006b00 <memcpy>:
 8006b00:	b510      	push	{r4, lr}
 8006b02:	1e43      	subs	r3, r0, #1
 8006b04:	440a      	add	r2, r1
 8006b06:	4291      	cmp	r1, r2
 8006b08:	d100      	bne.n	8006b0c <memcpy+0xc>
 8006b0a:	bd10      	pop	{r4, pc}
 8006b0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b14:	e7f7      	b.n	8006b06 <memcpy+0x6>

08006b16 <memset>:
 8006b16:	4402      	add	r2, r0
 8006b18:	4603      	mov	r3, r0
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d100      	bne.n	8006b20 <memset+0xa>
 8006b1e:	4770      	bx	lr
 8006b20:	f803 1b01 	strb.w	r1, [r3], #1
 8006b24:	e7f9      	b.n	8006b1a <memset+0x4>
	...

08006b28 <siprintf>:
 8006b28:	b40e      	push	{r1, r2, r3}
 8006b2a:	b500      	push	{lr}
 8006b2c:	b09c      	sub	sp, #112	; 0x70
 8006b2e:	ab1d      	add	r3, sp, #116	; 0x74
 8006b30:	9002      	str	r0, [sp, #8]
 8006b32:	9006      	str	r0, [sp, #24]
 8006b34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b38:	4809      	ldr	r0, [pc, #36]	; (8006b60 <siprintf+0x38>)
 8006b3a:	9107      	str	r1, [sp, #28]
 8006b3c:	9104      	str	r1, [sp, #16]
 8006b3e:	4909      	ldr	r1, [pc, #36]	; (8006b64 <siprintf+0x3c>)
 8006b40:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b44:	9105      	str	r1, [sp, #20]
 8006b46:	6800      	ldr	r0, [r0, #0]
 8006b48:	9301      	str	r3, [sp, #4]
 8006b4a:	a902      	add	r1, sp, #8
 8006b4c:	f000 f866 	bl	8006c1c <_svfiprintf_r>
 8006b50:	9b02      	ldr	r3, [sp, #8]
 8006b52:	2200      	movs	r2, #0
 8006b54:	701a      	strb	r2, [r3, #0]
 8006b56:	b01c      	add	sp, #112	; 0x70
 8006b58:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b5c:	b003      	add	sp, #12
 8006b5e:	4770      	bx	lr
 8006b60:	20000028 	.word	0x20000028
 8006b64:	ffff0208 	.word	0xffff0208

08006b68 <__ssputs_r>:
 8006b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b6c:	688e      	ldr	r6, [r1, #8]
 8006b6e:	429e      	cmp	r6, r3
 8006b70:	4682      	mov	sl, r0
 8006b72:	460c      	mov	r4, r1
 8006b74:	4690      	mov	r8, r2
 8006b76:	4699      	mov	r9, r3
 8006b78:	d837      	bhi.n	8006bea <__ssputs_r+0x82>
 8006b7a:	898a      	ldrh	r2, [r1, #12]
 8006b7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b80:	d031      	beq.n	8006be6 <__ssputs_r+0x7e>
 8006b82:	6825      	ldr	r5, [r4, #0]
 8006b84:	6909      	ldr	r1, [r1, #16]
 8006b86:	1a6f      	subs	r7, r5, r1
 8006b88:	6965      	ldr	r5, [r4, #20]
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b90:	fb95 f5f3 	sdiv	r5, r5, r3
 8006b94:	f109 0301 	add.w	r3, r9, #1
 8006b98:	443b      	add	r3, r7
 8006b9a:	429d      	cmp	r5, r3
 8006b9c:	bf38      	it	cc
 8006b9e:	461d      	movcc	r5, r3
 8006ba0:	0553      	lsls	r3, r2, #21
 8006ba2:	d530      	bpl.n	8006c06 <__ssputs_r+0x9e>
 8006ba4:	4629      	mov	r1, r5
 8006ba6:	f000 fb21 	bl	80071ec <_malloc_r>
 8006baa:	4606      	mov	r6, r0
 8006bac:	b950      	cbnz	r0, 8006bc4 <__ssputs_r+0x5c>
 8006bae:	230c      	movs	r3, #12
 8006bb0:	f8ca 3000 	str.w	r3, [sl]
 8006bb4:	89a3      	ldrh	r3, [r4, #12]
 8006bb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bba:	81a3      	strh	r3, [r4, #12]
 8006bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc4:	463a      	mov	r2, r7
 8006bc6:	6921      	ldr	r1, [r4, #16]
 8006bc8:	f7ff ff9a 	bl	8006b00 <memcpy>
 8006bcc:	89a3      	ldrh	r3, [r4, #12]
 8006bce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd6:	81a3      	strh	r3, [r4, #12]
 8006bd8:	6126      	str	r6, [r4, #16]
 8006bda:	6165      	str	r5, [r4, #20]
 8006bdc:	443e      	add	r6, r7
 8006bde:	1bed      	subs	r5, r5, r7
 8006be0:	6026      	str	r6, [r4, #0]
 8006be2:	60a5      	str	r5, [r4, #8]
 8006be4:	464e      	mov	r6, r9
 8006be6:	454e      	cmp	r6, r9
 8006be8:	d900      	bls.n	8006bec <__ssputs_r+0x84>
 8006bea:	464e      	mov	r6, r9
 8006bec:	4632      	mov	r2, r6
 8006bee:	4641      	mov	r1, r8
 8006bf0:	6820      	ldr	r0, [r4, #0]
 8006bf2:	f000 fa93 	bl	800711c <memmove>
 8006bf6:	68a3      	ldr	r3, [r4, #8]
 8006bf8:	1b9b      	subs	r3, r3, r6
 8006bfa:	60a3      	str	r3, [r4, #8]
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	441e      	add	r6, r3
 8006c00:	6026      	str	r6, [r4, #0]
 8006c02:	2000      	movs	r0, #0
 8006c04:	e7dc      	b.n	8006bc0 <__ssputs_r+0x58>
 8006c06:	462a      	mov	r2, r5
 8006c08:	f000 fb4a 	bl	80072a0 <_realloc_r>
 8006c0c:	4606      	mov	r6, r0
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	d1e2      	bne.n	8006bd8 <__ssputs_r+0x70>
 8006c12:	6921      	ldr	r1, [r4, #16]
 8006c14:	4650      	mov	r0, sl
 8006c16:	f000 fa9b 	bl	8007150 <_free_r>
 8006c1a:	e7c8      	b.n	8006bae <__ssputs_r+0x46>

08006c1c <_svfiprintf_r>:
 8006c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c20:	461d      	mov	r5, r3
 8006c22:	898b      	ldrh	r3, [r1, #12]
 8006c24:	061f      	lsls	r7, r3, #24
 8006c26:	b09d      	sub	sp, #116	; 0x74
 8006c28:	4680      	mov	r8, r0
 8006c2a:	460c      	mov	r4, r1
 8006c2c:	4616      	mov	r6, r2
 8006c2e:	d50f      	bpl.n	8006c50 <_svfiprintf_r+0x34>
 8006c30:	690b      	ldr	r3, [r1, #16]
 8006c32:	b96b      	cbnz	r3, 8006c50 <_svfiprintf_r+0x34>
 8006c34:	2140      	movs	r1, #64	; 0x40
 8006c36:	f000 fad9 	bl	80071ec <_malloc_r>
 8006c3a:	6020      	str	r0, [r4, #0]
 8006c3c:	6120      	str	r0, [r4, #16]
 8006c3e:	b928      	cbnz	r0, 8006c4c <_svfiprintf_r+0x30>
 8006c40:	230c      	movs	r3, #12
 8006c42:	f8c8 3000 	str.w	r3, [r8]
 8006c46:	f04f 30ff 	mov.w	r0, #4294967295
 8006c4a:	e0c8      	b.n	8006dde <_svfiprintf_r+0x1c2>
 8006c4c:	2340      	movs	r3, #64	; 0x40
 8006c4e:	6163      	str	r3, [r4, #20]
 8006c50:	2300      	movs	r3, #0
 8006c52:	9309      	str	r3, [sp, #36]	; 0x24
 8006c54:	2320      	movs	r3, #32
 8006c56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c5a:	2330      	movs	r3, #48	; 0x30
 8006c5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c60:	9503      	str	r5, [sp, #12]
 8006c62:	f04f 0b01 	mov.w	fp, #1
 8006c66:	4637      	mov	r7, r6
 8006c68:	463d      	mov	r5, r7
 8006c6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006c6e:	b10b      	cbz	r3, 8006c74 <_svfiprintf_r+0x58>
 8006c70:	2b25      	cmp	r3, #37	; 0x25
 8006c72:	d13e      	bne.n	8006cf2 <_svfiprintf_r+0xd6>
 8006c74:	ebb7 0a06 	subs.w	sl, r7, r6
 8006c78:	d00b      	beq.n	8006c92 <_svfiprintf_r+0x76>
 8006c7a:	4653      	mov	r3, sl
 8006c7c:	4632      	mov	r2, r6
 8006c7e:	4621      	mov	r1, r4
 8006c80:	4640      	mov	r0, r8
 8006c82:	f7ff ff71 	bl	8006b68 <__ssputs_r>
 8006c86:	3001      	adds	r0, #1
 8006c88:	f000 80a4 	beq.w	8006dd4 <_svfiprintf_r+0x1b8>
 8006c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c8e:	4453      	add	r3, sl
 8006c90:	9309      	str	r3, [sp, #36]	; 0x24
 8006c92:	783b      	ldrb	r3, [r7, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 809d 	beq.w	8006dd4 <_svfiprintf_r+0x1b8>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ca4:	9304      	str	r3, [sp, #16]
 8006ca6:	9307      	str	r3, [sp, #28]
 8006ca8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cac:	931a      	str	r3, [sp, #104]	; 0x68
 8006cae:	462f      	mov	r7, r5
 8006cb0:	2205      	movs	r2, #5
 8006cb2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006cb6:	4850      	ldr	r0, [pc, #320]	; (8006df8 <_svfiprintf_r+0x1dc>)
 8006cb8:	f7f9 fa92 	bl	80001e0 <memchr>
 8006cbc:	9b04      	ldr	r3, [sp, #16]
 8006cbe:	b9d0      	cbnz	r0, 8006cf6 <_svfiprintf_r+0xda>
 8006cc0:	06d9      	lsls	r1, r3, #27
 8006cc2:	bf44      	itt	mi
 8006cc4:	2220      	movmi	r2, #32
 8006cc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006cca:	071a      	lsls	r2, r3, #28
 8006ccc:	bf44      	itt	mi
 8006cce:	222b      	movmi	r2, #43	; 0x2b
 8006cd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006cd4:	782a      	ldrb	r2, [r5, #0]
 8006cd6:	2a2a      	cmp	r2, #42	; 0x2a
 8006cd8:	d015      	beq.n	8006d06 <_svfiprintf_r+0xea>
 8006cda:	9a07      	ldr	r2, [sp, #28]
 8006cdc:	462f      	mov	r7, r5
 8006cde:	2000      	movs	r0, #0
 8006ce0:	250a      	movs	r5, #10
 8006ce2:	4639      	mov	r1, r7
 8006ce4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ce8:	3b30      	subs	r3, #48	; 0x30
 8006cea:	2b09      	cmp	r3, #9
 8006cec:	d94d      	bls.n	8006d8a <_svfiprintf_r+0x16e>
 8006cee:	b1b8      	cbz	r0, 8006d20 <_svfiprintf_r+0x104>
 8006cf0:	e00f      	b.n	8006d12 <_svfiprintf_r+0xf6>
 8006cf2:	462f      	mov	r7, r5
 8006cf4:	e7b8      	b.n	8006c68 <_svfiprintf_r+0x4c>
 8006cf6:	4a40      	ldr	r2, [pc, #256]	; (8006df8 <_svfiprintf_r+0x1dc>)
 8006cf8:	1a80      	subs	r0, r0, r2
 8006cfa:	fa0b f000 	lsl.w	r0, fp, r0
 8006cfe:	4318      	orrs	r0, r3
 8006d00:	9004      	str	r0, [sp, #16]
 8006d02:	463d      	mov	r5, r7
 8006d04:	e7d3      	b.n	8006cae <_svfiprintf_r+0x92>
 8006d06:	9a03      	ldr	r2, [sp, #12]
 8006d08:	1d11      	adds	r1, r2, #4
 8006d0a:	6812      	ldr	r2, [r2, #0]
 8006d0c:	9103      	str	r1, [sp, #12]
 8006d0e:	2a00      	cmp	r2, #0
 8006d10:	db01      	blt.n	8006d16 <_svfiprintf_r+0xfa>
 8006d12:	9207      	str	r2, [sp, #28]
 8006d14:	e004      	b.n	8006d20 <_svfiprintf_r+0x104>
 8006d16:	4252      	negs	r2, r2
 8006d18:	f043 0302 	orr.w	r3, r3, #2
 8006d1c:	9207      	str	r2, [sp, #28]
 8006d1e:	9304      	str	r3, [sp, #16]
 8006d20:	783b      	ldrb	r3, [r7, #0]
 8006d22:	2b2e      	cmp	r3, #46	; 0x2e
 8006d24:	d10c      	bne.n	8006d40 <_svfiprintf_r+0x124>
 8006d26:	787b      	ldrb	r3, [r7, #1]
 8006d28:	2b2a      	cmp	r3, #42	; 0x2a
 8006d2a:	d133      	bne.n	8006d94 <_svfiprintf_r+0x178>
 8006d2c:	9b03      	ldr	r3, [sp, #12]
 8006d2e:	1d1a      	adds	r2, r3, #4
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	9203      	str	r2, [sp, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	bfb8      	it	lt
 8006d38:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d3c:	3702      	adds	r7, #2
 8006d3e:	9305      	str	r3, [sp, #20]
 8006d40:	4d2e      	ldr	r5, [pc, #184]	; (8006dfc <_svfiprintf_r+0x1e0>)
 8006d42:	7839      	ldrb	r1, [r7, #0]
 8006d44:	2203      	movs	r2, #3
 8006d46:	4628      	mov	r0, r5
 8006d48:	f7f9 fa4a 	bl	80001e0 <memchr>
 8006d4c:	b138      	cbz	r0, 8006d5e <_svfiprintf_r+0x142>
 8006d4e:	2340      	movs	r3, #64	; 0x40
 8006d50:	1b40      	subs	r0, r0, r5
 8006d52:	fa03 f000 	lsl.w	r0, r3, r0
 8006d56:	9b04      	ldr	r3, [sp, #16]
 8006d58:	4303      	orrs	r3, r0
 8006d5a:	3701      	adds	r7, #1
 8006d5c:	9304      	str	r3, [sp, #16]
 8006d5e:	7839      	ldrb	r1, [r7, #0]
 8006d60:	4827      	ldr	r0, [pc, #156]	; (8006e00 <_svfiprintf_r+0x1e4>)
 8006d62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d66:	2206      	movs	r2, #6
 8006d68:	1c7e      	adds	r6, r7, #1
 8006d6a:	f7f9 fa39 	bl	80001e0 <memchr>
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	d038      	beq.n	8006de4 <_svfiprintf_r+0x1c8>
 8006d72:	4b24      	ldr	r3, [pc, #144]	; (8006e04 <_svfiprintf_r+0x1e8>)
 8006d74:	bb13      	cbnz	r3, 8006dbc <_svfiprintf_r+0x1a0>
 8006d76:	9b03      	ldr	r3, [sp, #12]
 8006d78:	3307      	adds	r3, #7
 8006d7a:	f023 0307 	bic.w	r3, r3, #7
 8006d7e:	3308      	adds	r3, #8
 8006d80:	9303      	str	r3, [sp, #12]
 8006d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d84:	444b      	add	r3, r9
 8006d86:	9309      	str	r3, [sp, #36]	; 0x24
 8006d88:	e76d      	b.n	8006c66 <_svfiprintf_r+0x4a>
 8006d8a:	fb05 3202 	mla	r2, r5, r2, r3
 8006d8e:	2001      	movs	r0, #1
 8006d90:	460f      	mov	r7, r1
 8006d92:	e7a6      	b.n	8006ce2 <_svfiprintf_r+0xc6>
 8006d94:	2300      	movs	r3, #0
 8006d96:	3701      	adds	r7, #1
 8006d98:	9305      	str	r3, [sp, #20]
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	250a      	movs	r5, #10
 8006d9e:	4638      	mov	r0, r7
 8006da0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006da4:	3a30      	subs	r2, #48	; 0x30
 8006da6:	2a09      	cmp	r2, #9
 8006da8:	d903      	bls.n	8006db2 <_svfiprintf_r+0x196>
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0c8      	beq.n	8006d40 <_svfiprintf_r+0x124>
 8006dae:	9105      	str	r1, [sp, #20]
 8006db0:	e7c6      	b.n	8006d40 <_svfiprintf_r+0x124>
 8006db2:	fb05 2101 	mla	r1, r5, r1, r2
 8006db6:	2301      	movs	r3, #1
 8006db8:	4607      	mov	r7, r0
 8006dba:	e7f0      	b.n	8006d9e <_svfiprintf_r+0x182>
 8006dbc:	ab03      	add	r3, sp, #12
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	4622      	mov	r2, r4
 8006dc2:	4b11      	ldr	r3, [pc, #68]	; (8006e08 <_svfiprintf_r+0x1ec>)
 8006dc4:	a904      	add	r1, sp, #16
 8006dc6:	4640      	mov	r0, r8
 8006dc8:	f3af 8000 	nop.w
 8006dcc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006dd0:	4681      	mov	r9, r0
 8006dd2:	d1d6      	bne.n	8006d82 <_svfiprintf_r+0x166>
 8006dd4:	89a3      	ldrh	r3, [r4, #12]
 8006dd6:	065b      	lsls	r3, r3, #25
 8006dd8:	f53f af35 	bmi.w	8006c46 <_svfiprintf_r+0x2a>
 8006ddc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dde:	b01d      	add	sp, #116	; 0x74
 8006de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de4:	ab03      	add	r3, sp, #12
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	4622      	mov	r2, r4
 8006dea:	4b07      	ldr	r3, [pc, #28]	; (8006e08 <_svfiprintf_r+0x1ec>)
 8006dec:	a904      	add	r1, sp, #16
 8006dee:	4640      	mov	r0, r8
 8006df0:	f000 f882 	bl	8006ef8 <_printf_i>
 8006df4:	e7ea      	b.n	8006dcc <_svfiprintf_r+0x1b0>
 8006df6:	bf00      	nop
 8006df8:	08007464 	.word	0x08007464
 8006dfc:	0800746a 	.word	0x0800746a
 8006e00:	0800746e 	.word	0x0800746e
 8006e04:	00000000 	.word	0x00000000
 8006e08:	08006b69 	.word	0x08006b69

08006e0c <_printf_common>:
 8006e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e10:	4691      	mov	r9, r2
 8006e12:	461f      	mov	r7, r3
 8006e14:	688a      	ldr	r2, [r1, #8]
 8006e16:	690b      	ldr	r3, [r1, #16]
 8006e18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	bfb8      	it	lt
 8006e20:	4613      	movlt	r3, r2
 8006e22:	f8c9 3000 	str.w	r3, [r9]
 8006e26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	460c      	mov	r4, r1
 8006e2e:	b112      	cbz	r2, 8006e36 <_printf_common+0x2a>
 8006e30:	3301      	adds	r3, #1
 8006e32:	f8c9 3000 	str.w	r3, [r9]
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	0699      	lsls	r1, r3, #26
 8006e3a:	bf42      	ittt	mi
 8006e3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006e40:	3302      	addmi	r3, #2
 8006e42:	f8c9 3000 	strmi.w	r3, [r9]
 8006e46:	6825      	ldr	r5, [r4, #0]
 8006e48:	f015 0506 	ands.w	r5, r5, #6
 8006e4c:	d107      	bne.n	8006e5e <_printf_common+0x52>
 8006e4e:	f104 0a19 	add.w	sl, r4, #25
 8006e52:	68e3      	ldr	r3, [r4, #12]
 8006e54:	f8d9 2000 	ldr.w	r2, [r9]
 8006e58:	1a9b      	subs	r3, r3, r2
 8006e5a:	42ab      	cmp	r3, r5
 8006e5c:	dc28      	bgt.n	8006eb0 <_printf_common+0xa4>
 8006e5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006e62:	6822      	ldr	r2, [r4, #0]
 8006e64:	3300      	adds	r3, #0
 8006e66:	bf18      	it	ne
 8006e68:	2301      	movne	r3, #1
 8006e6a:	0692      	lsls	r2, r2, #26
 8006e6c:	d42d      	bmi.n	8006eca <_printf_common+0xbe>
 8006e6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e72:	4639      	mov	r1, r7
 8006e74:	4630      	mov	r0, r6
 8006e76:	47c0      	blx	r8
 8006e78:	3001      	adds	r0, #1
 8006e7a:	d020      	beq.n	8006ebe <_printf_common+0xb2>
 8006e7c:	6823      	ldr	r3, [r4, #0]
 8006e7e:	68e5      	ldr	r5, [r4, #12]
 8006e80:	f8d9 2000 	ldr.w	r2, [r9]
 8006e84:	f003 0306 	and.w	r3, r3, #6
 8006e88:	2b04      	cmp	r3, #4
 8006e8a:	bf08      	it	eq
 8006e8c:	1aad      	subeq	r5, r5, r2
 8006e8e:	68a3      	ldr	r3, [r4, #8]
 8006e90:	6922      	ldr	r2, [r4, #16]
 8006e92:	bf0c      	ite	eq
 8006e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e98:	2500      	movne	r5, #0
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	bfc4      	itt	gt
 8006e9e:	1a9b      	subgt	r3, r3, r2
 8006ea0:	18ed      	addgt	r5, r5, r3
 8006ea2:	f04f 0900 	mov.w	r9, #0
 8006ea6:	341a      	adds	r4, #26
 8006ea8:	454d      	cmp	r5, r9
 8006eaa:	d11a      	bne.n	8006ee2 <_printf_common+0xd6>
 8006eac:	2000      	movs	r0, #0
 8006eae:	e008      	b.n	8006ec2 <_printf_common+0xb6>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	4652      	mov	r2, sl
 8006eb4:	4639      	mov	r1, r7
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	47c0      	blx	r8
 8006eba:	3001      	adds	r0, #1
 8006ebc:	d103      	bne.n	8006ec6 <_printf_common+0xba>
 8006ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ec6:	3501      	adds	r5, #1
 8006ec8:	e7c3      	b.n	8006e52 <_printf_common+0x46>
 8006eca:	18e1      	adds	r1, r4, r3
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	2030      	movs	r0, #48	; 0x30
 8006ed0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ed4:	4422      	add	r2, r4
 8006ed6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006eda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ede:	3302      	adds	r3, #2
 8006ee0:	e7c5      	b.n	8006e6e <_printf_common+0x62>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	4622      	mov	r2, r4
 8006ee6:	4639      	mov	r1, r7
 8006ee8:	4630      	mov	r0, r6
 8006eea:	47c0      	blx	r8
 8006eec:	3001      	adds	r0, #1
 8006eee:	d0e6      	beq.n	8006ebe <_printf_common+0xb2>
 8006ef0:	f109 0901 	add.w	r9, r9, #1
 8006ef4:	e7d8      	b.n	8006ea8 <_printf_common+0x9c>
	...

08006ef8 <_printf_i>:
 8006ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006efc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006f00:	460c      	mov	r4, r1
 8006f02:	7e09      	ldrb	r1, [r1, #24]
 8006f04:	b085      	sub	sp, #20
 8006f06:	296e      	cmp	r1, #110	; 0x6e
 8006f08:	4617      	mov	r7, r2
 8006f0a:	4606      	mov	r6, r0
 8006f0c:	4698      	mov	r8, r3
 8006f0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f10:	f000 80b3 	beq.w	800707a <_printf_i+0x182>
 8006f14:	d822      	bhi.n	8006f5c <_printf_i+0x64>
 8006f16:	2963      	cmp	r1, #99	; 0x63
 8006f18:	d036      	beq.n	8006f88 <_printf_i+0x90>
 8006f1a:	d80a      	bhi.n	8006f32 <_printf_i+0x3a>
 8006f1c:	2900      	cmp	r1, #0
 8006f1e:	f000 80b9 	beq.w	8007094 <_printf_i+0x19c>
 8006f22:	2958      	cmp	r1, #88	; 0x58
 8006f24:	f000 8083 	beq.w	800702e <_printf_i+0x136>
 8006f28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f2c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006f30:	e032      	b.n	8006f98 <_printf_i+0xa0>
 8006f32:	2964      	cmp	r1, #100	; 0x64
 8006f34:	d001      	beq.n	8006f3a <_printf_i+0x42>
 8006f36:	2969      	cmp	r1, #105	; 0x69
 8006f38:	d1f6      	bne.n	8006f28 <_printf_i+0x30>
 8006f3a:	6820      	ldr	r0, [r4, #0]
 8006f3c:	6813      	ldr	r3, [r2, #0]
 8006f3e:	0605      	lsls	r5, r0, #24
 8006f40:	f103 0104 	add.w	r1, r3, #4
 8006f44:	d52a      	bpl.n	8006f9c <_printf_i+0xa4>
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6011      	str	r1, [r2, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	da03      	bge.n	8006f56 <_printf_i+0x5e>
 8006f4e:	222d      	movs	r2, #45	; 0x2d
 8006f50:	425b      	negs	r3, r3
 8006f52:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006f56:	486f      	ldr	r0, [pc, #444]	; (8007114 <_printf_i+0x21c>)
 8006f58:	220a      	movs	r2, #10
 8006f5a:	e039      	b.n	8006fd0 <_printf_i+0xd8>
 8006f5c:	2973      	cmp	r1, #115	; 0x73
 8006f5e:	f000 809d 	beq.w	800709c <_printf_i+0x1a4>
 8006f62:	d808      	bhi.n	8006f76 <_printf_i+0x7e>
 8006f64:	296f      	cmp	r1, #111	; 0x6f
 8006f66:	d020      	beq.n	8006faa <_printf_i+0xb2>
 8006f68:	2970      	cmp	r1, #112	; 0x70
 8006f6a:	d1dd      	bne.n	8006f28 <_printf_i+0x30>
 8006f6c:	6823      	ldr	r3, [r4, #0]
 8006f6e:	f043 0320 	orr.w	r3, r3, #32
 8006f72:	6023      	str	r3, [r4, #0]
 8006f74:	e003      	b.n	8006f7e <_printf_i+0x86>
 8006f76:	2975      	cmp	r1, #117	; 0x75
 8006f78:	d017      	beq.n	8006faa <_printf_i+0xb2>
 8006f7a:	2978      	cmp	r1, #120	; 0x78
 8006f7c:	d1d4      	bne.n	8006f28 <_printf_i+0x30>
 8006f7e:	2378      	movs	r3, #120	; 0x78
 8006f80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f84:	4864      	ldr	r0, [pc, #400]	; (8007118 <_printf_i+0x220>)
 8006f86:	e055      	b.n	8007034 <_printf_i+0x13c>
 8006f88:	6813      	ldr	r3, [r2, #0]
 8006f8a:	1d19      	adds	r1, r3, #4
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	6011      	str	r1, [r2, #0]
 8006f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e08c      	b.n	80070b6 <_printf_i+0x1be>
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	6011      	str	r1, [r2, #0]
 8006fa0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006fa4:	bf18      	it	ne
 8006fa6:	b21b      	sxthne	r3, r3
 8006fa8:	e7cf      	b.n	8006f4a <_printf_i+0x52>
 8006faa:	6813      	ldr	r3, [r2, #0]
 8006fac:	6825      	ldr	r5, [r4, #0]
 8006fae:	1d18      	adds	r0, r3, #4
 8006fb0:	6010      	str	r0, [r2, #0]
 8006fb2:	0628      	lsls	r0, r5, #24
 8006fb4:	d501      	bpl.n	8006fba <_printf_i+0xc2>
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	e002      	b.n	8006fc0 <_printf_i+0xc8>
 8006fba:	0668      	lsls	r0, r5, #25
 8006fbc:	d5fb      	bpl.n	8006fb6 <_printf_i+0xbe>
 8006fbe:	881b      	ldrh	r3, [r3, #0]
 8006fc0:	4854      	ldr	r0, [pc, #336]	; (8007114 <_printf_i+0x21c>)
 8006fc2:	296f      	cmp	r1, #111	; 0x6f
 8006fc4:	bf14      	ite	ne
 8006fc6:	220a      	movne	r2, #10
 8006fc8:	2208      	moveq	r2, #8
 8006fca:	2100      	movs	r1, #0
 8006fcc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fd0:	6865      	ldr	r5, [r4, #4]
 8006fd2:	60a5      	str	r5, [r4, #8]
 8006fd4:	2d00      	cmp	r5, #0
 8006fd6:	f2c0 8095 	blt.w	8007104 <_printf_i+0x20c>
 8006fda:	6821      	ldr	r1, [r4, #0]
 8006fdc:	f021 0104 	bic.w	r1, r1, #4
 8006fe0:	6021      	str	r1, [r4, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d13d      	bne.n	8007062 <_printf_i+0x16a>
 8006fe6:	2d00      	cmp	r5, #0
 8006fe8:	f040 808e 	bne.w	8007108 <_printf_i+0x210>
 8006fec:	4665      	mov	r5, ip
 8006fee:	2a08      	cmp	r2, #8
 8006ff0:	d10b      	bne.n	800700a <_printf_i+0x112>
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	07db      	lsls	r3, r3, #31
 8006ff6:	d508      	bpl.n	800700a <_printf_i+0x112>
 8006ff8:	6923      	ldr	r3, [r4, #16]
 8006ffa:	6862      	ldr	r2, [r4, #4]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	bfde      	ittt	le
 8007000:	2330      	movle	r3, #48	; 0x30
 8007002:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007006:	f105 35ff 	addle.w	r5, r5, #4294967295
 800700a:	ebac 0305 	sub.w	r3, ip, r5
 800700e:	6123      	str	r3, [r4, #16]
 8007010:	f8cd 8000 	str.w	r8, [sp]
 8007014:	463b      	mov	r3, r7
 8007016:	aa03      	add	r2, sp, #12
 8007018:	4621      	mov	r1, r4
 800701a:	4630      	mov	r0, r6
 800701c:	f7ff fef6 	bl	8006e0c <_printf_common>
 8007020:	3001      	adds	r0, #1
 8007022:	d14d      	bne.n	80070c0 <_printf_i+0x1c8>
 8007024:	f04f 30ff 	mov.w	r0, #4294967295
 8007028:	b005      	add	sp, #20
 800702a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800702e:	4839      	ldr	r0, [pc, #228]	; (8007114 <_printf_i+0x21c>)
 8007030:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007034:	6813      	ldr	r3, [r2, #0]
 8007036:	6821      	ldr	r1, [r4, #0]
 8007038:	1d1d      	adds	r5, r3, #4
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6015      	str	r5, [r2, #0]
 800703e:	060a      	lsls	r2, r1, #24
 8007040:	d50b      	bpl.n	800705a <_printf_i+0x162>
 8007042:	07ca      	lsls	r2, r1, #31
 8007044:	bf44      	itt	mi
 8007046:	f041 0120 	orrmi.w	r1, r1, #32
 800704a:	6021      	strmi	r1, [r4, #0]
 800704c:	b91b      	cbnz	r3, 8007056 <_printf_i+0x15e>
 800704e:	6822      	ldr	r2, [r4, #0]
 8007050:	f022 0220 	bic.w	r2, r2, #32
 8007054:	6022      	str	r2, [r4, #0]
 8007056:	2210      	movs	r2, #16
 8007058:	e7b7      	b.n	8006fca <_printf_i+0xd2>
 800705a:	064d      	lsls	r5, r1, #25
 800705c:	bf48      	it	mi
 800705e:	b29b      	uxthmi	r3, r3
 8007060:	e7ef      	b.n	8007042 <_printf_i+0x14a>
 8007062:	4665      	mov	r5, ip
 8007064:	fbb3 f1f2 	udiv	r1, r3, r2
 8007068:	fb02 3311 	mls	r3, r2, r1, r3
 800706c:	5cc3      	ldrb	r3, [r0, r3]
 800706e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007072:	460b      	mov	r3, r1
 8007074:	2900      	cmp	r1, #0
 8007076:	d1f5      	bne.n	8007064 <_printf_i+0x16c>
 8007078:	e7b9      	b.n	8006fee <_printf_i+0xf6>
 800707a:	6813      	ldr	r3, [r2, #0]
 800707c:	6825      	ldr	r5, [r4, #0]
 800707e:	6961      	ldr	r1, [r4, #20]
 8007080:	1d18      	adds	r0, r3, #4
 8007082:	6010      	str	r0, [r2, #0]
 8007084:	0628      	lsls	r0, r5, #24
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	d501      	bpl.n	800708e <_printf_i+0x196>
 800708a:	6019      	str	r1, [r3, #0]
 800708c:	e002      	b.n	8007094 <_printf_i+0x19c>
 800708e:	066a      	lsls	r2, r5, #25
 8007090:	d5fb      	bpl.n	800708a <_printf_i+0x192>
 8007092:	8019      	strh	r1, [r3, #0]
 8007094:	2300      	movs	r3, #0
 8007096:	6123      	str	r3, [r4, #16]
 8007098:	4665      	mov	r5, ip
 800709a:	e7b9      	b.n	8007010 <_printf_i+0x118>
 800709c:	6813      	ldr	r3, [r2, #0]
 800709e:	1d19      	adds	r1, r3, #4
 80070a0:	6011      	str	r1, [r2, #0]
 80070a2:	681d      	ldr	r5, [r3, #0]
 80070a4:	6862      	ldr	r2, [r4, #4]
 80070a6:	2100      	movs	r1, #0
 80070a8:	4628      	mov	r0, r5
 80070aa:	f7f9 f899 	bl	80001e0 <memchr>
 80070ae:	b108      	cbz	r0, 80070b4 <_printf_i+0x1bc>
 80070b0:	1b40      	subs	r0, r0, r5
 80070b2:	6060      	str	r0, [r4, #4]
 80070b4:	6863      	ldr	r3, [r4, #4]
 80070b6:	6123      	str	r3, [r4, #16]
 80070b8:	2300      	movs	r3, #0
 80070ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070be:	e7a7      	b.n	8007010 <_printf_i+0x118>
 80070c0:	6923      	ldr	r3, [r4, #16]
 80070c2:	462a      	mov	r2, r5
 80070c4:	4639      	mov	r1, r7
 80070c6:	4630      	mov	r0, r6
 80070c8:	47c0      	blx	r8
 80070ca:	3001      	adds	r0, #1
 80070cc:	d0aa      	beq.n	8007024 <_printf_i+0x12c>
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	079b      	lsls	r3, r3, #30
 80070d2:	d413      	bmi.n	80070fc <_printf_i+0x204>
 80070d4:	68e0      	ldr	r0, [r4, #12]
 80070d6:	9b03      	ldr	r3, [sp, #12]
 80070d8:	4298      	cmp	r0, r3
 80070da:	bfb8      	it	lt
 80070dc:	4618      	movlt	r0, r3
 80070de:	e7a3      	b.n	8007028 <_printf_i+0x130>
 80070e0:	2301      	movs	r3, #1
 80070e2:	464a      	mov	r2, r9
 80070e4:	4639      	mov	r1, r7
 80070e6:	4630      	mov	r0, r6
 80070e8:	47c0      	blx	r8
 80070ea:	3001      	adds	r0, #1
 80070ec:	d09a      	beq.n	8007024 <_printf_i+0x12c>
 80070ee:	3501      	adds	r5, #1
 80070f0:	68e3      	ldr	r3, [r4, #12]
 80070f2:	9a03      	ldr	r2, [sp, #12]
 80070f4:	1a9b      	subs	r3, r3, r2
 80070f6:	42ab      	cmp	r3, r5
 80070f8:	dcf2      	bgt.n	80070e0 <_printf_i+0x1e8>
 80070fa:	e7eb      	b.n	80070d4 <_printf_i+0x1dc>
 80070fc:	2500      	movs	r5, #0
 80070fe:	f104 0919 	add.w	r9, r4, #25
 8007102:	e7f5      	b.n	80070f0 <_printf_i+0x1f8>
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1ac      	bne.n	8007062 <_printf_i+0x16a>
 8007108:	7803      	ldrb	r3, [r0, #0]
 800710a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800710e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007112:	e76c      	b.n	8006fee <_printf_i+0xf6>
 8007114:	08007475 	.word	0x08007475
 8007118:	08007486 	.word	0x08007486

0800711c <memmove>:
 800711c:	4288      	cmp	r0, r1
 800711e:	b510      	push	{r4, lr}
 8007120:	eb01 0302 	add.w	r3, r1, r2
 8007124:	d807      	bhi.n	8007136 <memmove+0x1a>
 8007126:	1e42      	subs	r2, r0, #1
 8007128:	4299      	cmp	r1, r3
 800712a:	d00a      	beq.n	8007142 <memmove+0x26>
 800712c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007130:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007134:	e7f8      	b.n	8007128 <memmove+0xc>
 8007136:	4283      	cmp	r3, r0
 8007138:	d9f5      	bls.n	8007126 <memmove+0xa>
 800713a:	1881      	adds	r1, r0, r2
 800713c:	1ad2      	subs	r2, r2, r3
 800713e:	42d3      	cmn	r3, r2
 8007140:	d100      	bne.n	8007144 <memmove+0x28>
 8007142:	bd10      	pop	{r4, pc}
 8007144:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007148:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800714c:	e7f7      	b.n	800713e <memmove+0x22>
	...

08007150 <_free_r>:
 8007150:	b538      	push	{r3, r4, r5, lr}
 8007152:	4605      	mov	r5, r0
 8007154:	2900      	cmp	r1, #0
 8007156:	d045      	beq.n	80071e4 <_free_r+0x94>
 8007158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800715c:	1f0c      	subs	r4, r1, #4
 800715e:	2b00      	cmp	r3, #0
 8007160:	bfb8      	it	lt
 8007162:	18e4      	addlt	r4, r4, r3
 8007164:	f000 f8d2 	bl	800730c <__malloc_lock>
 8007168:	4a1f      	ldr	r2, [pc, #124]	; (80071e8 <_free_r+0x98>)
 800716a:	6813      	ldr	r3, [r2, #0]
 800716c:	4610      	mov	r0, r2
 800716e:	b933      	cbnz	r3, 800717e <_free_r+0x2e>
 8007170:	6063      	str	r3, [r4, #4]
 8007172:	6014      	str	r4, [r2, #0]
 8007174:	4628      	mov	r0, r5
 8007176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800717a:	f000 b8c8 	b.w	800730e <__malloc_unlock>
 800717e:	42a3      	cmp	r3, r4
 8007180:	d90c      	bls.n	800719c <_free_r+0x4c>
 8007182:	6821      	ldr	r1, [r4, #0]
 8007184:	1862      	adds	r2, r4, r1
 8007186:	4293      	cmp	r3, r2
 8007188:	bf04      	itt	eq
 800718a:	681a      	ldreq	r2, [r3, #0]
 800718c:	685b      	ldreq	r3, [r3, #4]
 800718e:	6063      	str	r3, [r4, #4]
 8007190:	bf04      	itt	eq
 8007192:	1852      	addeq	r2, r2, r1
 8007194:	6022      	streq	r2, [r4, #0]
 8007196:	6004      	str	r4, [r0, #0]
 8007198:	e7ec      	b.n	8007174 <_free_r+0x24>
 800719a:	4613      	mov	r3, r2
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	b10a      	cbz	r2, 80071a4 <_free_r+0x54>
 80071a0:	42a2      	cmp	r2, r4
 80071a2:	d9fa      	bls.n	800719a <_free_r+0x4a>
 80071a4:	6819      	ldr	r1, [r3, #0]
 80071a6:	1858      	adds	r0, r3, r1
 80071a8:	42a0      	cmp	r0, r4
 80071aa:	d10b      	bne.n	80071c4 <_free_r+0x74>
 80071ac:	6820      	ldr	r0, [r4, #0]
 80071ae:	4401      	add	r1, r0
 80071b0:	1858      	adds	r0, r3, r1
 80071b2:	4282      	cmp	r2, r0
 80071b4:	6019      	str	r1, [r3, #0]
 80071b6:	d1dd      	bne.n	8007174 <_free_r+0x24>
 80071b8:	6810      	ldr	r0, [r2, #0]
 80071ba:	6852      	ldr	r2, [r2, #4]
 80071bc:	605a      	str	r2, [r3, #4]
 80071be:	4401      	add	r1, r0
 80071c0:	6019      	str	r1, [r3, #0]
 80071c2:	e7d7      	b.n	8007174 <_free_r+0x24>
 80071c4:	d902      	bls.n	80071cc <_free_r+0x7c>
 80071c6:	230c      	movs	r3, #12
 80071c8:	602b      	str	r3, [r5, #0]
 80071ca:	e7d3      	b.n	8007174 <_free_r+0x24>
 80071cc:	6820      	ldr	r0, [r4, #0]
 80071ce:	1821      	adds	r1, r4, r0
 80071d0:	428a      	cmp	r2, r1
 80071d2:	bf04      	itt	eq
 80071d4:	6811      	ldreq	r1, [r2, #0]
 80071d6:	6852      	ldreq	r2, [r2, #4]
 80071d8:	6062      	str	r2, [r4, #4]
 80071da:	bf04      	itt	eq
 80071dc:	1809      	addeq	r1, r1, r0
 80071de:	6021      	streq	r1, [r4, #0]
 80071e0:	605c      	str	r4, [r3, #4]
 80071e2:	e7c7      	b.n	8007174 <_free_r+0x24>
 80071e4:	bd38      	pop	{r3, r4, r5, pc}
 80071e6:	bf00      	nop
 80071e8:	200019c4 	.word	0x200019c4

080071ec <_malloc_r>:
 80071ec:	b570      	push	{r4, r5, r6, lr}
 80071ee:	1ccd      	adds	r5, r1, #3
 80071f0:	f025 0503 	bic.w	r5, r5, #3
 80071f4:	3508      	adds	r5, #8
 80071f6:	2d0c      	cmp	r5, #12
 80071f8:	bf38      	it	cc
 80071fa:	250c      	movcc	r5, #12
 80071fc:	2d00      	cmp	r5, #0
 80071fe:	4606      	mov	r6, r0
 8007200:	db01      	blt.n	8007206 <_malloc_r+0x1a>
 8007202:	42a9      	cmp	r1, r5
 8007204:	d903      	bls.n	800720e <_malloc_r+0x22>
 8007206:	230c      	movs	r3, #12
 8007208:	6033      	str	r3, [r6, #0]
 800720a:	2000      	movs	r0, #0
 800720c:	bd70      	pop	{r4, r5, r6, pc}
 800720e:	f000 f87d 	bl	800730c <__malloc_lock>
 8007212:	4a21      	ldr	r2, [pc, #132]	; (8007298 <_malloc_r+0xac>)
 8007214:	6814      	ldr	r4, [r2, #0]
 8007216:	4621      	mov	r1, r4
 8007218:	b991      	cbnz	r1, 8007240 <_malloc_r+0x54>
 800721a:	4c20      	ldr	r4, [pc, #128]	; (800729c <_malloc_r+0xb0>)
 800721c:	6823      	ldr	r3, [r4, #0]
 800721e:	b91b      	cbnz	r3, 8007228 <_malloc_r+0x3c>
 8007220:	4630      	mov	r0, r6
 8007222:	f000 f863 	bl	80072ec <_sbrk_r>
 8007226:	6020      	str	r0, [r4, #0]
 8007228:	4629      	mov	r1, r5
 800722a:	4630      	mov	r0, r6
 800722c:	f000 f85e 	bl	80072ec <_sbrk_r>
 8007230:	1c43      	adds	r3, r0, #1
 8007232:	d124      	bne.n	800727e <_malloc_r+0x92>
 8007234:	230c      	movs	r3, #12
 8007236:	6033      	str	r3, [r6, #0]
 8007238:	4630      	mov	r0, r6
 800723a:	f000 f868 	bl	800730e <__malloc_unlock>
 800723e:	e7e4      	b.n	800720a <_malloc_r+0x1e>
 8007240:	680b      	ldr	r3, [r1, #0]
 8007242:	1b5b      	subs	r3, r3, r5
 8007244:	d418      	bmi.n	8007278 <_malloc_r+0x8c>
 8007246:	2b0b      	cmp	r3, #11
 8007248:	d90f      	bls.n	800726a <_malloc_r+0x7e>
 800724a:	600b      	str	r3, [r1, #0]
 800724c:	50cd      	str	r5, [r1, r3]
 800724e:	18cc      	adds	r4, r1, r3
 8007250:	4630      	mov	r0, r6
 8007252:	f000 f85c 	bl	800730e <__malloc_unlock>
 8007256:	f104 000b 	add.w	r0, r4, #11
 800725a:	1d23      	adds	r3, r4, #4
 800725c:	f020 0007 	bic.w	r0, r0, #7
 8007260:	1ac3      	subs	r3, r0, r3
 8007262:	d0d3      	beq.n	800720c <_malloc_r+0x20>
 8007264:	425a      	negs	r2, r3
 8007266:	50e2      	str	r2, [r4, r3]
 8007268:	e7d0      	b.n	800720c <_malloc_r+0x20>
 800726a:	428c      	cmp	r4, r1
 800726c:	684b      	ldr	r3, [r1, #4]
 800726e:	bf16      	itet	ne
 8007270:	6063      	strne	r3, [r4, #4]
 8007272:	6013      	streq	r3, [r2, #0]
 8007274:	460c      	movne	r4, r1
 8007276:	e7eb      	b.n	8007250 <_malloc_r+0x64>
 8007278:	460c      	mov	r4, r1
 800727a:	6849      	ldr	r1, [r1, #4]
 800727c:	e7cc      	b.n	8007218 <_malloc_r+0x2c>
 800727e:	1cc4      	adds	r4, r0, #3
 8007280:	f024 0403 	bic.w	r4, r4, #3
 8007284:	42a0      	cmp	r0, r4
 8007286:	d005      	beq.n	8007294 <_malloc_r+0xa8>
 8007288:	1a21      	subs	r1, r4, r0
 800728a:	4630      	mov	r0, r6
 800728c:	f000 f82e 	bl	80072ec <_sbrk_r>
 8007290:	3001      	adds	r0, #1
 8007292:	d0cf      	beq.n	8007234 <_malloc_r+0x48>
 8007294:	6025      	str	r5, [r4, #0]
 8007296:	e7db      	b.n	8007250 <_malloc_r+0x64>
 8007298:	200019c4 	.word	0x200019c4
 800729c:	200019c8 	.word	0x200019c8

080072a0 <_realloc_r>:
 80072a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a2:	4607      	mov	r7, r0
 80072a4:	4614      	mov	r4, r2
 80072a6:	460e      	mov	r6, r1
 80072a8:	b921      	cbnz	r1, 80072b4 <_realloc_r+0x14>
 80072aa:	4611      	mov	r1, r2
 80072ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80072b0:	f7ff bf9c 	b.w	80071ec <_malloc_r>
 80072b4:	b922      	cbnz	r2, 80072c0 <_realloc_r+0x20>
 80072b6:	f7ff ff4b 	bl	8007150 <_free_r>
 80072ba:	4625      	mov	r5, r4
 80072bc:	4628      	mov	r0, r5
 80072be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072c0:	f000 f826 	bl	8007310 <_malloc_usable_size_r>
 80072c4:	42a0      	cmp	r0, r4
 80072c6:	d20f      	bcs.n	80072e8 <_realloc_r+0x48>
 80072c8:	4621      	mov	r1, r4
 80072ca:	4638      	mov	r0, r7
 80072cc:	f7ff ff8e 	bl	80071ec <_malloc_r>
 80072d0:	4605      	mov	r5, r0
 80072d2:	2800      	cmp	r0, #0
 80072d4:	d0f2      	beq.n	80072bc <_realloc_r+0x1c>
 80072d6:	4631      	mov	r1, r6
 80072d8:	4622      	mov	r2, r4
 80072da:	f7ff fc11 	bl	8006b00 <memcpy>
 80072de:	4631      	mov	r1, r6
 80072e0:	4638      	mov	r0, r7
 80072e2:	f7ff ff35 	bl	8007150 <_free_r>
 80072e6:	e7e9      	b.n	80072bc <_realloc_r+0x1c>
 80072e8:	4635      	mov	r5, r6
 80072ea:	e7e7      	b.n	80072bc <_realloc_r+0x1c>

080072ec <_sbrk_r>:
 80072ec:	b538      	push	{r3, r4, r5, lr}
 80072ee:	4c06      	ldr	r4, [pc, #24]	; (8007308 <_sbrk_r+0x1c>)
 80072f0:	2300      	movs	r3, #0
 80072f2:	4605      	mov	r5, r0
 80072f4:	4608      	mov	r0, r1
 80072f6:	6023      	str	r3, [r4, #0]
 80072f8:	f7fa f8f8 	bl	80014ec <_sbrk>
 80072fc:	1c43      	adds	r3, r0, #1
 80072fe:	d102      	bne.n	8007306 <_sbrk_r+0x1a>
 8007300:	6823      	ldr	r3, [r4, #0]
 8007302:	b103      	cbz	r3, 8007306 <_sbrk_r+0x1a>
 8007304:	602b      	str	r3, [r5, #0]
 8007306:	bd38      	pop	{r3, r4, r5, pc}
 8007308:	20001c4c 	.word	0x20001c4c

0800730c <__malloc_lock>:
 800730c:	4770      	bx	lr

0800730e <__malloc_unlock>:
 800730e:	4770      	bx	lr

08007310 <_malloc_usable_size_r>:
 8007310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007314:	1f18      	subs	r0, r3, #4
 8007316:	2b00      	cmp	r3, #0
 8007318:	bfbc      	itt	lt
 800731a:	580b      	ldrlt	r3, [r1, r0]
 800731c:	18c0      	addlt	r0, r0, r3
 800731e:	4770      	bx	lr

08007320 <_init>:
 8007320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007322:	bf00      	nop
 8007324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007326:	bc08      	pop	{r3}
 8007328:	469e      	mov	lr, r3
 800732a:	4770      	bx	lr

0800732c <_fini>:
 800732c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732e:	bf00      	nop
 8007330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007332:	bc08      	pop	{r3}
 8007334:	469e      	mov	lr, r3
 8007336:	4770      	bx	lr
