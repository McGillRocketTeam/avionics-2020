
f303_lps22hh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800459c  0800459c  0001459c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004638  08004638  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004638  08004638  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004638  08004638  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004638  08004638  00014638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800463c  0800463c  0001463c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  20000070  080046b0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  080046b0  00020560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fda0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ec9  00000000  00000000  0002fe40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c28  00000000  00000000  00031d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b60  00000000  00000000  00032938  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020b15  00000000  00000000  00033498  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a143  00000000  00000000  00053fad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c31f7  00000000  00000000  0005e0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001212e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000352c  00000000  00000000  00121364  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004584 	.word	0x08004584

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004584 	.word	0x08004584

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <lps22hh_init>:
static void platform_delay(uint32_t ms);
static void platform_init(void);

/* Main Example --------------------------------------------------------------*/

stmdev_ctx_t lps22hh_init(void){
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b087      	sub	sp, #28
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx;

	/* Initialize mems driver interface */
	dev_ctx.write_reg = platform_write;
 8000298:	4b1f      	ldr	r3, [pc, #124]	; (8000318 <lps22hh_init+0x88>)
 800029a:	60fb      	str	r3, [r7, #12]
	dev_ctx.read_reg = platform_read;
 800029c:	4b1f      	ldr	r3, [pc, #124]	; (800031c <lps22hh_init+0x8c>)
 800029e:	613b      	str	r3, [r7, #16]
	dev_ctx.handle = &SENSOR_BUS;
 80002a0:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <lps22hh_init+0x90>)
 80002a2:	617b      	str	r3, [r7, #20]


	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 80002a4:	2005      	movs	r0, #5
 80002a6:	f000 f8d5 	bl	8000454 <platform_delay>

	/* Check device ID */
	whoamI = 0;
 80002aa:	4b1e      	ldr	r3, [pc, #120]	; (8000324 <lps22hh_init+0x94>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	701a      	strb	r2, [r3, #0]
	lps22hh_device_id_get(&dev_ctx, &whoamI);
 80002b0:	f107 030c 	add.w	r3, r7, #12
 80002b4:	491b      	ldr	r1, [pc, #108]	; (8000324 <lps22hh_init+0x94>)
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 f9fa 	bl	80006b0 <lps22hh_device_id_get>

	if ( whoamI != LPS22HH_ID )
 80002bc:	4b19      	ldr	r3, [pc, #100]	; (8000324 <lps22hh_init+0x94>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2bb3      	cmp	r3, #179	; 0xb3
 80002c2:	d000      	beq.n	80002c6 <lps22hh_init+0x36>
	while (1); /*manage here device not found */
 80002c4:	e7fe      	b.n	80002c4 <lps22hh_init+0x34>

	/* Restore default configuration */
	lps22hh_reset_set(&dev_ctx, PROPERTY_ENABLE);
 80002c6:	f107 030c 	add.w	r3, r7, #12
 80002ca:	2101      	movs	r1, #1
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fa00 	bl	80006d2 <lps22hh_reset_set>

	do {
	lps22hh_reset_get(&dev_ctx, &rst);
 80002d2:	f107 030c 	add.w	r3, r7, #12
 80002d6:	4914      	ldr	r1, [pc, #80]	; (8000328 <lps22hh_init+0x98>)
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fa20 	bl	800071e <lps22hh_reset_get>
	} while (rst);
 80002de:	4b12      	ldr	r3, [pc, #72]	; (8000328 <lps22hh_init+0x98>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d1f5      	bne.n	80002d2 <lps22hh_init+0x42>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80002e6:	f107 030c 	add.w	r3, r7, #12
 80002ea:	2101      	movs	r1, #1
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 f91f 	bl	8000530 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&dev_ctx, LPS22HH_10_Hz_LOW_NOISE);
 80002f2:	f107 030c 	add.w	r3, r7, #12
 80002f6:	2112      	movs	r1, #18
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 f93f 	bl	800057c <lps22hh_data_rate_set>

	return dev_ctx;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	461c      	mov	r4, r3
 8000302:	f107 030c 	add.w	r3, r7, #12
 8000306:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800030a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800030e:	6878      	ldr	r0, [r7, #4]
 8000310:	371c      	adds	r7, #28
 8000312:	46bd      	mov	sp, r7
 8000314:	bd90      	pop	{r4, r7, pc}
 8000316:	bf00      	nop
 8000318:	080003e1 	.word	0x080003e1
 800031c:	0800041b 	.word	0x0800041b
 8000320:	20000488 	.word	0x20000488
 8000324:	20000092 	.word	0x20000092
 8000328:	20000093 	.word	0x20000093

0800032c <get_pressure>:

void get_pressure(stmdev_ctx_t dev_ctx, float *pressure){
 800032c:	b590      	push	{r4, r7, lr}
 800032e:	b087      	sub	sp, #28
 8000330:	af00      	add	r7, sp, #0
 8000332:	1d3c      	adds	r4, r7, #4
 8000334:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000338:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 800033a:	f107 0214 	add.w	r2, r7, #20
 800033e:	1d38      	adds	r0, r7, #4
 8000340:	2301      	movs	r3, #1
 8000342:	2127      	movs	r1, #39	; 0x27
 8000344:	f000 f891 	bl	800046a <lps22hh_read_reg>

	if (reg.status.p_da) {
 8000348:	7d3b      	ldrb	r3, [r7, #20]
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	b2db      	uxtb	r3, r3
 8000350:	2b00      	cmp	r3, #0
 8000352:	d011      	beq.n	8000378 <get_pressure+0x4c>
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 8000354:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <get_pressure+0x54>)
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
	  lps22hh_pressure_raw_get(&dev_ctx, &data_raw_pressure);
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	4908      	ldr	r1, [pc, #32]	; (8000380 <get_pressure+0x54>)
 800035e:	4618      	mov	r0, r3
 8000360:	f000 f95a 	bl	8000618 <lps22hh_pressure_raw_get>
//	  pressure_hPa = lps22hh_from_lsb_to_hpa( data_raw_pressure);
//	  sprintf((char *)tx_buffer, "pressure [hPa]:%hu\r\n", (uint16_t)pressure_hPa);
//	  tx_com( tx_buffer, strlen( (char const *)tx_buffer ) );

	  *pressure = lps22hh_from_lsb_to_hpa( data_raw_pressure);
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <get_pressure+0x54>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4618      	mov	r0, r3
 800036a:	f000 f8af 	bl	80004cc <lps22hh_from_lsb_to_hpa>
 800036e:	eef0 7a40 	vmov.f32	s15, s0
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8000378:	bf00      	nop
 800037a:	371c      	adds	r7, #28
 800037c:	46bd      	mov	sp, r7
 800037e:	bd90      	pop	{r4, r7, pc}
 8000380:	2000008c 	.word	0x2000008c

08000384 <get_temperature>:

void get_temperature(stmdev_ctx_t dev_ctx, float *temperature){
 8000384:	b590      	push	{r4, r7, lr}
 8000386:	b087      	sub	sp, #28
 8000388:	af00      	add	r7, sp, #0
 800038a:	1d3c      	adds	r4, r7, #4
 800038c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000390:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 8000392:	f107 0214 	add.w	r2, r7, #20
 8000396:	1d38      	adds	r0, r7, #4
 8000398:	2301      	movs	r3, #1
 800039a:	2127      	movs	r1, #39	; 0x27
 800039c:	f000 f865 	bl	800046a <lps22hh_read_reg>

	if (reg.status.t_da) {
 80003a0:	7d3b      	ldrb	r3, [r7, #20]
 80003a2:	f003 0302 	and.w	r3, r3, #2
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d012      	beq.n	80003d2 <get_temperature+0x4e>
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 80003ac:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <get_temperature+0x58>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	801a      	strh	r2, [r3, #0]
	  lps22hh_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	4909      	ldr	r1, [pc, #36]	; (80003dc <get_temperature+0x58>)
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 f957 	bl	800066a <lps22hh_temperature_raw_get>
//						   data_raw_temperature );
//	  sprintf((char *)tx_buffer, "temperature [degC]:%hu\r\n",
//			  (uint16_t)temperature_degC );
//	  tx_com( tx_buffer, strlen( (char const *)tx_buffer ) );

	  *temperature = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 80003bc:	4b07      	ldr	r3, [pc, #28]	; (80003dc <get_temperature+0x58>)
 80003be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 f89a 	bl	80004fc <lps22hh_from_lsb_to_celsius>
 80003c8:	eef0 7a40 	vmov.f32	s15, s0
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80003d2:	bf00      	nop
 80003d4:	371c      	adds	r7, #28
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd90      	pop	{r4, r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000090 	.word	0x20000090

080003e0 <platform_write>:
 *
 */
static int32_t platform_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b088      	sub	sp, #32
 80003e4:	af04      	add	r7, sp, #16
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	607a      	str	r2, [r7, #4]
 80003ea:	461a      	mov	r2, r3
 80003ec:	460b      	mov	r3, r1
 80003ee:	72fb      	strb	r3, [r7, #11]
 80003f0:	4613      	mov	r3, r2
 80003f2:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_H, reg,
 80003f4:	7afb      	ldrb	r3, [r7, #11]
 80003f6:	b29a      	uxth	r2, r3
 80003f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003fc:	9302      	str	r3, [sp, #8]
 80003fe:	893b      	ldrh	r3, [r7, #8]
 8000400:	9301      	str	r3, [sp, #4]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	9300      	str	r3, [sp, #0]
 8000406:	2301      	movs	r3, #1
 8000408:	21bb      	movs	r1, #187	; 0xbb
 800040a:	68f8      	ldr	r0, [r7, #12]
 800040c:	f001 f818 	bl	8001440 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8000410:	2300      	movs	r3, #0
}
 8000412:	4618      	mov	r0, r3
 8000414:	3710      	adds	r7, #16
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 800041a:	b580      	push	{r7, lr}
 800041c:	b088      	sub	sp, #32
 800041e:	af04      	add	r7, sp, #16
 8000420:	60f8      	str	r0, [r7, #12]
 8000422:	607a      	str	r2, [r7, #4]
 8000424:	461a      	mov	r2, r3
 8000426:	460b      	mov	r3, r1
 8000428:	72fb      	strb	r3, [r7, #11]
 800042a:	4613      	mov	r3, r2
 800042c:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_H, reg,
 800042e:	7afb      	ldrb	r3, [r7, #11]
 8000430:	b29a      	uxth	r2, r3
 8000432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000436:	9302      	str	r3, [sp, #8]
 8000438:	893b      	ldrh	r3, [r7, #8]
 800043a:	9301      	str	r3, [sp, #4]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	9300      	str	r3, [sp, #0]
 8000440:	2301      	movs	r3, #1
 8000442:	21bb      	movs	r1, #187	; 0xbb
 8000444:	68f8      	ldr	r0, [r7, #12]
 8000446:	f001 f90f 	bl	8001668 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 800044a:	2300      	movs	r3, #0
}
 800044c:	4618      	mov	r0, r3
 800044e:	3710      	adds	r7, #16
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 800045c:	6878      	ldr	r0, [r7, #4]
 800045e:	f000 fcb5 	bl	8000dcc <HAL_Delay>
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}

0800046a <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800046a:	b590      	push	{r4, r7, lr}
 800046c:	b087      	sub	sp, #28
 800046e:	af00      	add	r7, sp, #0
 8000470:	60f8      	str	r0, [r7, #12]
 8000472:	607a      	str	r2, [r7, #4]
 8000474:	461a      	mov	r2, r3
 8000476:	460b      	mov	r3, r1
 8000478:	72fb      	strb	r3, [r7, #11]
 800047a:	4613      	mov	r3, r2
 800047c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	685c      	ldr	r4, [r3, #4]
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	6898      	ldr	r0, [r3, #8]
 8000486:	893b      	ldrh	r3, [r7, #8]
 8000488:	7af9      	ldrb	r1, [r7, #11]
 800048a:	687a      	ldr	r2, [r7, #4]
 800048c:	47a0      	blx	r4
 800048e:	6178      	str	r0, [r7, #20]
  return ret;
 8000490:	697b      	ldr	r3, [r7, #20]
}
 8000492:	4618      	mov	r0, r3
 8000494:	371c      	adds	r7, #28
 8000496:	46bd      	mov	sp, r7
 8000498:	bd90      	pop	{r4, r7, pc}

0800049a <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800049a:	b590      	push	{r4, r7, lr}
 800049c:	b087      	sub	sp, #28
 800049e:	af00      	add	r7, sp, #0
 80004a0:	60f8      	str	r0, [r7, #12]
 80004a2:	607a      	str	r2, [r7, #4]
 80004a4:	461a      	mov	r2, r3
 80004a6:	460b      	mov	r3, r1
 80004a8:	72fb      	strb	r3, [r7, #11]
 80004aa:	4613      	mov	r3, r2
 80004ac:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	681c      	ldr	r4, [r3, #0]
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	6898      	ldr	r0, [r3, #8]
 80004b6:	893b      	ldrh	r3, [r7, #8]
 80004b8:	7af9      	ldrb	r1, [r7, #11]
 80004ba:	687a      	ldr	r2, [r7, #4]
 80004bc:	47a0      	blx	r4
 80004be:	6178      	str	r0, [r7, #20]
  return ret;
 80004c0:	697b      	ldr	r3, [r7, #20]
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	371c      	adds	r7, #28
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd90      	pop	{r4, r7, pc}
	...

080004cc <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  return ( (float_t) lsb / 1048576.0f );
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	ee07 3a90 	vmov	s15, r3
 80004da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80004de:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80004f8 <lps22hh_from_lsb_to_hpa+0x2c>
 80004e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80004e6:	eef0 7a66 	vmov.f32	s15, s13
}
 80004ea:	eeb0 0a67 	vmov.f32	s0, s15
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	49800000 	.word	0x49800000

080004fc <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	80fb      	strh	r3, [r7, #6]
  return ( (float_t) lsb / 100.0f );
 8000506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800050a:	ee07 3a90 	vmov	s15, r3
 800050e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000512:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800052c <lps22hh_from_lsb_to_celsius+0x30>
 8000516:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800051a:	eef0 7a66 	vmov.f32	s15, s13
}
 800051e:	eeb0 0a67 	vmov.f32	s0, s15
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	42c80000 	.word	0x42c80000

08000530 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800053c:	f107 0208 	add.w	r2, r7, #8
 8000540:	2301      	movs	r3, #1
 8000542:	2110      	movs	r1, #16
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f7ff ff90 	bl	800046a <lps22hh_read_reg>
 800054a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d10f      	bne.n	8000572 <lps22hh_block_data_update_set+0x42>
    reg.bdu = val;
 8000552:	78fb      	ldrb	r3, [r7, #3]
 8000554:	f003 0301 	and.w	r3, r3, #1
 8000558:	b2da      	uxtb	r2, r3
 800055a:	7a3b      	ldrb	r3, [r7, #8]
 800055c:	f362 0341 	bfi	r3, r2, #1, #1
 8000560:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8000562:	f107 0208 	add.w	r2, r7, #8
 8000566:	2301      	movs	r3, #1
 8000568:	2110      	movs	r1, #16
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f7ff ff95 	bl	800049a <lps22hh_write_reg>
 8000570:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8000572:	68fb      	ldr	r3, [r7, #12]
}
 8000574:	4618      	mov	r0, r3
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	460b      	mov	r3, r1
 8000586:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8000588:	f107 0210 	add.w	r2, r7, #16
 800058c:	2301      	movs	r3, #1
 800058e:	2110      	movs	r1, #16
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f7ff ff6a 	bl	800046a <lps22hh_read_reg>
 8000596:	6178      	str	r0, [r7, #20]
                         1);

  if (ret == 0) {
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d107      	bne.n	80005ae <lps22hh_data_rate_set+0x32>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 800059e:	f107 020c 	add.w	r2, r7, #12
 80005a2:	2301      	movs	r3, #1
 80005a4:	2111      	movs	r1, #17
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f7ff ff5f 	bl	800046a <lps22hh_read_reg>
 80005ac:	6178      	str	r0, [r7, #20]
                           1);
  }

  if (ret == 0) {
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d10f      	bne.n	80005d4 <lps22hh_data_rate_set+0x58>
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80005b4:	78fb      	ldrb	r3, [r7, #3]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	7c3b      	ldrb	r3, [r7, #16]
 80005be:	f362 1306 	bfi	r3, r2, #4, #3
 80005c2:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80005c4:	f107 0210 	add.w	r2, r7, #16
 80005c8:	2301      	movs	r3, #1
 80005ca:	2110      	movs	r1, #16
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f7ff ff64 	bl	800049a <lps22hh_write_reg>
 80005d2:	6178      	str	r0, [r7, #20]
                            1);
  }

  if (ret == 0) {
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d119      	bne.n	800060e <lps22hh_data_rate_set+0x92>
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80005da:	78fb      	ldrb	r3, [r7, #3]
 80005dc:	091b      	lsrs	r3, r3, #4
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	7b3b      	ldrb	r3, [r7, #12]
 80005e6:	f362 0341 	bfi	r3, r2, #1, #1
 80005ea:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80005ec:	78fb      	ldrb	r3, [r7, #3]
 80005ee:	08db      	lsrs	r3, r3, #3
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	7b3b      	ldrb	r3, [r7, #12]
 80005f8:	f362 0300 	bfi	r3, r2, #0, #1
 80005fc:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 80005fe:	f107 020c 	add.w	r2, r7, #12
 8000602:	2301      	movs	r3, #1
 8000604:	2111      	movs	r1, #17
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f7ff ff47 	bl	800049a <lps22hh_write_reg>
 800060c:	6178      	str	r0, [r7, #20]
                            1);
  }

  return ret;
 800060e:	697b      	ldr	r3, [r7, #20]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8000622:	f107 0208 	add.w	r2, r7, #8
 8000626:	2303      	movs	r3, #3
 8000628:	2128      	movs	r1, #40	; 0x28
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f7ff ff1d 	bl	800046a <lps22hh_read_reg>
 8000630:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8000632:	7abb      	ldrb	r3, [r7, #10]
 8000634:	461a      	mov	r2, r3
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	021b      	lsls	r3, r3, #8
 8000640:	7a7a      	ldrb	r2, [r7, #9]
 8000642:	441a      	add	r2, r3
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	021b      	lsls	r3, r3, #8
 800064e:	7a3a      	ldrb	r2, [r7, #8]
 8000650:	441a      	add	r2, r3
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	021a      	lsls	r2, r3, #8
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	601a      	str	r2, [r3, #0]
  return ret;
 8000660:	68fb      	ldr	r3, [r7, #12]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b084      	sub	sp, #16
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
 8000672:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8000674:	f107 0208 	add.w	r2, r7, #8
 8000678:	2302      	movs	r3, #2
 800067a:	212b      	movs	r1, #43	; 0x2b
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f7ff fef4 	bl	800046a <lps22hh_read_reg>
 8000682:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8000684:	7a7b      	ldrb	r3, [r7, #9]
 8000686:	b21a      	sxth	r2, r3
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000692:	b29b      	uxth	r3, r3
 8000694:	021b      	lsls	r3, r3, #8
 8000696:	b29a      	uxth	r2, r3
 8000698:	7a3b      	ldrb	r3, [r7, #8]
 800069a:	b29b      	uxth	r3, r3
 800069c:	4413      	add	r3, r2
 800069e:	b29b      	uxth	r3, r3
 80006a0:	b21a      	sxth	r2, r3
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	801a      	strh	r2, [r3, #0]
  return ret;
 80006a6:	68fb      	ldr	r3, [r7, #12]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80006ba:	2301      	movs	r3, #1
 80006bc:	683a      	ldr	r2, [r7, #0]
 80006be:	210f      	movs	r1, #15
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff fed2 	bl	800046a <lps22hh_read_reg>
 80006c6:	60f8      	str	r0, [r7, #12]
  return ret;
 80006c8:	68fb      	ldr	r3, [r7, #12]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b084      	sub	sp, #16
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
 80006da:	460b      	mov	r3, r1
 80006dc:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80006de:	f107 0208 	add.w	r2, r7, #8
 80006e2:	2301      	movs	r3, #1
 80006e4:	2111      	movs	r1, #17
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff febf 	bl	800046a <lps22hh_read_reg>
 80006ec:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d10f      	bne.n	8000714 <lps22hh_reset_set+0x42>
    reg.swreset = val;
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	7a3b      	ldrb	r3, [r7, #8]
 80006fe:	f362 0382 	bfi	r3, r2, #2, #1
 8000702:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8000704:	f107 0208 	add.w	r2, r7, #8
 8000708:	2301      	movs	r3, #1
 800070a:	2111      	movs	r1, #17
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff fec4 	bl	800049a <lps22hh_write_reg>
 8000712:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8000714:	68fb      	ldr	r3, [r7, #12]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b084      	sub	sp, #16
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
 8000726:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8000728:	f107 0208 	add.w	r2, r7, #8
 800072c:	2301      	movs	r3, #1
 800072e:	2111      	movs	r1, #17
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f7ff fe9a 	bl	800046a <lps22hh_read_reg>
 8000736:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8000738:	7a3b      	ldrb	r3, [r7, #8]
 800073a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800073e:	b2db      	uxtb	r3, r3
 8000740:	461a      	mov	r2, r3
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	701a      	strb	r2, [r3, #0]
  return ret;
 8000746:	68fb      	ldr	r3, [r7, #12]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000756:	f000 fad3 	bl	8000d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075a:	f000 f847 	bl	80007ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075e:	f000 f915 	bl	800098c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000762:	f000 f8e3 	bl	800092c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000766:	f000 f8a1 	bl	80008ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  stmdev_ctx_t dev_ctx_lps = lps22hh_init();
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fd8e 	bl	8000290 <lps22hh_init>
  float pressure = 0;
 8000774:	f04f 0300 	mov.w	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
  float temperature = 0;
 800077a:	f04f 0300 	mov.w	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	lps22hh_read_data_polling();

	get_pressure(dev_ctx_lps, &pressure);
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	f107 020c 	add.w	r2, r7, #12
 8000788:	ca07      	ldmia	r2, {r0, r1, r2}
 800078a:	f7ff fdcf 	bl	800032c <get_pressure>
	get_temperature(dev_ctx_lps,  &temperature);
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	f107 020c 	add.w	r2, r7, #12
 8000794:	ca07      	ldmia	r2, {r0, r1, r2}
 8000796:	f7ff fdf5 	bl	8000384 <get_temperature>

	sprintf((char *)tx_buffer, "Pressure [hPa]:%hu\t Temperature [degC]:%hu\r\n", (uint16_t)pressure, (uint16_t)temperature);
 800079a:	edd7 7a02 	vldr	s15, [r7, #8]
 800079e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007a2:	ee17 3a90 	vmov	r3, s15
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	461a      	mov	r2, r3
 80007aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80007ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007b2:	ee17 3a90 	vmov	r3, s15
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	4909      	ldr	r1, [pc, #36]	; (80007e0 <main+0x90>)
 80007ba:	480a      	ldr	r0, [pc, #40]	; (80007e4 <main+0x94>)
 80007bc:	f003 fadc 	bl	8003d78 <siprintf>
	HAL_UART_Transmit(&huart2, tx_buffer, strlen((char const *)tx_buffer ), 1000);
 80007c0:	4808      	ldr	r0, [pc, #32]	; (80007e4 <main+0x94>)
 80007c2:	f7ff fd0d 	bl	80001e0 <strlen>
 80007c6:	4603      	mov	r3, r0
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ce:	4905      	ldr	r1, [pc, #20]	; (80007e4 <main+0x94>)
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <main+0x98>)
 80007d2:	f002 fecf 	bl	8003574 <HAL_UART_Transmit>

	HAL_Delay(1000);
 80007d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007da:	f000 faf7 	bl	8000dcc <HAL_Delay>
	get_pressure(dev_ctx_lps, &pressure);
 80007de:	e7cf      	b.n	8000780 <main+0x30>
 80007e0:	0800459c 	.word	0x0800459c
 80007e4:	20000094 	.word	0x20000094
 80007e8:	200004d4 	.word	0x200004d4

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b0a6      	sub	sp, #152	; 0x98
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007f6:	2228      	movs	r2, #40	; 0x28
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 fab4 	bl	8003d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2258      	movs	r2, #88	; 0x58
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f003 faa6 	bl	8003d68 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800081c:	2302      	movs	r3, #2
 800081e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000820:	2301      	movs	r3, #1
 8000822:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000824:	2310      	movs	r3, #16
 8000826:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082a:	2302      	movs	r3, #2
 800082c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000830:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000834:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000838:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800083c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000846:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800084a:	4618      	mov	r0, r3
 800084c:	f001 fada 	bl	8001e04 <HAL_RCC_OscConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000856:	f000 f901 	bl	8000a5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085a:	230f      	movs	r3, #15
 800085c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085e:	2302      	movs	r3, #2
 8000860:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800086a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000870:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000874:	2102      	movs	r1, #2
 8000876:	4618      	mov	r0, r3
 8000878:	f002 f9da 	bl	8002c30 <HAL_RCC_ClockConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000882:	f000 f8eb 	bl	8000a5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000886:	2322      	movs	r3, #34	; 0x22
 8000888:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	4618      	mov	r0, r3
 8000896:	f002 fc01 	bl	800309c <HAL_RCCEx_PeriphCLKConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80008a0:	f000 f8dc 	bl	8000a5c <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3798      	adds	r7, #152	; 0x98
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008b0:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <MX_I2C1_Init+0x74>)
 80008b2:	4a1c      	ldr	r2, [pc, #112]	; (8000924 <MX_I2C1_Init+0x78>)
 80008b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <MX_I2C1_Init+0x74>)
 80008b8:	4a1b      	ldr	r2, [pc, #108]	; (8000928 <MX_I2C1_Init+0x7c>)
 80008ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008bc:	4b18      	ldr	r3, [pc, #96]	; (8000920 <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c2:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_I2C1_Init+0x74>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c8:	4b15      	ldr	r3, [pc, #84]	; (8000920 <MX_I2C1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_I2C1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_I2C1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_I2C1_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_I2C1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e6:	480e      	ldr	r0, [pc, #56]	; (8000920 <MX_I2C1_Init+0x74>)
 80008e8:	f000 fd1a 	bl	8001320 <HAL_I2C_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008f2:	f000 f8b3 	bl	8000a5c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008f6:	2100      	movs	r1, #0
 80008f8:	4809      	ldr	r0, [pc, #36]	; (8000920 <MX_I2C1_Init+0x74>)
 80008fa:	f001 f9eb 	bl	8001cd4 <HAL_I2CEx_ConfigAnalogFilter>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000904:	f000 f8aa 	bl	8000a5c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000908:	2100      	movs	r1, #0
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_I2C1_Init+0x74>)
 800090c:	f001 fa2d 	bl	8001d6a <HAL_I2CEx_ConfigDigitalFilter>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000916:	f000 f8a1 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000488 	.word	0x20000488
 8000924:	40005400 	.word	0x40005400
 8000928:	2000090e 	.word	0x2000090e

0800092c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_USART2_UART_Init+0x58>)
 8000932:	4a15      	ldr	r2, [pc, #84]	; (8000988 <MX_USART2_UART_Init+0x5c>)
 8000934:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <MX_USART2_UART_Init+0x58>)
 8000938:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800093c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_USART2_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_USART2_UART_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_USART2_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_USART2_UART_Init+0x58>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_USART2_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_USART2_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_USART2_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_USART2_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_USART2_UART_Init+0x58>)
 8000970:	f002 fdb2 	bl	80034d8 <HAL_UART_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800097a:	f000 f86f 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200004d4 	.word	0x200004d4
 8000988:	40004400 	.word	0x40004400

0800098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	4b2b      	ldr	r3, [pc, #172]	; (8000a50 <MX_GPIO_Init+0xc4>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	4a2a      	ldr	r2, [pc, #168]	; (8000a50 <MX_GPIO_Init+0xc4>)
 80009a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009ac:	6153      	str	r3, [r2, #20]
 80009ae:	4b28      	ldr	r3, [pc, #160]	; (8000a50 <MX_GPIO_Init+0xc4>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ba:	4b25      	ldr	r3, [pc, #148]	; (8000a50 <MX_GPIO_Init+0xc4>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	4a24      	ldr	r2, [pc, #144]	; (8000a50 <MX_GPIO_Init+0xc4>)
 80009c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009c4:	6153      	str	r3, [r2, #20]
 80009c6:	4b22      	ldr	r3, [pc, #136]	; (8000a50 <MX_GPIO_Init+0xc4>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <MX_GPIO_Init+0xc4>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	4a1e      	ldr	r2, [pc, #120]	; (8000a50 <MX_GPIO_Init+0xc4>)
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	6153      	str	r3, [r2, #20]
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <MX_GPIO_Init+0xc4>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <MX_GPIO_Init+0xc4>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <MX_GPIO_Init+0xc4>)
 80009f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009f4:	6153      	str	r3, [r2, #20]
 80009f6:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <MX_GPIO_Init+0xc4>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2120      	movs	r1, #32
 8000a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0a:	f000 fc71 	bl	80012f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_GPIO_Init+0xc8>)
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	480d      	ldr	r0, [pc, #52]	; (8000a58 <MX_GPIO_Init+0xcc>)
 8000a24:	f000 fada 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a28:	2320      	movs	r3, #32
 8000a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a42:	f000 facb 	bl	8000fdc <HAL_GPIO_Init>

}
 8000a46:	bf00      	nop
 8000a48:	3728      	adds	r7, #40	; 0x28
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40021000 	.word	0x40021000
 8000a54:	10210000 	.word	0x10210000
 8000a58:	48000800 	.word	0x48000800

08000a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6193      	str	r3, [r2, #24]
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	61d3      	str	r3, [r2, #28]
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aa2:	2007      	movs	r0, #7
 8000aa4:	f000 fa66 	bl	8000f74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a17      	ldr	r2, [pc, #92]	; (8000b30 <HAL_I2C_MspInit+0x7c>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d128      	bne.n	8000b28 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <HAL_I2C_MspInit+0x80>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	4a16      	ldr	r2, [pc, #88]	; (8000b34 <HAL_I2C_MspInit+0x80>)
 8000adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ae0:	6153      	str	r3, [r2, #20]
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <HAL_I2C_MspInit+0x80>)
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af4:	2312      	movs	r3, #18
 8000af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b00:	2304      	movs	r3, #4
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480b      	ldr	r0, [pc, #44]	; (8000b38 <HAL_I2C_MspInit+0x84>)
 8000b0c:	f000 fa66 	bl	8000fdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <HAL_I2C_MspInit+0x80>)
 8000b12:	69db      	ldr	r3, [r3, #28]
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <HAL_I2C_MspInit+0x80>)
 8000b16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b1a:	61d3      	str	r3, [r2, #28]
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_I2C_MspInit+0x80>)
 8000b1e:	69db      	ldr	r3, [r3, #28]
 8000b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b28:	bf00      	nop
 8000b2a:	3728      	adds	r7, #40	; 0x28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40005400 	.word	0x40005400
 8000b34:	40021000 	.word	0x40021000
 8000b38:	48000400 	.word	0x48000400

08000b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <HAL_UART_MspInit+0x7c>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d128      	bne.n	8000bb0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <HAL_UART_MspInit+0x80>)
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	4a16      	ldr	r2, [pc, #88]	; (8000bbc <HAL_UART_MspInit+0x80>)
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b68:	61d3      	str	r3, [r2, #28]
 8000b6a:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <HAL_UART_MspInit+0x80>)
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_UART_MspInit+0x80>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	4a10      	ldr	r2, [pc, #64]	; (8000bbc <HAL_UART_MspInit+0x80>)
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b80:	6153      	str	r3, [r2, #20]
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_UART_MspInit+0x80>)
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b8e:	230c      	movs	r3, #12
 8000b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b9e:	2307      	movs	r3, #7
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bac:	f000 fa16 	bl	8000fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bb0:	bf00      	nop
 8000bb2:	3728      	adds	r7, #40	; 0x28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40004400 	.word	0x40004400
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c14:	f000 f8ba 	bl	8000d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c24:	4a14      	ldr	r2, [pc, #80]	; (8000c78 <_sbrk+0x5c>)
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <_sbrk+0x60>)
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c30:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d102      	bne.n	8000c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <_sbrk+0x64>)
 8000c3a:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <_sbrk+0x68>)
 8000c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d207      	bcs.n	8000c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c4c:	f003 f862 	bl	8003d14 <__errno>
 8000c50:	4602      	mov	r2, r0
 8000c52:	230c      	movs	r3, #12
 8000c54:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	e009      	b.n	8000c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <_sbrk+0x64>)
 8000c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20010000 	.word	0x20010000
 8000c7c:	00000400 	.word	0x00000400
 8000c80:	2000047c 	.word	0x2000047c
 8000c84:	20000560 	.word	0x20000560

08000c88 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <SystemInit+0x20>)
 8000c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c92:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <SystemInit+0x20>)
 8000c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb0:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cb2:	490e      	ldr	r1, [pc, #56]	; (8000cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb4:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <LoopForever+0xe>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb8:	e002      	b.n	8000cc0 <LoopCopyDataInit>

08000cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cbe:	3304      	adds	r3, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc4:	d3f9      	bcc.n	8000cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc6:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc8:	4c0b      	ldr	r4, [pc, #44]	; (8000cf8 <LoopForever+0x16>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ccc:	e001      	b.n	8000cd2 <LoopFillZerobss>

08000cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd0:	3204      	adds	r2, #4

08000cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd4:	d3fb      	bcc.n	8000cce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cd6:	f7ff ffd7 	bl	8000c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cda:	f003 f821 	bl	8003d20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cde:	f7ff fd37 	bl	8000750 <main>

08000ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ce2:	e7fe      	b.n	8000ce2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ce4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cf0:	08004640 	.word	0x08004640
  ldr r2, =_sbss
 8000cf4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cf8:	20000560 	.word	0x20000560

08000cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC1_2_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_Init+0x28>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <HAL_Init+0x28>)
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 f92f 	bl	8000f74 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f000 f808 	bl	8000d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d1c:	f7ff fea6 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40022000 	.word	0x40022000

08000d2c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_InitTick+0x54>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_InitTick+0x58>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 f939 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00e      	b.n	8000d78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b0f      	cmp	r3, #15
 8000d5e:	d80a      	bhi.n	8000d76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d60:	2200      	movs	r2, #0
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f000 f90f 	bl	8000f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d6c:	4a06      	ldr	r2, [pc, #24]	; (8000d88 <HAL_InitTick+0x5c>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	e000      	b.n	8000d78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000000 	.word	0x20000000
 8000d84:	20000008 	.word	0x20000008
 8000d88:	20000004 	.word	0x20000004

08000d8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_IncTick+0x20>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_IncTick+0x24>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <HAL_IncTick+0x24>)
 8000d9e:	6013      	str	r3, [r2, #0]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000008 	.word	0x20000008
 8000db0:	20000558 	.word	0x20000558

08000db4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <HAL_GetTick+0x14>)
 8000dba:	681b      	ldr	r3, [r3, #0]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000558 	.word	0x20000558

08000dcc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd4:	f7ff ffee 	bl	8000db4 <HAL_GetTick>
 8000dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de4:	d005      	beq.n	8000df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <HAL_Delay+0x40>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	461a      	mov	r2, r3
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4413      	add	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000df2:	bf00      	nop
 8000df4:	f7ff ffde 	bl	8000db4 <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d8f7      	bhi.n	8000df4 <HAL_Delay+0x28>
  {
  }
}
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000008 	.word	0x20000008

08000e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e42:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	60d3      	str	r3, [r2, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	db0a      	blt.n	8000e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	490c      	ldr	r1, [pc, #48]	; (8000ec0 <__NVIC_SetPriority+0x4c>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	440b      	add	r3, r1
 8000e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e9c:	e00a      	b.n	8000eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4908      	ldr	r1, [pc, #32]	; (8000ec4 <__NVIC_SetPriority+0x50>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	761a      	strb	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f1c3 0307 	rsb	r3, r3, #7
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	bf28      	it	cs
 8000ee6:	2304      	movcs	r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3304      	adds	r3, #4
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d902      	bls.n	8000ef8 <NVIC_EncodePriority+0x30>
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	e000      	b.n	8000efa <NVIC_EncodePriority+0x32>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43d9      	mvns	r1, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	4313      	orrs	r3, r2
         );
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3724      	adds	r7, #36	; 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f40:	d301      	bcc.n	8000f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00f      	b.n	8000f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <SysTick_Config+0x40>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4e:	210f      	movs	r1, #15
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f7ff ff8e 	bl	8000e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <SysTick_Config+0x40>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <SysTick_Config+0x40>)
 8000f60:	2207      	movs	r2, #7
 8000f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	e000e010 	.word	0xe000e010

08000f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff47 	bl	8000e10 <__NVIC_SetPriorityGrouping>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9c:	f7ff ff5c 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8000fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff ff8e 	bl	8000ec8 <NVIC_EncodePriority>
 8000fac:	4602      	mov	r2, r0
 8000fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff5d 	bl	8000e74 <__NVIC_SetPriority>
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffb0 	bl	8000f30 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fea:	e160      	b.n	80012ae <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 8152 	beq.w	80012a8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d00b      	beq.n	8001024 <HAL_GPIO_Init+0x48>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b02      	cmp	r3, #2
 8001012:	d007      	beq.n	8001024 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001018:	2b11      	cmp	r3, #17
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b12      	cmp	r3, #18
 8001022:	d130      	bne.n	8001086 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68da      	ldr	r2, [r3, #12]
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800105a:	2201      	movs	r2, #1
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	091b      	lsrs	r3, r3, #4
 8001070:	f003 0201 	and.w	r2, r3, #1
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	2203      	movs	r2, #3
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0xea>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b12      	cmp	r3, #18
 80010c4:	d123      	bne.n	800110e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	08da      	lsrs	r2, r3, #3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3208      	adds	r2, #8
 80010ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	220f      	movs	r2, #15
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	691a      	ldr	r2, [r3, #16]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3208      	adds	r2, #8
 8001108:	6939      	ldr	r1, [r7, #16]
 800110a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0203 	and.w	r2, r3, #3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 80ac 	beq.w	80012a8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001150:	4b5e      	ldr	r3, [pc, #376]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a5d      	ldr	r2, [pc, #372]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b5b      	ldr	r3, [pc, #364]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001168:	4a59      	ldr	r2, [pc, #356]	; (80012d0 <HAL_GPIO_Init+0x2f4>)
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	220f      	movs	r2, #15
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001192:	d025      	beq.n	80011e0 <HAL_GPIO_Init+0x204>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a4f      	ldr	r2, [pc, #316]	; (80012d4 <HAL_GPIO_Init+0x2f8>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d01f      	beq.n	80011dc <HAL_GPIO_Init+0x200>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a4e      	ldr	r2, [pc, #312]	; (80012d8 <HAL_GPIO_Init+0x2fc>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d019      	beq.n	80011d8 <HAL_GPIO_Init+0x1fc>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a4d      	ldr	r2, [pc, #308]	; (80012dc <HAL_GPIO_Init+0x300>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d013      	beq.n	80011d4 <HAL_GPIO_Init+0x1f8>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a4c      	ldr	r2, [pc, #304]	; (80012e0 <HAL_GPIO_Init+0x304>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d00d      	beq.n	80011d0 <HAL_GPIO_Init+0x1f4>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a4b      	ldr	r2, [pc, #300]	; (80012e4 <HAL_GPIO_Init+0x308>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d007      	beq.n	80011cc <HAL_GPIO_Init+0x1f0>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a4a      	ldr	r2, [pc, #296]	; (80012e8 <HAL_GPIO_Init+0x30c>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d101      	bne.n	80011c8 <HAL_GPIO_Init+0x1ec>
 80011c4:	2306      	movs	r3, #6
 80011c6:	e00c      	b.n	80011e2 <HAL_GPIO_Init+0x206>
 80011c8:	2307      	movs	r3, #7
 80011ca:	e00a      	b.n	80011e2 <HAL_GPIO_Init+0x206>
 80011cc:	2305      	movs	r3, #5
 80011ce:	e008      	b.n	80011e2 <HAL_GPIO_Init+0x206>
 80011d0:	2304      	movs	r3, #4
 80011d2:	e006      	b.n	80011e2 <HAL_GPIO_Init+0x206>
 80011d4:	2303      	movs	r3, #3
 80011d6:	e004      	b.n	80011e2 <HAL_GPIO_Init+0x206>
 80011d8:	2302      	movs	r3, #2
 80011da:	e002      	b.n	80011e2 <HAL_GPIO_Init+0x206>
 80011dc:	2301      	movs	r3, #1
 80011de:	e000      	b.n	80011e2 <HAL_GPIO_Init+0x206>
 80011e0:	2300      	movs	r3, #0
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	f002 0203 	and.w	r2, r2, #3
 80011e8:	0092      	lsls	r2, r2, #2
 80011ea:	4093      	lsls	r3, r2
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011f2:	4937      	ldr	r1, [pc, #220]	; (80012d0 <HAL_GPIO_Init+0x2f4>)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3302      	adds	r3, #2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001200:	4b3a      	ldr	r3, [pc, #232]	; (80012ec <HAL_GPIO_Init+0x310>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	43db      	mvns	r3, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001224:	4a31      	ldr	r2, [pc, #196]	; (80012ec <HAL_GPIO_Init+0x310>)
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800122a:	4b30      	ldr	r3, [pc, #192]	; (80012ec <HAL_GPIO_Init+0x310>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800124e:	4a27      	ldr	r2, [pc, #156]	; (80012ec <HAL_GPIO_Init+0x310>)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001254:	4b25      	ldr	r3, [pc, #148]	; (80012ec <HAL_GPIO_Init+0x310>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001278:	4a1c      	ldr	r2, [pc, #112]	; (80012ec <HAL_GPIO_Init+0x310>)
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_GPIO_Init+0x310>)
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012a2:	4a12      	ldr	r2, [pc, #72]	; (80012ec <HAL_GPIO_Init+0x310>)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	3301      	adds	r3, #1
 80012ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	fa22 f303 	lsr.w	r3, r2, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f47f ae97 	bne.w	8000fec <HAL_GPIO_Init+0x10>
  }
}
 80012be:	bf00      	nop
 80012c0:	371c      	adds	r7, #28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40010000 	.word	0x40010000
 80012d4:	48000400 	.word	0x48000400
 80012d8:	48000800 	.word	0x48000800
 80012dc:	48000c00 	.word	0x48000c00
 80012e0:	48001000 	.word	0x48001000
 80012e4:	48001400 	.word	0x48001400
 80012e8:	48001800 	.word	0x48001800
 80012ec:	40010400 	.word	0x40010400

080012f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	807b      	strh	r3, [r7, #2]
 80012fc:	4613      	mov	r3, r2
 80012fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001300:	787b      	ldrb	r3, [r7, #1]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001306:	887a      	ldrh	r2, [r7, #2]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800130c:	e002      	b.n	8001314 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e081      	b.n	8001436 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d106      	bne.n	800134c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff fbb4 	bl	8000ab4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2224      	movs	r2, #36	; 0x24
 8001350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0201 	bic.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001370:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001380:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d107      	bne.n	800139a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	e006      	b.n	80013a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80013a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d104      	bne.n	80013ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6812      	ldr	r2, [r2, #0]
 80013c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691a      	ldr	r2, [r3, #16]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	ea42 0103 	orr.w	r1, r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	021a      	lsls	r2, r3, #8
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69d9      	ldr	r1, [r3, #28]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a1a      	ldr	r2, [r3, #32]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	430a      	orrs	r2, r1
 8001406:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 0201 	orr.w	r2, r2, #1
 8001416:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2220      	movs	r2, #32
 8001422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af02      	add	r7, sp, #8
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	4608      	mov	r0, r1
 800144a:	4611      	mov	r1, r2
 800144c:	461a      	mov	r2, r3
 800144e:	4603      	mov	r3, r0
 8001450:	817b      	strh	r3, [r7, #10]
 8001452:	460b      	mov	r3, r1
 8001454:	813b      	strh	r3, [r7, #8]
 8001456:	4613      	mov	r3, r2
 8001458:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b20      	cmp	r3, #32
 8001464:	f040 80f9 	bne.w	800165a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001468:	6a3b      	ldr	r3, [r7, #32]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d002      	beq.n	8001474 <HAL_I2C_Mem_Write+0x34>
 800146e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001470:	2b00      	cmp	r3, #0
 8001472:	d105      	bne.n	8001480 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800147a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e0ed      	b.n	800165c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001486:	2b01      	cmp	r3, #1
 8001488:	d101      	bne.n	800148e <HAL_I2C_Mem_Write+0x4e>
 800148a:	2302      	movs	r3, #2
 800148c:	e0e6      	b.n	800165c <HAL_I2C_Mem_Write+0x21c>
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001496:	f7ff fc8d 	bl	8000db4 <HAL_GetTick>
 800149a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2319      	movs	r3, #25
 80014a2:	2201      	movs	r2, #1
 80014a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f000 fac3 	bl	8001a34 <I2C_WaitOnFlagUntilTimeout>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e0d1      	b.n	800165c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2221      	movs	r2, #33	; 0x21
 80014bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2240      	movs	r2, #64	; 0x40
 80014c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2200      	movs	r2, #0
 80014cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6a3a      	ldr	r2, [r7, #32]
 80014d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80014d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014e0:	88f8      	ldrh	r0, [r7, #6]
 80014e2:	893a      	ldrh	r2, [r7, #8]
 80014e4:	8979      	ldrh	r1, [r7, #10]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	9301      	str	r3, [sp, #4]
 80014ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	4603      	mov	r3, r0
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f000 f9d3 	bl	800189c <I2C_RequestMemoryWrite>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e0a9      	b.n	800165c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800150c:	b29b      	uxth	r3, r3
 800150e:	2bff      	cmp	r3, #255	; 0xff
 8001510:	d90e      	bls.n	8001530 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	22ff      	movs	r2, #255	; 0xff
 8001516:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800151c:	b2da      	uxtb	r2, r3
 800151e:	8979      	ldrh	r1, [r7, #10]
 8001520:	2300      	movs	r3, #0
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f000 fba5 	bl	8001c78 <I2C_TransferConfig>
 800152e:	e00f      	b.n	8001550 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001534:	b29a      	uxth	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800153e:	b2da      	uxtb	r2, r3
 8001540:	8979      	ldrh	r1, [r7, #10]
 8001542:	2300      	movs	r3, #0
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f000 fb94 	bl	8001c78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f000 faad 	bl	8001ab4 <I2C_WaitOnTXISFlagUntilTimeout>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e07b      	b.n	800165c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	781a      	ldrb	r2, [r3, #0]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800157e:	b29b      	uxth	r3, r3
 8001580:	3b01      	subs	r3, #1
 8001582:	b29a      	uxth	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800158c:	3b01      	subs	r3, #1
 800158e:	b29a      	uxth	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001598:	b29b      	uxth	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d034      	beq.n	8001608 <HAL_I2C_Mem_Write+0x1c8>
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d130      	bne.n	8001608 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ac:	2200      	movs	r2, #0
 80015ae:	2180      	movs	r1, #128	; 0x80
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f000 fa3f 	bl	8001a34 <I2C_WaitOnFlagUntilTimeout>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e04d      	b.n	800165c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	2bff      	cmp	r3, #255	; 0xff
 80015c8:	d90e      	bls.n	80015e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	22ff      	movs	r2, #255	; 0xff
 80015ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	8979      	ldrh	r1, [r7, #10]
 80015d8:	2300      	movs	r3, #0
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f000 fb49 	bl	8001c78 <I2C_TransferConfig>
 80015e6:	e00f      	b.n	8001608 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	8979      	ldrh	r1, [r7, #10]
 80015fa:	2300      	movs	r3, #0
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f000 fb38 	bl	8001c78 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800160c:	b29b      	uxth	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d19e      	bne.n	8001550 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f000 fa8c 	bl	8001b34 <I2C_WaitOnSTOPFlagUntilTimeout>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e01a      	b.n	800165c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2220      	movs	r2, #32
 800162c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6859      	ldr	r1, [r3, #4]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_I2C_Mem_Write+0x224>)
 800163a:	400b      	ands	r3, r1
 800163c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2220      	movs	r2, #32
 8001642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	e000      	b.n	800165c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800165a:	2302      	movs	r3, #2
  }
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	fe00e800 	.word	0xfe00e800

08001668 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af02      	add	r7, sp, #8
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	4608      	mov	r0, r1
 8001672:	4611      	mov	r1, r2
 8001674:	461a      	mov	r2, r3
 8001676:	4603      	mov	r3, r0
 8001678:	817b      	strh	r3, [r7, #10]
 800167a:	460b      	mov	r3, r1
 800167c:	813b      	strh	r3, [r7, #8]
 800167e:	4613      	mov	r3, r2
 8001680:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b20      	cmp	r3, #32
 800168c:	f040 80fd 	bne.w	800188a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d002      	beq.n	800169c <HAL_I2C_Mem_Read+0x34>
 8001696:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001698:	2b00      	cmp	r3, #0
 800169a:	d105      	bne.n	80016a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e0f1      	b.n	800188c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <HAL_I2C_Mem_Read+0x4e>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e0ea      	b.n	800188c <HAL_I2C_Mem_Read+0x224>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016be:	f7ff fb79 	bl	8000db4 <HAL_GetTick>
 80016c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	2319      	movs	r3, #25
 80016ca:	2201      	movs	r2, #1
 80016cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f000 f9af 	bl	8001a34 <I2C_WaitOnFlagUntilTimeout>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0d5      	b.n	800188c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2222      	movs	r2, #34	; 0x22
 80016e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2240      	movs	r2, #64	; 0x40
 80016ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2200      	movs	r2, #0
 80016f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6a3a      	ldr	r2, [r7, #32]
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001700:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001708:	88f8      	ldrh	r0, [r7, #6]
 800170a:	893a      	ldrh	r2, [r7, #8]
 800170c:	8979      	ldrh	r1, [r7, #10]
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	4603      	mov	r3, r0
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 f913 	bl	8001944 <I2C_RequestMemoryRead>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0ad      	b.n	800188c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001734:	b29b      	uxth	r3, r3
 8001736:	2bff      	cmp	r3, #255	; 0xff
 8001738:	d90e      	bls.n	8001758 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	22ff      	movs	r2, #255	; 0xff
 800173e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001744:	b2da      	uxtb	r2, r3
 8001746:	8979      	ldrh	r1, [r7, #10]
 8001748:	4b52      	ldr	r3, [pc, #328]	; (8001894 <HAL_I2C_Mem_Read+0x22c>)
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f000 fa91 	bl	8001c78 <I2C_TransferConfig>
 8001756:	e00f      	b.n	8001778 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800175c:	b29a      	uxth	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001766:	b2da      	uxtb	r2, r3
 8001768:	8979      	ldrh	r1, [r7, #10]
 800176a:	4b4a      	ldr	r3, [pc, #296]	; (8001894 <HAL_I2C_Mem_Read+0x22c>)
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f000 fa80 	bl	8001c78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800177e:	2200      	movs	r2, #0
 8001780:	2104      	movs	r1, #4
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f000 f956 	bl	8001a34 <I2C_WaitOnFlagUntilTimeout>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e07c      	b.n	800188c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	3b01      	subs	r3, #1
 80017be:	b29a      	uxth	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d034      	beq.n	8001838 <HAL_I2C_Mem_Read+0x1d0>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d130      	bne.n	8001838 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017dc:	2200      	movs	r2, #0
 80017de:	2180      	movs	r1, #128	; 0x80
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f000 f927 	bl	8001a34 <I2C_WaitOnFlagUntilTimeout>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e04d      	b.n	800188c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	2bff      	cmp	r3, #255	; 0xff
 80017f8:	d90e      	bls.n	8001818 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	22ff      	movs	r2, #255	; 0xff
 80017fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001804:	b2da      	uxtb	r2, r3
 8001806:	8979      	ldrh	r1, [r7, #10]
 8001808:	2300      	movs	r3, #0
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f000 fa31 	bl	8001c78 <I2C_TransferConfig>
 8001816:	e00f      	b.n	8001838 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800181c:	b29a      	uxth	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001826:	b2da      	uxtb	r2, r3
 8001828:	8979      	ldrh	r1, [r7, #10]
 800182a:	2300      	movs	r3, #0
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 fa20 	bl	8001c78 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800183c:	b29b      	uxth	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d19a      	bne.n	8001778 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f000 f974 	bl	8001b34 <I2C_WaitOnSTOPFlagUntilTimeout>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e01a      	b.n	800188c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2220      	movs	r2, #32
 800185c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6859      	ldr	r1, [r3, #4]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <HAL_I2C_Mem_Read+0x230>)
 800186a:	400b      	ands	r3, r1
 800186c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2220      	movs	r2, #32
 8001872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	e000      	b.n	800188c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800188a:	2302      	movs	r3, #2
  }
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	80002400 	.word	0x80002400
 8001898:	fe00e800 	.word	0xfe00e800

0800189c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af02      	add	r7, sp, #8
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	4608      	mov	r0, r1
 80018a6:	4611      	mov	r1, r2
 80018a8:	461a      	mov	r2, r3
 80018aa:	4603      	mov	r3, r0
 80018ac:	817b      	strh	r3, [r7, #10]
 80018ae:	460b      	mov	r3, r1
 80018b0:	813b      	strh	r3, [r7, #8]
 80018b2:	4613      	mov	r3, r2
 80018b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	8979      	ldrh	r1, [r7, #10]
 80018bc:	4b20      	ldr	r3, [pc, #128]	; (8001940 <I2C_RequestMemoryWrite+0xa4>)
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f000 f9d7 	bl	8001c78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	69b9      	ldr	r1, [r7, #24]
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 f8f0 	bl	8001ab4 <I2C_WaitOnTXISFlagUntilTimeout>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e02c      	b.n	8001938 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d105      	bne.n	80018f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018e4:	893b      	ldrh	r3, [r7, #8]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28
 80018ee:	e015      	b.n	800191c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80018f0:	893b      	ldrh	r3, [r7, #8]
 80018f2:	0a1b      	lsrs	r3, r3, #8
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018fe:	69fa      	ldr	r2, [r7, #28]
 8001900:	69b9      	ldr	r1, [r7, #24]
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f000 f8d6 	bl	8001ab4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e012      	b.n	8001938 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001912:	893b      	ldrh	r3, [r7, #8]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	2200      	movs	r2, #0
 8001924:	2180      	movs	r1, #128	; 0x80
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 f884 	bl	8001a34 <I2C_WaitOnFlagUntilTimeout>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	80002000 	.word	0x80002000

08001944 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af02      	add	r7, sp, #8
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	4608      	mov	r0, r1
 800194e:	4611      	mov	r1, r2
 8001950:	461a      	mov	r2, r3
 8001952:	4603      	mov	r3, r0
 8001954:	817b      	strh	r3, [r7, #10]
 8001956:	460b      	mov	r3, r1
 8001958:	813b      	strh	r3, [r7, #8]
 800195a:	4613      	mov	r3, r2
 800195c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	b2da      	uxtb	r2, r3
 8001962:	8979      	ldrh	r1, [r7, #10]
 8001964:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <I2C_RequestMemoryRead+0xa4>)
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	2300      	movs	r3, #0
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f000 f984 	bl	8001c78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	69b9      	ldr	r1, [r7, #24]
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f000 f89d 	bl	8001ab4 <I2C_WaitOnTXISFlagUntilTimeout>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e02c      	b.n	80019de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001984:	88fb      	ldrh	r3, [r7, #6]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d105      	bne.n	8001996 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800198a:	893b      	ldrh	r3, [r7, #8]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
 8001994:	e015      	b.n	80019c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001996:	893b      	ldrh	r3, [r7, #8]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	b29b      	uxth	r3, r3
 800199c:	b2da      	uxtb	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019a4:	69fa      	ldr	r2, [r7, #28]
 80019a6:	69b9      	ldr	r1, [r7, #24]
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 f883 	bl	8001ab4 <I2C_WaitOnTXISFlagUntilTimeout>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e012      	b.n	80019de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019b8:	893b      	ldrh	r3, [r7, #8]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	2200      	movs	r2, #0
 80019ca:	2140      	movs	r1, #64	; 0x40
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f000 f831 	bl	8001a34 <I2C_WaitOnFlagUntilTimeout>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	80002000 	.word	0x80002000

080019ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d103      	bne.n	8001a0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2200      	movs	r2, #0
 8001a08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d007      	beq.n	8001a28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	699a      	ldr	r2, [r3, #24]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	619a      	str	r2, [r3, #24]
  }
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	4613      	mov	r3, r2
 8001a42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a44:	e022      	b.n	8001a8c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4c:	d01e      	beq.n	8001a8c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a4e:	f7ff f9b1 	bl	8000db4 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d302      	bcc.n	8001a64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d113      	bne.n	8001a8c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a68:	f043 0220 	orr.w	r2, r3, #32
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2220      	movs	r2, #32
 8001a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e00f      	b.n	8001aac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	699a      	ldr	r2, [r3, #24]
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	4013      	ands	r3, r2
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	bf0c      	ite	eq
 8001a9c:	2301      	moveq	r3, #1
 8001a9e:	2300      	movne	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d0cd      	beq.n	8001a46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ac0:	e02c      	b.n	8001b1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 f870 	bl	8001bac <I2C_IsAcknowledgeFailed>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e02a      	b.n	8001b2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001adc:	d01e      	beq.n	8001b1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ade:	f7ff f969 	bl	8000db4 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d302      	bcc.n	8001af4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d113      	bne.n	8001b1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af8:	f043 0220 	orr.w	r2, r3, #32
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2220      	movs	r2, #32
 8001b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e007      	b.n	8001b2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d1cb      	bne.n	8001ac2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b40:	e028      	b.n	8001b94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 f830 	bl	8001bac <I2C_IsAcknowledgeFailed>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e026      	b.n	8001ba4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b56:	f7ff f92d 	bl	8000db4 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	68ba      	ldr	r2, [r7, #8]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d302      	bcc.n	8001b6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d113      	bne.n	8001b94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b70:	f043 0220 	orr.w	r2, r3, #32
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e007      	b.n	8001ba4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f003 0320 	and.w	r3, r3, #32
 8001b9e:	2b20      	cmp	r3, #32
 8001ba0:	d1cf      	bne.n	8001b42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	2b10      	cmp	r3, #16
 8001bc4:	d151      	bne.n	8001c6a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bc6:	e022      	b.n	8001c0e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bce:	d01e      	beq.n	8001c0e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd0:	f7ff f8f0 	bl	8000db4 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d302      	bcc.n	8001be6 <I2C_IsAcknowledgeFailed+0x3a>
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d113      	bne.n	8001c0e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	f043 0220 	orr.w	r2, r3, #32
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2220      	movs	r2, #32
 8001bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e02e      	b.n	8001c6c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0320 	and.w	r3, r3, #32
 8001c18:	2b20      	cmp	r3, #32
 8001c1a:	d1d5      	bne.n	8001bc8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2210      	movs	r2, #16
 8001c22:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f7ff fedd 	bl	80019ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6859      	ldr	r1, [r3, #4]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <I2C_IsAcknowledgeFailed+0xc8>)
 8001c3e:	400b      	ands	r3, r1
 8001c40:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f043 0204 	orr.w	r2, r3, #4
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2220      	movs	r2, #32
 8001c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	fe00e800 	.word	0xfe00e800

08001c78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	460b      	mov	r3, r1
 8001c84:	817b      	strh	r3, [r7, #10]
 8001c86:	4613      	mov	r3, r2
 8001c88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	0d5b      	lsrs	r3, r3, #21
 8001c94:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001c98:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <I2C_TransferConfig+0x58>)
 8001c9a:	430b      	orrs	r3, r1
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	ea02 0103 	and.w	r1, r2, r3
 8001ca2:	897b      	ldrh	r3, [r7, #10]
 8001ca4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ca8:	7a7b      	ldrb	r3, [r7, #9]
 8001caa:	041b      	lsls	r3, r3, #16
 8001cac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	03ff63ff 	.word	0x03ff63ff

08001cd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b20      	cmp	r3, #32
 8001ce8:	d138      	bne.n	8001d5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e032      	b.n	8001d5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2224      	movs	r2, #36	; 0x24
 8001d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0201 	bic.w	r2, r2, #1
 8001d16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6819      	ldr	r1, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e000      	b.n	8001d5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d5c:	2302      	movs	r3, #2
  }
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b085      	sub	sp, #20
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b20      	cmp	r3, #32
 8001d7e:	d139      	bne.n	8001df4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e033      	b.n	8001df6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2224      	movs	r2, #36	; 0x24
 8001d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0201 	bic.w	r2, r2, #1
 8001dac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001dbc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0201 	orr.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2220      	movs	r2, #32
 8001de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	e000      	b.n	8001df6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001df4:	2302      	movs	r3, #2
  }
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e10:	1d3b      	adds	r3, r7, #4
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d102      	bne.n	8001e1e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	f000 bf01 	b.w	8002c20 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 8160 	beq.w	80020ee <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e2e:	4bae      	ldr	r3, [pc, #696]	; (80020e8 <HAL_RCC_OscConfig+0x2e4>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d00c      	beq.n	8001e54 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e3a:	4bab      	ldr	r3, [pc, #684]	; (80020e8 <HAL_RCC_OscConfig+0x2e4>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d159      	bne.n	8001efa <HAL_RCC_OscConfig+0xf6>
 8001e46:	4ba8      	ldr	r3, [pc, #672]	; (80020e8 <HAL_RCC_OscConfig+0x2e4>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e52:	d152      	bne.n	8001efa <HAL_RCC_OscConfig+0xf6>
 8001e54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e58:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e60:	fa93 f3a3 	rbit	r3, r3
 8001e64:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e68:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d102      	bne.n	8001e86 <HAL_RCC_OscConfig+0x82>
 8001e80:	4b99      	ldr	r3, [pc, #612]	; (80020e8 <HAL_RCC_OscConfig+0x2e4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	e015      	b.n	8001eb2 <HAL_RCC_OscConfig+0xae>
 8001e86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e8a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001e9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e9e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001ea2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001eae:	4b8e      	ldr	r3, [pc, #568]	; (80020e8 <HAL_RCC_OscConfig+0x2e4>)
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eb6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001eba:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001ebe:	fa92 f2a2 	rbit	r2, r2
 8001ec2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001ec6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001eca:	fab2 f282 	clz	r2, r2
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	f042 0220 	orr.w	r2, r2, #32
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	f002 021f 	and.w	r2, r2, #31
 8001eda:	2101      	movs	r1, #1
 8001edc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 8102 	beq.w	80020ec <HAL_RCC_OscConfig+0x2e8>
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f040 80fc 	bne.w	80020ec <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f000 be93 	b.w	8002c20 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f04:	d106      	bne.n	8001f14 <HAL_RCC_OscConfig+0x110>
 8001f06:	4b78      	ldr	r3, [pc, #480]	; (80020e8 <HAL_RCC_OscConfig+0x2e4>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a77      	ldr	r2, [pc, #476]	; (80020e8 <HAL_RCC_OscConfig+0x2e4>)
 8001f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e030      	b.n	8001f76 <HAL_RCC_OscConfig+0x172>
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x134>
 8001f1e:	4b72      	ldr	r3, [pc, #456]	; (80020e8 <HAL_RCC_OscConfig+0x2e4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a71      	ldr	r2, [pc, #452]	; (80020e8 <HAL_RCC_OscConfig+0x2e4>)
 8001f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	4b6f      	ldr	r3, [pc, #444]	; (80020e8 <HAL_RCC_OscConfig+0x2e4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a6e      	ldr	r2, [pc, #440]	; (80020e8 <HAL_RCC_OscConfig+0x2e4>)
 8001f30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e01e      	b.n	8001f76 <HAL_RCC_OscConfig+0x172>
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f42:	d10c      	bne.n	8001f5e <HAL_RCC_OscConfig+0x15a>
 8001f44:	4b68      	ldr	r3, [pc, #416]	; (80020e8 <HAL_RCC_OscConfig+0x2e4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a67      	ldr	r2, [pc, #412]	; (80020e8 <HAL_RCC_OscConfig+0x2e4>)
 8001f4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	4b65      	ldr	r3, [pc, #404]	; (80020e8 <HAL_RCC_OscConfig+0x2e4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a64      	ldr	r2, [pc, #400]	; (80020e8 <HAL_RCC_OscConfig+0x2e4>)
 8001f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	e00b      	b.n	8001f76 <HAL_RCC_OscConfig+0x172>
 8001f5e:	4b62      	ldr	r3, [pc, #392]	; (80020e8 <HAL_RCC_OscConfig+0x2e4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a61      	ldr	r2, [pc, #388]	; (80020e8 <HAL_RCC_OscConfig+0x2e4>)
 8001f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	4b5f      	ldr	r3, [pc, #380]	; (80020e8 <HAL_RCC_OscConfig+0x2e4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a5e      	ldr	r2, [pc, #376]	; (80020e8 <HAL_RCC_OscConfig+0x2e4>)
 8001f70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f74:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d059      	beq.n	8002034 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7fe ff18 	bl	8000db4 <HAL_GetTick>
 8001f84:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f8a:	f7fe ff13 	bl	8000db4 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d902      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	f000 be40 	b.w	8002c20 <HAL_RCC_OscConfig+0xe1c>
 8001fa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001fac:	fa93 f3a3 	rbit	r3, r3
 8001fb0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001fb4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d102      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x1ce>
 8001fcc:	4b46      	ldr	r3, [pc, #280]	; (80020e8 <HAL_RCC_OscConfig+0x2e4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	e015      	b.n	8001ffe <HAL_RCC_OscConfig+0x1fa>
 8001fd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001fe6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fea:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001fee:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001ffa:	4b3b      	ldr	r3, [pc, #236]	; (80020e8 <HAL_RCC_OscConfig+0x2e4>)
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002002:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002006:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800200a:	fa92 f2a2 	rbit	r2, r2
 800200e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002012:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002016:	fab2 f282 	clz	r2, r2
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	f042 0220 	orr.w	r2, r2, #32
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	f002 021f 	and.w	r2, r2, #31
 8002026:	2101      	movs	r1, #1
 8002028:	fa01 f202 	lsl.w	r2, r1, r2
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0ab      	beq.n	8001f8a <HAL_RCC_OscConfig+0x186>
 8002032:	e05c      	b.n	80020ee <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7fe febe 	bl	8000db4 <HAL_GetTick>
 8002038:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203c:	e00a      	b.n	8002054 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800203e:	f7fe feb9 	bl	8000db4 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b64      	cmp	r3, #100	; 0x64
 800204c:	d902      	bls.n	8002054 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	f000 bde6 	b.w	8002c20 <HAL_RCC_OscConfig+0xe1c>
 8002054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002058:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002068:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206c:	fab3 f383 	clz	r3, r3
 8002070:	b2db      	uxtb	r3, r3
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	b2db      	uxtb	r3, r3
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b01      	cmp	r3, #1
 800207e:	d102      	bne.n	8002086 <HAL_RCC_OscConfig+0x282>
 8002080:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <HAL_RCC_OscConfig+0x2e4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	e015      	b.n	80020b2 <HAL_RCC_OscConfig+0x2ae>
 8002086:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800208a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002092:	fa93 f3a3 	rbit	r3, r3
 8002096:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800209a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800209e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80020a2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80020ae:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_RCC_OscConfig+0x2e4>)
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020b6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80020ba:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80020be:	fa92 f2a2 	rbit	r2, r2
 80020c2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80020c6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80020ca:	fab2 f282 	clz	r2, r2
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	f042 0220 	orr.w	r2, r2, #32
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	f002 021f 	and.w	r2, r2, #31
 80020da:	2101      	movs	r1, #1
 80020dc:	fa01 f202 	lsl.w	r2, r1, r2
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1ab      	bne.n	800203e <HAL_RCC_OscConfig+0x23a>
 80020e6:	e002      	b.n	80020ee <HAL_RCC_OscConfig+0x2ea>
 80020e8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 8170 	beq.w	80023de <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020fe:	4bd0      	ldr	r3, [pc, #832]	; (8002440 <HAL_RCC_OscConfig+0x63c>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00c      	beq.n	8002124 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800210a:	4bcd      	ldr	r3, [pc, #820]	; (8002440 <HAL_RCC_OscConfig+0x63c>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	2b08      	cmp	r3, #8
 8002114:	d16d      	bne.n	80021f2 <HAL_RCC_OscConfig+0x3ee>
 8002116:	4bca      	ldr	r3, [pc, #808]	; (8002440 <HAL_RCC_OscConfig+0x63c>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800211e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002122:	d166      	bne.n	80021f2 <HAL_RCC_OscConfig+0x3ee>
 8002124:	2302      	movs	r3, #2
 8002126:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002136:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213a:	fab3 f383 	clz	r3, r3
 800213e:	b2db      	uxtb	r3, r3
 8002140:	095b      	lsrs	r3, r3, #5
 8002142:	b2db      	uxtb	r3, r3
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b01      	cmp	r3, #1
 800214c:	d102      	bne.n	8002154 <HAL_RCC_OscConfig+0x350>
 800214e:	4bbc      	ldr	r3, [pc, #752]	; (8002440 <HAL_RCC_OscConfig+0x63c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	e013      	b.n	800217c <HAL_RCC_OscConfig+0x378>
 8002154:	2302      	movs	r3, #2
 8002156:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002166:	2302      	movs	r3, #2
 8002168:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800216c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002170:	fa93 f3a3 	rbit	r3, r3
 8002174:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002178:	4bb1      	ldr	r3, [pc, #708]	; (8002440 <HAL_RCC_OscConfig+0x63c>)
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	2202      	movs	r2, #2
 800217e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002182:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002186:	fa92 f2a2 	rbit	r2, r2
 800218a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800218e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002192:	fab2 f282 	clz	r2, r2
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	f042 0220 	orr.w	r2, r2, #32
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	f002 021f 	and.w	r2, r2, #31
 80021a2:	2101      	movs	r1, #1
 80021a4:	fa01 f202 	lsl.w	r2, r1, r2
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d007      	beq.n	80021be <HAL_RCC_OscConfig+0x3ba>
 80021ae:	1d3b      	adds	r3, r7, #4
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d002      	beq.n	80021be <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	f000 bd31 	b.w	8002c20 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021be:	4ba0      	ldr	r3, [pc, #640]	; (8002440 <HAL_RCC_OscConfig+0x63c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	21f8      	movs	r1, #248	; 0xf8
 80021ce:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80021d6:	fa91 f1a1 	rbit	r1, r1
 80021da:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80021de:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80021e2:	fab1 f181 	clz	r1, r1
 80021e6:	b2c9      	uxtb	r1, r1
 80021e8:	408b      	lsls	r3, r1
 80021ea:	4995      	ldr	r1, [pc, #596]	; (8002440 <HAL_RCC_OscConfig+0x63c>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f0:	e0f5      	b.n	80023de <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021f2:	1d3b      	adds	r3, r7, #4
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 8085 	beq.w	8002308 <HAL_RCC_OscConfig+0x504>
 80021fe:	2301      	movs	r3, #1
 8002200:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002204:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002208:	fa93 f3a3 	rbit	r3, r3
 800220c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002210:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002214:	fab3 f383 	clz	r3, r3
 8002218:	b2db      	uxtb	r3, r3
 800221a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800221e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	461a      	mov	r2, r3
 8002226:	2301      	movs	r3, #1
 8002228:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222a:	f7fe fdc3 	bl	8000db4 <HAL_GetTick>
 800222e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002232:	e00a      	b.n	800224a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002234:	f7fe fdbe 	bl	8000db4 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d902      	bls.n	800224a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	f000 bceb 	b.w	8002c20 <HAL_RCC_OscConfig+0xe1c>
 800224a:	2302      	movs	r3, #2
 800224c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002250:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002254:	fa93 f3a3 	rbit	r3, r3
 8002258:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800225c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002260:	fab3 f383 	clz	r3, r3
 8002264:	b2db      	uxtb	r3, r3
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	b2db      	uxtb	r3, r3
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b01      	cmp	r3, #1
 8002272:	d102      	bne.n	800227a <HAL_RCC_OscConfig+0x476>
 8002274:	4b72      	ldr	r3, [pc, #456]	; (8002440 <HAL_RCC_OscConfig+0x63c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	e013      	b.n	80022a2 <HAL_RCC_OscConfig+0x49e>
 800227a:	2302      	movs	r3, #2
 800227c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002284:	fa93 f3a3 	rbit	r3, r3
 8002288:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800228c:	2302      	movs	r3, #2
 800228e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002292:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800229e:	4b68      	ldr	r3, [pc, #416]	; (8002440 <HAL_RCC_OscConfig+0x63c>)
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	2202      	movs	r2, #2
 80022a4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80022a8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80022ac:	fa92 f2a2 	rbit	r2, r2
 80022b0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80022b4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80022b8:	fab2 f282 	clz	r2, r2
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	f042 0220 	orr.w	r2, r2, #32
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	f002 021f 	and.w	r2, r2, #31
 80022c8:	2101      	movs	r1, #1
 80022ca:	fa01 f202 	lsl.w	r2, r1, r2
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0af      	beq.n	8002234 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d4:	4b5a      	ldr	r3, [pc, #360]	; (8002440 <HAL_RCC_OscConfig+0x63c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022dc:	1d3b      	adds	r3, r7, #4
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	21f8      	movs	r1, #248	; 0xf8
 80022e4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80022ec:	fa91 f1a1 	rbit	r1, r1
 80022f0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80022f4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80022f8:	fab1 f181 	clz	r1, r1
 80022fc:	b2c9      	uxtb	r1, r1
 80022fe:	408b      	lsls	r3, r1
 8002300:	494f      	ldr	r1, [pc, #316]	; (8002440 <HAL_RCC_OscConfig+0x63c>)
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]
 8002306:	e06a      	b.n	80023de <HAL_RCC_OscConfig+0x5da>
 8002308:	2301      	movs	r3, #1
 800230a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800231a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800231e:	fab3 f383 	clz	r3, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002328:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	461a      	mov	r2, r3
 8002330:	2300      	movs	r3, #0
 8002332:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7fe fd3e 	bl	8000db4 <HAL_GetTick>
 8002338:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233c:	e00a      	b.n	8002354 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800233e:	f7fe fd39 	bl	8000db4 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d902      	bls.n	8002354 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	f000 bc66 	b.w	8002c20 <HAL_RCC_OscConfig+0xe1c>
 8002354:	2302      	movs	r3, #2
 8002356:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800235e:	fa93 f3a3 	rbit	r3, r3
 8002362:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002366:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	095b      	lsrs	r3, r3, #5
 8002372:	b2db      	uxtb	r3, r3
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b01      	cmp	r3, #1
 800237c:	d102      	bne.n	8002384 <HAL_RCC_OscConfig+0x580>
 800237e:	4b30      	ldr	r3, [pc, #192]	; (8002440 <HAL_RCC_OscConfig+0x63c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	e013      	b.n	80023ac <HAL_RCC_OscConfig+0x5a8>
 8002384:	2302      	movs	r3, #2
 8002386:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800238e:	fa93 f3a3 	rbit	r3, r3
 8002392:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002396:	2302      	movs	r3, #2
 8002398:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800239c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80023a0:	fa93 f3a3 	rbit	r3, r3
 80023a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80023a8:	4b25      	ldr	r3, [pc, #148]	; (8002440 <HAL_RCC_OscConfig+0x63c>)
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	2202      	movs	r2, #2
 80023ae:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80023b2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80023b6:	fa92 f2a2 	rbit	r2, r2
 80023ba:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80023be:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80023c2:	fab2 f282 	clz	r2, r2
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	f042 0220 	orr.w	r2, r2, #32
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	f002 021f 	and.w	r2, r2, #31
 80023d2:	2101      	movs	r1, #1
 80023d4:	fa01 f202 	lsl.w	r2, r1, r2
 80023d8:	4013      	ands	r3, r2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1af      	bne.n	800233e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023de:	1d3b      	adds	r3, r7, #4
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80da 	beq.w	80025a2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ee:	1d3b      	adds	r3, r7, #4
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d069      	beq.n	80024cc <HAL_RCC_OscConfig+0x6c8>
 80023f8:	2301      	movs	r3, #1
 80023fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800240a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240e:	fab3 f383 	clz	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_RCC_OscConfig+0x640>)
 8002418:	4413      	add	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	461a      	mov	r2, r3
 800241e:	2301      	movs	r3, #1
 8002420:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002422:	f7fe fcc7 	bl	8000db4 <HAL_GetTick>
 8002426:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242a:	e00d      	b.n	8002448 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800242c:	f7fe fcc2 	bl	8000db4 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d905      	bls.n	8002448 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e3ef      	b.n	8002c20 <HAL_RCC_OscConfig+0xe1c>
 8002440:	40021000 	.word	0x40021000
 8002444:	10908120 	.word	0x10908120
 8002448:	2302      	movs	r3, #2
 800244a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002452:	fa93 f2a3 	rbit	r2, r3
 8002456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002460:	2202      	movs	r2, #2
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	fa93 f2a3 	rbit	r2, r3
 800246e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002478:	2202      	movs	r2, #2
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	fa93 f2a3 	rbit	r2, r3
 8002486:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800248a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248c:	4ba4      	ldr	r3, [pc, #656]	; (8002720 <HAL_RCC_OscConfig+0x91c>)
 800248e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002490:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002494:	2102      	movs	r1, #2
 8002496:	6019      	str	r1, [r3, #0]
 8002498:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	fa93 f1a3 	rbit	r1, r3
 80024a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80024a6:	6019      	str	r1, [r3, #0]
  return result;
 80024a8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	f003 031f 	and.w	r3, r3, #31
 80024be:	2101      	movs	r1, #1
 80024c0:	fa01 f303 	lsl.w	r3, r1, r3
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0b0      	beq.n	800242c <HAL_RCC_OscConfig+0x628>
 80024ca:	e06a      	b.n	80025a2 <HAL_RCC_OscConfig+0x79e>
 80024cc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024d0:	2201      	movs	r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	fa93 f2a3 	rbit	r2, r3
 80024de:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80024e2:	601a      	str	r2, [r3, #0]
  return result;
 80024e4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80024e8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b8c      	ldr	r3, [pc, #560]	; (8002724 <HAL_RCC_OscConfig+0x920>)
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	461a      	mov	r2, r3
 80024fa:	2300      	movs	r3, #0
 80024fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fe:	f7fe fc59 	bl	8000db4 <HAL_GetTick>
 8002502:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002506:	e009      	b.n	800251c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002508:	f7fe fc54 	bl	8000db4 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e381      	b.n	8002c20 <HAL_RCC_OscConfig+0xe1c>
 800251c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002520:	2202      	movs	r2, #2
 8002522:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002524:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	fa93 f2a3 	rbit	r2, r3
 800252e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002538:	2202      	movs	r2, #2
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	fa93 f2a3 	rbit	r2, r3
 8002546:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002550:	2202      	movs	r2, #2
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	fa93 f2a3 	rbit	r2, r3
 800255e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002562:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	4b6e      	ldr	r3, [pc, #440]	; (8002720 <HAL_RCC_OscConfig+0x91c>)
 8002566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002568:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800256c:	2102      	movs	r1, #2
 800256e:	6019      	str	r1, [r3, #0]
 8002570:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	fa93 f1a3 	rbit	r1, r3
 800257a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800257e:	6019      	str	r1, [r3, #0]
  return result;
 8002580:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002590:	b2db      	uxtb	r3, r3
 8002592:	f003 031f 	and.w	r3, r3, #31
 8002596:	2101      	movs	r1, #1
 8002598:	fa01 f303 	lsl.w	r3, r1, r3
 800259c:	4013      	ands	r3, r2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1b2      	bne.n	8002508 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 8157 	beq.w	8002860 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b8:	4b59      	ldr	r3, [pc, #356]	; (8002720 <HAL_RCC_OscConfig+0x91c>)
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d112      	bne.n	80025ea <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c4:	4b56      	ldr	r3, [pc, #344]	; (8002720 <HAL_RCC_OscConfig+0x91c>)
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	4a55      	ldr	r2, [pc, #340]	; (8002720 <HAL_RCC_OscConfig+0x91c>)
 80025ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ce:	61d3      	str	r3, [r2, #28]
 80025d0:	4b53      	ldr	r3, [pc, #332]	; (8002720 <HAL_RCC_OscConfig+0x91c>)
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80025d8:	f107 030c 	add.w	r3, r7, #12
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	f107 030c 	add.w	r3, r7, #12
 80025e2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80025e4:	2301      	movs	r3, #1
 80025e6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ea:	4b4f      	ldr	r3, [pc, #316]	; (8002728 <HAL_RCC_OscConfig+0x924>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d11a      	bne.n	800262c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025f6:	4b4c      	ldr	r3, [pc, #304]	; (8002728 <HAL_RCC_OscConfig+0x924>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a4b      	ldr	r2, [pc, #300]	; (8002728 <HAL_RCC_OscConfig+0x924>)
 80025fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002600:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002602:	f7fe fbd7 	bl	8000db4 <HAL_GetTick>
 8002606:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260a:	e009      	b.n	8002620 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260c:	f7fe fbd2 	bl	8000db4 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b64      	cmp	r3, #100	; 0x64
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e2ff      	b.n	8002c20 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002620:	4b41      	ldr	r3, [pc, #260]	; (8002728 <HAL_RCC_OscConfig+0x924>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0ef      	beq.n	800260c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d106      	bne.n	8002644 <HAL_RCC_OscConfig+0x840>
 8002636:	4b3a      	ldr	r3, [pc, #232]	; (8002720 <HAL_RCC_OscConfig+0x91c>)
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	4a39      	ldr	r2, [pc, #228]	; (8002720 <HAL_RCC_OscConfig+0x91c>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6213      	str	r3, [r2, #32]
 8002642:	e02f      	b.n	80026a4 <HAL_RCC_OscConfig+0x8a0>
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10c      	bne.n	8002668 <HAL_RCC_OscConfig+0x864>
 800264e:	4b34      	ldr	r3, [pc, #208]	; (8002720 <HAL_RCC_OscConfig+0x91c>)
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	4a33      	ldr	r2, [pc, #204]	; (8002720 <HAL_RCC_OscConfig+0x91c>)
 8002654:	f023 0301 	bic.w	r3, r3, #1
 8002658:	6213      	str	r3, [r2, #32]
 800265a:	4b31      	ldr	r3, [pc, #196]	; (8002720 <HAL_RCC_OscConfig+0x91c>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	4a30      	ldr	r2, [pc, #192]	; (8002720 <HAL_RCC_OscConfig+0x91c>)
 8002660:	f023 0304 	bic.w	r3, r3, #4
 8002664:	6213      	str	r3, [r2, #32]
 8002666:	e01d      	b.n	80026a4 <HAL_RCC_OscConfig+0x8a0>
 8002668:	1d3b      	adds	r3, r7, #4
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b05      	cmp	r3, #5
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0x888>
 8002672:	4b2b      	ldr	r3, [pc, #172]	; (8002720 <HAL_RCC_OscConfig+0x91c>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	4a2a      	ldr	r2, [pc, #168]	; (8002720 <HAL_RCC_OscConfig+0x91c>)
 8002678:	f043 0304 	orr.w	r3, r3, #4
 800267c:	6213      	str	r3, [r2, #32]
 800267e:	4b28      	ldr	r3, [pc, #160]	; (8002720 <HAL_RCC_OscConfig+0x91c>)
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	4a27      	ldr	r2, [pc, #156]	; (8002720 <HAL_RCC_OscConfig+0x91c>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6213      	str	r3, [r2, #32]
 800268a:	e00b      	b.n	80026a4 <HAL_RCC_OscConfig+0x8a0>
 800268c:	4b24      	ldr	r3, [pc, #144]	; (8002720 <HAL_RCC_OscConfig+0x91c>)
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	4a23      	ldr	r2, [pc, #140]	; (8002720 <HAL_RCC_OscConfig+0x91c>)
 8002692:	f023 0301 	bic.w	r3, r3, #1
 8002696:	6213      	str	r3, [r2, #32]
 8002698:	4b21      	ldr	r3, [pc, #132]	; (8002720 <HAL_RCC_OscConfig+0x91c>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	4a20      	ldr	r2, [pc, #128]	; (8002720 <HAL_RCC_OscConfig+0x91c>)
 800269e:	f023 0304 	bic.w	r3, r3, #4
 80026a2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026a4:	1d3b      	adds	r3, r7, #4
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d06a      	beq.n	8002784 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ae:	f7fe fb81 	bl	8000db4 <HAL_GetTick>
 80026b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b6:	e00b      	b.n	80026d0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b8:	f7fe fb7c 	bl	8000db4 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e2a7      	b.n	8002c20 <HAL_RCC_OscConfig+0xe1c>
 80026d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80026d4:	2202      	movs	r2, #2
 80026d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	fa93 f2a3 	rbit	r2, r3
 80026e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80026ec:	2202      	movs	r2, #2
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	fa93 f2a3 	rbit	r2, r3
 80026fa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80026fe:	601a      	str	r2, [r3, #0]
  return result;
 8002700:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002704:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002706:	fab3 f383 	clz	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	095b      	lsrs	r3, r3, #5
 800270e:	b2db      	uxtb	r3, r3
 8002710:	f043 0302 	orr.w	r3, r3, #2
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d108      	bne.n	800272c <HAL_RCC_OscConfig+0x928>
 800271a:	4b01      	ldr	r3, [pc, #4]	; (8002720 <HAL_RCC_OscConfig+0x91c>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	e013      	b.n	8002748 <HAL_RCC_OscConfig+0x944>
 8002720:	40021000 	.word	0x40021000
 8002724:	10908120 	.word	0x10908120
 8002728:	40007000 	.word	0x40007000
 800272c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002730:	2202      	movs	r2, #2
 8002732:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	fa93 f2a3 	rbit	r2, r3
 800273e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	4bc0      	ldr	r3, [pc, #768]	; (8002a48 <HAL_RCC_OscConfig+0xc44>)
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800274c:	2102      	movs	r1, #2
 800274e:	6011      	str	r1, [r2, #0]
 8002750:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	fa92 f1a2 	rbit	r1, r2
 800275a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800275e:	6011      	str	r1, [r2, #0]
  return result;
 8002760:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	fab2 f282 	clz	r2, r2
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	f002 021f 	and.w	r2, r2, #31
 8002776:	2101      	movs	r1, #1
 8002778:	fa01 f202 	lsl.w	r2, r1, r2
 800277c:	4013      	ands	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d09a      	beq.n	80026b8 <HAL_RCC_OscConfig+0x8b4>
 8002782:	e063      	b.n	800284c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002784:	f7fe fb16 	bl	8000db4 <HAL_GetTick>
 8002788:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278c:	e00b      	b.n	80027a6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800278e:	f7fe fb11 	bl	8000db4 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f241 3288 	movw	r2, #5000	; 0x1388
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e23c      	b.n	8002c20 <HAL_RCC_OscConfig+0xe1c>
 80027a6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80027aa:	2202      	movs	r2, #2
 80027ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	fa93 f2a3 	rbit	r2, r3
 80027b8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027c2:	2202      	movs	r2, #2
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	fa93 f2a3 	rbit	r2, r3
 80027d0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80027d4:	601a      	str	r2, [r3, #0]
  return result;
 80027d6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80027da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027dc:	fab3 f383 	clz	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	f043 0302 	orr.w	r3, r3, #2
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d102      	bne.n	80027f6 <HAL_RCC_OscConfig+0x9f2>
 80027f0:	4b95      	ldr	r3, [pc, #596]	; (8002a48 <HAL_RCC_OscConfig+0xc44>)
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	e00d      	b.n	8002812 <HAL_RCC_OscConfig+0xa0e>
 80027f6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80027fa:	2202      	movs	r2, #2
 80027fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	fa93 f2a3 	rbit	r2, r3
 8002808:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	4b8e      	ldr	r3, [pc, #568]	; (8002a48 <HAL_RCC_OscConfig+0xc44>)
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002816:	2102      	movs	r1, #2
 8002818:	6011      	str	r1, [r2, #0]
 800281a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	fa92 f1a2 	rbit	r1, r2
 8002824:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002828:	6011      	str	r1, [r2, #0]
  return result;
 800282a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	fab2 f282 	clz	r2, r2
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	f002 021f 	and.w	r2, r2, #31
 8002840:	2101      	movs	r1, #1
 8002842:	fa01 f202 	lsl.w	r2, r1, r2
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1a0      	bne.n	800278e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800284c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002850:	2b01      	cmp	r3, #1
 8002852:	d105      	bne.n	8002860 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002854:	4b7c      	ldr	r3, [pc, #496]	; (8002a48 <HAL_RCC_OscConfig+0xc44>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	4a7b      	ldr	r2, [pc, #492]	; (8002a48 <HAL_RCC_OscConfig+0xc44>)
 800285a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800285e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002860:	1d3b      	adds	r3, r7, #4
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 81d9 	beq.w	8002c1e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800286c:	4b76      	ldr	r3, [pc, #472]	; (8002a48 <HAL_RCC_OscConfig+0xc44>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 030c 	and.w	r3, r3, #12
 8002874:	2b08      	cmp	r3, #8
 8002876:	f000 81a6 	beq.w	8002bc6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800287a:	1d3b      	adds	r3, r7, #4
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	2b02      	cmp	r3, #2
 8002882:	f040 811e 	bne.w	8002ac2 <HAL_RCC_OscConfig+0xcbe>
 8002886:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800288a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800288e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	fa93 f2a3 	rbit	r2, r3
 800289a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800289e:	601a      	str	r2, [r3, #0]
  return result;
 80028a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80028a4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	461a      	mov	r2, r3
 80028b8:	2300      	movs	r3, #0
 80028ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7fe fa7a 	bl	8000db4 <HAL_GetTick>
 80028c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c4:	e009      	b.n	80028da <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c6:	f7fe fa75 	bl	8000db4 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e1a2      	b.n	8002c20 <HAL_RCC_OscConfig+0xe1c>
 80028da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80028de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	fa93 f2a3 	rbit	r2, r3
 80028ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80028f2:	601a      	str	r2, [r3, #0]
  return result;
 80028f4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80028f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	095b      	lsrs	r3, r3, #5
 8002902:	b2db      	uxtb	r3, r3
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b01      	cmp	r3, #1
 800290c:	d102      	bne.n	8002914 <HAL_RCC_OscConfig+0xb10>
 800290e:	4b4e      	ldr	r3, [pc, #312]	; (8002a48 <HAL_RCC_OscConfig+0xc44>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	e01b      	b.n	800294c <HAL_RCC_OscConfig+0xb48>
 8002914:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002918:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800291c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	fa93 f2a3 	rbit	r2, r3
 8002928:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002932:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	fa93 f2a3 	rbit	r2, r3
 8002942:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	4b3f      	ldr	r3, [pc, #252]	; (8002a48 <HAL_RCC_OscConfig+0xc44>)
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002950:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002954:	6011      	str	r1, [r2, #0]
 8002956:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	fa92 f1a2 	rbit	r1, r2
 8002960:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002964:	6011      	str	r1, [r2, #0]
  return result;
 8002966:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	fab2 f282 	clz	r2, r2
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	f042 0220 	orr.w	r2, r2, #32
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	f002 021f 	and.w	r2, r2, #31
 800297c:	2101      	movs	r1, #1
 800297e:	fa01 f202 	lsl.w	r2, r1, r2
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d19e      	bne.n	80028c6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002988:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <HAL_RCC_OscConfig+0xc44>)
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	f023 020f 	bic.w	r2, r3, #15
 8002990:	1d3b      	adds	r3, r7, #4
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	492c      	ldr	r1, [pc, #176]	; (8002a48 <HAL_RCC_OscConfig+0xc44>)
 8002998:	4313      	orrs	r3, r2
 800299a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800299c:	4b2a      	ldr	r3, [pc, #168]	; (8002a48 <HAL_RCC_OscConfig+0xc44>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80029a4:	1d3b      	adds	r3, r7, #4
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6a19      	ldr	r1, [r3, #32]
 80029aa:	1d3b      	adds	r3, r7, #4
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	430b      	orrs	r3, r1
 80029b2:	4925      	ldr	r1, [pc, #148]	; (8002a48 <HAL_RCC_OscConfig+0xc44>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]
 80029b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80029bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	fa93 f2a3 	rbit	r2, r3
 80029cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80029d0:	601a      	str	r2, [r3, #0]
  return result;
 80029d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80029d6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029d8:	fab3 f383 	clz	r3, r3
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	461a      	mov	r2, r3
 80029ea:	2301      	movs	r3, #1
 80029ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ee:	f7fe f9e1 	bl	8000db4 <HAL_GetTick>
 80029f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029f6:	e009      	b.n	8002a0c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f8:	f7fe f9dc 	bl	8000db4 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e109      	b.n	8002c20 <HAL_RCC_OscConfig+0xe1c>
 8002a0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	fa93 f2a3 	rbit	r2, r3
 8002a20:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a24:	601a      	str	r2, [r3, #0]
  return result;
 8002a26:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a2a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a2c:	fab3 f383 	clz	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d105      	bne.n	8002a4c <HAL_RCC_OscConfig+0xc48>
 8002a40:	4b01      	ldr	r3, [pc, #4]	; (8002a48 <HAL_RCC_OscConfig+0xc44>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	e01e      	b.n	8002a84 <HAL_RCC_OscConfig+0xc80>
 8002a46:	bf00      	nop
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	fa93 f2a3 	rbit	r2, r3
 8002a60:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	fa93 f2a3 	rbit	r2, r3
 8002a7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	4b6a      	ldr	r3, [pc, #424]	; (8002c2c <HAL_RCC_OscConfig+0xe28>)
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002a88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a8c:	6011      	str	r1, [r2, #0]
 8002a8e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	fa92 f1a2 	rbit	r1, r2
 8002a98:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002a9c:	6011      	str	r1, [r2, #0]
  return result;
 8002a9e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	fab2 f282 	clz	r2, r2
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	f042 0220 	orr.w	r2, r2, #32
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	f002 021f 	and.w	r2, r2, #31
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d09b      	beq.n	80029f8 <HAL_RCC_OscConfig+0xbf4>
 8002ac0:	e0ad      	b.n	8002c1e <HAL_RCC_OscConfig+0xe1a>
 8002ac2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ac6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002aca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	fa93 f2a3 	rbit	r2, r3
 8002ad6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ada:	601a      	str	r2, [r3, #0]
  return result;
 8002adc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ae0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002aec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	461a      	mov	r2, r3
 8002af4:	2300      	movs	r3, #0
 8002af6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7fe f95c 	bl	8000db4 <HAL_GetTick>
 8002afc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b00:	e009      	b.n	8002b16 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b02:	f7fe f957 	bl	8000db4 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e084      	b.n	8002c20 <HAL_RCC_OscConfig+0xe1c>
 8002b16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	fa93 f2a3 	rbit	r2, r3
 8002b2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b2e:	601a      	str	r2, [r3, #0]
  return result;
 8002b30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b34:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	095b      	lsrs	r3, r3, #5
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d102      	bne.n	8002b50 <HAL_RCC_OscConfig+0xd4c>
 8002b4a:	4b38      	ldr	r3, [pc, #224]	; (8002c2c <HAL_RCC_OscConfig+0xe28>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	e01b      	b.n	8002b88 <HAL_RCC_OscConfig+0xd84>
 8002b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	fa93 f2a3 	rbit	r2, r3
 8002b64:	f107 0320 	add.w	r3, r7, #32
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	f107 031c 	add.w	r3, r7, #28
 8002b6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	f107 031c 	add.w	r3, r7, #28
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	fa93 f2a3 	rbit	r2, r3
 8002b7e:	f107 0318 	add.w	r3, r7, #24
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	4b29      	ldr	r3, [pc, #164]	; (8002c2c <HAL_RCC_OscConfig+0xe28>)
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	f107 0214 	add.w	r2, r7, #20
 8002b8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b90:	6011      	str	r1, [r2, #0]
 8002b92:	f107 0214 	add.w	r2, r7, #20
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	fa92 f1a2 	rbit	r1, r2
 8002b9c:	f107 0210 	add.w	r2, r7, #16
 8002ba0:	6011      	str	r1, [r2, #0]
  return result;
 8002ba2:	f107 0210 	add.w	r2, r7, #16
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	fab2 f282 	clz	r2, r2
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	f042 0220 	orr.w	r2, r2, #32
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	f002 021f 	and.w	r2, r2, #31
 8002bb8:	2101      	movs	r1, #1
 8002bba:	fa01 f202 	lsl.w	r2, r1, r2
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d19e      	bne.n	8002b02 <HAL_RCC_OscConfig+0xcfe>
 8002bc4:	e02b      	b.n	8002c1e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc6:	1d3b      	adds	r3, r7, #4
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e025      	b.n	8002c20 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bd4:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <HAL_RCC_OscConfig+0xe28>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002bdc:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <HAL_RCC_OscConfig+0xe28>)
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002be4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002be8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002bec:	1d3b      	adds	r3, r7, #4
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d111      	bne.n	8002c1a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002bf6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002bfa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bfe:	1d3b      	adds	r3, r7, #4
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d108      	bne.n	8002c1a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002c08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c0c:	f003 020f 	and.w	r2, r3, #15
 8002c10:	1d3b      	adds	r3, r7, #4
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d001      	beq.n	8002c1e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000

08002c30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b09e      	sub	sp, #120	; 0x78
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e162      	b.n	8002f0e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c48:	4b90      	ldr	r3, [pc, #576]	; (8002e8c <HAL_RCC_ClockConfig+0x25c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d910      	bls.n	8002c78 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c56:	4b8d      	ldr	r3, [pc, #564]	; (8002e8c <HAL_RCC_ClockConfig+0x25c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 0207 	bic.w	r2, r3, #7
 8002c5e:	498b      	ldr	r1, [pc, #556]	; (8002e8c <HAL_RCC_ClockConfig+0x25c>)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c66:	4b89      	ldr	r3, [pc, #548]	; (8002e8c <HAL_RCC_ClockConfig+0x25c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e14a      	b.n	8002f0e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c84:	4b82      	ldr	r3, [pc, #520]	; (8002e90 <HAL_RCC_ClockConfig+0x260>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	497f      	ldr	r1, [pc, #508]	; (8002e90 <HAL_RCC_ClockConfig+0x260>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 80dc 	beq.w	8002e5c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d13c      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xf6>
 8002cac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cb0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cb4:	fa93 f3a3 	rbit	r3, r3
 8002cb8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbc:	fab3 f383 	clz	r3, r3
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	095b      	lsrs	r3, r3, #5
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d102      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xa6>
 8002cd0:	4b6f      	ldr	r3, [pc, #444]	; (8002e90 <HAL_RCC_ClockConfig+0x260>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	e00f      	b.n	8002cf6 <HAL_RCC_ClockConfig+0xc6>
 8002cd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cda:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	667b      	str	r3, [r7, #100]	; 0x64
 8002ce4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ce8:	663b      	str	r3, [r7, #96]	; 0x60
 8002cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cec:	fa93 f3a3 	rbit	r3, r3
 8002cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cf2:	4b67      	ldr	r3, [pc, #412]	; (8002e90 <HAL_RCC_ClockConfig+0x260>)
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cfa:	65ba      	str	r2, [r7, #88]	; 0x58
 8002cfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cfe:	fa92 f2a2 	rbit	r2, r2
 8002d02:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002d04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d06:	fab2 f282 	clz	r2, r2
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	f042 0220 	orr.w	r2, r2, #32
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	f002 021f 	and.w	r2, r2, #31
 8002d16:	2101      	movs	r1, #1
 8002d18:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d17b      	bne.n	8002e1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e0f3      	b.n	8002f0e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d13c      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x178>
 8002d2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	095b      	lsrs	r3, r3, #5
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d102      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x128>
 8002d52:	4b4f      	ldr	r3, [pc, #316]	; (8002e90 <HAL_RCC_ClockConfig+0x260>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	e00f      	b.n	8002d78 <HAL_RCC_ClockConfig+0x148>
 8002d58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d5c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	647b      	str	r3, [r7, #68]	; 0x44
 8002d66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d6a:	643b      	str	r3, [r7, #64]	; 0x40
 8002d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d74:	4b46      	ldr	r3, [pc, #280]	; (8002e90 <HAL_RCC_ClockConfig+0x260>)
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d7c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d80:	fa92 f2a2 	rbit	r2, r2
 8002d84:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002d86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d88:	fab2 f282 	clz	r2, r2
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	f042 0220 	orr.w	r2, r2, #32
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	f002 021f 	and.w	r2, r2, #31
 8002d98:	2101      	movs	r1, #1
 8002d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d13a      	bne.n	8002e1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0b2      	b.n	8002f0e <HAL_RCC_ClockConfig+0x2de>
 8002da8:	2302      	movs	r3, #2
 8002daa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db6:	fab3 f383 	clz	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	095b      	lsrs	r3, r3, #5
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d102      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x1a0>
 8002dca:	4b31      	ldr	r3, [pc, #196]	; (8002e90 <HAL_RCC_ClockConfig+0x260>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	e00d      	b.n	8002dec <HAL_RCC_ClockConfig+0x1bc>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd6:	fa93 f3a3 	rbit	r3, r3
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
 8002ddc:	2302      	movs	r3, #2
 8002dde:	623b      	str	r3, [r7, #32]
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	fa93 f3a3 	rbit	r3, r3
 8002de6:	61fb      	str	r3, [r7, #28]
 8002de8:	4b29      	ldr	r3, [pc, #164]	; (8002e90 <HAL_RCC_ClockConfig+0x260>)
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	2202      	movs	r2, #2
 8002dee:	61ba      	str	r2, [r7, #24]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	fa92 f2a2 	rbit	r2, r2
 8002df6:	617a      	str	r2, [r7, #20]
  return result;
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	fab2 f282 	clz	r2, r2
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	f042 0220 	orr.w	r2, r2, #32
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	f002 021f 	and.w	r2, r2, #31
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e10:	4013      	ands	r3, r2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e079      	b.n	8002f0e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e1a:	4b1d      	ldr	r3, [pc, #116]	; (8002e90 <HAL_RCC_ClockConfig+0x260>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f023 0203 	bic.w	r2, r3, #3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	491a      	ldr	r1, [pc, #104]	; (8002e90 <HAL_RCC_ClockConfig+0x260>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e2c:	f7fd ffc2 	bl	8000db4 <HAL_GetTick>
 8002e30:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e32:	e00a      	b.n	8002e4a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e34:	f7fd ffbe 	bl	8000db4 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e061      	b.n	8002f0e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4a:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <HAL_RCC_ClockConfig+0x260>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f003 020c 	and.w	r2, r3, #12
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d1eb      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <HAL_RCC_ClockConfig+0x25c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d214      	bcs.n	8002e94 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6a:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <HAL_RCC_ClockConfig+0x25c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f023 0207 	bic.w	r2, r3, #7
 8002e72:	4906      	ldr	r1, [pc, #24]	; (8002e8c <HAL_RCC_ClockConfig+0x25c>)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7a:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <HAL_RCC_ClockConfig+0x25c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d005      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e040      	b.n	8002f0e <HAL_RCC_ClockConfig+0x2de>
 8002e8c:	40022000 	.word	0x40022000
 8002e90:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ea0:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <HAL_RCC_ClockConfig+0x2e8>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	491a      	ldr	r1, [pc, #104]	; (8002f18 <HAL_RCC_ClockConfig+0x2e8>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d009      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ebe:	4b16      	ldr	r3, [pc, #88]	; (8002f18 <HAL_RCC_ClockConfig+0x2e8>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4912      	ldr	r1, [pc, #72]	; (8002f18 <HAL_RCC_ClockConfig+0x2e8>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ed2:	f000 f829 	bl	8002f28 <HAL_RCC_GetSysClockFreq>
 8002ed6:	4601      	mov	r1, r0
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <HAL_RCC_ClockConfig+0x2e8>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ee0:	22f0      	movs	r2, #240	; 0xf0
 8002ee2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	fa92 f2a2 	rbit	r2, r2
 8002eea:	60fa      	str	r2, [r7, #12]
  return result;
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	fab2 f282 	clz	r2, r2
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	40d3      	lsrs	r3, r2
 8002ef6:	4a09      	ldr	r2, [pc, #36]	; (8002f1c <HAL_RCC_ClockConfig+0x2ec>)
 8002ef8:	5cd3      	ldrb	r3, [r2, r3]
 8002efa:	fa21 f303 	lsr.w	r3, r1, r3
 8002efe:	4a08      	ldr	r2, [pc, #32]	; (8002f20 <HAL_RCC_ClockConfig+0x2f0>)
 8002f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f02:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <HAL_RCC_ClockConfig+0x2f4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd ff10 	bl	8000d2c <HAL_InitTick>
  
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3778      	adds	r7, #120	; 0x78
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	080045cc 	.word	0x080045cc
 8002f20:	20000000 	.word	0x20000000
 8002f24:	20000004 	.word	0x20000004

08002f28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b08b      	sub	sp, #44	; 0x2c
 8002f2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	2300      	movs	r3, #0
 8002f34:	61bb      	str	r3, [r7, #24]
 8002f36:	2300      	movs	r3, #0
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002f42:	4b2a      	ldr	r3, [pc, #168]	; (8002fec <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d002      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0x30>
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d003      	beq.n	8002f5e <HAL_RCC_GetSysClockFreq+0x36>
 8002f56:	e03f      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f58:	4b25      	ldr	r3, [pc, #148]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f5a:	623b      	str	r3, [r7, #32]
      break;
 8002f5c:	e03f      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f64:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002f68:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	fa92 f2a2 	rbit	r2, r2
 8002f70:	607a      	str	r2, [r7, #4]
  return result;
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	fab2 f282 	clz	r2, r2
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	40d3      	lsrs	r3, r2
 8002f7c:	4a1d      	ldr	r2, [pc, #116]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f7e:	5cd3      	ldrb	r3, [r2, r3]
 8002f80:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002f82:	4b1a      	ldr	r3, [pc, #104]	; (8002fec <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	220f      	movs	r2, #15
 8002f8c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	fa92 f2a2 	rbit	r2, r2
 8002f94:	60fa      	str	r2, [r7, #12]
  return result;
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	fab2 f282 	clz	r2, r2
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	40d3      	lsrs	r3, r2
 8002fa0:	4a15      	ldr	r2, [pc, #84]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002fa2:	5cd3      	ldrb	r3, [r2, r3]
 8002fa4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fb0:	4a0f      	ldr	r2, [pc, #60]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	fb02 f303 	mul.w	r3, r2, r3
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc0:	e007      	b.n	8002fd2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fc2:	4a0b      	ldr	r2, [pc, #44]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	fb02 f303 	mul.w	r3, r2, r3
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	623b      	str	r3, [r7, #32]
      break;
 8002fd6:	e002      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fd8:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002fda:	623b      	str	r3, [r7, #32]
      break;
 8002fdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fde:	6a3b      	ldr	r3, [r7, #32]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	372c      	adds	r7, #44	; 0x2c
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	007a1200 	.word	0x007a1200
 8002ff4:	080045e4 	.word	0x080045e4
 8002ff8:	080045f4 	.word	0x080045f4

08002ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003000:	4b03      	ldr	r3, [pc, #12]	; (8003010 <HAL_RCC_GetHCLKFreq+0x14>)
 8003002:	681b      	ldr	r3, [r3, #0]
}
 8003004:	4618      	mov	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	20000000 	.word	0x20000000

08003014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800301a:	f7ff ffef 	bl	8002ffc <HAL_RCC_GetHCLKFreq>
 800301e:	4601      	mov	r1, r0
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003028:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800302c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	fa92 f2a2 	rbit	r2, r2
 8003034:	603a      	str	r2, [r7, #0]
  return result;
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	fab2 f282 	clz	r2, r2
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	40d3      	lsrs	r3, r2
 8003040:	4a04      	ldr	r2, [pc, #16]	; (8003054 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003042:	5cd3      	ldrb	r3, [r2, r3]
 8003044:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003048:	4618      	mov	r0, r3
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40021000 	.word	0x40021000
 8003054:	080045dc 	.word	0x080045dc

08003058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800305e:	f7ff ffcd 	bl	8002ffc <HAL_RCC_GetHCLKFreq>
 8003062:	4601      	mov	r1, r0
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800306c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003070:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	fa92 f2a2 	rbit	r2, r2
 8003078:	603a      	str	r2, [r7, #0]
  return result;
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	fab2 f282 	clz	r2, r2
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	40d3      	lsrs	r3, r2
 8003084:	4a04      	ldr	r2, [pc, #16]	; (8003098 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003086:	5cd3      	ldrb	r3, [r2, r3]
 8003088:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800308c:	4618      	mov	r0, r3
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40021000 	.word	0x40021000
 8003098:	080045dc 	.word	0x080045dc

0800309c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b092      	sub	sp, #72	; 0x48
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80030ac:	2300      	movs	r3, #0
 80030ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 80d4 	beq.w	8003268 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c0:	4b4e      	ldr	r3, [pc, #312]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10e      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030cc:	4b4b      	ldr	r3, [pc, #300]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	4a4a      	ldr	r2, [pc, #296]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d6:	61d3      	str	r3, [r2, #28]
 80030d8:	4b48      	ldr	r3, [pc, #288]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e0:	60bb      	str	r3, [r7, #8]
 80030e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e4:	2301      	movs	r3, #1
 80030e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ea:	4b45      	ldr	r3, [pc, #276]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d118      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030f6:	4b42      	ldr	r3, [pc, #264]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a41      	ldr	r2, [pc, #260]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003100:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003102:	f7fd fe57 	bl	8000db4 <HAL_GetTick>
 8003106:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003108:	e008      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310a:	f7fd fe53 	bl	8000db4 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b64      	cmp	r3, #100	; 0x64
 8003116:	d901      	bls.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e1d6      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311c:	4b38      	ldr	r3, [pc, #224]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003128:	4b34      	ldr	r3, [pc, #208]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003130:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 8084 	beq.w	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003142:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003144:	429a      	cmp	r2, r3
 8003146:	d07c      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003148:	4b2c      	ldr	r3, [pc, #176]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003150:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003152:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003156:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315a:	fa93 f3a3 	rbit	r3, r3
 800315e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003162:	fab3 f383 	clz	r3, r3
 8003166:	b2db      	uxtb	r3, r3
 8003168:	461a      	mov	r2, r3
 800316a:	4b26      	ldr	r3, [pc, #152]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	461a      	mov	r2, r3
 8003172:	2301      	movs	r3, #1
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800317a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317e:	fa93 f3a3 	rbit	r3, r3
 8003182:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	4b1d      	ldr	r3, [pc, #116]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	461a      	mov	r2, r3
 8003196:	2300      	movs	r3, #0
 8003198:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800319a:	4a18      	ldr	r2, [pc, #96]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800319e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d04b      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031aa:	f7fd fe03 	bl	8000db4 <HAL_GetTick>
 80031ae:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b0:	e00a      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b2:	f7fd fdff 	bl	8000db4 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e180      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80031c8:	2302      	movs	r3, #2
 80031ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24
 80031d4:	2302      	movs	r3, #2
 80031d6:	623b      	str	r3, [r7, #32]
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	fa93 f3a3 	rbit	r3, r3
 80031de:	61fb      	str	r3, [r7, #28]
  return result;
 80031e0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e2:	fab3 f383 	clz	r3, r3
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	f043 0302 	orr.w	r3, r3, #2
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d108      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80031f6:	4b01      	ldr	r3, [pc, #4]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	e00d      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80031fc:	40021000 	.word	0x40021000
 8003200:	40007000 	.word	0x40007000
 8003204:	10908100 	.word	0x10908100
 8003208:	2302      	movs	r3, #2
 800320a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	fa93 f3a3 	rbit	r3, r3
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	4ba0      	ldr	r3, [pc, #640]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	2202      	movs	r2, #2
 800321a:	613a      	str	r2, [r7, #16]
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	fa92 f2a2 	rbit	r2, r2
 8003222:	60fa      	str	r2, [r7, #12]
  return result;
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	fab2 f282 	clz	r2, r2
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	f002 021f 	and.w	r2, r2, #31
 8003236:	2101      	movs	r1, #1
 8003238:	fa01 f202 	lsl.w	r2, r1, r2
 800323c:	4013      	ands	r3, r2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0b7      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003242:	4b95      	ldr	r3, [pc, #596]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	4992      	ldr	r1, [pc, #584]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003250:	4313      	orrs	r3, r2
 8003252:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003254:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003258:	2b01      	cmp	r3, #1
 800325a:	d105      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800325c:	4b8e      	ldr	r3, [pc, #568]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	4a8d      	ldr	r2, [pc, #564]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003262:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003266:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003274:	4b88      	ldr	r3, [pc, #544]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	f023 0203 	bic.w	r2, r3, #3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	4985      	ldr	r1, [pc, #532]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003282:	4313      	orrs	r3, r2
 8003284:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d008      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003292:	4b81      	ldr	r3, [pc, #516]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	497e      	ldr	r1, [pc, #504]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032b0:	4b79      	ldr	r3, [pc, #484]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	4976      	ldr	r1, [pc, #472]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d008      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032ce:	4b72      	ldr	r3, [pc, #456]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	f023 0210 	bic.w	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	496f      	ldr	r1, [pc, #444]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80032ec:	4b6a      	ldr	r3, [pc, #424]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f8:	4967      	ldr	r1, [pc, #412]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003306:	2b00      	cmp	r3, #0
 8003308:	d008      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800330a:	4b63      	ldr	r3, [pc, #396]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	f023 0220 	bic.w	r2, r3, #32
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	4960      	ldr	r1, [pc, #384]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003318:	4313      	orrs	r3, r2
 800331a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003328:	4b5b      	ldr	r3, [pc, #364]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	4958      	ldr	r1, [pc, #352]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003336:	4313      	orrs	r3, r2
 8003338:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d008      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003346:	4b54      	ldr	r3, [pc, #336]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	4951      	ldr	r1, [pc, #324]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003354:	4313      	orrs	r3, r2
 8003356:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	2b00      	cmp	r3, #0
 8003362:	d008      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003364:	4b4c      	ldr	r3, [pc, #304]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	4949      	ldr	r1, [pc, #292]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003372:	4313      	orrs	r3, r2
 8003374:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003382:	4b45      	ldr	r3, [pc, #276]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	4942      	ldr	r1, [pc, #264]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003390:	4313      	orrs	r3, r2
 8003392:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033a0:	4b3d      	ldr	r3, [pc, #244]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ac:	493a      	ldr	r1, [pc, #232]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d008      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80033be:	4b36      	ldr	r3, [pc, #216]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ca:	4933      	ldr	r1, [pc, #204]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80033dc:	4b2e      	ldr	r3, [pc, #184]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e8:	492b      	ldr	r1, [pc, #172]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80033fa:	4b27      	ldr	r3, [pc, #156]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	4924      	ldr	r1, [pc, #144]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003408:	4313      	orrs	r3, r2
 800340a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003418:	4b1f      	ldr	r3, [pc, #124]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003424:	491c      	ldr	r1, [pc, #112]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003426:	4313      	orrs	r3, r2
 8003428:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d008      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003436:	4b18      	ldr	r3, [pc, #96]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003442:	4915      	ldr	r1, [pc, #84]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003444:	4313      	orrs	r3, r2
 8003446:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003454:	4b10      	ldr	r3, [pc, #64]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003460:	490d      	ldr	r1, [pc, #52]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003462:	4313      	orrs	r3, r2
 8003464:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d008      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003472:	4b09      	ldr	r3, [pc, #36]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800347e:	4906      	ldr	r1, [pc, #24]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003480:	4313      	orrs	r3, r2
 8003482:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00c      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003490:	4b01      	ldr	r3, [pc, #4]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	e002      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003496:	bf00      	nop
 8003498:	40021000 	.word	0x40021000
 800349c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a4:	490b      	ldr	r1, [pc, #44]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d008      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80034b6:	4b07      	ldr	r3, [pc, #28]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c2:	4904      	ldr	r1, [pc, #16]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3748      	adds	r7, #72	; 0x48
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40021000 	.word	0x40021000

080034d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e040      	b.n	800356c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7fd fb1e 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2224      	movs	r2, #36	; 0x24
 8003504:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0201 	bic.w	r2, r2, #1
 8003514:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f8c0 	bl	800369c <UART_SetConfig>
 800351c:	4603      	mov	r3, r0
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e022      	b.n	800356c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fa88 	bl	8003a44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003542:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003552:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fb0f 	bl	8003b88 <UART_CheckIdleState>
 800356a:	4603      	mov	r3, r0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08a      	sub	sp, #40	; 0x28
 8003578:	af02      	add	r7, sp, #8
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	4613      	mov	r3, r2
 8003582:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003588:	2b20      	cmp	r3, #32
 800358a:	f040 8082 	bne.w	8003692 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <HAL_UART_Transmit+0x26>
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e07a      	b.n	8003694 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_UART_Transmit+0x38>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e073      	b.n	8003694 <HAL_UART_Transmit+0x120>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2221      	movs	r2, #33	; 0x21
 80035c0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035c2:	f7fd fbf7 	bl	8000db4 <HAL_GetTick>
 80035c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	88fa      	ldrh	r2, [r7, #6]
 80035cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	88fa      	ldrh	r2, [r7, #6]
 80035d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e0:	d108      	bne.n	80035f4 <HAL_UART_Transmit+0x80>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d104      	bne.n	80035f4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	e003      	b.n	80035fc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003604:	e02d      	b.n	8003662 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2200      	movs	r2, #0
 800360e:	2180      	movs	r1, #128	; 0x80
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 fb02 	bl	8003c1a <UART_WaitOnFlagUntilTimeout>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e039      	b.n	8003694 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10b      	bne.n	800363e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	881a      	ldrh	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003632:	b292      	uxth	r2, r2
 8003634:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	3302      	adds	r3, #2
 800363a:	61bb      	str	r3, [r7, #24]
 800363c:	e008      	b.n	8003650 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	781a      	ldrb	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	b292      	uxth	r2, r2
 8003648:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	3301      	adds	r3, #1
 800364e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003656:	b29b      	uxth	r3, r3
 8003658:	3b01      	subs	r3, #1
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003668:	b29b      	uxth	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1cb      	bne.n	8003606 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2200      	movs	r2, #0
 8003676:	2140      	movs	r1, #64	; 0x40
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 face 	bl	8003c1a <UART_WaitOnFlagUntilTimeout>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e005      	b.n	8003694 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	e000      	b.n	8003694 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003692:	2302      	movs	r3, #2
  }
}
 8003694:	4618      	mov	r0, r3
 8003696:	3720      	adds	r7, #32
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b088      	sub	sp, #32
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	4baa      	ldr	r3, [pc, #680]	; (8003970 <UART_SetConfig+0x2d4>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6812      	ldr	r2, [r2, #0]
 80036ce:	6979      	ldr	r1, [r7, #20]
 80036d0:	430b      	orrs	r3, r1
 80036d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	430a      	orrs	r2, r1
 800370c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a98      	ldr	r2, [pc, #608]	; (8003974 <UART_SetConfig+0x2d8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d121      	bne.n	800375c <UART_SetConfig+0xc0>
 8003718:	4b97      	ldr	r3, [pc, #604]	; (8003978 <UART_SetConfig+0x2dc>)
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	2b03      	cmp	r3, #3
 8003722:	d817      	bhi.n	8003754 <UART_SetConfig+0xb8>
 8003724:	a201      	add	r2, pc, #4	; (adr r2, 800372c <UART_SetConfig+0x90>)
 8003726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372a:	bf00      	nop
 800372c:	0800373d 	.word	0x0800373d
 8003730:	08003749 	.word	0x08003749
 8003734:	0800374f 	.word	0x0800374f
 8003738:	08003743 	.word	0x08003743
 800373c:	2301      	movs	r3, #1
 800373e:	77fb      	strb	r3, [r7, #31]
 8003740:	e0b2      	b.n	80038a8 <UART_SetConfig+0x20c>
 8003742:	2302      	movs	r3, #2
 8003744:	77fb      	strb	r3, [r7, #31]
 8003746:	e0af      	b.n	80038a8 <UART_SetConfig+0x20c>
 8003748:	2304      	movs	r3, #4
 800374a:	77fb      	strb	r3, [r7, #31]
 800374c:	e0ac      	b.n	80038a8 <UART_SetConfig+0x20c>
 800374e:	2308      	movs	r3, #8
 8003750:	77fb      	strb	r3, [r7, #31]
 8003752:	e0a9      	b.n	80038a8 <UART_SetConfig+0x20c>
 8003754:	2310      	movs	r3, #16
 8003756:	77fb      	strb	r3, [r7, #31]
 8003758:	bf00      	nop
 800375a:	e0a5      	b.n	80038a8 <UART_SetConfig+0x20c>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a86      	ldr	r2, [pc, #536]	; (800397c <UART_SetConfig+0x2e0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d123      	bne.n	80037ae <UART_SetConfig+0x112>
 8003766:	4b84      	ldr	r3, [pc, #528]	; (8003978 <UART_SetConfig+0x2dc>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800376e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003772:	d012      	beq.n	800379a <UART_SetConfig+0xfe>
 8003774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003778:	d802      	bhi.n	8003780 <UART_SetConfig+0xe4>
 800377a:	2b00      	cmp	r3, #0
 800377c:	d007      	beq.n	800378e <UART_SetConfig+0xf2>
 800377e:	e012      	b.n	80037a6 <UART_SetConfig+0x10a>
 8003780:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003784:	d00c      	beq.n	80037a0 <UART_SetConfig+0x104>
 8003786:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800378a:	d003      	beq.n	8003794 <UART_SetConfig+0xf8>
 800378c:	e00b      	b.n	80037a6 <UART_SetConfig+0x10a>
 800378e:	2300      	movs	r3, #0
 8003790:	77fb      	strb	r3, [r7, #31]
 8003792:	e089      	b.n	80038a8 <UART_SetConfig+0x20c>
 8003794:	2302      	movs	r3, #2
 8003796:	77fb      	strb	r3, [r7, #31]
 8003798:	e086      	b.n	80038a8 <UART_SetConfig+0x20c>
 800379a:	2304      	movs	r3, #4
 800379c:	77fb      	strb	r3, [r7, #31]
 800379e:	e083      	b.n	80038a8 <UART_SetConfig+0x20c>
 80037a0:	2308      	movs	r3, #8
 80037a2:	77fb      	strb	r3, [r7, #31]
 80037a4:	e080      	b.n	80038a8 <UART_SetConfig+0x20c>
 80037a6:	2310      	movs	r3, #16
 80037a8:	77fb      	strb	r3, [r7, #31]
 80037aa:	bf00      	nop
 80037ac:	e07c      	b.n	80038a8 <UART_SetConfig+0x20c>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a73      	ldr	r2, [pc, #460]	; (8003980 <UART_SetConfig+0x2e4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d123      	bne.n	8003800 <UART_SetConfig+0x164>
 80037b8:	4b6f      	ldr	r3, [pc, #444]	; (8003978 <UART_SetConfig+0x2dc>)
 80037ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80037c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037c4:	d012      	beq.n	80037ec <UART_SetConfig+0x150>
 80037c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037ca:	d802      	bhi.n	80037d2 <UART_SetConfig+0x136>
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d007      	beq.n	80037e0 <UART_SetConfig+0x144>
 80037d0:	e012      	b.n	80037f8 <UART_SetConfig+0x15c>
 80037d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037d6:	d00c      	beq.n	80037f2 <UART_SetConfig+0x156>
 80037d8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80037dc:	d003      	beq.n	80037e6 <UART_SetConfig+0x14a>
 80037de:	e00b      	b.n	80037f8 <UART_SetConfig+0x15c>
 80037e0:	2300      	movs	r3, #0
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e060      	b.n	80038a8 <UART_SetConfig+0x20c>
 80037e6:	2302      	movs	r3, #2
 80037e8:	77fb      	strb	r3, [r7, #31]
 80037ea:	e05d      	b.n	80038a8 <UART_SetConfig+0x20c>
 80037ec:	2304      	movs	r3, #4
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e05a      	b.n	80038a8 <UART_SetConfig+0x20c>
 80037f2:	2308      	movs	r3, #8
 80037f4:	77fb      	strb	r3, [r7, #31]
 80037f6:	e057      	b.n	80038a8 <UART_SetConfig+0x20c>
 80037f8:	2310      	movs	r3, #16
 80037fa:	77fb      	strb	r3, [r7, #31]
 80037fc:	bf00      	nop
 80037fe:	e053      	b.n	80038a8 <UART_SetConfig+0x20c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a5f      	ldr	r2, [pc, #380]	; (8003984 <UART_SetConfig+0x2e8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d123      	bne.n	8003852 <UART_SetConfig+0x1b6>
 800380a:	4b5b      	ldr	r3, [pc, #364]	; (8003978 <UART_SetConfig+0x2dc>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003812:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003816:	d012      	beq.n	800383e <UART_SetConfig+0x1a2>
 8003818:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800381c:	d802      	bhi.n	8003824 <UART_SetConfig+0x188>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d007      	beq.n	8003832 <UART_SetConfig+0x196>
 8003822:	e012      	b.n	800384a <UART_SetConfig+0x1ae>
 8003824:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003828:	d00c      	beq.n	8003844 <UART_SetConfig+0x1a8>
 800382a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800382e:	d003      	beq.n	8003838 <UART_SetConfig+0x19c>
 8003830:	e00b      	b.n	800384a <UART_SetConfig+0x1ae>
 8003832:	2300      	movs	r3, #0
 8003834:	77fb      	strb	r3, [r7, #31]
 8003836:	e037      	b.n	80038a8 <UART_SetConfig+0x20c>
 8003838:	2302      	movs	r3, #2
 800383a:	77fb      	strb	r3, [r7, #31]
 800383c:	e034      	b.n	80038a8 <UART_SetConfig+0x20c>
 800383e:	2304      	movs	r3, #4
 8003840:	77fb      	strb	r3, [r7, #31]
 8003842:	e031      	b.n	80038a8 <UART_SetConfig+0x20c>
 8003844:	2308      	movs	r3, #8
 8003846:	77fb      	strb	r3, [r7, #31]
 8003848:	e02e      	b.n	80038a8 <UART_SetConfig+0x20c>
 800384a:	2310      	movs	r3, #16
 800384c:	77fb      	strb	r3, [r7, #31]
 800384e:	bf00      	nop
 8003850:	e02a      	b.n	80038a8 <UART_SetConfig+0x20c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a4c      	ldr	r2, [pc, #304]	; (8003988 <UART_SetConfig+0x2ec>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d123      	bne.n	80038a4 <UART_SetConfig+0x208>
 800385c:	4b46      	ldr	r3, [pc, #280]	; (8003978 <UART_SetConfig+0x2dc>)
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003864:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003868:	d012      	beq.n	8003890 <UART_SetConfig+0x1f4>
 800386a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800386e:	d802      	bhi.n	8003876 <UART_SetConfig+0x1da>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d007      	beq.n	8003884 <UART_SetConfig+0x1e8>
 8003874:	e012      	b.n	800389c <UART_SetConfig+0x200>
 8003876:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800387a:	d00c      	beq.n	8003896 <UART_SetConfig+0x1fa>
 800387c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003880:	d003      	beq.n	800388a <UART_SetConfig+0x1ee>
 8003882:	e00b      	b.n	800389c <UART_SetConfig+0x200>
 8003884:	2300      	movs	r3, #0
 8003886:	77fb      	strb	r3, [r7, #31]
 8003888:	e00e      	b.n	80038a8 <UART_SetConfig+0x20c>
 800388a:	2302      	movs	r3, #2
 800388c:	77fb      	strb	r3, [r7, #31]
 800388e:	e00b      	b.n	80038a8 <UART_SetConfig+0x20c>
 8003890:	2304      	movs	r3, #4
 8003892:	77fb      	strb	r3, [r7, #31]
 8003894:	e008      	b.n	80038a8 <UART_SetConfig+0x20c>
 8003896:	2308      	movs	r3, #8
 8003898:	77fb      	strb	r3, [r7, #31]
 800389a:	e005      	b.n	80038a8 <UART_SetConfig+0x20c>
 800389c:	2310      	movs	r3, #16
 800389e:	77fb      	strb	r3, [r7, #31]
 80038a0:	bf00      	nop
 80038a2:	e001      	b.n	80038a8 <UART_SetConfig+0x20c>
 80038a4:	2310      	movs	r3, #16
 80038a6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b0:	d16e      	bne.n	8003990 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80038b2:	7ffb      	ldrb	r3, [r7, #31]
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d828      	bhi.n	800390a <UART_SetConfig+0x26e>
 80038b8:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <UART_SetConfig+0x224>)
 80038ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038be:	bf00      	nop
 80038c0:	080038e5 	.word	0x080038e5
 80038c4:	080038ed 	.word	0x080038ed
 80038c8:	080038f5 	.word	0x080038f5
 80038cc:	0800390b 	.word	0x0800390b
 80038d0:	080038fb 	.word	0x080038fb
 80038d4:	0800390b 	.word	0x0800390b
 80038d8:	0800390b 	.word	0x0800390b
 80038dc:	0800390b 	.word	0x0800390b
 80038e0:	08003903 	.word	0x08003903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038e4:	f7ff fb96 	bl	8003014 <HAL_RCC_GetPCLK1Freq>
 80038e8:	61b8      	str	r0, [r7, #24]
        break;
 80038ea:	e013      	b.n	8003914 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038ec:	f7ff fbb4 	bl	8003058 <HAL_RCC_GetPCLK2Freq>
 80038f0:	61b8      	str	r0, [r7, #24]
        break;
 80038f2:	e00f      	b.n	8003914 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038f4:	4b25      	ldr	r3, [pc, #148]	; (800398c <UART_SetConfig+0x2f0>)
 80038f6:	61bb      	str	r3, [r7, #24]
        break;
 80038f8:	e00c      	b.n	8003914 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038fa:	f7ff fb15 	bl	8002f28 <HAL_RCC_GetSysClockFreq>
 80038fe:	61b8      	str	r0, [r7, #24]
        break;
 8003900:	e008      	b.n	8003914 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003906:	61bb      	str	r3, [r7, #24]
        break;
 8003908:	e004      	b.n	8003914 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	77bb      	strb	r3, [r7, #30]
        break;
 8003912:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 8086 	beq.w	8003a28 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	005a      	lsls	r2, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	085b      	lsrs	r3, r3, #1
 8003926:	441a      	add	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003930:	b29b      	uxth	r3, r3
 8003932:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	2b0f      	cmp	r3, #15
 8003938:	d916      	bls.n	8003968 <UART_SetConfig+0x2cc>
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003940:	d212      	bcs.n	8003968 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	b29b      	uxth	r3, r3
 8003946:	f023 030f 	bic.w	r3, r3, #15
 800394a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	085b      	lsrs	r3, r3, #1
 8003950:	b29b      	uxth	r3, r3
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	b29a      	uxth	r2, r3
 8003958:	89fb      	ldrh	r3, [r7, #14]
 800395a:	4313      	orrs	r3, r2
 800395c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	89fa      	ldrh	r2, [r7, #14]
 8003964:	60da      	str	r2, [r3, #12]
 8003966:	e05f      	b.n	8003a28 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	77bb      	strb	r3, [r7, #30]
 800396c:	e05c      	b.n	8003a28 <UART_SetConfig+0x38c>
 800396e:	bf00      	nop
 8003970:	efff69f3 	.word	0xefff69f3
 8003974:	40013800 	.word	0x40013800
 8003978:	40021000 	.word	0x40021000
 800397c:	40004400 	.word	0x40004400
 8003980:	40004800 	.word	0x40004800
 8003984:	40004c00 	.word	0x40004c00
 8003988:	40005000 	.word	0x40005000
 800398c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8003990:	7ffb      	ldrb	r3, [r7, #31]
 8003992:	2b08      	cmp	r3, #8
 8003994:	d827      	bhi.n	80039e6 <UART_SetConfig+0x34a>
 8003996:	a201      	add	r2, pc, #4	; (adr r2, 800399c <UART_SetConfig+0x300>)
 8003998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399c:	080039c1 	.word	0x080039c1
 80039a0:	080039c9 	.word	0x080039c9
 80039a4:	080039d1 	.word	0x080039d1
 80039a8:	080039e7 	.word	0x080039e7
 80039ac:	080039d7 	.word	0x080039d7
 80039b0:	080039e7 	.word	0x080039e7
 80039b4:	080039e7 	.word	0x080039e7
 80039b8:	080039e7 	.word	0x080039e7
 80039bc:	080039df 	.word	0x080039df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039c0:	f7ff fb28 	bl	8003014 <HAL_RCC_GetPCLK1Freq>
 80039c4:	61b8      	str	r0, [r7, #24]
        break;
 80039c6:	e013      	b.n	80039f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039c8:	f7ff fb46 	bl	8003058 <HAL_RCC_GetPCLK2Freq>
 80039cc:	61b8      	str	r0, [r7, #24]
        break;
 80039ce:	e00f      	b.n	80039f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039d0:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <UART_SetConfig+0x3a4>)
 80039d2:	61bb      	str	r3, [r7, #24]
        break;
 80039d4:	e00c      	b.n	80039f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039d6:	f7ff faa7 	bl	8002f28 <HAL_RCC_GetSysClockFreq>
 80039da:	61b8      	str	r0, [r7, #24]
        break;
 80039dc:	e008      	b.n	80039f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039e2:	61bb      	str	r3, [r7, #24]
        break;
 80039e4:	e004      	b.n	80039f0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	77bb      	strb	r3, [r7, #30]
        break;
 80039ee:	bf00      	nop
    }

    if (pclk != 0U)
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d018      	beq.n	8003a28 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	085a      	lsrs	r2, r3, #1
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	441a      	add	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	2b0f      	cmp	r3, #15
 8003a10:	d908      	bls.n	8003a24 <UART_SetConfig+0x388>
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a18:	d204      	bcs.n	8003a24 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	60da      	str	r2, [r3, #12]
 8003a22:	e001      	b.n	8003a28 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a34:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3720      	adds	r7, #32
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	007a1200 	.word	0x007a1200

08003a44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00a      	beq.n	8003a6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00a      	beq.n	8003a90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00a      	beq.n	8003ab2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	f003 0310 	and.w	r3, r3, #16
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00a      	beq.n	8003af6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d01a      	beq.n	8003b5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b42:	d10a      	bne.n	8003b5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	605a      	str	r2, [r3, #4]
  }
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b98:	f7fd f90c 	bl	8000db4 <HAL_GetTick>
 8003b9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d10e      	bne.n	8003bca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f82d 	bl	8003c1a <UART_WaitOnFlagUntilTimeout>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e023      	b.n	8003c12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d10e      	bne.n	8003bf6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f817 	bl	8003c1a <UART_WaitOnFlagUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e00d      	b.n	8003c12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	60f8      	str	r0, [r7, #12]
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	603b      	str	r3, [r7, #0]
 8003c26:	4613      	mov	r3, r2
 8003c28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c2a:	e05e      	b.n	8003cea <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c32:	d05a      	beq.n	8003cea <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c34:	f7fd f8be 	bl	8000db4 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d302      	bcc.n	8003c4a <UART_WaitOnFlagUntilTimeout+0x30>
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d11b      	bne.n	8003c82 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c58:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0201 	bic.w	r2, r2, #1
 8003c68:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e043      	b.n	8003d0a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d02c      	beq.n	8003cea <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c9e:	d124      	bne.n	8003cea <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ca8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cb8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0201 	bic.w	r2, r2, #1
 8003cc8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e00f      	b.n	8003d0a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	bf0c      	ite	eq
 8003cfa:	2301      	moveq	r3, #1
 8003cfc:	2300      	movne	r3, #0
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	461a      	mov	r2, r3
 8003d02:	79fb      	ldrb	r3, [r7, #7]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d091      	beq.n	8003c2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <__errno>:
 8003d14:	4b01      	ldr	r3, [pc, #4]	; (8003d1c <__errno+0x8>)
 8003d16:	6818      	ldr	r0, [r3, #0]
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	2000000c 	.word	0x2000000c

08003d20 <__libc_init_array>:
 8003d20:	b570      	push	{r4, r5, r6, lr}
 8003d22:	4e0d      	ldr	r6, [pc, #52]	; (8003d58 <__libc_init_array+0x38>)
 8003d24:	4c0d      	ldr	r4, [pc, #52]	; (8003d5c <__libc_init_array+0x3c>)
 8003d26:	1ba4      	subs	r4, r4, r6
 8003d28:	10a4      	asrs	r4, r4, #2
 8003d2a:	2500      	movs	r5, #0
 8003d2c:	42a5      	cmp	r5, r4
 8003d2e:	d109      	bne.n	8003d44 <__libc_init_array+0x24>
 8003d30:	4e0b      	ldr	r6, [pc, #44]	; (8003d60 <__libc_init_array+0x40>)
 8003d32:	4c0c      	ldr	r4, [pc, #48]	; (8003d64 <__libc_init_array+0x44>)
 8003d34:	f000 fc26 	bl	8004584 <_init>
 8003d38:	1ba4      	subs	r4, r4, r6
 8003d3a:	10a4      	asrs	r4, r4, #2
 8003d3c:	2500      	movs	r5, #0
 8003d3e:	42a5      	cmp	r5, r4
 8003d40:	d105      	bne.n	8003d4e <__libc_init_array+0x2e>
 8003d42:	bd70      	pop	{r4, r5, r6, pc}
 8003d44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d48:	4798      	blx	r3
 8003d4a:	3501      	adds	r5, #1
 8003d4c:	e7ee      	b.n	8003d2c <__libc_init_array+0xc>
 8003d4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d52:	4798      	blx	r3
 8003d54:	3501      	adds	r5, #1
 8003d56:	e7f2      	b.n	8003d3e <__libc_init_array+0x1e>
 8003d58:	08004638 	.word	0x08004638
 8003d5c:	08004638 	.word	0x08004638
 8003d60:	08004638 	.word	0x08004638
 8003d64:	0800463c 	.word	0x0800463c

08003d68 <memset>:
 8003d68:	4402      	add	r2, r0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d100      	bne.n	8003d72 <memset+0xa>
 8003d70:	4770      	bx	lr
 8003d72:	f803 1b01 	strb.w	r1, [r3], #1
 8003d76:	e7f9      	b.n	8003d6c <memset+0x4>

08003d78 <siprintf>:
 8003d78:	b40e      	push	{r1, r2, r3}
 8003d7a:	b500      	push	{lr}
 8003d7c:	b09c      	sub	sp, #112	; 0x70
 8003d7e:	ab1d      	add	r3, sp, #116	; 0x74
 8003d80:	9002      	str	r0, [sp, #8]
 8003d82:	9006      	str	r0, [sp, #24]
 8003d84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d88:	4809      	ldr	r0, [pc, #36]	; (8003db0 <siprintf+0x38>)
 8003d8a:	9107      	str	r1, [sp, #28]
 8003d8c:	9104      	str	r1, [sp, #16]
 8003d8e:	4909      	ldr	r1, [pc, #36]	; (8003db4 <siprintf+0x3c>)
 8003d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d94:	9105      	str	r1, [sp, #20]
 8003d96:	6800      	ldr	r0, [r0, #0]
 8003d98:	9301      	str	r3, [sp, #4]
 8003d9a:	a902      	add	r1, sp, #8
 8003d9c:	f000 f866 	bl	8003e6c <_svfiprintf_r>
 8003da0:	9b02      	ldr	r3, [sp, #8]
 8003da2:	2200      	movs	r2, #0
 8003da4:	701a      	strb	r2, [r3, #0]
 8003da6:	b01c      	add	sp, #112	; 0x70
 8003da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dac:	b003      	add	sp, #12
 8003dae:	4770      	bx	lr
 8003db0:	2000000c 	.word	0x2000000c
 8003db4:	ffff0208 	.word	0xffff0208

08003db8 <__ssputs_r>:
 8003db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dbc:	688e      	ldr	r6, [r1, #8]
 8003dbe:	429e      	cmp	r6, r3
 8003dc0:	4682      	mov	sl, r0
 8003dc2:	460c      	mov	r4, r1
 8003dc4:	4690      	mov	r8, r2
 8003dc6:	4699      	mov	r9, r3
 8003dc8:	d837      	bhi.n	8003e3a <__ssputs_r+0x82>
 8003dca:	898a      	ldrh	r2, [r1, #12]
 8003dcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003dd0:	d031      	beq.n	8003e36 <__ssputs_r+0x7e>
 8003dd2:	6825      	ldr	r5, [r4, #0]
 8003dd4:	6909      	ldr	r1, [r1, #16]
 8003dd6:	1a6f      	subs	r7, r5, r1
 8003dd8:	6965      	ldr	r5, [r4, #20]
 8003dda:	2302      	movs	r3, #2
 8003ddc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003de0:	fb95 f5f3 	sdiv	r5, r5, r3
 8003de4:	f109 0301 	add.w	r3, r9, #1
 8003de8:	443b      	add	r3, r7
 8003dea:	429d      	cmp	r5, r3
 8003dec:	bf38      	it	cc
 8003dee:	461d      	movcc	r5, r3
 8003df0:	0553      	lsls	r3, r2, #21
 8003df2:	d530      	bpl.n	8003e56 <__ssputs_r+0x9e>
 8003df4:	4629      	mov	r1, r5
 8003df6:	f000 fb2b 	bl	8004450 <_malloc_r>
 8003dfa:	4606      	mov	r6, r0
 8003dfc:	b950      	cbnz	r0, 8003e14 <__ssputs_r+0x5c>
 8003dfe:	230c      	movs	r3, #12
 8003e00:	f8ca 3000 	str.w	r3, [sl]
 8003e04:	89a3      	ldrh	r3, [r4, #12]
 8003e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e0a:	81a3      	strh	r3, [r4, #12]
 8003e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e14:	463a      	mov	r2, r7
 8003e16:	6921      	ldr	r1, [r4, #16]
 8003e18:	f000 faa8 	bl	800436c <memcpy>
 8003e1c:	89a3      	ldrh	r3, [r4, #12]
 8003e1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e26:	81a3      	strh	r3, [r4, #12]
 8003e28:	6126      	str	r6, [r4, #16]
 8003e2a:	6165      	str	r5, [r4, #20]
 8003e2c:	443e      	add	r6, r7
 8003e2e:	1bed      	subs	r5, r5, r7
 8003e30:	6026      	str	r6, [r4, #0]
 8003e32:	60a5      	str	r5, [r4, #8]
 8003e34:	464e      	mov	r6, r9
 8003e36:	454e      	cmp	r6, r9
 8003e38:	d900      	bls.n	8003e3c <__ssputs_r+0x84>
 8003e3a:	464e      	mov	r6, r9
 8003e3c:	4632      	mov	r2, r6
 8003e3e:	4641      	mov	r1, r8
 8003e40:	6820      	ldr	r0, [r4, #0]
 8003e42:	f000 fa9e 	bl	8004382 <memmove>
 8003e46:	68a3      	ldr	r3, [r4, #8]
 8003e48:	1b9b      	subs	r3, r3, r6
 8003e4a:	60a3      	str	r3, [r4, #8]
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	441e      	add	r6, r3
 8003e50:	6026      	str	r6, [r4, #0]
 8003e52:	2000      	movs	r0, #0
 8003e54:	e7dc      	b.n	8003e10 <__ssputs_r+0x58>
 8003e56:	462a      	mov	r2, r5
 8003e58:	f000 fb54 	bl	8004504 <_realloc_r>
 8003e5c:	4606      	mov	r6, r0
 8003e5e:	2800      	cmp	r0, #0
 8003e60:	d1e2      	bne.n	8003e28 <__ssputs_r+0x70>
 8003e62:	6921      	ldr	r1, [r4, #16]
 8003e64:	4650      	mov	r0, sl
 8003e66:	f000 faa5 	bl	80043b4 <_free_r>
 8003e6a:	e7c8      	b.n	8003dfe <__ssputs_r+0x46>

08003e6c <_svfiprintf_r>:
 8003e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e70:	461d      	mov	r5, r3
 8003e72:	898b      	ldrh	r3, [r1, #12]
 8003e74:	061f      	lsls	r7, r3, #24
 8003e76:	b09d      	sub	sp, #116	; 0x74
 8003e78:	4680      	mov	r8, r0
 8003e7a:	460c      	mov	r4, r1
 8003e7c:	4616      	mov	r6, r2
 8003e7e:	d50f      	bpl.n	8003ea0 <_svfiprintf_r+0x34>
 8003e80:	690b      	ldr	r3, [r1, #16]
 8003e82:	b96b      	cbnz	r3, 8003ea0 <_svfiprintf_r+0x34>
 8003e84:	2140      	movs	r1, #64	; 0x40
 8003e86:	f000 fae3 	bl	8004450 <_malloc_r>
 8003e8a:	6020      	str	r0, [r4, #0]
 8003e8c:	6120      	str	r0, [r4, #16]
 8003e8e:	b928      	cbnz	r0, 8003e9c <_svfiprintf_r+0x30>
 8003e90:	230c      	movs	r3, #12
 8003e92:	f8c8 3000 	str.w	r3, [r8]
 8003e96:	f04f 30ff 	mov.w	r0, #4294967295
 8003e9a:	e0c8      	b.n	800402e <_svfiprintf_r+0x1c2>
 8003e9c:	2340      	movs	r3, #64	; 0x40
 8003e9e:	6163      	str	r3, [r4, #20]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ea4:	2320      	movs	r3, #32
 8003ea6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003eaa:	2330      	movs	r3, #48	; 0x30
 8003eac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003eb0:	9503      	str	r5, [sp, #12]
 8003eb2:	f04f 0b01 	mov.w	fp, #1
 8003eb6:	4637      	mov	r7, r6
 8003eb8:	463d      	mov	r5, r7
 8003eba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003ebe:	b10b      	cbz	r3, 8003ec4 <_svfiprintf_r+0x58>
 8003ec0:	2b25      	cmp	r3, #37	; 0x25
 8003ec2:	d13e      	bne.n	8003f42 <_svfiprintf_r+0xd6>
 8003ec4:	ebb7 0a06 	subs.w	sl, r7, r6
 8003ec8:	d00b      	beq.n	8003ee2 <_svfiprintf_r+0x76>
 8003eca:	4653      	mov	r3, sl
 8003ecc:	4632      	mov	r2, r6
 8003ece:	4621      	mov	r1, r4
 8003ed0:	4640      	mov	r0, r8
 8003ed2:	f7ff ff71 	bl	8003db8 <__ssputs_r>
 8003ed6:	3001      	adds	r0, #1
 8003ed8:	f000 80a4 	beq.w	8004024 <_svfiprintf_r+0x1b8>
 8003edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ede:	4453      	add	r3, sl
 8003ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ee2:	783b      	ldrb	r3, [r7, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 809d 	beq.w	8004024 <_svfiprintf_r+0x1b8>
 8003eea:	2300      	movs	r3, #0
 8003eec:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ef4:	9304      	str	r3, [sp, #16]
 8003ef6:	9307      	str	r3, [sp, #28]
 8003ef8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003efc:	931a      	str	r3, [sp, #104]	; 0x68
 8003efe:	462f      	mov	r7, r5
 8003f00:	2205      	movs	r2, #5
 8003f02:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003f06:	4850      	ldr	r0, [pc, #320]	; (8004048 <_svfiprintf_r+0x1dc>)
 8003f08:	f7fc f972 	bl	80001f0 <memchr>
 8003f0c:	9b04      	ldr	r3, [sp, #16]
 8003f0e:	b9d0      	cbnz	r0, 8003f46 <_svfiprintf_r+0xda>
 8003f10:	06d9      	lsls	r1, r3, #27
 8003f12:	bf44      	itt	mi
 8003f14:	2220      	movmi	r2, #32
 8003f16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f1a:	071a      	lsls	r2, r3, #28
 8003f1c:	bf44      	itt	mi
 8003f1e:	222b      	movmi	r2, #43	; 0x2b
 8003f20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f24:	782a      	ldrb	r2, [r5, #0]
 8003f26:	2a2a      	cmp	r2, #42	; 0x2a
 8003f28:	d015      	beq.n	8003f56 <_svfiprintf_r+0xea>
 8003f2a:	9a07      	ldr	r2, [sp, #28]
 8003f2c:	462f      	mov	r7, r5
 8003f2e:	2000      	movs	r0, #0
 8003f30:	250a      	movs	r5, #10
 8003f32:	4639      	mov	r1, r7
 8003f34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f38:	3b30      	subs	r3, #48	; 0x30
 8003f3a:	2b09      	cmp	r3, #9
 8003f3c:	d94d      	bls.n	8003fda <_svfiprintf_r+0x16e>
 8003f3e:	b1b8      	cbz	r0, 8003f70 <_svfiprintf_r+0x104>
 8003f40:	e00f      	b.n	8003f62 <_svfiprintf_r+0xf6>
 8003f42:	462f      	mov	r7, r5
 8003f44:	e7b8      	b.n	8003eb8 <_svfiprintf_r+0x4c>
 8003f46:	4a40      	ldr	r2, [pc, #256]	; (8004048 <_svfiprintf_r+0x1dc>)
 8003f48:	1a80      	subs	r0, r0, r2
 8003f4a:	fa0b f000 	lsl.w	r0, fp, r0
 8003f4e:	4318      	orrs	r0, r3
 8003f50:	9004      	str	r0, [sp, #16]
 8003f52:	463d      	mov	r5, r7
 8003f54:	e7d3      	b.n	8003efe <_svfiprintf_r+0x92>
 8003f56:	9a03      	ldr	r2, [sp, #12]
 8003f58:	1d11      	adds	r1, r2, #4
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	9103      	str	r1, [sp, #12]
 8003f5e:	2a00      	cmp	r2, #0
 8003f60:	db01      	blt.n	8003f66 <_svfiprintf_r+0xfa>
 8003f62:	9207      	str	r2, [sp, #28]
 8003f64:	e004      	b.n	8003f70 <_svfiprintf_r+0x104>
 8003f66:	4252      	negs	r2, r2
 8003f68:	f043 0302 	orr.w	r3, r3, #2
 8003f6c:	9207      	str	r2, [sp, #28]
 8003f6e:	9304      	str	r3, [sp, #16]
 8003f70:	783b      	ldrb	r3, [r7, #0]
 8003f72:	2b2e      	cmp	r3, #46	; 0x2e
 8003f74:	d10c      	bne.n	8003f90 <_svfiprintf_r+0x124>
 8003f76:	787b      	ldrb	r3, [r7, #1]
 8003f78:	2b2a      	cmp	r3, #42	; 0x2a
 8003f7a:	d133      	bne.n	8003fe4 <_svfiprintf_r+0x178>
 8003f7c:	9b03      	ldr	r3, [sp, #12]
 8003f7e:	1d1a      	adds	r2, r3, #4
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	9203      	str	r2, [sp, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	bfb8      	it	lt
 8003f88:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f8c:	3702      	adds	r7, #2
 8003f8e:	9305      	str	r3, [sp, #20]
 8003f90:	4d2e      	ldr	r5, [pc, #184]	; (800404c <_svfiprintf_r+0x1e0>)
 8003f92:	7839      	ldrb	r1, [r7, #0]
 8003f94:	2203      	movs	r2, #3
 8003f96:	4628      	mov	r0, r5
 8003f98:	f7fc f92a 	bl	80001f0 <memchr>
 8003f9c:	b138      	cbz	r0, 8003fae <_svfiprintf_r+0x142>
 8003f9e:	2340      	movs	r3, #64	; 0x40
 8003fa0:	1b40      	subs	r0, r0, r5
 8003fa2:	fa03 f000 	lsl.w	r0, r3, r0
 8003fa6:	9b04      	ldr	r3, [sp, #16]
 8003fa8:	4303      	orrs	r3, r0
 8003faa:	3701      	adds	r7, #1
 8003fac:	9304      	str	r3, [sp, #16]
 8003fae:	7839      	ldrb	r1, [r7, #0]
 8003fb0:	4827      	ldr	r0, [pc, #156]	; (8004050 <_svfiprintf_r+0x1e4>)
 8003fb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fb6:	2206      	movs	r2, #6
 8003fb8:	1c7e      	adds	r6, r7, #1
 8003fba:	f7fc f919 	bl	80001f0 <memchr>
 8003fbe:	2800      	cmp	r0, #0
 8003fc0:	d038      	beq.n	8004034 <_svfiprintf_r+0x1c8>
 8003fc2:	4b24      	ldr	r3, [pc, #144]	; (8004054 <_svfiprintf_r+0x1e8>)
 8003fc4:	bb13      	cbnz	r3, 800400c <_svfiprintf_r+0x1a0>
 8003fc6:	9b03      	ldr	r3, [sp, #12]
 8003fc8:	3307      	adds	r3, #7
 8003fca:	f023 0307 	bic.w	r3, r3, #7
 8003fce:	3308      	adds	r3, #8
 8003fd0:	9303      	str	r3, [sp, #12]
 8003fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fd4:	444b      	add	r3, r9
 8003fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8003fd8:	e76d      	b.n	8003eb6 <_svfiprintf_r+0x4a>
 8003fda:	fb05 3202 	mla	r2, r5, r2, r3
 8003fde:	2001      	movs	r0, #1
 8003fe0:	460f      	mov	r7, r1
 8003fe2:	e7a6      	b.n	8003f32 <_svfiprintf_r+0xc6>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	3701      	adds	r7, #1
 8003fe8:	9305      	str	r3, [sp, #20]
 8003fea:	4619      	mov	r1, r3
 8003fec:	250a      	movs	r5, #10
 8003fee:	4638      	mov	r0, r7
 8003ff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ff4:	3a30      	subs	r2, #48	; 0x30
 8003ff6:	2a09      	cmp	r2, #9
 8003ff8:	d903      	bls.n	8004002 <_svfiprintf_r+0x196>
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0c8      	beq.n	8003f90 <_svfiprintf_r+0x124>
 8003ffe:	9105      	str	r1, [sp, #20]
 8004000:	e7c6      	b.n	8003f90 <_svfiprintf_r+0x124>
 8004002:	fb05 2101 	mla	r1, r5, r1, r2
 8004006:	2301      	movs	r3, #1
 8004008:	4607      	mov	r7, r0
 800400a:	e7f0      	b.n	8003fee <_svfiprintf_r+0x182>
 800400c:	ab03      	add	r3, sp, #12
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	4622      	mov	r2, r4
 8004012:	4b11      	ldr	r3, [pc, #68]	; (8004058 <_svfiprintf_r+0x1ec>)
 8004014:	a904      	add	r1, sp, #16
 8004016:	4640      	mov	r0, r8
 8004018:	f3af 8000 	nop.w
 800401c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004020:	4681      	mov	r9, r0
 8004022:	d1d6      	bne.n	8003fd2 <_svfiprintf_r+0x166>
 8004024:	89a3      	ldrh	r3, [r4, #12]
 8004026:	065b      	lsls	r3, r3, #25
 8004028:	f53f af35 	bmi.w	8003e96 <_svfiprintf_r+0x2a>
 800402c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800402e:	b01d      	add	sp, #116	; 0x74
 8004030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004034:	ab03      	add	r3, sp, #12
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	4622      	mov	r2, r4
 800403a:	4b07      	ldr	r3, [pc, #28]	; (8004058 <_svfiprintf_r+0x1ec>)
 800403c:	a904      	add	r1, sp, #16
 800403e:	4640      	mov	r0, r8
 8004040:	f000 f882 	bl	8004148 <_printf_i>
 8004044:	e7ea      	b.n	800401c <_svfiprintf_r+0x1b0>
 8004046:	bf00      	nop
 8004048:	08004604 	.word	0x08004604
 800404c:	0800460a 	.word	0x0800460a
 8004050:	0800460e 	.word	0x0800460e
 8004054:	00000000 	.word	0x00000000
 8004058:	08003db9 	.word	0x08003db9

0800405c <_printf_common>:
 800405c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004060:	4691      	mov	r9, r2
 8004062:	461f      	mov	r7, r3
 8004064:	688a      	ldr	r2, [r1, #8]
 8004066:	690b      	ldr	r3, [r1, #16]
 8004068:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800406c:	4293      	cmp	r3, r2
 800406e:	bfb8      	it	lt
 8004070:	4613      	movlt	r3, r2
 8004072:	f8c9 3000 	str.w	r3, [r9]
 8004076:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800407a:	4606      	mov	r6, r0
 800407c:	460c      	mov	r4, r1
 800407e:	b112      	cbz	r2, 8004086 <_printf_common+0x2a>
 8004080:	3301      	adds	r3, #1
 8004082:	f8c9 3000 	str.w	r3, [r9]
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	0699      	lsls	r1, r3, #26
 800408a:	bf42      	ittt	mi
 800408c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004090:	3302      	addmi	r3, #2
 8004092:	f8c9 3000 	strmi.w	r3, [r9]
 8004096:	6825      	ldr	r5, [r4, #0]
 8004098:	f015 0506 	ands.w	r5, r5, #6
 800409c:	d107      	bne.n	80040ae <_printf_common+0x52>
 800409e:	f104 0a19 	add.w	sl, r4, #25
 80040a2:	68e3      	ldr	r3, [r4, #12]
 80040a4:	f8d9 2000 	ldr.w	r2, [r9]
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	42ab      	cmp	r3, r5
 80040ac:	dc28      	bgt.n	8004100 <_printf_common+0xa4>
 80040ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80040b2:	6822      	ldr	r2, [r4, #0]
 80040b4:	3300      	adds	r3, #0
 80040b6:	bf18      	it	ne
 80040b8:	2301      	movne	r3, #1
 80040ba:	0692      	lsls	r2, r2, #26
 80040bc:	d42d      	bmi.n	800411a <_printf_common+0xbe>
 80040be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040c2:	4639      	mov	r1, r7
 80040c4:	4630      	mov	r0, r6
 80040c6:	47c0      	blx	r8
 80040c8:	3001      	adds	r0, #1
 80040ca:	d020      	beq.n	800410e <_printf_common+0xb2>
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	68e5      	ldr	r5, [r4, #12]
 80040d0:	f8d9 2000 	ldr.w	r2, [r9]
 80040d4:	f003 0306 	and.w	r3, r3, #6
 80040d8:	2b04      	cmp	r3, #4
 80040da:	bf08      	it	eq
 80040dc:	1aad      	subeq	r5, r5, r2
 80040de:	68a3      	ldr	r3, [r4, #8]
 80040e0:	6922      	ldr	r2, [r4, #16]
 80040e2:	bf0c      	ite	eq
 80040e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040e8:	2500      	movne	r5, #0
 80040ea:	4293      	cmp	r3, r2
 80040ec:	bfc4      	itt	gt
 80040ee:	1a9b      	subgt	r3, r3, r2
 80040f0:	18ed      	addgt	r5, r5, r3
 80040f2:	f04f 0900 	mov.w	r9, #0
 80040f6:	341a      	adds	r4, #26
 80040f8:	454d      	cmp	r5, r9
 80040fa:	d11a      	bne.n	8004132 <_printf_common+0xd6>
 80040fc:	2000      	movs	r0, #0
 80040fe:	e008      	b.n	8004112 <_printf_common+0xb6>
 8004100:	2301      	movs	r3, #1
 8004102:	4652      	mov	r2, sl
 8004104:	4639      	mov	r1, r7
 8004106:	4630      	mov	r0, r6
 8004108:	47c0      	blx	r8
 800410a:	3001      	adds	r0, #1
 800410c:	d103      	bne.n	8004116 <_printf_common+0xba>
 800410e:	f04f 30ff 	mov.w	r0, #4294967295
 8004112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004116:	3501      	adds	r5, #1
 8004118:	e7c3      	b.n	80040a2 <_printf_common+0x46>
 800411a:	18e1      	adds	r1, r4, r3
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	2030      	movs	r0, #48	; 0x30
 8004120:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004124:	4422      	add	r2, r4
 8004126:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800412a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800412e:	3302      	adds	r3, #2
 8004130:	e7c5      	b.n	80040be <_printf_common+0x62>
 8004132:	2301      	movs	r3, #1
 8004134:	4622      	mov	r2, r4
 8004136:	4639      	mov	r1, r7
 8004138:	4630      	mov	r0, r6
 800413a:	47c0      	blx	r8
 800413c:	3001      	adds	r0, #1
 800413e:	d0e6      	beq.n	800410e <_printf_common+0xb2>
 8004140:	f109 0901 	add.w	r9, r9, #1
 8004144:	e7d8      	b.n	80040f8 <_printf_common+0x9c>
	...

08004148 <_printf_i>:
 8004148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800414c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004150:	460c      	mov	r4, r1
 8004152:	7e09      	ldrb	r1, [r1, #24]
 8004154:	b085      	sub	sp, #20
 8004156:	296e      	cmp	r1, #110	; 0x6e
 8004158:	4617      	mov	r7, r2
 800415a:	4606      	mov	r6, r0
 800415c:	4698      	mov	r8, r3
 800415e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004160:	f000 80b3 	beq.w	80042ca <_printf_i+0x182>
 8004164:	d822      	bhi.n	80041ac <_printf_i+0x64>
 8004166:	2963      	cmp	r1, #99	; 0x63
 8004168:	d036      	beq.n	80041d8 <_printf_i+0x90>
 800416a:	d80a      	bhi.n	8004182 <_printf_i+0x3a>
 800416c:	2900      	cmp	r1, #0
 800416e:	f000 80b9 	beq.w	80042e4 <_printf_i+0x19c>
 8004172:	2958      	cmp	r1, #88	; 0x58
 8004174:	f000 8083 	beq.w	800427e <_printf_i+0x136>
 8004178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800417c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004180:	e032      	b.n	80041e8 <_printf_i+0xa0>
 8004182:	2964      	cmp	r1, #100	; 0x64
 8004184:	d001      	beq.n	800418a <_printf_i+0x42>
 8004186:	2969      	cmp	r1, #105	; 0x69
 8004188:	d1f6      	bne.n	8004178 <_printf_i+0x30>
 800418a:	6820      	ldr	r0, [r4, #0]
 800418c:	6813      	ldr	r3, [r2, #0]
 800418e:	0605      	lsls	r5, r0, #24
 8004190:	f103 0104 	add.w	r1, r3, #4
 8004194:	d52a      	bpl.n	80041ec <_printf_i+0xa4>
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6011      	str	r1, [r2, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	da03      	bge.n	80041a6 <_printf_i+0x5e>
 800419e:	222d      	movs	r2, #45	; 0x2d
 80041a0:	425b      	negs	r3, r3
 80041a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80041a6:	486f      	ldr	r0, [pc, #444]	; (8004364 <_printf_i+0x21c>)
 80041a8:	220a      	movs	r2, #10
 80041aa:	e039      	b.n	8004220 <_printf_i+0xd8>
 80041ac:	2973      	cmp	r1, #115	; 0x73
 80041ae:	f000 809d 	beq.w	80042ec <_printf_i+0x1a4>
 80041b2:	d808      	bhi.n	80041c6 <_printf_i+0x7e>
 80041b4:	296f      	cmp	r1, #111	; 0x6f
 80041b6:	d020      	beq.n	80041fa <_printf_i+0xb2>
 80041b8:	2970      	cmp	r1, #112	; 0x70
 80041ba:	d1dd      	bne.n	8004178 <_printf_i+0x30>
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	f043 0320 	orr.w	r3, r3, #32
 80041c2:	6023      	str	r3, [r4, #0]
 80041c4:	e003      	b.n	80041ce <_printf_i+0x86>
 80041c6:	2975      	cmp	r1, #117	; 0x75
 80041c8:	d017      	beq.n	80041fa <_printf_i+0xb2>
 80041ca:	2978      	cmp	r1, #120	; 0x78
 80041cc:	d1d4      	bne.n	8004178 <_printf_i+0x30>
 80041ce:	2378      	movs	r3, #120	; 0x78
 80041d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041d4:	4864      	ldr	r0, [pc, #400]	; (8004368 <_printf_i+0x220>)
 80041d6:	e055      	b.n	8004284 <_printf_i+0x13c>
 80041d8:	6813      	ldr	r3, [r2, #0]
 80041da:	1d19      	adds	r1, r3, #4
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6011      	str	r1, [r2, #0]
 80041e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041e8:	2301      	movs	r3, #1
 80041ea:	e08c      	b.n	8004306 <_printf_i+0x1be>
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6011      	str	r1, [r2, #0]
 80041f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041f4:	bf18      	it	ne
 80041f6:	b21b      	sxthne	r3, r3
 80041f8:	e7cf      	b.n	800419a <_printf_i+0x52>
 80041fa:	6813      	ldr	r3, [r2, #0]
 80041fc:	6825      	ldr	r5, [r4, #0]
 80041fe:	1d18      	adds	r0, r3, #4
 8004200:	6010      	str	r0, [r2, #0]
 8004202:	0628      	lsls	r0, r5, #24
 8004204:	d501      	bpl.n	800420a <_printf_i+0xc2>
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	e002      	b.n	8004210 <_printf_i+0xc8>
 800420a:	0668      	lsls	r0, r5, #25
 800420c:	d5fb      	bpl.n	8004206 <_printf_i+0xbe>
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	4854      	ldr	r0, [pc, #336]	; (8004364 <_printf_i+0x21c>)
 8004212:	296f      	cmp	r1, #111	; 0x6f
 8004214:	bf14      	ite	ne
 8004216:	220a      	movne	r2, #10
 8004218:	2208      	moveq	r2, #8
 800421a:	2100      	movs	r1, #0
 800421c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004220:	6865      	ldr	r5, [r4, #4]
 8004222:	60a5      	str	r5, [r4, #8]
 8004224:	2d00      	cmp	r5, #0
 8004226:	f2c0 8095 	blt.w	8004354 <_printf_i+0x20c>
 800422a:	6821      	ldr	r1, [r4, #0]
 800422c:	f021 0104 	bic.w	r1, r1, #4
 8004230:	6021      	str	r1, [r4, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d13d      	bne.n	80042b2 <_printf_i+0x16a>
 8004236:	2d00      	cmp	r5, #0
 8004238:	f040 808e 	bne.w	8004358 <_printf_i+0x210>
 800423c:	4665      	mov	r5, ip
 800423e:	2a08      	cmp	r2, #8
 8004240:	d10b      	bne.n	800425a <_printf_i+0x112>
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	07db      	lsls	r3, r3, #31
 8004246:	d508      	bpl.n	800425a <_printf_i+0x112>
 8004248:	6923      	ldr	r3, [r4, #16]
 800424a:	6862      	ldr	r2, [r4, #4]
 800424c:	429a      	cmp	r2, r3
 800424e:	bfde      	ittt	le
 8004250:	2330      	movle	r3, #48	; 0x30
 8004252:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004256:	f105 35ff 	addle.w	r5, r5, #4294967295
 800425a:	ebac 0305 	sub.w	r3, ip, r5
 800425e:	6123      	str	r3, [r4, #16]
 8004260:	f8cd 8000 	str.w	r8, [sp]
 8004264:	463b      	mov	r3, r7
 8004266:	aa03      	add	r2, sp, #12
 8004268:	4621      	mov	r1, r4
 800426a:	4630      	mov	r0, r6
 800426c:	f7ff fef6 	bl	800405c <_printf_common>
 8004270:	3001      	adds	r0, #1
 8004272:	d14d      	bne.n	8004310 <_printf_i+0x1c8>
 8004274:	f04f 30ff 	mov.w	r0, #4294967295
 8004278:	b005      	add	sp, #20
 800427a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800427e:	4839      	ldr	r0, [pc, #228]	; (8004364 <_printf_i+0x21c>)
 8004280:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004284:	6813      	ldr	r3, [r2, #0]
 8004286:	6821      	ldr	r1, [r4, #0]
 8004288:	1d1d      	adds	r5, r3, #4
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6015      	str	r5, [r2, #0]
 800428e:	060a      	lsls	r2, r1, #24
 8004290:	d50b      	bpl.n	80042aa <_printf_i+0x162>
 8004292:	07ca      	lsls	r2, r1, #31
 8004294:	bf44      	itt	mi
 8004296:	f041 0120 	orrmi.w	r1, r1, #32
 800429a:	6021      	strmi	r1, [r4, #0]
 800429c:	b91b      	cbnz	r3, 80042a6 <_printf_i+0x15e>
 800429e:	6822      	ldr	r2, [r4, #0]
 80042a0:	f022 0220 	bic.w	r2, r2, #32
 80042a4:	6022      	str	r2, [r4, #0]
 80042a6:	2210      	movs	r2, #16
 80042a8:	e7b7      	b.n	800421a <_printf_i+0xd2>
 80042aa:	064d      	lsls	r5, r1, #25
 80042ac:	bf48      	it	mi
 80042ae:	b29b      	uxthmi	r3, r3
 80042b0:	e7ef      	b.n	8004292 <_printf_i+0x14a>
 80042b2:	4665      	mov	r5, ip
 80042b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80042b8:	fb02 3311 	mls	r3, r2, r1, r3
 80042bc:	5cc3      	ldrb	r3, [r0, r3]
 80042be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80042c2:	460b      	mov	r3, r1
 80042c4:	2900      	cmp	r1, #0
 80042c6:	d1f5      	bne.n	80042b4 <_printf_i+0x16c>
 80042c8:	e7b9      	b.n	800423e <_printf_i+0xf6>
 80042ca:	6813      	ldr	r3, [r2, #0]
 80042cc:	6825      	ldr	r5, [r4, #0]
 80042ce:	6961      	ldr	r1, [r4, #20]
 80042d0:	1d18      	adds	r0, r3, #4
 80042d2:	6010      	str	r0, [r2, #0]
 80042d4:	0628      	lsls	r0, r5, #24
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	d501      	bpl.n	80042de <_printf_i+0x196>
 80042da:	6019      	str	r1, [r3, #0]
 80042dc:	e002      	b.n	80042e4 <_printf_i+0x19c>
 80042de:	066a      	lsls	r2, r5, #25
 80042e0:	d5fb      	bpl.n	80042da <_printf_i+0x192>
 80042e2:	8019      	strh	r1, [r3, #0]
 80042e4:	2300      	movs	r3, #0
 80042e6:	6123      	str	r3, [r4, #16]
 80042e8:	4665      	mov	r5, ip
 80042ea:	e7b9      	b.n	8004260 <_printf_i+0x118>
 80042ec:	6813      	ldr	r3, [r2, #0]
 80042ee:	1d19      	adds	r1, r3, #4
 80042f0:	6011      	str	r1, [r2, #0]
 80042f2:	681d      	ldr	r5, [r3, #0]
 80042f4:	6862      	ldr	r2, [r4, #4]
 80042f6:	2100      	movs	r1, #0
 80042f8:	4628      	mov	r0, r5
 80042fa:	f7fb ff79 	bl	80001f0 <memchr>
 80042fe:	b108      	cbz	r0, 8004304 <_printf_i+0x1bc>
 8004300:	1b40      	subs	r0, r0, r5
 8004302:	6060      	str	r0, [r4, #4]
 8004304:	6863      	ldr	r3, [r4, #4]
 8004306:	6123      	str	r3, [r4, #16]
 8004308:	2300      	movs	r3, #0
 800430a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800430e:	e7a7      	b.n	8004260 <_printf_i+0x118>
 8004310:	6923      	ldr	r3, [r4, #16]
 8004312:	462a      	mov	r2, r5
 8004314:	4639      	mov	r1, r7
 8004316:	4630      	mov	r0, r6
 8004318:	47c0      	blx	r8
 800431a:	3001      	adds	r0, #1
 800431c:	d0aa      	beq.n	8004274 <_printf_i+0x12c>
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	079b      	lsls	r3, r3, #30
 8004322:	d413      	bmi.n	800434c <_printf_i+0x204>
 8004324:	68e0      	ldr	r0, [r4, #12]
 8004326:	9b03      	ldr	r3, [sp, #12]
 8004328:	4298      	cmp	r0, r3
 800432a:	bfb8      	it	lt
 800432c:	4618      	movlt	r0, r3
 800432e:	e7a3      	b.n	8004278 <_printf_i+0x130>
 8004330:	2301      	movs	r3, #1
 8004332:	464a      	mov	r2, r9
 8004334:	4639      	mov	r1, r7
 8004336:	4630      	mov	r0, r6
 8004338:	47c0      	blx	r8
 800433a:	3001      	adds	r0, #1
 800433c:	d09a      	beq.n	8004274 <_printf_i+0x12c>
 800433e:	3501      	adds	r5, #1
 8004340:	68e3      	ldr	r3, [r4, #12]
 8004342:	9a03      	ldr	r2, [sp, #12]
 8004344:	1a9b      	subs	r3, r3, r2
 8004346:	42ab      	cmp	r3, r5
 8004348:	dcf2      	bgt.n	8004330 <_printf_i+0x1e8>
 800434a:	e7eb      	b.n	8004324 <_printf_i+0x1dc>
 800434c:	2500      	movs	r5, #0
 800434e:	f104 0919 	add.w	r9, r4, #25
 8004352:	e7f5      	b.n	8004340 <_printf_i+0x1f8>
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1ac      	bne.n	80042b2 <_printf_i+0x16a>
 8004358:	7803      	ldrb	r3, [r0, #0]
 800435a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800435e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004362:	e76c      	b.n	800423e <_printf_i+0xf6>
 8004364:	08004615 	.word	0x08004615
 8004368:	08004626 	.word	0x08004626

0800436c <memcpy>:
 800436c:	b510      	push	{r4, lr}
 800436e:	1e43      	subs	r3, r0, #1
 8004370:	440a      	add	r2, r1
 8004372:	4291      	cmp	r1, r2
 8004374:	d100      	bne.n	8004378 <memcpy+0xc>
 8004376:	bd10      	pop	{r4, pc}
 8004378:	f811 4b01 	ldrb.w	r4, [r1], #1
 800437c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004380:	e7f7      	b.n	8004372 <memcpy+0x6>

08004382 <memmove>:
 8004382:	4288      	cmp	r0, r1
 8004384:	b510      	push	{r4, lr}
 8004386:	eb01 0302 	add.w	r3, r1, r2
 800438a:	d807      	bhi.n	800439c <memmove+0x1a>
 800438c:	1e42      	subs	r2, r0, #1
 800438e:	4299      	cmp	r1, r3
 8004390:	d00a      	beq.n	80043a8 <memmove+0x26>
 8004392:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004396:	f802 4f01 	strb.w	r4, [r2, #1]!
 800439a:	e7f8      	b.n	800438e <memmove+0xc>
 800439c:	4283      	cmp	r3, r0
 800439e:	d9f5      	bls.n	800438c <memmove+0xa>
 80043a0:	1881      	adds	r1, r0, r2
 80043a2:	1ad2      	subs	r2, r2, r3
 80043a4:	42d3      	cmn	r3, r2
 80043a6:	d100      	bne.n	80043aa <memmove+0x28>
 80043a8:	bd10      	pop	{r4, pc}
 80043aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043ae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80043b2:	e7f7      	b.n	80043a4 <memmove+0x22>

080043b4 <_free_r>:
 80043b4:	b538      	push	{r3, r4, r5, lr}
 80043b6:	4605      	mov	r5, r0
 80043b8:	2900      	cmp	r1, #0
 80043ba:	d045      	beq.n	8004448 <_free_r+0x94>
 80043bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043c0:	1f0c      	subs	r4, r1, #4
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	bfb8      	it	lt
 80043c6:	18e4      	addlt	r4, r4, r3
 80043c8:	f000 f8d2 	bl	8004570 <__malloc_lock>
 80043cc:	4a1f      	ldr	r2, [pc, #124]	; (800444c <_free_r+0x98>)
 80043ce:	6813      	ldr	r3, [r2, #0]
 80043d0:	4610      	mov	r0, r2
 80043d2:	b933      	cbnz	r3, 80043e2 <_free_r+0x2e>
 80043d4:	6063      	str	r3, [r4, #4]
 80043d6:	6014      	str	r4, [r2, #0]
 80043d8:	4628      	mov	r0, r5
 80043da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043de:	f000 b8c8 	b.w	8004572 <__malloc_unlock>
 80043e2:	42a3      	cmp	r3, r4
 80043e4:	d90c      	bls.n	8004400 <_free_r+0x4c>
 80043e6:	6821      	ldr	r1, [r4, #0]
 80043e8:	1862      	adds	r2, r4, r1
 80043ea:	4293      	cmp	r3, r2
 80043ec:	bf04      	itt	eq
 80043ee:	681a      	ldreq	r2, [r3, #0]
 80043f0:	685b      	ldreq	r3, [r3, #4]
 80043f2:	6063      	str	r3, [r4, #4]
 80043f4:	bf04      	itt	eq
 80043f6:	1852      	addeq	r2, r2, r1
 80043f8:	6022      	streq	r2, [r4, #0]
 80043fa:	6004      	str	r4, [r0, #0]
 80043fc:	e7ec      	b.n	80043d8 <_free_r+0x24>
 80043fe:	4613      	mov	r3, r2
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	b10a      	cbz	r2, 8004408 <_free_r+0x54>
 8004404:	42a2      	cmp	r2, r4
 8004406:	d9fa      	bls.n	80043fe <_free_r+0x4a>
 8004408:	6819      	ldr	r1, [r3, #0]
 800440a:	1858      	adds	r0, r3, r1
 800440c:	42a0      	cmp	r0, r4
 800440e:	d10b      	bne.n	8004428 <_free_r+0x74>
 8004410:	6820      	ldr	r0, [r4, #0]
 8004412:	4401      	add	r1, r0
 8004414:	1858      	adds	r0, r3, r1
 8004416:	4282      	cmp	r2, r0
 8004418:	6019      	str	r1, [r3, #0]
 800441a:	d1dd      	bne.n	80043d8 <_free_r+0x24>
 800441c:	6810      	ldr	r0, [r2, #0]
 800441e:	6852      	ldr	r2, [r2, #4]
 8004420:	605a      	str	r2, [r3, #4]
 8004422:	4401      	add	r1, r0
 8004424:	6019      	str	r1, [r3, #0]
 8004426:	e7d7      	b.n	80043d8 <_free_r+0x24>
 8004428:	d902      	bls.n	8004430 <_free_r+0x7c>
 800442a:	230c      	movs	r3, #12
 800442c:	602b      	str	r3, [r5, #0]
 800442e:	e7d3      	b.n	80043d8 <_free_r+0x24>
 8004430:	6820      	ldr	r0, [r4, #0]
 8004432:	1821      	adds	r1, r4, r0
 8004434:	428a      	cmp	r2, r1
 8004436:	bf04      	itt	eq
 8004438:	6811      	ldreq	r1, [r2, #0]
 800443a:	6852      	ldreq	r2, [r2, #4]
 800443c:	6062      	str	r2, [r4, #4]
 800443e:	bf04      	itt	eq
 8004440:	1809      	addeq	r1, r1, r0
 8004442:	6021      	streq	r1, [r4, #0]
 8004444:	605c      	str	r4, [r3, #4]
 8004446:	e7c7      	b.n	80043d8 <_free_r+0x24>
 8004448:	bd38      	pop	{r3, r4, r5, pc}
 800444a:	bf00      	nop
 800444c:	20000480 	.word	0x20000480

08004450 <_malloc_r>:
 8004450:	b570      	push	{r4, r5, r6, lr}
 8004452:	1ccd      	adds	r5, r1, #3
 8004454:	f025 0503 	bic.w	r5, r5, #3
 8004458:	3508      	adds	r5, #8
 800445a:	2d0c      	cmp	r5, #12
 800445c:	bf38      	it	cc
 800445e:	250c      	movcc	r5, #12
 8004460:	2d00      	cmp	r5, #0
 8004462:	4606      	mov	r6, r0
 8004464:	db01      	blt.n	800446a <_malloc_r+0x1a>
 8004466:	42a9      	cmp	r1, r5
 8004468:	d903      	bls.n	8004472 <_malloc_r+0x22>
 800446a:	230c      	movs	r3, #12
 800446c:	6033      	str	r3, [r6, #0]
 800446e:	2000      	movs	r0, #0
 8004470:	bd70      	pop	{r4, r5, r6, pc}
 8004472:	f000 f87d 	bl	8004570 <__malloc_lock>
 8004476:	4a21      	ldr	r2, [pc, #132]	; (80044fc <_malloc_r+0xac>)
 8004478:	6814      	ldr	r4, [r2, #0]
 800447a:	4621      	mov	r1, r4
 800447c:	b991      	cbnz	r1, 80044a4 <_malloc_r+0x54>
 800447e:	4c20      	ldr	r4, [pc, #128]	; (8004500 <_malloc_r+0xb0>)
 8004480:	6823      	ldr	r3, [r4, #0]
 8004482:	b91b      	cbnz	r3, 800448c <_malloc_r+0x3c>
 8004484:	4630      	mov	r0, r6
 8004486:	f000 f863 	bl	8004550 <_sbrk_r>
 800448a:	6020      	str	r0, [r4, #0]
 800448c:	4629      	mov	r1, r5
 800448e:	4630      	mov	r0, r6
 8004490:	f000 f85e 	bl	8004550 <_sbrk_r>
 8004494:	1c43      	adds	r3, r0, #1
 8004496:	d124      	bne.n	80044e2 <_malloc_r+0x92>
 8004498:	230c      	movs	r3, #12
 800449a:	6033      	str	r3, [r6, #0]
 800449c:	4630      	mov	r0, r6
 800449e:	f000 f868 	bl	8004572 <__malloc_unlock>
 80044a2:	e7e4      	b.n	800446e <_malloc_r+0x1e>
 80044a4:	680b      	ldr	r3, [r1, #0]
 80044a6:	1b5b      	subs	r3, r3, r5
 80044a8:	d418      	bmi.n	80044dc <_malloc_r+0x8c>
 80044aa:	2b0b      	cmp	r3, #11
 80044ac:	d90f      	bls.n	80044ce <_malloc_r+0x7e>
 80044ae:	600b      	str	r3, [r1, #0]
 80044b0:	50cd      	str	r5, [r1, r3]
 80044b2:	18cc      	adds	r4, r1, r3
 80044b4:	4630      	mov	r0, r6
 80044b6:	f000 f85c 	bl	8004572 <__malloc_unlock>
 80044ba:	f104 000b 	add.w	r0, r4, #11
 80044be:	1d23      	adds	r3, r4, #4
 80044c0:	f020 0007 	bic.w	r0, r0, #7
 80044c4:	1ac3      	subs	r3, r0, r3
 80044c6:	d0d3      	beq.n	8004470 <_malloc_r+0x20>
 80044c8:	425a      	negs	r2, r3
 80044ca:	50e2      	str	r2, [r4, r3]
 80044cc:	e7d0      	b.n	8004470 <_malloc_r+0x20>
 80044ce:	428c      	cmp	r4, r1
 80044d0:	684b      	ldr	r3, [r1, #4]
 80044d2:	bf16      	itet	ne
 80044d4:	6063      	strne	r3, [r4, #4]
 80044d6:	6013      	streq	r3, [r2, #0]
 80044d8:	460c      	movne	r4, r1
 80044da:	e7eb      	b.n	80044b4 <_malloc_r+0x64>
 80044dc:	460c      	mov	r4, r1
 80044de:	6849      	ldr	r1, [r1, #4]
 80044e0:	e7cc      	b.n	800447c <_malloc_r+0x2c>
 80044e2:	1cc4      	adds	r4, r0, #3
 80044e4:	f024 0403 	bic.w	r4, r4, #3
 80044e8:	42a0      	cmp	r0, r4
 80044ea:	d005      	beq.n	80044f8 <_malloc_r+0xa8>
 80044ec:	1a21      	subs	r1, r4, r0
 80044ee:	4630      	mov	r0, r6
 80044f0:	f000 f82e 	bl	8004550 <_sbrk_r>
 80044f4:	3001      	adds	r0, #1
 80044f6:	d0cf      	beq.n	8004498 <_malloc_r+0x48>
 80044f8:	6025      	str	r5, [r4, #0]
 80044fa:	e7db      	b.n	80044b4 <_malloc_r+0x64>
 80044fc:	20000480 	.word	0x20000480
 8004500:	20000484 	.word	0x20000484

08004504 <_realloc_r>:
 8004504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004506:	4607      	mov	r7, r0
 8004508:	4614      	mov	r4, r2
 800450a:	460e      	mov	r6, r1
 800450c:	b921      	cbnz	r1, 8004518 <_realloc_r+0x14>
 800450e:	4611      	mov	r1, r2
 8004510:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004514:	f7ff bf9c 	b.w	8004450 <_malloc_r>
 8004518:	b922      	cbnz	r2, 8004524 <_realloc_r+0x20>
 800451a:	f7ff ff4b 	bl	80043b4 <_free_r>
 800451e:	4625      	mov	r5, r4
 8004520:	4628      	mov	r0, r5
 8004522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004524:	f000 f826 	bl	8004574 <_malloc_usable_size_r>
 8004528:	42a0      	cmp	r0, r4
 800452a:	d20f      	bcs.n	800454c <_realloc_r+0x48>
 800452c:	4621      	mov	r1, r4
 800452e:	4638      	mov	r0, r7
 8004530:	f7ff ff8e 	bl	8004450 <_malloc_r>
 8004534:	4605      	mov	r5, r0
 8004536:	2800      	cmp	r0, #0
 8004538:	d0f2      	beq.n	8004520 <_realloc_r+0x1c>
 800453a:	4631      	mov	r1, r6
 800453c:	4622      	mov	r2, r4
 800453e:	f7ff ff15 	bl	800436c <memcpy>
 8004542:	4631      	mov	r1, r6
 8004544:	4638      	mov	r0, r7
 8004546:	f7ff ff35 	bl	80043b4 <_free_r>
 800454a:	e7e9      	b.n	8004520 <_realloc_r+0x1c>
 800454c:	4635      	mov	r5, r6
 800454e:	e7e7      	b.n	8004520 <_realloc_r+0x1c>

08004550 <_sbrk_r>:
 8004550:	b538      	push	{r3, r4, r5, lr}
 8004552:	4c06      	ldr	r4, [pc, #24]	; (800456c <_sbrk_r+0x1c>)
 8004554:	2300      	movs	r3, #0
 8004556:	4605      	mov	r5, r0
 8004558:	4608      	mov	r0, r1
 800455a:	6023      	str	r3, [r4, #0]
 800455c:	f7fc fb5e 	bl	8000c1c <_sbrk>
 8004560:	1c43      	adds	r3, r0, #1
 8004562:	d102      	bne.n	800456a <_sbrk_r+0x1a>
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	b103      	cbz	r3, 800456a <_sbrk_r+0x1a>
 8004568:	602b      	str	r3, [r5, #0]
 800456a:	bd38      	pop	{r3, r4, r5, pc}
 800456c:	2000055c 	.word	0x2000055c

08004570 <__malloc_lock>:
 8004570:	4770      	bx	lr

08004572 <__malloc_unlock>:
 8004572:	4770      	bx	lr

08004574 <_malloc_usable_size_r>:
 8004574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004578:	1f18      	subs	r0, r3, #4
 800457a:	2b00      	cmp	r3, #0
 800457c:	bfbc      	itt	lt
 800457e:	580b      	ldrlt	r3, [r1, r0]
 8004580:	18c0      	addlt	r0, r0, r3
 8004582:	4770      	bx	lr

08004584 <_init>:
 8004584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004586:	bf00      	nop
 8004588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800458a:	bc08      	pop	{r3}
 800458c:	469e      	mov	lr, r3
 800458e:	4770      	bx	lr

08004590 <_fini>:
 8004590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004592:	bf00      	nop
 8004594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004596:	bc08      	pop	{r3}
 8004598:	469e      	mov	lr, r3
 800459a:	4770      	bx	lr
