
SharedQueues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08006a78  08006a78  00016a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b9c  08006b9c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006b9c  08006b9c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b9c  08006b9c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b9c  08006b9c  00016b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ba0  08006ba0  00016ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a54  20000074  08006c18  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ac8  08006c18  00021ac8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019223  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f24  00000000  00000000  000392c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001370  00000000  00000000  0003c1f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001248  00000000  00000000  0003d560  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002f42  00000000  00000000  0003e7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011141  00000000  00000000  000416ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2f38  00000000  00000000  0005282b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00125763  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005494  00000000  00000000  001257e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a60 	.word	0x08006a60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006a60 	.word	0x08006a60

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000294:	f000 fb64 	bl	8000960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000298:	f000 f826 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029c:	f000 f8b2 	bl	8000404 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002a0:	f000 f880 	bl	80003a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80002a4:	f003 f8a6 	bl	80033f4 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of queue01 */
  queue01Handle = osThreadNew(ManageQueue01, NULL, &queue01_attributes);
 80002a8:	4a09      	ldr	r2, [pc, #36]	; (80002d0 <main+0x40>)
 80002aa:	2100      	movs	r1, #0
 80002ac:	4809      	ldr	r0, [pc, #36]	; (80002d4 <main+0x44>)
 80002ae:	f003 f909 	bl	80034c4 <osThreadNew>
 80002b2:	4602      	mov	r2, r0
 80002b4:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <main+0x48>)
 80002b6:	601a      	str	r2, [r3, #0]

  /* creation of queue02 */
  queue02Handle = osThreadNew(ManageQueue02, NULL, &queue02_attributes);
 80002b8:	4a08      	ldr	r2, [pc, #32]	; (80002dc <main+0x4c>)
 80002ba:	2100      	movs	r1, #0
 80002bc:	4808      	ldr	r0, [pc, #32]	; (80002e0 <main+0x50>)
 80002be:	f003 f901 	bl	80034c4 <osThreadNew>
 80002c2:	4602      	mov	r2, r0
 80002c4:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <main+0x54>)
 80002c6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002c8:	f003 f8c8 	bl	800345c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80002cc:	e7fe      	b.n	80002cc <main+0x3c>
 80002ce:	bf00      	nop
 80002d0:	08006ae8 	.word	0x08006ae8
 80002d4:	080004d5 	.word	0x080004d5
 80002d8:	200019a8 	.word	0x200019a8
 80002dc:	08006b0c 	.word	0x08006b0c
 80002e0:	0800059d 	.word	0x0800059d
 80002e4:	20001a30 	.word	0x20001a30

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b0a6      	sub	sp, #152	; 0x98
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002f2:	2228      	movs	r2, #40	; 0x28
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f005 ffad 	bl	8006256 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]
 8000308:	60da      	str	r2, [r3, #12]
 800030a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2258      	movs	r2, #88	; 0x58
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f005 ff9f 	bl	8006256 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000318:	2302      	movs	r3, #2
 800031a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031c:	2301      	movs	r3, #1
 800031e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000320:	2310      	movs	r3, #16
 8000322:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000326:	2302      	movs	r3, #2
 8000328:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800032c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000330:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000334:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000338:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000342:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000346:	4618      	mov	r0, r3
 8000348:	f000 fdc4 	bl	8000ed4 <HAL_RCC_OscConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000352:	f000 f9ad 	bl	80006b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000356:	230f      	movs	r3, #15
 8000358:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800035a:	2302      	movs	r3, #2
 800035c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000366:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800036c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000370:	2102      	movs	r1, #2
 8000372:	4618      	mov	r0, r3
 8000374:	f001 fcc4 	bl	8001d00 <HAL_RCC_ClockConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800037e:	f000 f997 	bl	80006b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000382:	2302      	movs	r3, #2
 8000384:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000386:	2300      	movs	r3, #0
 8000388:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	4618      	mov	r0, r3
 800038e:	f001 ff1f 	bl	80021d0 <HAL_RCCEx_PeriphCLKConfig>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000398:	f000 f98a 	bl	80006b0 <Error_Handler>
  }
}
 800039c:	bf00      	nop
 800039e:	3798      	adds	r7, #152	; 0x98
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003a8:	4b14      	ldr	r3, [pc, #80]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003aa:	4a15      	ldr	r2, [pc, #84]	; (8000400 <MX_USART2_UART_Init+0x5c>)
 80003ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003b0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003b6:	4b11      	ldr	r3, [pc, #68]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003ca:	220c      	movs	r2, #12
 80003cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003dc:	2200      	movs	r2, #0
 80003de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003e6:	4805      	ldr	r0, [pc, #20]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003e8:	f002 fbe6 	bl	8002bb8 <HAL_UART_Init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003f2:	f000 f95d 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	200019ac 	.word	0x200019ac
 8000400:	40004400 	.word	0x40004400

08000404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b08a      	sub	sp, #40	; 0x28
 8000408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040a:	f107 0314 	add.w	r3, r7, #20
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041a:	4b2b      	ldr	r3, [pc, #172]	; (80004c8 <MX_GPIO_Init+0xc4>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a2a      	ldr	r2, [pc, #168]	; (80004c8 <MX_GPIO_Init+0xc4>)
 8000420:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b28      	ldr	r3, [pc, #160]	; (80004c8 <MX_GPIO_Init+0xc4>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800042e:	613b      	str	r3, [r7, #16]
 8000430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000432:	4b25      	ldr	r3, [pc, #148]	; (80004c8 <MX_GPIO_Init+0xc4>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a24      	ldr	r2, [pc, #144]	; (80004c8 <MX_GPIO_Init+0xc4>)
 8000438:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b22      	ldr	r3, [pc, #136]	; (80004c8 <MX_GPIO_Init+0xc4>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044a:	4b1f      	ldr	r3, [pc, #124]	; (80004c8 <MX_GPIO_Init+0xc4>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a1e      	ldr	r2, [pc, #120]	; (80004c8 <MX_GPIO_Init+0xc4>)
 8000450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b1c      	ldr	r3, [pc, #112]	; (80004c8 <MX_GPIO_Init+0xc4>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800045e:	60bb      	str	r3, [r7, #8]
 8000460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000462:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <MX_GPIO_Init+0xc4>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a18      	ldr	r2, [pc, #96]	; (80004c8 <MX_GPIO_Init+0xc4>)
 8000468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800046c:	6153      	str	r3, [r2, #20]
 800046e:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <MX_GPIO_Init+0xc4>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800047a:	2200      	movs	r2, #0
 800047c:	2120      	movs	r1, #32
 800047e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000482:	f000 fd0f 	bl	8000ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800048a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800048c:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <MX_GPIO_Init+0xc8>)
 800048e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	2300      	movs	r3, #0
 8000492:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000494:	f107 0314 	add.w	r3, r7, #20
 8000498:	4619      	mov	r1, r3
 800049a:	480d      	ldr	r0, [pc, #52]	; (80004d0 <MX_GPIO_Init+0xcc>)
 800049c:	f000 fb78 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004a0:	2320      	movs	r3, #32
 80004a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a4:	2301      	movs	r3, #1
 80004a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ac:	2300      	movs	r3, #0
 80004ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004b0:	f107 0314 	add.w	r3, r7, #20
 80004b4:	4619      	mov	r1, r3
 80004b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ba:	f000 fb69 	bl	8000b90 <HAL_GPIO_Init>

}
 80004be:	bf00      	nop
 80004c0:	3728      	adds	r7, #40	; 0x28
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000
 80004cc:	10210000 	.word	0x10210000
 80004d0:	48000800 	.word	0x48000800

080004d4 <ManageQueue01>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_ManageQueue01 */
void ManageQueue01(void *argument)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 80004da:	af00      	add	r7, sp, #0
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	char msg[1000];

	if (queue == NULL) {
 80004e0:	4b28      	ldr	r3, [pc, #160]	; (8000584 <ManageQueue01+0xb0>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d11e      	bne.n	8000526 <ManageQueue01+0x52>
		queue = osMessageQueueNew((uint32_t) 10, (uint32_t) 8, NULL);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2108      	movs	r1, #8
 80004ec:	200a      	movs	r0, #10
 80004ee:	f003 f8c5 	bl	800367c <osMessageQueueNew>
 80004f2:	4602      	mov	r2, r0
 80004f4:	4b23      	ldr	r3, [pc, #140]	; (8000584 <ManageQueue01+0xb0>)
 80004f6:	601a      	str	r2, [r3, #0]
		sprintf(msg, "Here INIT\n");
 80004f8:	f107 0308 	add.w	r3, r7, #8
 80004fc:	4a22      	ldr	r2, [pc, #136]	; (8000588 <ManageQueue01+0xb4>)
 80004fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000500:	c303      	stmia	r3!, {r0, r1}
 8000502:	801a      	strh	r2, [r3, #0]
 8000504:	3302      	adds	r3, #2
 8000506:	0c12      	lsrs	r2, r2, #16
 8000508:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800050a:	f107 0308 	add.w	r3, r7, #8
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff fe66 	bl	80001e0 <strlen>
 8000514:	4603      	mov	r3, r0
 8000516:	b29a      	uxth	r2, r3
 8000518:	f107 0108 	add.w	r1, r7, #8
 800051c:	f04f 33ff 	mov.w	r3, #4294967295
 8000520:	481a      	ldr	r0, [pc, #104]	; (800058c <ManageQueue01+0xb8>)
 8000522:	f002 fb97 	bl	8002c54 <HAL_UART_Transmit>
	}

	for (;;) {
		char *in = "Me";
 8000526:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <ManageQueue01+0xbc>)
 8000528:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
		char *in2 = "Yu";
 800052c:	4b19      	ldr	r3, [pc, #100]	; (8000594 <ManageQueue01+0xc0>)
 800052e:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0

		osMessageQueuePut(queue, in, (uint8_t) 0, (uint32_t) 0U);
 8000532:	4b14      	ldr	r3, [pc, #80]	; (8000584 <ManageQueue01+0xb0>)
 8000534:	6818      	ldr	r0, [r3, #0]
 8000536:	2300      	movs	r3, #0
 8000538:	2200      	movs	r2, #0
 800053a:	f8d7 13f4 	ldr.w	r1, [r7, #1012]	; 0x3f4
 800053e:	f003 f923 	bl	8003788 <osMessageQueuePut>
		osMessageQueuePut(queue, in2, (uint8_t) 0, (uint32_t) 0U);
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <ManageQueue01+0xb0>)
 8000544:	6818      	ldr	r0, [r3, #0]
 8000546:	2300      	movs	r3, #0
 8000548:	2200      	movs	r2, #0
 800054a:	f8d7 13f0 	ldr.w	r1, [r7, #1008]	; 0x3f0
 800054e:	f003 f91b 	bl	8003788 <osMessageQueuePut>

		sprintf(msg, "Here\n");
 8000552:	f107 0308 	add.w	r3, r7, #8
 8000556:	4a10      	ldr	r2, [pc, #64]	; (8000598 <ManageQueue01+0xc4>)
 8000558:	e892 0003 	ldmia.w	r2, {r0, r1}
 800055c:	6018      	str	r0, [r3, #0]
 800055e:	3304      	adds	r3, #4
 8000560:	8019      	strh	r1, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000562:	f107 0308 	add.w	r3, r7, #8
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff fe3a 	bl	80001e0 <strlen>
 800056c:	4603      	mov	r3, r0
 800056e:	b29a      	uxth	r2, r3
 8000570:	f107 0108 	add.w	r1, r7, #8
 8000574:	f04f 33ff 	mov.w	r3, #4294967295
 8000578:	4804      	ldr	r0, [pc, #16]	; (800058c <ManageQueue01+0xb8>)
 800057a:	f002 fb6b 	bl	8002c54 <HAL_UART_Transmit>

		osThreadYield();
 800057e:	f003 f84b 	bl	8003618 <osThreadYield>
	for (;;) {
 8000582:	e7d0      	b.n	8000526 <ManageQueue01+0x52>
 8000584:	20000090 	.word	0x20000090
 8000588:	08006a88 	.word	0x08006a88
 800058c:	200019ac 	.word	0x200019ac
 8000590:	08006a94 	.word	0x08006a94
 8000594:	08006a98 	.word	0x08006a98
 8000598:	08006a9c 	.word	0x08006a9c

0800059c <ManageQueue02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ManageQueue02 */
void ManageQueue02(void *argument)
{
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN ManageQueue02 */
	/* Infinite loop */
	char msg[1000];
	char out[100];

	if (queue == NULL) {
 80005a8:	4b33      	ldr	r3, [pc, #204]	; (8000678 <ManageQueue02+0xdc>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d10e      	bne.n	80005ce <ManageQueue02+0x32>
		queue = osMessageQueueNew((uint32_t) 10, (uint32_t) 8, NULL);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2108      	movs	r1, #8
 80005b4:	200a      	movs	r0, #10
 80005b6:	f003 f861 	bl	800367c <osMessageQueueNew>
 80005ba:	4602      	mov	r2, r0
 80005bc:	4b2e      	ldr	r3, [pc, #184]	; (8000678 <ManageQueue02+0xdc>)
 80005be:	601a      	str	r2, [r3, #0]
		sprintf(msg, "There INIT\n");
 80005c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005c4:	4a2d      	ldr	r2, [pc, #180]	; (800067c <ManageQueue02+0xe0>)
 80005c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80005c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80005cc:	e007      	b.n	80005de <ManageQueue02+0x42>
	} else {
		sprintf(msg, "There non-init\n");
 80005ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005d2:	4a2b      	ldr	r2, [pc, #172]	; (8000680 <ManageQueue02+0xe4>)
 80005d4:	461c      	mov	r4, r3
 80005d6:	4613      	mov	r3, r2
 80005d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80005de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff fdfc 	bl	80001e0 <strlen>
 80005e8:	4603      	mov	r3, r0
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	4823      	ldr	r0, [pc, #140]	; (8000684 <ManageQueue02+0xe8>)
 80005f6:	f002 fb2d 	bl	8002c54 <HAL_UART_Transmit>

	for (;;) {

		osMessageQueueGet(queue, out, NULL, 0U);
 80005fa:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <ManageQueue02+0xdc>)
 80005fc:	6818      	ldr	r0, [r3, #0]
 80005fe:	f107 010c 	add.w	r1, r7, #12
 8000602:	2300      	movs	r3, #0
 8000604:	2200      	movs	r2, #0
 8000606:	f003 f933 	bl	8003870 <osMessageQueueGet>
		sprintf(msg, "There is %s\n", out);
 800060a:	f107 020c 	add.w	r2, r7, #12
 800060e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000612:	491d      	ldr	r1, [pc, #116]	; (8000688 <ManageQueue02+0xec>)
 8000614:	4618      	mov	r0, r3
 8000616:	f005 fe27 	bl	8006268 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 800061a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff fdde 	bl	80001e0 <strlen>
 8000624:	4603      	mov	r3, r0
 8000626:	b29a      	uxth	r2, r3
 8000628:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800062c:	f04f 33ff 	mov.w	r3, #4294967295
 8000630:	4814      	ldr	r0, [pc, #80]	; (8000684 <ManageQueue02+0xe8>)
 8000632:	f002 fb0f 	bl	8002c54 <HAL_UART_Transmit>

		osMessageQueueGet(queue, out, NULL, 0U);
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <ManageQueue02+0xdc>)
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	f107 010c 	add.w	r1, r7, #12
 800063e:	2300      	movs	r3, #0
 8000640:	2200      	movs	r2, #0
 8000642:	f003 f915 	bl	8003870 <osMessageQueueGet>
		sprintf(msg, "There is %s\n", out);
 8000646:	f107 020c 	add.w	r2, r7, #12
 800064a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800064e:	490e      	ldr	r1, [pc, #56]	; (8000688 <ManageQueue02+0xec>)
 8000650:	4618      	mov	r0, r3
 8000652:	f005 fe09 	bl	8006268 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 8000656:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fdc0 	bl	80001e0 <strlen>
 8000660:	4603      	mov	r3, r0
 8000662:	b29a      	uxth	r2, r3
 8000664:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000668:	f04f 33ff 	mov.w	r3, #4294967295
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <ManageQueue02+0xe8>)
 800066e:	f002 faf1 	bl	8002c54 <HAL_UART_Transmit>

		osThreadYield();
 8000672:	f002 ffd1 	bl	8003618 <osThreadYield>
	for (;;) {
 8000676:	e7c0      	b.n	80005fa <ManageQueue02+0x5e>
 8000678:	20000090 	.word	0x20000090
 800067c:	08006aa4 	.word	0x08006aa4
 8000680:	08006ab0 	.word	0x08006ab0
 8000684:	200019ac 	.word	0x200019ac
 8000688:	08006ac0 	.word	0x08006ac0

0800068c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d101      	bne.n	80006a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800069e:	f000 f975 	bl	800098c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40001000 	.word	0x40001000

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006b6:	e7fe      	b.n	80006b6 <Error_Handler+0x6>

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <HAL_MspInit+0x4c>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	4a10      	ldr	r2, [pc, #64]	; (8000704 <HAL_MspInit+0x4c>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6193      	str	r3, [r2, #24]
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <HAL_MspInit+0x4c>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <HAL_MspInit+0x4c>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <HAL_MspInit+0x4c>)
 80006dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e0:	61d3      	str	r3, [r2, #28]
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <HAL_MspInit+0x4c>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	210f      	movs	r1, #15
 80006f2:	f06f 0001 	mvn.w	r0, #1
 80006f6:	f000 fa21 	bl	8000b3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000

08000708 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a17      	ldr	r2, [pc, #92]	; (8000784 <HAL_UART_MspInit+0x7c>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d128      	bne.n	800077c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <HAL_UART_MspInit+0x80>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	4a16      	ldr	r2, [pc, #88]	; (8000788 <HAL_UART_MspInit+0x80>)
 8000730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000734:	61d3      	str	r3, [r2, #28]
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <HAL_UART_MspInit+0x80>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <HAL_UART_MspInit+0x80>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	4a10      	ldr	r2, [pc, #64]	; (8000788 <HAL_UART_MspInit+0x80>)
 8000748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800074c:	6153      	str	r3, [r2, #20]
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <HAL_UART_MspInit+0x80>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800075a:	230c      	movs	r3, #12
 800075c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800076a:	2307      	movs	r3, #7
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4619      	mov	r1, r3
 8000774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000778:	f000 fa0a 	bl	8000b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800077c:	bf00      	nop
 800077e:	3728      	adds	r7, #40	; 0x28
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40004400 	.word	0x40004400
 8000788:	40021000 	.word	0x40021000

0800078c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	; 0x30
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800079c:	2200      	movs	r2, #0
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	2036      	movs	r0, #54	; 0x36
 80007a2:	f000 f9cb 	bl	8000b3c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80007a6:	2036      	movs	r0, #54	; 0x36
 80007a8:	f000 f9e4 	bl	8000b74 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <HAL_InitTick+0xa0>)
 80007ae:	69db      	ldr	r3, [r3, #28]
 80007b0:	4a1e      	ldr	r2, [pc, #120]	; (800082c <HAL_InitTick+0xa0>)
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	61d3      	str	r3, [r2, #28]
 80007b8:	4b1c      	ldr	r3, [pc, #112]	; (800082c <HAL_InitTick+0xa0>)
 80007ba:	69db      	ldr	r3, [r3, #28]
 80007bc:	f003 0310 	and.w	r3, r3, #16
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007c4:	f107 0210 	add.w	r2, r7, #16
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 fccc 	bl	800216c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80007d4:	f001 fc86 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 80007d8:	4603      	mov	r3, r0
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007e0:	4a13      	ldr	r2, [pc, #76]	; (8000830 <HAL_InitTick+0xa4>)
 80007e2:	fba2 2303 	umull	r2, r3, r2, r3
 80007e6:	0c9b      	lsrs	r3, r3, #18
 80007e8:	3b01      	subs	r3, #1
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <HAL_InitTick+0xa8>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	; (8000838 <HAL_InitTick+0xac>)
 80007f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <HAL_InitTick+0xa8>)
 80007f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007f8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80007fa:	4a0e      	ldr	r2, [pc, #56]	; (8000834 <HAL_InitTick+0xa8>)
 80007fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <HAL_InitTick+0xa8>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <HAL_InitTick+0xa8>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800080c:	4809      	ldr	r0, [pc, #36]	; (8000834 <HAL_InitTick+0xa8>)
 800080e:	f001 fefd 	bl	800260c <HAL_TIM_Base_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d104      	bne.n	8000822 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000818:	4806      	ldr	r0, [pc, #24]	; (8000834 <HAL_InitTick+0xa8>)
 800081a:	f001 ff59 	bl	80026d0 <HAL_TIM_Base_Start_IT>
 800081e:	4603      	mov	r3, r0
 8000820:	e000      	b.n	8000824 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
}
 8000824:	4618      	mov	r0, r3
 8000826:	3730      	adds	r7, #48	; 0x30
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40021000 	.word	0x40021000
 8000830:	431bde83 	.word	0x431bde83
 8000834:	20001a34 	.word	0x20001a34
 8000838:	40001000 	.word	0x40001000

0800083c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <NMI_Handler+0x4>

08000842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <HardFault_Handler+0x4>

08000848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <MemManage_Handler+0x4>

0800084e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <BusFault_Handler+0x4>

08000854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <UsageFault_Handler+0x4>

0800085a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800086c:	4802      	ldr	r0, [pc, #8]	; (8000878 <TIM6_DAC_IRQHandler+0x10>)
 800086e:	f001 ff9f 	bl	80027b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20001a34 	.word	0x20001a34

0800087c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000884:	4a14      	ldr	r2, [pc, #80]	; (80008d8 <_sbrk+0x5c>)
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <_sbrk+0x60>)
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000890:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <_sbrk+0x64>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d102      	bne.n	800089e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <_sbrk+0x64>)
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <_sbrk+0x68>)
 800089c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <_sbrk+0x64>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d207      	bcs.n	80008bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008ac:	f005 fc9e 	bl	80061ec <__errno>
 80008b0:	4602      	mov	r2, r0
 80008b2:	230c      	movs	r3, #12
 80008b4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	e009      	b.n	80008d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <_sbrk+0x64>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008c2:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <_sbrk+0x64>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4413      	add	r3, r2
 80008ca:	4a05      	ldr	r2, [pc, #20]	; (80008e0 <_sbrk+0x64>)
 80008cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ce:	68fb      	ldr	r3, [r7, #12]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20010000 	.word	0x20010000
 80008dc:	00000400 	.word	0x00000400
 80008e0:	20000094 	.word	0x20000094
 80008e4:	20001ac8 	.word	0x20001ac8

080008e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <SystemInit+0x20>)
 80008ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008f2:	4a05      	ldr	r2, [pc, #20]	; (8000908 <SystemInit+0x20>)
 80008f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800090c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000944 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000910:	480d      	ldr	r0, [pc, #52]	; (8000948 <LoopForever+0x6>)
  ldr r1, =_edata
 8000912:	490e      	ldr	r1, [pc, #56]	; (800094c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000914:	4a0e      	ldr	r2, [pc, #56]	; (8000950 <LoopForever+0xe>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000918:	e002      	b.n	8000920 <LoopCopyDataInit>

0800091a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800091c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091e:	3304      	adds	r3, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000924:	d3f9      	bcc.n	800091a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000926:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000928:	4c0b      	ldr	r4, [pc, #44]	; (8000958 <LoopForever+0x16>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800092c:	e001      	b.n	8000932 <LoopFillZerobss>

0800092e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000930:	3204      	adds	r2, #4

08000932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000934:	d3fb      	bcc.n	800092e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000936:	f7ff ffd7 	bl	80008e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800093a:	f005 fc5d 	bl	80061f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800093e:	f7ff fca7 	bl	8000290 <main>

08000942 <LoopForever>:

LoopForever:
    b LoopForever
 8000942:	e7fe      	b.n	8000942 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000944:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800094c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000950:	08006ba4 	.word	0x08006ba4
  ldr r2, =_sbss
 8000954:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000958:	20001ac8 	.word	0x20001ac8

0800095c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC1_2_IRQHandler>
	...

08000960 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <HAL_Init+0x28>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a07      	ldr	r2, [pc, #28]	; (8000988 <HAL_Init+0x28>)
 800096a:	f043 0310 	orr.w	r3, r3, #16
 800096e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000970:	2003      	movs	r0, #3
 8000972:	f000 f8d8 	bl	8000b26 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000976:	2000      	movs	r0, #0
 8000978:	f7ff ff08 	bl	800078c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800097c:	f7ff fe9c 	bl	80006b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40022000 	.word	0x40022000

0800098c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_IncTick+0x20>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_IncTick+0x24>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4413      	add	r3, r2
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <HAL_IncTick+0x24>)
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000008 	.word	0x20000008
 80009b0:	20001a80 	.word	0x20001a80

080009b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <HAL_GetTick+0x14>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20001a80 	.word	0x20001a80

080009cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e8:	4013      	ands	r3, r2
 80009ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fe:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	60d3      	str	r3, [r2, #12]
}
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <__NVIC_GetPriorityGrouping+0x18>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	f003 0307 	and.w	r3, r3, #7
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	db0b      	blt.n	8000a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	f003 021f 	and.w	r2, r3, #31
 8000a48:	4907      	ldr	r1, [pc, #28]	; (8000a68 <__NVIC_EnableIRQ+0x38>)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	095b      	lsrs	r3, r3, #5
 8000a50:	2001      	movs	r0, #1
 8000a52:	fa00 f202 	lsl.w	r2, r0, r2
 8000a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000e100 	.word	0xe000e100

08000a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	6039      	str	r1, [r7, #0]
 8000a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	db0a      	blt.n	8000a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	490c      	ldr	r1, [pc, #48]	; (8000ab8 <__NVIC_SetPriority+0x4c>)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	0112      	lsls	r2, r2, #4
 8000a8c:	b2d2      	uxtb	r2, r2
 8000a8e:	440b      	add	r3, r1
 8000a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a94:	e00a      	b.n	8000aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4908      	ldr	r1, [pc, #32]	; (8000abc <__NVIC_SetPriority+0x50>)
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	f003 030f 	and.w	r3, r3, #15
 8000aa2:	3b04      	subs	r3, #4
 8000aa4:	0112      	lsls	r2, r2, #4
 8000aa6:	b2d2      	uxtb	r2, r2
 8000aa8:	440b      	add	r3, r1
 8000aaa:	761a      	strb	r2, [r3, #24]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000e100 	.word	0xe000e100
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b089      	sub	sp, #36	; 0x24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	f1c3 0307 	rsb	r3, r3, #7
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	bf28      	it	cs
 8000ade:	2304      	movcs	r3, #4
 8000ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	2b06      	cmp	r3, #6
 8000ae8:	d902      	bls.n	8000af0 <NVIC_EncodePriority+0x30>
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3b03      	subs	r3, #3
 8000aee:	e000      	b.n	8000af2 <NVIC_EncodePriority+0x32>
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	f04f 32ff 	mov.w	r2, #4294967295
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	43da      	mvns	r2, r3
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	401a      	ands	r2, r3
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b08:	f04f 31ff 	mov.w	r1, #4294967295
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b12:	43d9      	mvns	r1, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	4313      	orrs	r3, r2
         );
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3724      	adds	r7, #36	; 0x24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff ff4c 	bl	80009cc <__NVIC_SetPriorityGrouping>
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
 8000b48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b4e:	f7ff ff61 	bl	8000a14 <__NVIC_GetPriorityGrouping>
 8000b52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	68b9      	ldr	r1, [r7, #8]
 8000b58:	6978      	ldr	r0, [r7, #20]
 8000b5a:	f7ff ffb1 	bl	8000ac0 <NVIC_EncodePriority>
 8000b5e:	4602      	mov	r2, r0
 8000b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b64:	4611      	mov	r1, r2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff ff80 	bl	8000a6c <__NVIC_SetPriority>
}
 8000b6c:	bf00      	nop
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff ff54 	bl	8000a30 <__NVIC_EnableIRQ>
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b087      	sub	sp, #28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b9e:	e160      	b.n	8000e62 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bac:	4013      	ands	r3, r2
 8000bae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f000 8152 	beq.w	8000e5c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d00b      	beq.n	8000bd8 <HAL_GPIO_Init+0x48>
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d007      	beq.n	8000bd8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bcc:	2b11      	cmp	r3, #17
 8000bce:	d003      	beq.n	8000bd8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	2b12      	cmp	r3, #18
 8000bd6:	d130      	bne.n	8000c3a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	2203      	movs	r2, #3
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	68da      	ldr	r2, [r3, #12]
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c0e:	2201      	movs	r2, #1
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43db      	mvns	r3, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	091b      	lsrs	r3, r3, #4
 8000c24:	f003 0201 	and.w	r2, r3, #1
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	2203      	movs	r2, #3
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	689a      	ldr	r2, [r3, #8]
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d003      	beq.n	8000c7a <HAL_GPIO_Init+0xea>
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	2b12      	cmp	r3, #18
 8000c78:	d123      	bne.n	8000cc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	08da      	lsrs	r2, r3, #3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3208      	adds	r2, #8
 8000c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	220f      	movs	r2, #15
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	691a      	ldr	r2, [r3, #16]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	f003 0307 	and.w	r3, r3, #7
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	08da      	lsrs	r2, r3, #3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3208      	adds	r2, #8
 8000cbc:	6939      	ldr	r1, [r7, #16]
 8000cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	2203      	movs	r2, #3
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 0203 	and.w	r2, r3, #3
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f000 80ac 	beq.w	8000e5c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d04:	4b5e      	ldr	r3, [pc, #376]	; (8000e80 <HAL_GPIO_Init+0x2f0>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a5d      	ldr	r2, [pc, #372]	; (8000e80 <HAL_GPIO_Init+0x2f0>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b5b      	ldr	r3, [pc, #364]	; (8000e80 <HAL_GPIO_Init+0x2f0>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d1c:	4a59      	ldr	r2, [pc, #356]	; (8000e84 <HAL_GPIO_Init+0x2f4>)
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	089b      	lsrs	r3, r3, #2
 8000d22:	3302      	adds	r3, #2
 8000d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	220f      	movs	r2, #15
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d46:	d025      	beq.n	8000d94 <HAL_GPIO_Init+0x204>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a4f      	ldr	r2, [pc, #316]	; (8000e88 <HAL_GPIO_Init+0x2f8>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d01f      	beq.n	8000d90 <HAL_GPIO_Init+0x200>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a4e      	ldr	r2, [pc, #312]	; (8000e8c <HAL_GPIO_Init+0x2fc>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d019      	beq.n	8000d8c <HAL_GPIO_Init+0x1fc>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a4d      	ldr	r2, [pc, #308]	; (8000e90 <HAL_GPIO_Init+0x300>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d013      	beq.n	8000d88 <HAL_GPIO_Init+0x1f8>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a4c      	ldr	r2, [pc, #304]	; (8000e94 <HAL_GPIO_Init+0x304>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d00d      	beq.n	8000d84 <HAL_GPIO_Init+0x1f4>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a4b      	ldr	r2, [pc, #300]	; (8000e98 <HAL_GPIO_Init+0x308>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d007      	beq.n	8000d80 <HAL_GPIO_Init+0x1f0>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a4a      	ldr	r2, [pc, #296]	; (8000e9c <HAL_GPIO_Init+0x30c>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d101      	bne.n	8000d7c <HAL_GPIO_Init+0x1ec>
 8000d78:	2306      	movs	r3, #6
 8000d7a:	e00c      	b.n	8000d96 <HAL_GPIO_Init+0x206>
 8000d7c:	2307      	movs	r3, #7
 8000d7e:	e00a      	b.n	8000d96 <HAL_GPIO_Init+0x206>
 8000d80:	2305      	movs	r3, #5
 8000d82:	e008      	b.n	8000d96 <HAL_GPIO_Init+0x206>
 8000d84:	2304      	movs	r3, #4
 8000d86:	e006      	b.n	8000d96 <HAL_GPIO_Init+0x206>
 8000d88:	2303      	movs	r3, #3
 8000d8a:	e004      	b.n	8000d96 <HAL_GPIO_Init+0x206>
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	e002      	b.n	8000d96 <HAL_GPIO_Init+0x206>
 8000d90:	2301      	movs	r3, #1
 8000d92:	e000      	b.n	8000d96 <HAL_GPIO_Init+0x206>
 8000d94:	2300      	movs	r3, #0
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	f002 0203 	and.w	r2, r2, #3
 8000d9c:	0092      	lsls	r2, r2, #2
 8000d9e:	4093      	lsls	r3, r2
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000da6:	4937      	ldr	r1, [pc, #220]	; (8000e84 <HAL_GPIO_Init+0x2f4>)
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	3302      	adds	r3, #2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000db4:	4b3a      	ldr	r3, [pc, #232]	; (8000ea0 <HAL_GPIO_Init+0x310>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dd8:	4a31      	ldr	r2, [pc, #196]	; (8000ea0 <HAL_GPIO_Init+0x310>)
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000dde:	4b30      	ldr	r3, [pc, #192]	; (8000ea0 <HAL_GPIO_Init+0x310>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e02:	4a27      	ldr	r2, [pc, #156]	; (8000ea0 <HAL_GPIO_Init+0x310>)
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e08:	4b25      	ldr	r3, [pc, #148]	; (8000ea0 <HAL_GPIO_Init+0x310>)
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	43db      	mvns	r3, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d003      	beq.n	8000e2c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e2c:	4a1c      	ldr	r2, [pc, #112]	; (8000ea0 <HAL_GPIO_Init+0x310>)
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e32:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <HAL_GPIO_Init+0x310>)
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <HAL_GPIO_Init+0x310>)
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	fa22 f303 	lsr.w	r3, r2, r3
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f47f ae97 	bne.w	8000ba0 <HAL_GPIO_Init+0x10>
  }
}
 8000e72:	bf00      	nop
 8000e74:	371c      	adds	r7, #28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40010000 	.word	0x40010000
 8000e88:	48000400 	.word	0x48000400
 8000e8c:	48000800 	.word	0x48000800
 8000e90:	48000c00 	.word	0x48000c00
 8000e94:	48001000 	.word	0x48001000
 8000e98:	48001400 	.word	0x48001400
 8000e9c:	48001800 	.word	0x48001800
 8000ea0:	40010400 	.word	0x40010400

08000ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000eb4:	787b      	ldrb	r3, [r7, #1]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eba:	887a      	ldrh	r2, [r7, #2]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ec0:	e002      	b.n	8000ec8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ec2:	887a      	ldrh	r2, [r7, #2]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d102      	bne.n	8000eee <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	f000 bf01 	b.w	8001cf0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 8160 	beq.w	80011be <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000efe:	4bae      	ldr	r3, [pc, #696]	; (80011b8 <HAL_RCC_OscConfig+0x2e4>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 030c 	and.w	r3, r3, #12
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	d00c      	beq.n	8000f24 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f0a:	4bab      	ldr	r3, [pc, #684]	; (80011b8 <HAL_RCC_OscConfig+0x2e4>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 030c 	and.w	r3, r3, #12
 8000f12:	2b08      	cmp	r3, #8
 8000f14:	d159      	bne.n	8000fca <HAL_RCC_OscConfig+0xf6>
 8000f16:	4ba8      	ldr	r3, [pc, #672]	; (80011b8 <HAL_RCC_OscConfig+0x2e4>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f22:	d152      	bne.n	8000fca <HAL_RCC_OscConfig+0xf6>
 8000f24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f28:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000f30:	fa93 f3a3 	rbit	r3, r3
 8000f34:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f38:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3c:	fab3 f383 	clz	r3, r3
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	095b      	lsrs	r3, r3, #5
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d102      	bne.n	8000f56 <HAL_RCC_OscConfig+0x82>
 8000f50:	4b99      	ldr	r3, [pc, #612]	; (80011b8 <HAL_RCC_OscConfig+0x2e4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	e015      	b.n	8000f82 <HAL_RCC_OscConfig+0xae>
 8000f56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f5a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000f62:	fa93 f3a3 	rbit	r3, r3
 8000f66:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000f6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f6e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f72:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000f76:	fa93 f3a3 	rbit	r3, r3
 8000f7a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f7e:	4b8e      	ldr	r3, [pc, #568]	; (80011b8 <HAL_RCC_OscConfig+0x2e4>)
 8000f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f86:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000f8a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000f8e:	fa92 f2a2 	rbit	r2, r2
 8000f92:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000f96:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f9a:	fab2 f282 	clz	r2, r2
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	f042 0220 	orr.w	r2, r2, #32
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	f002 021f 	and.w	r2, r2, #31
 8000faa:	2101      	movs	r1, #1
 8000fac:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 8102 	beq.w	80011bc <HAL_RCC_OscConfig+0x2e8>
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f040 80fc 	bne.w	80011bc <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	f000 be93 	b.w	8001cf0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd4:	d106      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x110>
 8000fd6:	4b78      	ldr	r3, [pc, #480]	; (80011b8 <HAL_RCC_OscConfig+0x2e4>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a77      	ldr	r2, [pc, #476]	; (80011b8 <HAL_RCC_OscConfig+0x2e4>)
 8000fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	e030      	b.n	8001046 <HAL_RCC_OscConfig+0x172>
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10c      	bne.n	8001008 <HAL_RCC_OscConfig+0x134>
 8000fee:	4b72      	ldr	r3, [pc, #456]	; (80011b8 <HAL_RCC_OscConfig+0x2e4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a71      	ldr	r2, [pc, #452]	; (80011b8 <HAL_RCC_OscConfig+0x2e4>)
 8000ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	4b6f      	ldr	r3, [pc, #444]	; (80011b8 <HAL_RCC_OscConfig+0x2e4>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a6e      	ldr	r2, [pc, #440]	; (80011b8 <HAL_RCC_OscConfig+0x2e4>)
 8001000:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	e01e      	b.n	8001046 <HAL_RCC_OscConfig+0x172>
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001012:	d10c      	bne.n	800102e <HAL_RCC_OscConfig+0x15a>
 8001014:	4b68      	ldr	r3, [pc, #416]	; (80011b8 <HAL_RCC_OscConfig+0x2e4>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a67      	ldr	r2, [pc, #412]	; (80011b8 <HAL_RCC_OscConfig+0x2e4>)
 800101a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b65      	ldr	r3, [pc, #404]	; (80011b8 <HAL_RCC_OscConfig+0x2e4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a64      	ldr	r2, [pc, #400]	; (80011b8 <HAL_RCC_OscConfig+0x2e4>)
 8001026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	e00b      	b.n	8001046 <HAL_RCC_OscConfig+0x172>
 800102e:	4b62      	ldr	r3, [pc, #392]	; (80011b8 <HAL_RCC_OscConfig+0x2e4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a61      	ldr	r2, [pc, #388]	; (80011b8 <HAL_RCC_OscConfig+0x2e4>)
 8001034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	4b5f      	ldr	r3, [pc, #380]	; (80011b8 <HAL_RCC_OscConfig+0x2e4>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a5e      	ldr	r2, [pc, #376]	; (80011b8 <HAL_RCC_OscConfig+0x2e4>)
 8001040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001044:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d059      	beq.n	8001104 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff fcb0 	bl	80009b4 <HAL_GetTick>
 8001054:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001058:	e00a      	b.n	8001070 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800105a:	f7ff fcab 	bl	80009b4 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b64      	cmp	r3, #100	; 0x64
 8001068:	d902      	bls.n	8001070 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	f000 be40 	b.w	8001cf0 <HAL_RCC_OscConfig+0xe1c>
 8001070:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001074:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001078:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800107c:	fa93 f3a3 	rbit	r3, r3
 8001080:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001084:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001088:	fab3 f383 	clz	r3, r3
 800108c:	b2db      	uxtb	r3, r3
 800108e:	095b      	lsrs	r3, r3, #5
 8001090:	b2db      	uxtb	r3, r3
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b01      	cmp	r3, #1
 800109a:	d102      	bne.n	80010a2 <HAL_RCC_OscConfig+0x1ce>
 800109c:	4b46      	ldr	r3, [pc, #280]	; (80011b8 <HAL_RCC_OscConfig+0x2e4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	e015      	b.n	80010ce <HAL_RCC_OscConfig+0x1fa>
 80010a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010a6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010aa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80010ae:	fa93 f3a3 	rbit	r3, r3
 80010b2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80010b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ba:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010be:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80010c2:	fa93 f3a3 	rbit	r3, r3
 80010c6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80010ca:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <HAL_RCC_OscConfig+0x2e4>)
 80010cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010d2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80010d6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80010da:	fa92 f2a2 	rbit	r2, r2
 80010de:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80010e2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80010e6:	fab2 f282 	clz	r2, r2
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	f042 0220 	orr.w	r2, r2, #32
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	f002 021f 	and.w	r2, r2, #31
 80010f6:	2101      	movs	r1, #1
 80010f8:	fa01 f202 	lsl.w	r2, r1, r2
 80010fc:	4013      	ands	r3, r2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0ab      	beq.n	800105a <HAL_RCC_OscConfig+0x186>
 8001102:	e05c      	b.n	80011be <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001104:	f7ff fc56 	bl	80009b4 <HAL_GetTick>
 8001108:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800110c:	e00a      	b.n	8001124 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800110e:	f7ff fc51 	bl	80009b4 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b64      	cmp	r3, #100	; 0x64
 800111c:	d902      	bls.n	8001124 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	f000 bde6 	b.w	8001cf0 <HAL_RCC_OscConfig+0xe1c>
 8001124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001128:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001130:	fa93 f3a3 	rbit	r3, r3
 8001134:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001138:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800113c:	fab3 f383 	clz	r3, r3
 8001140:	b2db      	uxtb	r3, r3
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	b2db      	uxtb	r3, r3
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b01      	cmp	r3, #1
 800114e:	d102      	bne.n	8001156 <HAL_RCC_OscConfig+0x282>
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <HAL_RCC_OscConfig+0x2e4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	e015      	b.n	8001182 <HAL_RCC_OscConfig+0x2ae>
 8001156:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800115a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001162:	fa93 f3a3 	rbit	r3, r3
 8001166:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800116a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800116e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001172:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001176:	fa93 f3a3 	rbit	r3, r3
 800117a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <HAL_RCC_OscConfig+0x2e4>)
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001182:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001186:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800118a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800118e:	fa92 f2a2 	rbit	r2, r2
 8001192:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001196:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800119a:	fab2 f282 	clz	r2, r2
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	f042 0220 	orr.w	r2, r2, #32
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	f002 021f 	and.w	r2, r2, #31
 80011aa:	2101      	movs	r1, #1
 80011ac:	fa01 f202 	lsl.w	r2, r1, r2
 80011b0:	4013      	ands	r3, r2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1ab      	bne.n	800110e <HAL_RCC_OscConfig+0x23a>
 80011b6:	e002      	b.n	80011be <HAL_RCC_OscConfig+0x2ea>
 80011b8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 8170 	beq.w	80014ae <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011ce:	4bd0      	ldr	r3, [pc, #832]	; (8001510 <HAL_RCC_OscConfig+0x63c>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 030c 	and.w	r3, r3, #12
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00c      	beq.n	80011f4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011da:	4bcd      	ldr	r3, [pc, #820]	; (8001510 <HAL_RCC_OscConfig+0x63c>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 030c 	and.w	r3, r3, #12
 80011e2:	2b08      	cmp	r3, #8
 80011e4:	d16d      	bne.n	80012c2 <HAL_RCC_OscConfig+0x3ee>
 80011e6:	4bca      	ldr	r3, [pc, #808]	; (8001510 <HAL_RCC_OscConfig+0x63c>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80011ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011f2:	d166      	bne.n	80012c2 <HAL_RCC_OscConfig+0x3ee>
 80011f4:	2302      	movs	r3, #2
 80011f6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fa:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80011fe:	fa93 f3a3 	rbit	r3, r3
 8001202:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001206:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120a:	fab3 f383 	clz	r3, r3
 800120e:	b2db      	uxtb	r3, r3
 8001210:	095b      	lsrs	r3, r3, #5
 8001212:	b2db      	uxtb	r3, r3
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b01      	cmp	r3, #1
 800121c:	d102      	bne.n	8001224 <HAL_RCC_OscConfig+0x350>
 800121e:	4bbc      	ldr	r3, [pc, #752]	; (8001510 <HAL_RCC_OscConfig+0x63c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	e013      	b.n	800124c <HAL_RCC_OscConfig+0x378>
 8001224:	2302      	movs	r3, #2
 8001226:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800122e:	fa93 f3a3 	rbit	r3, r3
 8001232:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001236:	2302      	movs	r3, #2
 8001238:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800123c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001240:	fa93 f3a3 	rbit	r3, r3
 8001244:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001248:	4bb1      	ldr	r3, [pc, #708]	; (8001510 <HAL_RCC_OscConfig+0x63c>)
 800124a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124c:	2202      	movs	r2, #2
 800124e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001252:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001256:	fa92 f2a2 	rbit	r2, r2
 800125a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800125e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001262:	fab2 f282 	clz	r2, r2
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	f042 0220 	orr.w	r2, r2, #32
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	f002 021f 	and.w	r2, r2, #31
 8001272:	2101      	movs	r1, #1
 8001274:	fa01 f202 	lsl.w	r2, r1, r2
 8001278:	4013      	ands	r3, r2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d007      	beq.n	800128e <HAL_RCC_OscConfig+0x3ba>
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d002      	beq.n	800128e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	f000 bd31 	b.w	8001cf0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128e:	4ba0      	ldr	r3, [pc, #640]	; (8001510 <HAL_RCC_OscConfig+0x63c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	21f8      	movs	r1, #248	; 0xf8
 800129e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80012a6:	fa91 f1a1 	rbit	r1, r1
 80012aa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80012ae:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80012b2:	fab1 f181 	clz	r1, r1
 80012b6:	b2c9      	uxtb	r1, r1
 80012b8:	408b      	lsls	r3, r1
 80012ba:	4995      	ldr	r1, [pc, #596]	; (8001510 <HAL_RCC_OscConfig+0x63c>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c0:	e0f5      	b.n	80014ae <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 8085 	beq.w	80013d8 <HAL_RCC_OscConfig+0x504>
 80012ce:	2301      	movs	r3, #1
 80012d0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80012d8:	fa93 f3a3 	rbit	r3, r3
 80012dc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80012e0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e4:	fab3 f383 	clz	r3, r3
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	461a      	mov	r2, r3
 80012f6:	2301      	movs	r3, #1
 80012f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fa:	f7ff fb5b 	bl	80009b4 <HAL_GetTick>
 80012fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001302:	e00a      	b.n	800131a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001304:	f7ff fb56 	bl	80009b4 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d902      	bls.n	800131a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	f000 bceb 	b.w	8001cf0 <HAL_RCC_OscConfig+0xe1c>
 800131a:	2302      	movs	r3, #2
 800131c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001320:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001324:	fa93 f3a3 	rbit	r3, r3
 8001328:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800132c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001330:	fab3 f383 	clz	r3, r3
 8001334:	b2db      	uxtb	r3, r3
 8001336:	095b      	lsrs	r3, r3, #5
 8001338:	b2db      	uxtb	r3, r3
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b01      	cmp	r3, #1
 8001342:	d102      	bne.n	800134a <HAL_RCC_OscConfig+0x476>
 8001344:	4b72      	ldr	r3, [pc, #456]	; (8001510 <HAL_RCC_OscConfig+0x63c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	e013      	b.n	8001372 <HAL_RCC_OscConfig+0x49e>
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001350:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001354:	fa93 f3a3 	rbit	r3, r3
 8001358:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800135c:	2302      	movs	r3, #2
 800135e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001362:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001366:	fa93 f3a3 	rbit	r3, r3
 800136a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800136e:	4b68      	ldr	r3, [pc, #416]	; (8001510 <HAL_RCC_OscConfig+0x63c>)
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	2202      	movs	r2, #2
 8001374:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001378:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800137c:	fa92 f2a2 	rbit	r2, r2
 8001380:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001384:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001388:	fab2 f282 	clz	r2, r2
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	f042 0220 	orr.w	r2, r2, #32
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	f002 021f 	and.w	r2, r2, #31
 8001398:	2101      	movs	r1, #1
 800139a:	fa01 f202 	lsl.w	r2, r1, r2
 800139e:	4013      	ands	r3, r2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0af      	beq.n	8001304 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a4:	4b5a      	ldr	r3, [pc, #360]	; (8001510 <HAL_RCC_OscConfig+0x63c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	21f8      	movs	r1, #248	; 0xf8
 80013b4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80013bc:	fa91 f1a1 	rbit	r1, r1
 80013c0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80013c4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80013c8:	fab1 f181 	clz	r1, r1
 80013cc:	b2c9      	uxtb	r1, r1
 80013ce:	408b      	lsls	r3, r1
 80013d0:	494f      	ldr	r1, [pc, #316]	; (8001510 <HAL_RCC_OscConfig+0x63c>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]
 80013d6:	e06a      	b.n	80014ae <HAL_RCC_OscConfig+0x5da>
 80013d8:	2301      	movs	r3, #1
 80013da:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013de:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80013e2:	fa93 f3a3 	rbit	r3, r3
 80013e6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80013ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ee:	fab3 f383 	clz	r3, r3
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	461a      	mov	r2, r3
 8001400:	2300      	movs	r3, #0
 8001402:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff fad6 	bl	80009b4 <HAL_GetTick>
 8001408:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140c:	e00a      	b.n	8001424 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140e:	f7ff fad1 	bl	80009b4 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d902      	bls.n	8001424 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	f000 bc66 	b.w	8001cf0 <HAL_RCC_OscConfig+0xe1c>
 8001424:	2302      	movs	r3, #2
 8001426:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800142e:	fa93 f3a3 	rbit	r3, r3
 8001432:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001436:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143a:	fab3 f383 	clz	r3, r3
 800143e:	b2db      	uxtb	r3, r3
 8001440:	095b      	lsrs	r3, r3, #5
 8001442:	b2db      	uxtb	r3, r3
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b01      	cmp	r3, #1
 800144c:	d102      	bne.n	8001454 <HAL_RCC_OscConfig+0x580>
 800144e:	4b30      	ldr	r3, [pc, #192]	; (8001510 <HAL_RCC_OscConfig+0x63c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	e013      	b.n	800147c <HAL_RCC_OscConfig+0x5a8>
 8001454:	2302      	movs	r3, #2
 8001456:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800145e:	fa93 f3a3 	rbit	r3, r3
 8001462:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001466:	2302      	movs	r3, #2
 8001468:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800146c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001470:	fa93 f3a3 	rbit	r3, r3
 8001474:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <HAL_RCC_OscConfig+0x63c>)
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	2202      	movs	r2, #2
 800147e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001482:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001486:	fa92 f2a2 	rbit	r2, r2
 800148a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800148e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001492:	fab2 f282 	clz	r2, r2
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	f042 0220 	orr.w	r2, r2, #32
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	f002 021f 	and.w	r2, r2, #31
 80014a2:	2101      	movs	r1, #1
 80014a4:	fa01 f202 	lsl.w	r2, r1, r2
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1af      	bne.n	800140e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 80da 	beq.w	8001672 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d069      	beq.n	800159c <HAL_RCC_OscConfig+0x6c8>
 80014c8:	2301      	movs	r3, #1
 80014ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014d2:	fa93 f3a3 	rbit	r3, r3
 80014d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80014da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014de:	fab3 f383 	clz	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_RCC_OscConfig+0x640>)
 80014e8:	4413      	add	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	461a      	mov	r2, r3
 80014ee:	2301      	movs	r3, #1
 80014f0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f2:	f7ff fa5f 	bl	80009b4 <HAL_GetTick>
 80014f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fa:	e00d      	b.n	8001518 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014fc:	f7ff fa5a 	bl	80009b4 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d905      	bls.n	8001518 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e3ef      	b.n	8001cf0 <HAL_RCC_OscConfig+0xe1c>
 8001510:	40021000 	.word	0x40021000
 8001514:	10908120 	.word	0x10908120
 8001518:	2302      	movs	r3, #2
 800151a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001522:	fa93 f2a3 	rbit	r2, r3
 8001526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001530:	2202      	movs	r2, #2
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	fa93 f2a3 	rbit	r2, r3
 800153e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001548:	2202      	movs	r2, #2
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	fa93 f2a3 	rbit	r2, r3
 8001556:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800155a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155c:	4ba4      	ldr	r3, [pc, #656]	; (80017f0 <HAL_RCC_OscConfig+0x91c>)
 800155e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001560:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001564:	2102      	movs	r1, #2
 8001566:	6019      	str	r1, [r3, #0]
 8001568:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	fa93 f1a3 	rbit	r1, r3
 8001572:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001576:	6019      	str	r1, [r3, #0]
  return result;
 8001578:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	fab3 f383 	clz	r3, r3
 8001582:	b2db      	uxtb	r3, r3
 8001584:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001588:	b2db      	uxtb	r3, r3
 800158a:	f003 031f 	and.w	r3, r3, #31
 800158e:	2101      	movs	r1, #1
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	4013      	ands	r3, r2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0b0      	beq.n	80014fc <HAL_RCC_OscConfig+0x628>
 800159a:	e06a      	b.n	8001672 <HAL_RCC_OscConfig+0x79e>
 800159c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80015a0:	2201      	movs	r2, #1
 80015a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	fa93 f2a3 	rbit	r2, r3
 80015ae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80015b2:	601a      	str	r2, [r3, #0]
  return result;
 80015b4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80015b8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ba:	fab3 f383 	clz	r3, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b8c      	ldr	r3, [pc, #560]	; (80017f4 <HAL_RCC_OscConfig+0x920>)
 80015c4:	4413      	add	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	461a      	mov	r2, r3
 80015ca:	2300      	movs	r3, #0
 80015cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ce:	f7ff f9f1 	bl	80009b4 <HAL_GetTick>
 80015d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d6:	e009      	b.n	80015ec <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d8:	f7ff f9ec 	bl	80009b4 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e381      	b.n	8001cf0 <HAL_RCC_OscConfig+0xe1c>
 80015ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015f0:	2202      	movs	r2, #2
 80015f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	fa93 f2a3 	rbit	r2, r3
 80015fe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001608:	2202      	movs	r2, #2
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	fa93 f2a3 	rbit	r2, r3
 8001616:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001620:	2202      	movs	r2, #2
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	fa93 f2a3 	rbit	r2, r3
 800162e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001632:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001634:	4b6e      	ldr	r3, [pc, #440]	; (80017f0 <HAL_RCC_OscConfig+0x91c>)
 8001636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001638:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800163c:	2102      	movs	r1, #2
 800163e:	6019      	str	r1, [r3, #0]
 8001640:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	fa93 f1a3 	rbit	r1, r3
 800164a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800164e:	6019      	str	r1, [r3, #0]
  return result;
 8001650:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	fab3 f383 	clz	r3, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001660:	b2db      	uxtb	r3, r3
 8001662:	f003 031f 	and.w	r3, r3, #31
 8001666:	2101      	movs	r1, #1
 8001668:	fa01 f303 	lsl.w	r3, r1, r3
 800166c:	4013      	ands	r3, r2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1b2      	bne.n	80015d8 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 8157 	beq.w	8001930 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001688:	4b59      	ldr	r3, [pc, #356]	; (80017f0 <HAL_RCC_OscConfig+0x91c>)
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d112      	bne.n	80016ba <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001694:	4b56      	ldr	r3, [pc, #344]	; (80017f0 <HAL_RCC_OscConfig+0x91c>)
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	4a55      	ldr	r2, [pc, #340]	; (80017f0 <HAL_RCC_OscConfig+0x91c>)
 800169a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169e:	61d3      	str	r3, [r2, #28]
 80016a0:	4b53      	ldr	r3, [pc, #332]	; (80017f0 <HAL_RCC_OscConfig+0x91c>)
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016b4:	2301      	movs	r3, #1
 80016b6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ba:	4b4f      	ldr	r3, [pc, #316]	; (80017f8 <HAL_RCC_OscConfig+0x924>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d11a      	bne.n	80016fc <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c6:	4b4c      	ldr	r3, [pc, #304]	; (80017f8 <HAL_RCC_OscConfig+0x924>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a4b      	ldr	r2, [pc, #300]	; (80017f8 <HAL_RCC_OscConfig+0x924>)
 80016cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d2:	f7ff f96f 	bl	80009b4 <HAL_GetTick>
 80016d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016da:	e009      	b.n	80016f0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016dc:	f7ff f96a 	bl	80009b4 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b64      	cmp	r3, #100	; 0x64
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e2ff      	b.n	8001cf0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f0:	4b41      	ldr	r3, [pc, #260]	; (80017f8 <HAL_RCC_OscConfig+0x924>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0ef      	beq.n	80016dc <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d106      	bne.n	8001714 <HAL_RCC_OscConfig+0x840>
 8001706:	4b3a      	ldr	r3, [pc, #232]	; (80017f0 <HAL_RCC_OscConfig+0x91c>)
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	4a39      	ldr	r2, [pc, #228]	; (80017f0 <HAL_RCC_OscConfig+0x91c>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6213      	str	r3, [r2, #32]
 8001712:	e02f      	b.n	8001774 <HAL_RCC_OscConfig+0x8a0>
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10c      	bne.n	8001738 <HAL_RCC_OscConfig+0x864>
 800171e:	4b34      	ldr	r3, [pc, #208]	; (80017f0 <HAL_RCC_OscConfig+0x91c>)
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	4a33      	ldr	r2, [pc, #204]	; (80017f0 <HAL_RCC_OscConfig+0x91c>)
 8001724:	f023 0301 	bic.w	r3, r3, #1
 8001728:	6213      	str	r3, [r2, #32]
 800172a:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <HAL_RCC_OscConfig+0x91c>)
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	4a30      	ldr	r2, [pc, #192]	; (80017f0 <HAL_RCC_OscConfig+0x91c>)
 8001730:	f023 0304 	bic.w	r3, r3, #4
 8001734:	6213      	str	r3, [r2, #32]
 8001736:	e01d      	b.n	8001774 <HAL_RCC_OscConfig+0x8a0>
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b05      	cmp	r3, #5
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0x888>
 8001742:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <HAL_RCC_OscConfig+0x91c>)
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	4a2a      	ldr	r2, [pc, #168]	; (80017f0 <HAL_RCC_OscConfig+0x91c>)
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	6213      	str	r3, [r2, #32]
 800174e:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <HAL_RCC_OscConfig+0x91c>)
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4a27      	ldr	r2, [pc, #156]	; (80017f0 <HAL_RCC_OscConfig+0x91c>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6213      	str	r3, [r2, #32]
 800175a:	e00b      	b.n	8001774 <HAL_RCC_OscConfig+0x8a0>
 800175c:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <HAL_RCC_OscConfig+0x91c>)
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	4a23      	ldr	r2, [pc, #140]	; (80017f0 <HAL_RCC_OscConfig+0x91c>)
 8001762:	f023 0301 	bic.w	r3, r3, #1
 8001766:	6213      	str	r3, [r2, #32]
 8001768:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <HAL_RCC_OscConfig+0x91c>)
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	4a20      	ldr	r2, [pc, #128]	; (80017f0 <HAL_RCC_OscConfig+0x91c>)
 800176e:	f023 0304 	bic.w	r3, r3, #4
 8001772:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d06a      	beq.n	8001854 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177e:	f7ff f919 	bl	80009b4 <HAL_GetTick>
 8001782:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001786:	e00b      	b.n	80017a0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001788:	f7ff f914 	bl	80009b4 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	f241 3288 	movw	r2, #5000	; 0x1388
 8001798:	4293      	cmp	r3, r2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e2a7      	b.n	8001cf0 <HAL_RCC_OscConfig+0xe1c>
 80017a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80017a4:	2202      	movs	r2, #2
 80017a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	fa93 f2a3 	rbit	r2, r3
 80017b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017bc:	2202      	movs	r2, #2
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	fa93 f2a3 	rbit	r2, r3
 80017ca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80017ce:	601a      	str	r2, [r3, #0]
  return result;
 80017d0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80017d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d6:	fab3 f383 	clz	r3, r3
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	095b      	lsrs	r3, r3, #5
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d108      	bne.n	80017fc <HAL_RCC_OscConfig+0x928>
 80017ea:	4b01      	ldr	r3, [pc, #4]	; (80017f0 <HAL_RCC_OscConfig+0x91c>)
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	e013      	b.n	8001818 <HAL_RCC_OscConfig+0x944>
 80017f0:	40021000 	.word	0x40021000
 80017f4:	10908120 	.word	0x10908120
 80017f8:	40007000 	.word	0x40007000
 80017fc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001800:	2202      	movs	r2, #2
 8001802:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001804:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	fa93 f2a3 	rbit	r2, r3
 800180e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	4bc0      	ldr	r3, [pc, #768]	; (8001b18 <HAL_RCC_OscConfig+0xc44>)
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800181c:	2102      	movs	r1, #2
 800181e:	6011      	str	r1, [r2, #0]
 8001820:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001824:	6812      	ldr	r2, [r2, #0]
 8001826:	fa92 f1a2 	rbit	r1, r2
 800182a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800182e:	6011      	str	r1, [r2, #0]
  return result;
 8001830:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	fab2 f282 	clz	r2, r2
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	f002 021f 	and.w	r2, r2, #31
 8001846:	2101      	movs	r1, #1
 8001848:	fa01 f202 	lsl.w	r2, r1, r2
 800184c:	4013      	ands	r3, r2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d09a      	beq.n	8001788 <HAL_RCC_OscConfig+0x8b4>
 8001852:	e063      	b.n	800191c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001854:	f7ff f8ae 	bl	80009b4 <HAL_GetTick>
 8001858:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800185c:	e00b      	b.n	8001876 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800185e:	f7ff f8a9 	bl	80009b4 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	f241 3288 	movw	r2, #5000	; 0x1388
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e23c      	b.n	8001cf0 <HAL_RCC_OscConfig+0xe1c>
 8001876:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800187a:	2202      	movs	r2, #2
 800187c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	fa93 f2a3 	rbit	r2, r3
 8001888:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001892:	2202      	movs	r2, #2
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	fa93 f2a3 	rbit	r2, r3
 80018a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018a4:	601a      	str	r2, [r3, #0]
  return result;
 80018a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ac:	fab3 f383 	clz	r3, r3
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	095b      	lsrs	r3, r3, #5
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	f043 0302 	orr.w	r3, r3, #2
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d102      	bne.n	80018c6 <HAL_RCC_OscConfig+0x9f2>
 80018c0:	4b95      	ldr	r3, [pc, #596]	; (8001b18 <HAL_RCC_OscConfig+0xc44>)
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	e00d      	b.n	80018e2 <HAL_RCC_OscConfig+0xa0e>
 80018c6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018ca:	2202      	movs	r2, #2
 80018cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ce:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	fa93 f2a3 	rbit	r2, r3
 80018d8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	4b8e      	ldr	r3, [pc, #568]	; (8001b18 <HAL_RCC_OscConfig+0xc44>)
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80018e6:	2102      	movs	r1, #2
 80018e8:	6011      	str	r1, [r2, #0]
 80018ea:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80018ee:	6812      	ldr	r2, [r2, #0]
 80018f0:	fa92 f1a2 	rbit	r1, r2
 80018f4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018f8:	6011      	str	r1, [r2, #0]
  return result;
 80018fa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	fab2 f282 	clz	r2, r2
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	f002 021f 	and.w	r2, r2, #31
 8001910:	2101      	movs	r1, #1
 8001912:	fa01 f202 	lsl.w	r2, r1, r2
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1a0      	bne.n	800185e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800191c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001920:	2b01      	cmp	r3, #1
 8001922:	d105      	bne.n	8001930 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001924:	4b7c      	ldr	r3, [pc, #496]	; (8001b18 <HAL_RCC_OscConfig+0xc44>)
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	4a7b      	ldr	r2, [pc, #492]	; (8001b18 <HAL_RCC_OscConfig+0xc44>)
 800192a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800192e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 81d9 	beq.w	8001cee <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800193c:	4b76      	ldr	r3, [pc, #472]	; (8001b18 <HAL_RCC_OscConfig+0xc44>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 030c 	and.w	r3, r3, #12
 8001944:	2b08      	cmp	r3, #8
 8001946:	f000 81a6 	beq.w	8001c96 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	2b02      	cmp	r3, #2
 8001952:	f040 811e 	bne.w	8001b92 <HAL_RCC_OscConfig+0xcbe>
 8001956:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800195a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800195e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	fa93 f2a3 	rbit	r2, r3
 800196a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800196e:	601a      	str	r2, [r3, #0]
  return result;
 8001970:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001974:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001976:	fab3 f383 	clz	r3, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001980:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	461a      	mov	r2, r3
 8001988:	2300      	movs	r3, #0
 800198a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7ff f812 	bl	80009b4 <HAL_GetTick>
 8001990:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001994:	e009      	b.n	80019aa <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001996:	f7ff f80d 	bl	80009b4 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e1a2      	b.n	8001cf0 <HAL_RCC_OscConfig+0xe1c>
 80019aa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80019ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	fa93 f2a3 	rbit	r2, r3
 80019be:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019c2:	601a      	str	r2, [r3, #0]
  return result;
 80019c4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ca:	fab3 f383 	clz	r3, r3
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	095b      	lsrs	r3, r3, #5
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d102      	bne.n	80019e4 <HAL_RCC_OscConfig+0xb10>
 80019de:	4b4e      	ldr	r3, [pc, #312]	; (8001b18 <HAL_RCC_OscConfig+0xc44>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	e01b      	b.n	8001a1c <HAL_RCC_OscConfig+0xb48>
 80019e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	fa93 f2a3 	rbit	r2, r3
 80019f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	fa93 f2a3 	rbit	r2, r3
 8001a12:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	4b3f      	ldr	r3, [pc, #252]	; (8001b18 <HAL_RCC_OscConfig+0xc44>)
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001a20:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a24:	6011      	str	r1, [r2, #0]
 8001a26:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	fa92 f1a2 	rbit	r1, r2
 8001a30:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a34:	6011      	str	r1, [r2, #0]
  return result;
 8001a36:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	fab2 f282 	clz	r2, r2
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	f042 0220 	orr.w	r2, r2, #32
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	f002 021f 	and.w	r2, r2, #31
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d19e      	bne.n	8001996 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a58:	4b2f      	ldr	r3, [pc, #188]	; (8001b18 <HAL_RCC_OscConfig+0xc44>)
 8001a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5c:	f023 020f 	bic.w	r2, r3, #15
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	492c      	ldr	r1, [pc, #176]	; (8001b18 <HAL_RCC_OscConfig+0xc44>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001a6c:	4b2a      	ldr	r3, [pc, #168]	; (8001b18 <HAL_RCC_OscConfig+0xc44>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6a19      	ldr	r1, [r3, #32]
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	430b      	orrs	r3, r1
 8001a82:	4925      	ldr	r1, [pc, #148]	; (8001b18 <HAL_RCC_OscConfig+0xc44>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
 8001a88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	fa93 f2a3 	rbit	r2, r3
 8001a9c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001aa0:	601a      	str	r2, [r3, #0]
  return result;
 8001aa2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001aa6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa8:	fab3 f383 	clz	r3, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ab2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	461a      	mov	r2, r3
 8001aba:	2301      	movs	r3, #1
 8001abc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abe:	f7fe ff79 	bl	80009b4 <HAL_GetTick>
 8001ac2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac6:	e009      	b.n	8001adc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac8:	f7fe ff74 	bl	80009b4 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e109      	b.n	8001cf0 <HAL_RCC_OscConfig+0xe1c>
 8001adc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ae0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ae4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	fa93 f2a3 	rbit	r2, r3
 8001af0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001af4:	601a      	str	r2, [r3, #0]
  return result;
 8001af6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001afa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001afc:	fab3 f383 	clz	r3, r3
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d105      	bne.n	8001b1c <HAL_RCC_OscConfig+0xc48>
 8001b10:	4b01      	ldr	r3, [pc, #4]	; (8001b18 <HAL_RCC_OscConfig+0xc44>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	e01e      	b.n	8001b54 <HAL_RCC_OscConfig+0xc80>
 8001b16:	bf00      	nop
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	fa93 f2a3 	rbit	r2, r3
 8001b30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	fa93 f2a3 	rbit	r2, r3
 8001b4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	4b6a      	ldr	r3, [pc, #424]	; (8001cfc <HAL_RCC_OscConfig+0xe28>)
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001b58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b5c:	6011      	str	r1, [r2, #0]
 8001b5e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	fa92 f1a2 	rbit	r1, r2
 8001b68:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b6c:	6011      	str	r1, [r2, #0]
  return result;
 8001b6e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	fab2 f282 	clz	r2, r2
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	f042 0220 	orr.w	r2, r2, #32
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	f002 021f 	and.w	r2, r2, #31
 8001b84:	2101      	movs	r1, #1
 8001b86:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d09b      	beq.n	8001ac8 <HAL_RCC_OscConfig+0xbf4>
 8001b90:	e0ad      	b.n	8001cee <HAL_RCC_OscConfig+0xe1a>
 8001b92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	fa93 f2a3 	rbit	r2, r3
 8001ba6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001baa:	601a      	str	r2, [r3, #0]
  return result;
 8001bac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bb0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb2:	fab3 f383 	clz	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7fe fef4 	bl	80009b4 <HAL_GetTick>
 8001bcc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd0:	e009      	b.n	8001be6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd2:	f7fe feef 	bl	80009b4 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e084      	b.n	8001cf0 <HAL_RCC_OscConfig+0xe1c>
 8001be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	fa93 f2a3 	rbit	r2, r3
 8001bfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bfe:	601a      	str	r2, [r3, #0]
  return result;
 8001c00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c06:	fab3 f383 	clz	r3, r3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	095b      	lsrs	r3, r3, #5
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d102      	bne.n	8001c20 <HAL_RCC_OscConfig+0xd4c>
 8001c1a:	4b38      	ldr	r3, [pc, #224]	; (8001cfc <HAL_RCC_OscConfig+0xe28>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	e01b      	b.n	8001c58 <HAL_RCC_OscConfig+0xd84>
 8001c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	fa93 f2a3 	rbit	r2, r3
 8001c34:	f107 0320 	add.w	r3, r7, #32
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	f107 031c 	add.w	r3, r7, #28
 8001c3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	f107 031c 	add.w	r3, r7, #28
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	fa93 f2a3 	rbit	r2, r3
 8001c4e:	f107 0318 	add.w	r3, r7, #24
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	4b29      	ldr	r3, [pc, #164]	; (8001cfc <HAL_RCC_OscConfig+0xe28>)
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	f107 0214 	add.w	r2, r7, #20
 8001c5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c60:	6011      	str	r1, [r2, #0]
 8001c62:	f107 0214 	add.w	r2, r7, #20
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	fa92 f1a2 	rbit	r1, r2
 8001c6c:	f107 0210 	add.w	r2, r7, #16
 8001c70:	6011      	str	r1, [r2, #0]
  return result;
 8001c72:	f107 0210 	add.w	r2, r7, #16
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	fab2 f282 	clz	r2, r2
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	f042 0220 	orr.w	r2, r2, #32
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	f002 021f 	and.w	r2, r2, #31
 8001c88:	2101      	movs	r1, #1
 8001c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d19e      	bne.n	8001bd2 <HAL_RCC_OscConfig+0xcfe>
 8001c94:	e02b      	b.n	8001cee <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e025      	b.n	8001cf0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ca4:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <HAL_RCC_OscConfig+0xe28>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001cac:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <HAL_RCC_OscConfig+0xe28>)
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cb4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001cb8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d111      	bne.n	8001cea <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001cc6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001cca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d108      	bne.n	8001cea <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001cd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cdc:	f003 020f 	and.w	r2, r3, #15
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d001      	beq.n	8001cee <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000

08001d00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b09e      	sub	sp, #120	; 0x78
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e162      	b.n	8001fde <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d18:	4b90      	ldr	r3, [pc, #576]	; (8001f5c <HAL_RCC_ClockConfig+0x25c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d910      	bls.n	8001d48 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b8d      	ldr	r3, [pc, #564]	; (8001f5c <HAL_RCC_ClockConfig+0x25c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 0207 	bic.w	r2, r3, #7
 8001d2e:	498b      	ldr	r1, [pc, #556]	; (8001f5c <HAL_RCC_ClockConfig+0x25c>)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b89      	ldr	r3, [pc, #548]	; (8001f5c <HAL_RCC_ClockConfig+0x25c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e14a      	b.n	8001fde <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d54:	4b82      	ldr	r3, [pc, #520]	; (8001f60 <HAL_RCC_ClockConfig+0x260>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	497f      	ldr	r1, [pc, #508]	; (8001f60 <HAL_RCC_ClockConfig+0x260>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 80dc 	beq.w	8001f2c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d13c      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xf6>
 8001d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d80:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8c:	fab3 f383 	clz	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d102      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xa6>
 8001da0:	4b6f      	ldr	r3, [pc, #444]	; (8001f60 <HAL_RCC_ClockConfig+0x260>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	e00f      	b.n	8001dc6 <HAL_RCC_ClockConfig+0xc6>
 8001da6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001daa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	667b      	str	r3, [r7, #100]	; 0x64
 8001db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db8:	663b      	str	r3, [r7, #96]	; 0x60
 8001dba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dbc:	fa93 f3a3 	rbit	r3, r3
 8001dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dc2:	4b67      	ldr	r3, [pc, #412]	; (8001f60 <HAL_RCC_ClockConfig+0x260>)
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dca:	65ba      	str	r2, [r7, #88]	; 0x58
 8001dcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001dce:	fa92 f2a2 	rbit	r2, r2
 8001dd2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001dd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dd6:	fab2 f282 	clz	r2, r2
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	f042 0220 	orr.w	r2, r2, #32
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	f002 021f 	and.w	r2, r2, #31
 8001de6:	2101      	movs	r1, #1
 8001de8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d17b      	bne.n	8001eea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0f3      	b.n	8001fde <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d13c      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x178>
 8001dfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e06:	fa93 f3a3 	rbit	r3, r3
 8001e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0e:	fab3 f383 	clz	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	095b      	lsrs	r3, r3, #5
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d102      	bne.n	8001e28 <HAL_RCC_ClockConfig+0x128>
 8001e22:	4b4f      	ldr	r3, [pc, #316]	; (8001f60 <HAL_RCC_ClockConfig+0x260>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	e00f      	b.n	8001e48 <HAL_RCC_ClockConfig+0x148>
 8001e28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e2c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e30:	fa93 f3a3 	rbit	r3, r3
 8001e34:	647b      	str	r3, [r7, #68]	; 0x44
 8001e36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e3a:	643b      	str	r3, [r7, #64]	; 0x40
 8001e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e3e:	fa93 f3a3 	rbit	r3, r3
 8001e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e44:	4b46      	ldr	r3, [pc, #280]	; (8001f60 <HAL_RCC_ClockConfig+0x260>)
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e4c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e50:	fa92 f2a2 	rbit	r2, r2
 8001e54:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e58:	fab2 f282 	clz	r2, r2
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	f042 0220 	orr.w	r2, r2, #32
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	f002 021f 	and.w	r2, r2, #31
 8001e68:	2101      	movs	r1, #1
 8001e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d13a      	bne.n	8001eea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0b2      	b.n	8001fde <HAL_RCC_ClockConfig+0x2de>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e86:	fab3 f383 	clz	r3, r3
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	095b      	lsrs	r3, r3, #5
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d102      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0x1a0>
 8001e9a:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <HAL_RCC_ClockConfig+0x260>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	e00d      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1bc>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8001eac:	2302      	movs	r3, #2
 8001eae:	623b      	str	r3, [r7, #32]
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	fa93 f3a3 	rbit	r3, r3
 8001eb6:	61fb      	str	r3, [r7, #28]
 8001eb8:	4b29      	ldr	r3, [pc, #164]	; (8001f60 <HAL_RCC_ClockConfig+0x260>)
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	61ba      	str	r2, [r7, #24]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	fa92 f2a2 	rbit	r2, r2
 8001ec6:	617a      	str	r2, [r7, #20]
  return result;
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	fab2 f282 	clz	r2, r2
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	f042 0220 	orr.w	r2, r2, #32
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	f002 021f 	and.w	r2, r2, #31
 8001eda:	2101      	movs	r1, #1
 8001edc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e079      	b.n	8001fde <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <HAL_RCC_ClockConfig+0x260>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f023 0203 	bic.w	r2, r3, #3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	491a      	ldr	r1, [pc, #104]	; (8001f60 <HAL_RCC_ClockConfig+0x260>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001efc:	f7fe fd5a 	bl	80009b4 <HAL_GetTick>
 8001f00:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f02:	e00a      	b.n	8001f1a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f04:	f7fe fd56 	bl	80009b4 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e061      	b.n	8001fde <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <HAL_RCC_ClockConfig+0x260>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 020c 	and.w	r2, r3, #12
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d1eb      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_RCC_ClockConfig+0x25c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d214      	bcs.n	8001f64 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_RCC_ClockConfig+0x25c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 0207 	bic.w	r2, r3, #7
 8001f42:	4906      	ldr	r1, [pc, #24]	; (8001f5c <HAL_RCC_ClockConfig+0x25c>)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4a:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <HAL_RCC_ClockConfig+0x25c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e040      	b.n	8001fde <HAL_RCC_ClockConfig+0x2de>
 8001f5c:	40022000 	.word	0x40022000
 8001f60:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f70:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <HAL_RCC_ClockConfig+0x2e8>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	491a      	ldr	r1, [pc, #104]	; (8001fe8 <HAL_RCC_ClockConfig+0x2e8>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d009      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f8e:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <HAL_RCC_ClockConfig+0x2e8>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4912      	ldr	r1, [pc, #72]	; (8001fe8 <HAL_RCC_ClockConfig+0x2e8>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fa2:	f000 f829 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8001fa6:	4601      	mov	r1, r0
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <HAL_RCC_ClockConfig+0x2e8>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fb0:	22f0      	movs	r2, #240	; 0xf0
 8001fb2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	fa92 f2a2 	rbit	r2, r2
 8001fba:	60fa      	str	r2, [r7, #12]
  return result;
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	fab2 f282 	clz	r2, r2
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	40d3      	lsrs	r3, r2
 8001fc6:	4a09      	ldr	r2, [pc, #36]	; (8001fec <HAL_RCC_ClockConfig+0x2ec>)
 8001fc8:	5cd3      	ldrb	r3, [r2, r3]
 8001fca:	fa21 f303 	lsr.w	r3, r1, r3
 8001fce:	4a08      	ldr	r2, [pc, #32]	; (8001ff0 <HAL_RCC_ClockConfig+0x2f0>)
 8001fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001fd2:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <HAL_RCC_ClockConfig+0x2f4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fbd8 	bl	800078c <HAL_InitTick>
  
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3778      	adds	r7, #120	; 0x78
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	08006b30 	.word	0x08006b30
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	20000004 	.word	0x20000004

08001ff8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b08b      	sub	sp, #44	; 0x2c
 8001ffc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	2300      	movs	r3, #0
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002012:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b04      	cmp	r3, #4
 8002020:	d002      	beq.n	8002028 <HAL_RCC_GetSysClockFreq+0x30>
 8002022:	2b08      	cmp	r3, #8
 8002024:	d003      	beq.n	800202e <HAL_RCC_GetSysClockFreq+0x36>
 8002026:	e03f      	b.n	80020a8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002028:	4b25      	ldr	r3, [pc, #148]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800202a:	623b      	str	r3, [r7, #32]
      break;
 800202c:	e03f      	b.n	80020ae <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002034:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002038:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	fa92 f2a2 	rbit	r2, r2
 8002040:	607a      	str	r2, [r7, #4]
  return result;
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	fab2 f282 	clz	r2, r2
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	40d3      	lsrs	r3, r2
 800204c:	4a1d      	ldr	r2, [pc, #116]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800204e:	5cd3      	ldrb	r3, [r2, r3]
 8002050:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002052:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	220f      	movs	r2, #15
 800205c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	fa92 f2a2 	rbit	r2, r2
 8002064:	60fa      	str	r2, [r7, #12]
  return result;
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	fab2 f282 	clz	r2, r2
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	40d3      	lsrs	r3, r2
 8002070:	4a15      	ldr	r2, [pc, #84]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002072:	5cd3      	ldrb	r3, [r2, r3]
 8002074:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002080:	4a0f      	ldr	r2, [pc, #60]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	fbb2 f2f3 	udiv	r2, r2, r3
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
 8002090:	e007      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002092:	4a0b      	ldr	r2, [pc, #44]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	fbb2 f2f3 	udiv	r2, r2, r3
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	fb02 f303 	mul.w	r3, r2, r3
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	623b      	str	r3, [r7, #32]
      break;
 80020a6:	e002      	b.n	80020ae <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020aa:	623b      	str	r3, [r7, #32]
      break;
 80020ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ae:	6a3b      	ldr	r3, [r7, #32]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	372c      	adds	r7, #44	; 0x2c
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	40021000 	.word	0x40021000
 80020c0:	007a1200 	.word	0x007a1200
 80020c4:	08006b48 	.word	0x08006b48
 80020c8:	08006b58 	.word	0x08006b58

080020cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20000000 	.word	0x20000000

080020e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80020ea:	f7ff ffef 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 80020ee:	4601      	mov	r1, r0
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020f8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80020fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	fa92 f2a2 	rbit	r2, r2
 8002104:	603a      	str	r2, [r7, #0]
  return result;
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	fab2 f282 	clz	r2, r2
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	40d3      	lsrs	r3, r2
 8002110:	4a04      	ldr	r2, [pc, #16]	; (8002124 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002112:	5cd3      	ldrb	r3, [r2, r3]
 8002114:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000
 8002124:	08006b40 	.word	0x08006b40

08002128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800212e:	f7ff ffcd 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 8002132:	4601      	mov	r1, r0
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800213c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002140:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	fa92 f2a2 	rbit	r2, r2
 8002148:	603a      	str	r2, [r7, #0]
  return result;
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	fab2 f282 	clz	r2, r2
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	40d3      	lsrs	r3, r2
 8002154:	4a04      	ldr	r2, [pc, #16]	; (8002168 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40021000 	.word	0x40021000
 8002168:	08006b40 	.word	0x08006b40

0800216c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	220f      	movs	r2, #15
 800217a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_RCC_GetClockConfig+0x5c>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0203 	and.w	r2, r3, #3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002188:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <HAL_RCC_GetClockConfig+0x5c>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <HAL_RCC_GetClockConfig+0x5c>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021a0:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <HAL_RCC_GetClockConfig+0x5c>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	08db      	lsrs	r3, r3, #3
 80021a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80021ae:	4b07      	ldr	r3, [pc, #28]	; (80021cc <HAL_RCC_GetClockConfig+0x60>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0207 	and.w	r2, r3, #7
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	601a      	str	r2, [r3, #0]
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40022000 	.word	0x40022000

080021d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b092      	sub	sp, #72	; 0x48
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 80d4 	beq.w	800239c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f4:	4b4e      	ldr	r3, [pc, #312]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10e      	bne.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002200:	4b4b      	ldr	r3, [pc, #300]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	4a4a      	ldr	r2, [pc, #296]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220a:	61d3      	str	r3, [r2, #28]
 800220c:	4b48      	ldr	r3, [pc, #288]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002218:	2301      	movs	r3, #1
 800221a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221e:	4b45      	ldr	r3, [pc, #276]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002226:	2b00      	cmp	r3, #0
 8002228:	d118      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800222a:	4b42      	ldr	r3, [pc, #264]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a41      	ldr	r2, [pc, #260]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002234:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002236:	f7fe fbbd 	bl	80009b4 <HAL_GetTick>
 800223a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223c:	e008      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800223e:	f7fe fbb9 	bl	80009b4 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b64      	cmp	r3, #100	; 0x64
 800224a:	d901      	bls.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e1d6      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002250:	4b38      	ldr	r3, [pc, #224]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f0      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800225c:	4b34      	ldr	r3, [pc, #208]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002264:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 8084 	beq.w	8002376 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002276:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002278:	429a      	cmp	r2, r3
 800227a:	d07c      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800227c:	4b2c      	ldr	r3, [pc, #176]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002284:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800228a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002296:	fab3 f383 	clz	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	461a      	mov	r2, r3
 800229e:	4b26      	ldr	r3, [pc, #152]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	461a      	mov	r2, r3
 80022a6:	2301      	movs	r3, #1
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022b2:	fa93 f3a3 	rbit	r3, r3
 80022b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	461a      	mov	r2, r3
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022c4:	4413      	add	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	461a      	mov	r2, r3
 80022ca:	2300      	movs	r3, #0
 80022cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022ce:	4a18      	ldr	r2, [pc, #96]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d04b      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7fe fb69 	bl	80009b4 <HAL_GetTick>
 80022e2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e4:	e00a      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e6:	f7fe fb65 	bl	80009b4 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d901      	bls.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e180      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80022fc:	2302      	movs	r3, #2
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
 8002308:	2302      	movs	r3, #2
 800230a:	623b      	str	r3, [r7, #32]
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	fa93 f3a3 	rbit	r3, r3
 8002312:	61fb      	str	r3, [r7, #28]
  return result;
 8002314:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	095b      	lsrs	r3, r3, #5
 800231e:	b2db      	uxtb	r3, r3
 8002320:	f043 0302 	orr.w	r3, r3, #2
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d108      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800232a:	4b01      	ldr	r3, [pc, #4]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	e00d      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002330:	40021000 	.word	0x40021000
 8002334:	40007000 	.word	0x40007000
 8002338:	10908100 	.word	0x10908100
 800233c:	2302      	movs	r3, #2
 800233e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	4ba0      	ldr	r3, [pc, #640]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	2202      	movs	r2, #2
 800234e:	613a      	str	r2, [r7, #16]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	fa92 f2a2 	rbit	r2, r2
 8002356:	60fa      	str	r2, [r7, #12]
  return result;
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	fab2 f282 	clz	r2, r2
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	f002 021f 	and.w	r2, r2, #31
 800236a:	2101      	movs	r1, #1
 800236c:	fa01 f202 	lsl.w	r2, r1, r2
 8002370:	4013      	ands	r3, r2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0b7      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002376:	4b95      	ldr	r3, [pc, #596]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	4992      	ldr	r1, [pc, #584]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002384:	4313      	orrs	r3, r2
 8002386:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002388:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800238c:	2b01      	cmp	r3, #1
 800238e:	d105      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002390:	4b8e      	ldr	r3, [pc, #568]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	4a8d      	ldr	r2, [pc, #564]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800239a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023a8:	4b88      	ldr	r3, [pc, #544]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	f023 0203 	bic.w	r2, r3, #3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	4985      	ldr	r1, [pc, #532]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d008      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023c6:	4b81      	ldr	r3, [pc, #516]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	497e      	ldr	r1, [pc, #504]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023e4:	4b79      	ldr	r3, [pc, #484]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	4976      	ldr	r1, [pc, #472]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d008      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002402:	4b72      	ldr	r3, [pc, #456]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f023 0210 	bic.w	r2, r3, #16
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	496f      	ldr	r1, [pc, #444]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002410:	4313      	orrs	r3, r2
 8002412:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002420:	4b6a      	ldr	r3, [pc, #424]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242c:	4967      	ldr	r1, [pc, #412]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800242e:	4313      	orrs	r3, r2
 8002430:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243a:	2b00      	cmp	r3, #0
 800243c:	d008      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800243e:	4b63      	ldr	r3, [pc, #396]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f023 0220 	bic.w	r2, r3, #32
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4960      	ldr	r1, [pc, #384]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800244c:	4313      	orrs	r3, r2
 800244e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800245c:	4b5b      	ldr	r3, [pc, #364]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	4958      	ldr	r1, [pc, #352]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800246a:	4313      	orrs	r3, r2
 800246c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d008      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800247a:	4b54      	ldr	r3, [pc, #336]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	4951      	ldr	r1, [pc, #324]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002488:	4313      	orrs	r3, r2
 800248a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002498:	4b4c      	ldr	r3, [pc, #304]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	4949      	ldr	r1, [pc, #292]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d008      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024b6:	4b45      	ldr	r3, [pc, #276]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4942      	ldr	r1, [pc, #264]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024d4:	4b3d      	ldr	r3, [pc, #244]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e0:	493a      	ldr	r1, [pc, #232]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d008      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80024f2:	4b36      	ldr	r3, [pc, #216]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	4933      	ldr	r1, [pc, #204]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002500:	4313      	orrs	r3, r2
 8002502:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002510:	4b2e      	ldr	r3, [pc, #184]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251c:	492b      	ldr	r1, [pc, #172]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800251e:	4313      	orrs	r3, r2
 8002520:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d008      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800252e:	4b27      	ldr	r3, [pc, #156]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	4924      	ldr	r1, [pc, #144]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800253c:	4313      	orrs	r3, r2
 800253e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800254c:	4b1f      	ldr	r3, [pc, #124]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002558:	491c      	ldr	r1, [pc, #112]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800255a:	4313      	orrs	r3, r2
 800255c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d008      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800256a:	4b18      	ldr	r3, [pc, #96]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002576:	4915      	ldr	r1, [pc, #84]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002578:	4313      	orrs	r3, r2
 800257a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002588:	4b10      	ldr	r3, [pc, #64]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002594:	490d      	ldr	r1, [pc, #52]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002596:	4313      	orrs	r3, r2
 8002598:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80025a6:	4b09      	ldr	r3, [pc, #36]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b2:	4906      	ldr	r1, [pc, #24]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00c      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80025c4:	4b01      	ldr	r3, [pc, #4]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	e002      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80025ca:	bf00      	nop
 80025cc:	40021000 	.word	0x40021000
 80025d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d8:	490b      	ldr	r1, [pc, #44]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d008      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80025ea:	4b07      	ldr	r3, [pc, #28]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f6:	4904      	ldr	r1, [pc, #16]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3748      	adds	r7, #72	; 0x48
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000

0800260c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e049      	b.n	80026b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f841 	bl	80026ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3304      	adds	r3, #4
 8002648:	4619      	mov	r1, r3
 800264a:	4610      	mov	r0, r2
 800264c:	f000 f9f8 	bl	8002a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d001      	beq.n	80026e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e04f      	b.n	8002788 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a23      	ldr	r2, [pc, #140]	; (8002794 <HAL_TIM_Base_Start_IT+0xc4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d01d      	beq.n	8002746 <HAL_TIM_Base_Start_IT+0x76>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002712:	d018      	beq.n	8002746 <HAL_TIM_Base_Start_IT+0x76>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a1f      	ldr	r2, [pc, #124]	; (8002798 <HAL_TIM_Base_Start_IT+0xc8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d013      	beq.n	8002746 <HAL_TIM_Base_Start_IT+0x76>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a1e      	ldr	r2, [pc, #120]	; (800279c <HAL_TIM_Base_Start_IT+0xcc>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d00e      	beq.n	8002746 <HAL_TIM_Base_Start_IT+0x76>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a1c      	ldr	r2, [pc, #112]	; (80027a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d009      	beq.n	8002746 <HAL_TIM_Base_Start_IT+0x76>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a1b      	ldr	r2, [pc, #108]	; (80027a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d004      	beq.n	8002746 <HAL_TIM_Base_Start_IT+0x76>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a19      	ldr	r2, [pc, #100]	; (80027a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d115      	bne.n	8002772 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	4b17      	ldr	r3, [pc, #92]	; (80027ac <HAL_TIM_Base_Start_IT+0xdc>)
 800274e:	4013      	ands	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b06      	cmp	r3, #6
 8002756:	d015      	beq.n	8002784 <HAL_TIM_Base_Start_IT+0xb4>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800275e:	d011      	beq.n	8002784 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002770:	e008      	b.n	8002784 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 0201 	orr.w	r2, r2, #1
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	e000      	b.n	8002786 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002784:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	40012c00 	.word	0x40012c00
 8002798:	40000400 	.word	0x40000400
 800279c:	40000800 	.word	0x40000800
 80027a0:	40013400 	.word	0x40013400
 80027a4:	40014000 	.word	0x40014000
 80027a8:	40015000 	.word	0x40015000
 80027ac:	00010007 	.word	0x00010007

080027b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d122      	bne.n	800280c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d11b      	bne.n	800280c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f06f 0202 	mvn.w	r2, #2
 80027dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f905 	bl	8002a02 <HAL_TIM_IC_CaptureCallback>
 80027f8:	e005      	b.n	8002806 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f8f7 	bl	80029ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f908 	bl	8002a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	2b04      	cmp	r3, #4
 8002818:	d122      	bne.n	8002860 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b04      	cmp	r3, #4
 8002826:	d11b      	bne.n	8002860 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0204 	mvn.w	r2, #4
 8002830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2202      	movs	r2, #2
 8002836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f8db 	bl	8002a02 <HAL_TIM_IC_CaptureCallback>
 800284c:	e005      	b.n	800285a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f8cd 	bl	80029ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f8de 	bl	8002a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b08      	cmp	r3, #8
 800286c:	d122      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f003 0308 	and.w	r3, r3, #8
 8002878:	2b08      	cmp	r3, #8
 800287a:	d11b      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f06f 0208 	mvn.w	r2, #8
 8002884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2204      	movs	r2, #4
 800288a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f8b1 	bl	8002a02 <HAL_TIM_IC_CaptureCallback>
 80028a0:	e005      	b.n	80028ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f8a3 	bl	80029ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f8b4 	bl	8002a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2b10      	cmp	r3, #16
 80028c0:	d122      	bne.n	8002908 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0310 	and.w	r3, r3, #16
 80028cc:	2b10      	cmp	r3, #16
 80028ce:	d11b      	bne.n	8002908 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0210 	mvn.w	r2, #16
 80028d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2208      	movs	r2, #8
 80028de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f887 	bl	8002a02 <HAL_TIM_IC_CaptureCallback>
 80028f4:	e005      	b.n	8002902 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f879 	bl	80029ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f88a 	bl	8002a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b01      	cmp	r3, #1
 8002914:	d10e      	bne.n	8002934 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b01      	cmp	r3, #1
 8002922:	d107      	bne.n	8002934 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0201 	mvn.w	r2, #1
 800292c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7fd feac 	bl	800068c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293e:	2b80      	cmp	r3, #128	; 0x80
 8002940:	d10e      	bne.n	8002960 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294c:	2b80      	cmp	r3, #128	; 0x80
 800294e:	d107      	bne.n	8002960 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f918 	bl	8002b90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800296e:	d10e      	bne.n	800298e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297a:	2b80      	cmp	r3, #128	; 0x80
 800297c:	d107      	bne.n	800298e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f90b 	bl	8002ba4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002998:	2b40      	cmp	r3, #64	; 0x40
 800299a:	d10e      	bne.n	80029ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a6:	2b40      	cmp	r3, #64	; 0x40
 80029a8:	d107      	bne.n	80029ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f838 	bl	8002a2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	f003 0320 	and.w	r3, r3, #32
 80029c4:	2b20      	cmp	r3, #32
 80029c6:	d10e      	bne.n	80029e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f003 0320 	and.w	r3, r3, #32
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	d107      	bne.n	80029e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f06f 0220 	mvn.w	r2, #32
 80029de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f8cb 	bl	8002b7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a42      	ldr	r2, [pc, #264]	; (8002b5c <TIM_Base_SetConfig+0x11c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d013      	beq.n	8002a80 <TIM_Base_SetConfig+0x40>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5e:	d00f      	beq.n	8002a80 <TIM_Base_SetConfig+0x40>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a3f      	ldr	r2, [pc, #252]	; (8002b60 <TIM_Base_SetConfig+0x120>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00b      	beq.n	8002a80 <TIM_Base_SetConfig+0x40>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a3e      	ldr	r2, [pc, #248]	; (8002b64 <TIM_Base_SetConfig+0x124>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d007      	beq.n	8002a80 <TIM_Base_SetConfig+0x40>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a3d      	ldr	r2, [pc, #244]	; (8002b68 <TIM_Base_SetConfig+0x128>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d003      	beq.n	8002a80 <TIM_Base_SetConfig+0x40>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a3c      	ldr	r2, [pc, #240]	; (8002b6c <TIM_Base_SetConfig+0x12c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d108      	bne.n	8002a92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a31      	ldr	r2, [pc, #196]	; (8002b5c <TIM_Base_SetConfig+0x11c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d01f      	beq.n	8002ada <TIM_Base_SetConfig+0x9a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa0:	d01b      	beq.n	8002ada <TIM_Base_SetConfig+0x9a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a2e      	ldr	r2, [pc, #184]	; (8002b60 <TIM_Base_SetConfig+0x120>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d017      	beq.n	8002ada <TIM_Base_SetConfig+0x9a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a2d      	ldr	r2, [pc, #180]	; (8002b64 <TIM_Base_SetConfig+0x124>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d013      	beq.n	8002ada <TIM_Base_SetConfig+0x9a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a2c      	ldr	r2, [pc, #176]	; (8002b68 <TIM_Base_SetConfig+0x128>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00f      	beq.n	8002ada <TIM_Base_SetConfig+0x9a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a2c      	ldr	r2, [pc, #176]	; (8002b70 <TIM_Base_SetConfig+0x130>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00b      	beq.n	8002ada <TIM_Base_SetConfig+0x9a>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a2b      	ldr	r2, [pc, #172]	; (8002b74 <TIM_Base_SetConfig+0x134>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d007      	beq.n	8002ada <TIM_Base_SetConfig+0x9a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a2a      	ldr	r2, [pc, #168]	; (8002b78 <TIM_Base_SetConfig+0x138>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d003      	beq.n	8002ada <TIM_Base_SetConfig+0x9a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a25      	ldr	r2, [pc, #148]	; (8002b6c <TIM_Base_SetConfig+0x12c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d108      	bne.n	8002aec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a12      	ldr	r2, [pc, #72]	; (8002b5c <TIM_Base_SetConfig+0x11c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d013      	beq.n	8002b40 <TIM_Base_SetConfig+0x100>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a13      	ldr	r2, [pc, #76]	; (8002b68 <TIM_Base_SetConfig+0x128>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d00f      	beq.n	8002b40 <TIM_Base_SetConfig+0x100>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a13      	ldr	r2, [pc, #76]	; (8002b70 <TIM_Base_SetConfig+0x130>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d00b      	beq.n	8002b40 <TIM_Base_SetConfig+0x100>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a12      	ldr	r2, [pc, #72]	; (8002b74 <TIM_Base_SetConfig+0x134>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d007      	beq.n	8002b40 <TIM_Base_SetConfig+0x100>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a11      	ldr	r2, [pc, #68]	; (8002b78 <TIM_Base_SetConfig+0x138>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d003      	beq.n	8002b40 <TIM_Base_SetConfig+0x100>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a0c      	ldr	r2, [pc, #48]	; (8002b6c <TIM_Base_SetConfig+0x12c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d103      	bne.n	8002b48 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	615a      	str	r2, [r3, #20]
}
 8002b4e:	bf00      	nop
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40012c00 	.word	0x40012c00
 8002b60:	40000400 	.word	0x40000400
 8002b64:	40000800 	.word	0x40000800
 8002b68:	40013400 	.word	0x40013400
 8002b6c:	40015000 	.word	0x40015000
 8002b70:	40014000 	.word	0x40014000
 8002b74:	40014400 	.word	0x40014400
 8002b78:	40014800 	.word	0x40014800

08002b7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e040      	b.n	8002c4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fd fd94 	bl	8000708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2224      	movs	r2, #36	; 0x24
 8002be4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0201 	bic.w	r2, r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f8c0 	bl	8002d7c <UART_SetConfig>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e022      	b.n	8002c4c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fa88 	bl	8003124 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 fb0f 	bl	8003268 <UART_CheckIdleState>
 8002c4a:	4603      	mov	r3, r0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	; 0x28
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	4613      	mov	r3, r2
 8002c62:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c68:	2b20      	cmp	r3, #32
 8002c6a:	f040 8082 	bne.w	8002d72 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <HAL_UART_Transmit+0x26>
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e07a      	b.n	8002d74 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_UART_Transmit+0x38>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e073      	b.n	8002d74 <HAL_UART_Transmit+0x120>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2221      	movs	r2, #33	; 0x21
 8002ca0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ca2:	f7fd fe87 	bl	80009b4 <HAL_GetTick>
 8002ca6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	88fa      	ldrh	r2, [r7, #6]
 8002cac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	88fa      	ldrh	r2, [r7, #6]
 8002cb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc0:	d108      	bne.n	8002cd4 <HAL_UART_Transmit+0x80>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d104      	bne.n	8002cd4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	e003      	b.n	8002cdc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002ce4:	e02d      	b.n	8002d42 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2200      	movs	r2, #0
 8002cee:	2180      	movs	r1, #128	; 0x80
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 fb02 	bl	80032fa <UART_WaitOnFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e039      	b.n	8002d74 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10b      	bne.n	8002d1e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	881a      	ldrh	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d12:	b292      	uxth	r2, r2
 8002d14:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	3302      	adds	r3, #2
 8002d1a:	61bb      	str	r3, [r7, #24]
 8002d1c:	e008      	b.n	8002d30 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	781a      	ldrb	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	b292      	uxth	r2, r2
 8002d28:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1cb      	bne.n	8002ce6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2200      	movs	r2, #0
 8002d56:	2140      	movs	r1, #64	; 0x40
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 face 	bl	80032fa <UART_WaitOnFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e005      	b.n	8002d74 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e000      	b.n	8002d74 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002d72:	2302      	movs	r3, #2
  }
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3720      	adds	r7, #32
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	431a      	orrs	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	4baa      	ldr	r3, [pc, #680]	; (8003050 <UART_SetConfig+0x2d4>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	6979      	ldr	r1, [r7, #20]
 8002db0:	430b      	orrs	r3, r1
 8002db2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a98      	ldr	r2, [pc, #608]	; (8003054 <UART_SetConfig+0x2d8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d121      	bne.n	8002e3c <UART_SetConfig+0xc0>
 8002df8:	4b97      	ldr	r3, [pc, #604]	; (8003058 <UART_SetConfig+0x2dc>)
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d817      	bhi.n	8002e34 <UART_SetConfig+0xb8>
 8002e04:	a201      	add	r2, pc, #4	; (adr r2, 8002e0c <UART_SetConfig+0x90>)
 8002e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0a:	bf00      	nop
 8002e0c:	08002e1d 	.word	0x08002e1d
 8002e10:	08002e29 	.word	0x08002e29
 8002e14:	08002e2f 	.word	0x08002e2f
 8002e18:	08002e23 	.word	0x08002e23
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	77fb      	strb	r3, [r7, #31]
 8002e20:	e0b2      	b.n	8002f88 <UART_SetConfig+0x20c>
 8002e22:	2302      	movs	r3, #2
 8002e24:	77fb      	strb	r3, [r7, #31]
 8002e26:	e0af      	b.n	8002f88 <UART_SetConfig+0x20c>
 8002e28:	2304      	movs	r3, #4
 8002e2a:	77fb      	strb	r3, [r7, #31]
 8002e2c:	e0ac      	b.n	8002f88 <UART_SetConfig+0x20c>
 8002e2e:	2308      	movs	r3, #8
 8002e30:	77fb      	strb	r3, [r7, #31]
 8002e32:	e0a9      	b.n	8002f88 <UART_SetConfig+0x20c>
 8002e34:	2310      	movs	r3, #16
 8002e36:	77fb      	strb	r3, [r7, #31]
 8002e38:	bf00      	nop
 8002e3a:	e0a5      	b.n	8002f88 <UART_SetConfig+0x20c>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a86      	ldr	r2, [pc, #536]	; (800305c <UART_SetConfig+0x2e0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d123      	bne.n	8002e8e <UART_SetConfig+0x112>
 8002e46:	4b84      	ldr	r3, [pc, #528]	; (8003058 <UART_SetConfig+0x2dc>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e52:	d012      	beq.n	8002e7a <UART_SetConfig+0xfe>
 8002e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e58:	d802      	bhi.n	8002e60 <UART_SetConfig+0xe4>
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d007      	beq.n	8002e6e <UART_SetConfig+0xf2>
 8002e5e:	e012      	b.n	8002e86 <UART_SetConfig+0x10a>
 8002e60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e64:	d00c      	beq.n	8002e80 <UART_SetConfig+0x104>
 8002e66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e6a:	d003      	beq.n	8002e74 <UART_SetConfig+0xf8>
 8002e6c:	e00b      	b.n	8002e86 <UART_SetConfig+0x10a>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	77fb      	strb	r3, [r7, #31]
 8002e72:	e089      	b.n	8002f88 <UART_SetConfig+0x20c>
 8002e74:	2302      	movs	r3, #2
 8002e76:	77fb      	strb	r3, [r7, #31]
 8002e78:	e086      	b.n	8002f88 <UART_SetConfig+0x20c>
 8002e7a:	2304      	movs	r3, #4
 8002e7c:	77fb      	strb	r3, [r7, #31]
 8002e7e:	e083      	b.n	8002f88 <UART_SetConfig+0x20c>
 8002e80:	2308      	movs	r3, #8
 8002e82:	77fb      	strb	r3, [r7, #31]
 8002e84:	e080      	b.n	8002f88 <UART_SetConfig+0x20c>
 8002e86:	2310      	movs	r3, #16
 8002e88:	77fb      	strb	r3, [r7, #31]
 8002e8a:	bf00      	nop
 8002e8c:	e07c      	b.n	8002f88 <UART_SetConfig+0x20c>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a73      	ldr	r2, [pc, #460]	; (8003060 <UART_SetConfig+0x2e4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d123      	bne.n	8002ee0 <UART_SetConfig+0x164>
 8002e98:	4b6f      	ldr	r3, [pc, #444]	; (8003058 <UART_SetConfig+0x2dc>)
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002ea0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ea4:	d012      	beq.n	8002ecc <UART_SetConfig+0x150>
 8002ea6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002eaa:	d802      	bhi.n	8002eb2 <UART_SetConfig+0x136>
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d007      	beq.n	8002ec0 <UART_SetConfig+0x144>
 8002eb0:	e012      	b.n	8002ed8 <UART_SetConfig+0x15c>
 8002eb2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002eb6:	d00c      	beq.n	8002ed2 <UART_SetConfig+0x156>
 8002eb8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ebc:	d003      	beq.n	8002ec6 <UART_SetConfig+0x14a>
 8002ebe:	e00b      	b.n	8002ed8 <UART_SetConfig+0x15c>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	77fb      	strb	r3, [r7, #31]
 8002ec4:	e060      	b.n	8002f88 <UART_SetConfig+0x20c>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	77fb      	strb	r3, [r7, #31]
 8002eca:	e05d      	b.n	8002f88 <UART_SetConfig+0x20c>
 8002ecc:	2304      	movs	r3, #4
 8002ece:	77fb      	strb	r3, [r7, #31]
 8002ed0:	e05a      	b.n	8002f88 <UART_SetConfig+0x20c>
 8002ed2:	2308      	movs	r3, #8
 8002ed4:	77fb      	strb	r3, [r7, #31]
 8002ed6:	e057      	b.n	8002f88 <UART_SetConfig+0x20c>
 8002ed8:	2310      	movs	r3, #16
 8002eda:	77fb      	strb	r3, [r7, #31]
 8002edc:	bf00      	nop
 8002ede:	e053      	b.n	8002f88 <UART_SetConfig+0x20c>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a5f      	ldr	r2, [pc, #380]	; (8003064 <UART_SetConfig+0x2e8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d123      	bne.n	8002f32 <UART_SetConfig+0x1b6>
 8002eea:	4b5b      	ldr	r3, [pc, #364]	; (8003058 <UART_SetConfig+0x2dc>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002ef2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ef6:	d012      	beq.n	8002f1e <UART_SetConfig+0x1a2>
 8002ef8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002efc:	d802      	bhi.n	8002f04 <UART_SetConfig+0x188>
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d007      	beq.n	8002f12 <UART_SetConfig+0x196>
 8002f02:	e012      	b.n	8002f2a <UART_SetConfig+0x1ae>
 8002f04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f08:	d00c      	beq.n	8002f24 <UART_SetConfig+0x1a8>
 8002f0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f0e:	d003      	beq.n	8002f18 <UART_SetConfig+0x19c>
 8002f10:	e00b      	b.n	8002f2a <UART_SetConfig+0x1ae>
 8002f12:	2300      	movs	r3, #0
 8002f14:	77fb      	strb	r3, [r7, #31]
 8002f16:	e037      	b.n	8002f88 <UART_SetConfig+0x20c>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	77fb      	strb	r3, [r7, #31]
 8002f1c:	e034      	b.n	8002f88 <UART_SetConfig+0x20c>
 8002f1e:	2304      	movs	r3, #4
 8002f20:	77fb      	strb	r3, [r7, #31]
 8002f22:	e031      	b.n	8002f88 <UART_SetConfig+0x20c>
 8002f24:	2308      	movs	r3, #8
 8002f26:	77fb      	strb	r3, [r7, #31]
 8002f28:	e02e      	b.n	8002f88 <UART_SetConfig+0x20c>
 8002f2a:	2310      	movs	r3, #16
 8002f2c:	77fb      	strb	r3, [r7, #31]
 8002f2e:	bf00      	nop
 8002f30:	e02a      	b.n	8002f88 <UART_SetConfig+0x20c>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a4c      	ldr	r2, [pc, #304]	; (8003068 <UART_SetConfig+0x2ec>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d123      	bne.n	8002f84 <UART_SetConfig+0x208>
 8002f3c:	4b46      	ldr	r3, [pc, #280]	; (8003058 <UART_SetConfig+0x2dc>)
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002f44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f48:	d012      	beq.n	8002f70 <UART_SetConfig+0x1f4>
 8002f4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f4e:	d802      	bhi.n	8002f56 <UART_SetConfig+0x1da>
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d007      	beq.n	8002f64 <UART_SetConfig+0x1e8>
 8002f54:	e012      	b.n	8002f7c <UART_SetConfig+0x200>
 8002f56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f5a:	d00c      	beq.n	8002f76 <UART_SetConfig+0x1fa>
 8002f5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f60:	d003      	beq.n	8002f6a <UART_SetConfig+0x1ee>
 8002f62:	e00b      	b.n	8002f7c <UART_SetConfig+0x200>
 8002f64:	2300      	movs	r3, #0
 8002f66:	77fb      	strb	r3, [r7, #31]
 8002f68:	e00e      	b.n	8002f88 <UART_SetConfig+0x20c>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	77fb      	strb	r3, [r7, #31]
 8002f6e:	e00b      	b.n	8002f88 <UART_SetConfig+0x20c>
 8002f70:	2304      	movs	r3, #4
 8002f72:	77fb      	strb	r3, [r7, #31]
 8002f74:	e008      	b.n	8002f88 <UART_SetConfig+0x20c>
 8002f76:	2308      	movs	r3, #8
 8002f78:	77fb      	strb	r3, [r7, #31]
 8002f7a:	e005      	b.n	8002f88 <UART_SetConfig+0x20c>
 8002f7c:	2310      	movs	r3, #16
 8002f7e:	77fb      	strb	r3, [r7, #31]
 8002f80:	bf00      	nop
 8002f82:	e001      	b.n	8002f88 <UART_SetConfig+0x20c>
 8002f84:	2310      	movs	r3, #16
 8002f86:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f90:	d16e      	bne.n	8003070 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002f92:	7ffb      	ldrb	r3, [r7, #31]
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d828      	bhi.n	8002fea <UART_SetConfig+0x26e>
 8002f98:	a201      	add	r2, pc, #4	; (adr r2, 8002fa0 <UART_SetConfig+0x224>)
 8002f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9e:	bf00      	nop
 8002fa0:	08002fc5 	.word	0x08002fc5
 8002fa4:	08002fcd 	.word	0x08002fcd
 8002fa8:	08002fd5 	.word	0x08002fd5
 8002fac:	08002feb 	.word	0x08002feb
 8002fb0:	08002fdb 	.word	0x08002fdb
 8002fb4:	08002feb 	.word	0x08002feb
 8002fb8:	08002feb 	.word	0x08002feb
 8002fbc:	08002feb 	.word	0x08002feb
 8002fc0:	08002fe3 	.word	0x08002fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fc4:	f7ff f88e 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 8002fc8:	61b8      	str	r0, [r7, #24]
        break;
 8002fca:	e013      	b.n	8002ff4 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fcc:	f7ff f8ac 	bl	8002128 <HAL_RCC_GetPCLK2Freq>
 8002fd0:	61b8      	str	r0, [r7, #24]
        break;
 8002fd2:	e00f      	b.n	8002ff4 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fd4:	4b25      	ldr	r3, [pc, #148]	; (800306c <UART_SetConfig+0x2f0>)
 8002fd6:	61bb      	str	r3, [r7, #24]
        break;
 8002fd8:	e00c      	b.n	8002ff4 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fda:	f7ff f80d 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8002fde:	61b8      	str	r0, [r7, #24]
        break;
 8002fe0:	e008      	b.n	8002ff4 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fe6:	61bb      	str	r3, [r7, #24]
        break;
 8002fe8:	e004      	b.n	8002ff4 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	77bb      	strb	r3, [r7, #30]
        break;
 8002ff2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 8086 	beq.w	8003108 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	005a      	lsls	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	085b      	lsrs	r3, r3, #1
 8003006:	441a      	add	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003010:	b29b      	uxth	r3, r3
 8003012:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	2b0f      	cmp	r3, #15
 8003018:	d916      	bls.n	8003048 <UART_SetConfig+0x2cc>
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003020:	d212      	bcs.n	8003048 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	b29b      	uxth	r3, r3
 8003026:	f023 030f 	bic.w	r3, r3, #15
 800302a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	085b      	lsrs	r3, r3, #1
 8003030:	b29b      	uxth	r3, r3
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	b29a      	uxth	r2, r3
 8003038:	89fb      	ldrh	r3, [r7, #14]
 800303a:	4313      	orrs	r3, r2
 800303c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	89fa      	ldrh	r2, [r7, #14]
 8003044:	60da      	str	r2, [r3, #12]
 8003046:	e05f      	b.n	8003108 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	77bb      	strb	r3, [r7, #30]
 800304c:	e05c      	b.n	8003108 <UART_SetConfig+0x38c>
 800304e:	bf00      	nop
 8003050:	efff69f3 	.word	0xefff69f3
 8003054:	40013800 	.word	0x40013800
 8003058:	40021000 	.word	0x40021000
 800305c:	40004400 	.word	0x40004400
 8003060:	40004800 	.word	0x40004800
 8003064:	40004c00 	.word	0x40004c00
 8003068:	40005000 	.word	0x40005000
 800306c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8003070:	7ffb      	ldrb	r3, [r7, #31]
 8003072:	2b08      	cmp	r3, #8
 8003074:	d827      	bhi.n	80030c6 <UART_SetConfig+0x34a>
 8003076:	a201      	add	r2, pc, #4	; (adr r2, 800307c <UART_SetConfig+0x300>)
 8003078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307c:	080030a1 	.word	0x080030a1
 8003080:	080030a9 	.word	0x080030a9
 8003084:	080030b1 	.word	0x080030b1
 8003088:	080030c7 	.word	0x080030c7
 800308c:	080030b7 	.word	0x080030b7
 8003090:	080030c7 	.word	0x080030c7
 8003094:	080030c7 	.word	0x080030c7
 8003098:	080030c7 	.word	0x080030c7
 800309c:	080030bf 	.word	0x080030bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030a0:	f7ff f820 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 80030a4:	61b8      	str	r0, [r7, #24]
        break;
 80030a6:	e013      	b.n	80030d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030a8:	f7ff f83e 	bl	8002128 <HAL_RCC_GetPCLK2Freq>
 80030ac:	61b8      	str	r0, [r7, #24]
        break;
 80030ae:	e00f      	b.n	80030d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030b0:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <UART_SetConfig+0x3a4>)
 80030b2:	61bb      	str	r3, [r7, #24]
        break;
 80030b4:	e00c      	b.n	80030d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030b6:	f7fe ff9f 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 80030ba:	61b8      	str	r0, [r7, #24]
        break;
 80030bc:	e008      	b.n	80030d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030c2:	61bb      	str	r3, [r7, #24]
        break;
 80030c4:	e004      	b.n	80030d0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	77bb      	strb	r3, [r7, #30]
        break;
 80030ce:	bf00      	nop
    }

    if (pclk != 0U)
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d018      	beq.n	8003108 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	085a      	lsrs	r2, r3, #1
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	441a      	add	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	2b0f      	cmp	r3, #15
 80030f0:	d908      	bls.n	8003104 <UART_SetConfig+0x388>
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f8:	d204      	bcs.n	8003104 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	60da      	str	r2, [r3, #12]
 8003102:	e001      	b.n	8003108 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003114:	7fbb      	ldrb	r3, [r7, #30]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3720      	adds	r7, #32
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	007a1200 	.word	0x007a1200

08003124 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003200:	2b00      	cmp	r3, #0
 8003202:	d01a      	beq.n	800323a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003222:	d10a      	bne.n	800323a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	605a      	str	r2, [r3, #4]
  }
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af02      	add	r7, sp, #8
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003278:	f7fd fb9c 	bl	80009b4 <HAL_GetTick>
 800327c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b08      	cmp	r3, #8
 800328a:	d10e      	bne.n	80032aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800328c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f82d 	bl	80032fa <UART_WaitOnFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e023      	b.n	80032f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d10e      	bne.n	80032d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f817 	bl	80032fa <UART_WaitOnFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e00d      	b.n	80032f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2220      	movs	r2, #32
 80032da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2220      	movs	r2, #32
 80032e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b084      	sub	sp, #16
 80032fe:	af00      	add	r7, sp, #0
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	603b      	str	r3, [r7, #0]
 8003306:	4613      	mov	r3, r2
 8003308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800330a:	e05e      	b.n	80033ca <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003312:	d05a      	beq.n	80033ca <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003314:	f7fd fb4e 	bl	80009b4 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	429a      	cmp	r2, r3
 8003322:	d302      	bcc.n	800332a <UART_WaitOnFlagUntilTimeout+0x30>
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d11b      	bne.n	8003362 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003338:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2220      	movs	r2, #32
 8003354:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e043      	b.n	80033ea <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d02c      	beq.n	80033ca <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800337a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800337e:	d124      	bne.n	80033ca <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003388:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003398:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0201 	bic.w	r2, r2, #1
 80033a8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2220      	movs	r2, #32
 80033ae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2220      	movs	r2, #32
 80033b4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e00f      	b.n	80033ea <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	69da      	ldr	r2, [r3, #28]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4013      	ands	r3, r2
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	bf0c      	ite	eq
 80033da:	2301      	moveq	r3, #1
 80033dc:	2300      	movne	r3, #0
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	461a      	mov	r2, r3
 80033e2:	79fb      	ldrb	r3, [r7, #7]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d091      	beq.n	800330c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033fa:	f3ef 8305 	mrs	r3, IPSR
 80033fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8003400:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10f      	bne.n	8003426 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003406:	f3ef 8310 	mrs	r3, PRIMASK
 800340a:	607b      	str	r3, [r7, #4]
  return(result);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d109      	bne.n	8003426 <osKernelInitialize+0x32>
 8003412:	4b11      	ldr	r3, [pc, #68]	; (8003458 <osKernelInitialize+0x64>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b02      	cmp	r3, #2
 8003418:	d109      	bne.n	800342e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800341a:	f3ef 8311 	mrs	r3, BASEPRI
 800341e:	603b      	str	r3, [r7, #0]
  return(result);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003426:	f06f 0305 	mvn.w	r3, #5
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	e00c      	b.n	8003448 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800342e:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <osKernelInitialize+0x64>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d105      	bne.n	8003442 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003436:	4b08      	ldr	r3, [pc, #32]	; (8003458 <osKernelInitialize+0x64>)
 8003438:	2201      	movs	r2, #1
 800343a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800343c:	2300      	movs	r3, #0
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	e002      	b.n	8003448 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003442:	f04f 33ff 	mov.w	r3, #4294967295
 8003446:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003448:	68fb      	ldr	r3, [r7, #12]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	20000098 	.word	0x20000098

0800345c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003462:	f3ef 8305 	mrs	r3, IPSR
 8003466:	60bb      	str	r3, [r7, #8]
  return(result);
 8003468:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10f      	bne.n	800348e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800346e:	f3ef 8310 	mrs	r3, PRIMASK
 8003472:	607b      	str	r3, [r7, #4]
  return(result);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <osKernelStart+0x32>
 800347a:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <osKernelStart+0x64>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d109      	bne.n	8003496 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003482:	f3ef 8311 	mrs	r3, BASEPRI
 8003486:	603b      	str	r3, [r7, #0]
  return(result);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <osKernelStart+0x3a>
    stat = osErrorISR;
 800348e:	f06f 0305 	mvn.w	r3, #5
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	e00e      	b.n	80034b4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003496:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <osKernelStart+0x64>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d107      	bne.n	80034ae <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800349e:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <osKernelStart+0x64>)
 80034a0:	2202      	movs	r2, #2
 80034a2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80034a4:	f001 fa60 	bl	8004968 <vTaskStartScheduler>
      stat = osOK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	e002      	b.n	80034b4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80034ae:	f04f 33ff 	mov.w	r3, #4294967295
 80034b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80034b4:	68fb      	ldr	r3, [r7, #12]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000098 	.word	0x20000098

080034c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b092      	sub	sp, #72	; 0x48
 80034c8:	af04      	add	r7, sp, #16
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034d4:	f3ef 8305 	mrs	r3, IPSR
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f040 8094 	bne.w	800360a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e2:	f3ef 8310 	mrs	r3, PRIMASK
 80034e6:	623b      	str	r3, [r7, #32]
  return(result);
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f040 808d 	bne.w	800360a <osThreadNew+0x146>
 80034f0:	4b48      	ldr	r3, [pc, #288]	; (8003614 <osThreadNew+0x150>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d106      	bne.n	8003506 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034f8:	f3ef 8311 	mrs	r3, BASEPRI
 80034fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	2b00      	cmp	r3, #0
 8003502:	f040 8082 	bne.w	800360a <osThreadNew+0x146>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d07e      	beq.n	800360a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800350c:	2380      	movs	r3, #128	; 0x80
 800350e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003510:	2318      	movs	r3, #24
 8003512:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003514:	2300      	movs	r3, #0
 8003516:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003518:	f107 031b 	add.w	r3, r7, #27
 800351c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800351e:	f04f 33ff 	mov.w	r3, #4294967295
 8003522:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d045      	beq.n	80035b6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <osThreadNew+0x74>
        name = attr->name;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003548:	2b00      	cmp	r3, #0
 800354a:	d008      	beq.n	800355e <osThreadNew+0x9a>
 800354c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354e:	2b38      	cmp	r3, #56	; 0x38
 8003550:	d805      	bhi.n	800355e <osThreadNew+0x9a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <osThreadNew+0x9e>
        return (NULL);
 800355e:	2300      	movs	r3, #0
 8003560:	e054      	b.n	800360c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	089b      	lsrs	r3, r3, #2
 8003570:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00e      	beq.n	8003598 <osThreadNew+0xd4>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	2b5b      	cmp	r3, #91	; 0x5b
 8003580:	d90a      	bls.n	8003598 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003586:	2b00      	cmp	r3, #0
 8003588:	d006      	beq.n	8003598 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <osThreadNew+0xd4>
        mem = 1;
 8003592:	2301      	movs	r3, #1
 8003594:	62bb      	str	r3, [r7, #40]	; 0x28
 8003596:	e010      	b.n	80035ba <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10c      	bne.n	80035ba <osThreadNew+0xf6>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d108      	bne.n	80035ba <osThreadNew+0xf6>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d104      	bne.n	80035ba <osThreadNew+0xf6>
          mem = 0;
 80035b0:	2300      	movs	r3, #0
 80035b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80035b4:	e001      	b.n	80035ba <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80035b6:	2300      	movs	r3, #0
 80035b8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80035ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d110      	bne.n	80035e2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035c8:	9202      	str	r2, [sp, #8]
 80035ca:	9301      	str	r3, [sp, #4]
 80035cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f001 f832 	bl	8004640 <xTaskCreateStatic>
 80035dc:	4603      	mov	r3, r0
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	e013      	b.n	800360a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80035e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d110      	bne.n	800360a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80035e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	f107 0314 	add.w	r3, r7, #20
 80035f0:	9301      	str	r3, [sp, #4]
 80035f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f001 f879 	bl	80046f2 <xTaskCreate>
 8003600:	4603      	mov	r3, r0
 8003602:	2b01      	cmp	r3, #1
 8003604:	d001      	beq.n	800360a <osThreadNew+0x146>
          hTask = NULL;
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800360a:	697b      	ldr	r3, [r7, #20]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3738      	adds	r7, #56	; 0x38
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20000098 	.word	0x20000098

08003618 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800361e:	f3ef 8305 	mrs	r3, IPSR
 8003622:	60bb      	str	r3, [r7, #8]
  return(result);
 8003624:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10f      	bne.n	800364a <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800362a:	f3ef 8310 	mrs	r3, PRIMASK
 800362e:	607b      	str	r3, [r7, #4]
  return(result);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d109      	bne.n	800364a <osThreadYield+0x32>
 8003636:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <osThreadYield+0x5c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d109      	bne.n	8003652 <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800363e:	f3ef 8311 	mrs	r3, BASEPRI
 8003642:	603b      	str	r3, [r7, #0]
  return(result);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <osThreadYield+0x3a>
    stat = osErrorISR;
 800364a:	f06f 0305 	mvn.w	r3, #5
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	e009      	b.n	8003666 <osThreadYield+0x4e>
  } else {
    stat = osOK;
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8003656:	4b08      	ldr	r3, [pc, #32]	; (8003678 <osThreadYield+0x60>)
 8003658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	f3bf 8f4f 	dsb	sy
 8003662:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8003666:	68fb      	ldr	r3, [r7, #12]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	20000098 	.word	0x20000098
 8003678:	e000ed04 	.word	0xe000ed04

0800367c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800367c:	b580      	push	{r7, lr}
 800367e:	b08c      	sub	sp, #48	; 0x30
 8003680:	af02      	add	r7, sp, #8
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003688:	2300      	movs	r3, #0
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800368c:	f3ef 8305 	mrs	r3, IPSR
 8003690:	61bb      	str	r3, [r7, #24]
  return(result);
 8003692:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003694:	2b00      	cmp	r3, #0
 8003696:	d170      	bne.n	800377a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003698:	f3ef 8310 	mrs	r3, PRIMASK
 800369c:	617b      	str	r3, [r7, #20]
  return(result);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d16a      	bne.n	800377a <osMessageQueueNew+0xfe>
 80036a4:	4b37      	ldr	r3, [pc, #220]	; (8003784 <osMessageQueueNew+0x108>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d105      	bne.n	80036b8 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036ac:	f3ef 8311 	mrs	r3, BASEPRI
 80036b0:	613b      	str	r3, [r7, #16]
  return(result);
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d160      	bne.n	800377a <osMessageQueueNew+0xfe>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d05d      	beq.n	800377a <osMessageQueueNew+0xfe>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d05a      	beq.n	800377a <osMessageQueueNew+0xfe>
    mem = -1;
 80036c4:	f04f 33ff 	mov.w	r3, #4294967295
 80036c8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d029      	beq.n	8003724 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d012      	beq.n	80036fe <osMessageQueueNew+0x82>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	2b4f      	cmp	r3, #79	; 0x4f
 80036de:	d90e      	bls.n	80036fe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	695a      	ldr	r2, [r3, #20]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	fb01 f303 	mul.w	r3, r1, r3
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d302      	bcc.n	80036fe <osMessageQueueNew+0x82>
        mem = 1;
 80036f8:	2301      	movs	r3, #1
 80036fa:	623b      	str	r3, [r7, #32]
 80036fc:	e014      	b.n	8003728 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d110      	bne.n	8003728 <osMessageQueueNew+0xac>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10c      	bne.n	8003728 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003712:	2b00      	cmp	r3, #0
 8003714:	d108      	bne.n	8003728 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d104      	bne.n	8003728 <osMessageQueueNew+0xac>
          mem = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	623b      	str	r3, [r7, #32]
 8003722:	e001      	b.n	8003728 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003724:	2300      	movs	r3, #0
 8003726:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d10c      	bne.n	8003748 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6899      	ldr	r1, [r3, #8]
 8003736:	2300      	movs	r3, #0
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	460b      	mov	r3, r1
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 fa58 	bl	8003bf4 <xQueueGenericCreateStatic>
 8003744:	6278      	str	r0, [r7, #36]	; 0x24
 8003746:	e008      	b.n	800375a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d105      	bne.n	800375a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800374e:	2200      	movs	r2, #0
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 fac0 	bl	8003cd8 <xQueueGenericCreate>
 8003758:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00c      	beq.n	800377a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <osMessageQueueNew+0xf2>
        name = attr->name;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	61fb      	str	r3, [r7, #28]
 800376c:	e001      	b.n	8003772 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003772:	69f9      	ldr	r1, [r7, #28]
 8003774:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003776:	f000 ff07 	bl	8004588 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800377c:	4618      	mov	r0, r3
 800377e:	3728      	adds	r7, #40	; 0x28
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20000098 	.word	0x20000098

08003788 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003788:	b580      	push	{r7, lr}
 800378a:	b08a      	sub	sp, #40	; 0x28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	603b      	str	r3, [r7, #0]
 8003794:	4613      	mov	r3, r2
 8003796:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800379c:	2300      	movs	r3, #0
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037a0:	f3ef 8305 	mrs	r3, IPSR
 80037a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80037a6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10f      	bne.n	80037cc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ac:	f3ef 8310 	mrs	r3, PRIMASK
 80037b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d109      	bne.n	80037cc <osMessageQueuePut+0x44>
 80037b8:	4b2b      	ldr	r3, [pc, #172]	; (8003868 <osMessageQueuePut+0xe0>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d12e      	bne.n	800381e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037c0:	f3ef 8311 	mrs	r3, BASEPRI
 80037c4:	617b      	str	r3, [r7, #20]
  return(result);
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d028      	beq.n	800381e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d005      	beq.n	80037de <osMessageQueuePut+0x56>
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <osMessageQueuePut+0x56>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80037de:	f06f 0303 	mvn.w	r3, #3
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80037e4:	e039      	b.n	800385a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80037e6:	2300      	movs	r3, #0
 80037e8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80037ea:	f107 0210 	add.w	r2, r7, #16
 80037ee:	2300      	movs	r3, #0
 80037f0:	68b9      	ldr	r1, [r7, #8]
 80037f2:	6a38      	ldr	r0, [r7, #32]
 80037f4:	f000 fbca 	bl	8003f8c <xQueueGenericSendFromISR>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d003      	beq.n	8003806 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80037fe:	f06f 0302 	mvn.w	r3, #2
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003804:	e029      	b.n	800385a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d026      	beq.n	800385a <osMessageQueuePut+0xd2>
 800380c:	4b17      	ldr	r3, [pc, #92]	; (800386c <osMessageQueuePut+0xe4>)
 800380e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800381c:	e01d      	b.n	800385a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <osMessageQueuePut+0xa2>
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d103      	bne.n	8003832 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800382a:	f06f 0303 	mvn.w	r3, #3
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
 8003830:	e014      	b.n	800385c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003832:	2300      	movs	r3, #0
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	6a38      	ldr	r0, [r7, #32]
 800383a:	f000 faad 	bl	8003d98 <xQueueGenericSend>
 800383e:	4603      	mov	r3, r0
 8003840:	2b01      	cmp	r3, #1
 8003842:	d00b      	beq.n	800385c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800384a:	f06f 0301 	mvn.w	r3, #1
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
 8003850:	e004      	b.n	800385c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8003852:	f06f 0302 	mvn.w	r3, #2
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
 8003858:	e000      	b.n	800385c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800385a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800385e:	4618      	mov	r0, r3
 8003860:	3728      	adds	r7, #40	; 0x28
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20000098 	.word	0x20000098
 800386c:	e000ed04 	.word	0xe000ed04

08003870 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003870:	b580      	push	{r7, lr}
 8003872:	b08a      	sub	sp, #40	; 0x28
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003882:	2300      	movs	r3, #0
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003886:	f3ef 8305 	mrs	r3, IPSR
 800388a:	61fb      	str	r3, [r7, #28]
  return(result);
 800388c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10f      	bne.n	80038b2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003892:	f3ef 8310 	mrs	r3, PRIMASK
 8003896:	61bb      	str	r3, [r7, #24]
  return(result);
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <osMessageQueueGet+0x42>
 800389e:	4b2b      	ldr	r3, [pc, #172]	; (800394c <osMessageQueueGet+0xdc>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d12e      	bne.n	8003904 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038a6:	f3ef 8311 	mrs	r3, BASEPRI
 80038aa:	617b      	str	r3, [r7, #20]
  return(result);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d028      	beq.n	8003904 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <osMessageQueueGet+0x54>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <osMessageQueueGet+0x54>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80038c4:	f06f 0303 	mvn.w	r3, #3
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80038ca:	e038      	b.n	800393e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80038cc:	2300      	movs	r3, #0
 80038ce:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80038d0:	f107 0310 	add.w	r3, r7, #16
 80038d4:	461a      	mov	r2, r3
 80038d6:	68b9      	ldr	r1, [r7, #8]
 80038d8:	6a38      	ldr	r0, [r7, #32]
 80038da:	f000 fcc7 	bl	800426c <xQueueReceiveFromISR>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d003      	beq.n	80038ec <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80038e4:	f06f 0302 	mvn.w	r3, #2
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80038ea:	e028      	b.n	800393e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d025      	beq.n	800393e <osMessageQueueGet+0xce>
 80038f2:	4b17      	ldr	r3, [pc, #92]	; (8003950 <osMessageQueueGet+0xe0>)
 80038f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003902:	e01c      	b.n	800393e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <osMessageQueueGet+0xa0>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d103      	bne.n	8003918 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8003910:	f06f 0303 	mvn.w	r3, #3
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
 8003916:	e013      	b.n	8003940 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	6a38      	ldr	r0, [r7, #32]
 800391e:	f000 fbc9 	bl	80040b4 <xQueueReceive>
 8003922:	4603      	mov	r3, r0
 8003924:	2b01      	cmp	r3, #1
 8003926:	d00b      	beq.n	8003940 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800392e:	f06f 0301 	mvn.w	r3, #1
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
 8003934:	e004      	b.n	8003940 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8003936:	f06f 0302 	mvn.w	r3, #2
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
 800393c:	e000      	b.n	8003940 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800393e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003942:	4618      	mov	r0, r3
 8003944:	3728      	adds	r7, #40	; 0x28
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20000098 	.word	0x20000098
 8003950:	e000ed04 	.word	0xe000ed04

08003954 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4a07      	ldr	r2, [pc, #28]	; (8003980 <vApplicationGetIdleTaskMemory+0x2c>)
 8003964:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	4a06      	ldr	r2, [pc, #24]	; (8003984 <vApplicationGetIdleTaskMemory+0x30>)
 800396a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2280      	movs	r2, #128	; 0x80
 8003970:	601a      	str	r2, [r3, #0]
}
 8003972:	bf00      	nop
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	2000009c 	.word	0x2000009c
 8003984:	200000f8 	.word	0x200000f8

08003988 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4a07      	ldr	r2, [pc, #28]	; (80039b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003998:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	4a06      	ldr	r2, [pc, #24]	; (80039b8 <vApplicationGetTimerTaskMemory+0x30>)
 800399e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039a6:	601a      	str	r2, [r3, #0]
}
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	200002f8 	.word	0x200002f8
 80039b8:	20000354 	.word	0x20000354

080039bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f103 0208 	add.w	r2, r3, #8
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f04f 32ff 	mov.w	r2, #4294967295
 80039d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f103 0208 	add.w	r2, r3, #8
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f103 0208 	add.w	r2, r3, #8
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a16:	b480      	push	{r7}
 8003a18:	b085      	sub	sp, #20
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	601a      	str	r2, [r3, #0]
}
 8003a52:	bf00      	nop
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b085      	sub	sp, #20
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a74:	d103      	bne.n	8003a7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	e00c      	b.n	8003a98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3308      	adds	r3, #8
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	e002      	b.n	8003a8c <vListInsert+0x2e>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d2f6      	bcs.n	8003a86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	601a      	str	r2, [r3, #0]
}
 8003ac4:	bf00      	nop
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6892      	ldr	r2, [r2, #8]
 8003ae6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6852      	ldr	r2, [r2, #4]
 8003af0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d103      	bne.n	8003b04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	1e5a      	subs	r2, r3, #1
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d109      	bne.n	8003b4c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3c:	f383 8811 	msr	BASEPRI, r3
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	e7fe      	b.n	8003b4a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003b4c:	f002 f85e 	bl	8005c0c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b58:	68f9      	ldr	r1, [r7, #12]
 8003b5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b5c:	fb01 f303 	mul.w	r3, r1, r3
 8003b60:	441a      	add	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	68f9      	ldr	r1, [r7, #12]
 8003b80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b82:	fb01 f303 	mul.w	r3, r1, r3
 8003b86:	441a      	add	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	22ff      	movs	r2, #255	; 0xff
 8003b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	22ff      	movs	r2, #255	; 0xff
 8003b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d114      	bne.n	8003bcc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d01a      	beq.n	8003be0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	3310      	adds	r3, #16
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f001 f960 	bl	8004e74 <xTaskRemoveFromEventList>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d012      	beq.n	8003be0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003bba:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <xQueueGenericReset+0xcc>)
 8003bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	f3bf 8f4f 	dsb	sy
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	e009      	b.n	8003be0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	3310      	adds	r3, #16
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff fef3 	bl	80039bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	3324      	adds	r3, #36	; 0x24
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff feee 	bl	80039bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003be0:	f002 f842 	bl	8005c68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003be4:	2301      	movs	r3, #1
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	e000ed04 	.word	0xe000ed04

08003bf4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08e      	sub	sp, #56	; 0x38
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d109      	bne.n	8003c1c <xQueueGenericCreateStatic+0x28>
 8003c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0c:	f383 8811 	msr	BASEPRI, r3
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c1a:	e7fe      	b.n	8003c1a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <xQueueGenericCreateStatic+0x42>
 8003c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
 8003c34:	e7fe      	b.n	8003c34 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <xQueueGenericCreateStatic+0x4e>
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <xQueueGenericCreateStatic+0x52>
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <xQueueGenericCreateStatic+0x54>
 8003c46:	2300      	movs	r3, #0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d109      	bne.n	8003c60 <xQueueGenericCreateStatic+0x6c>
 8003c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c50:	f383 8811 	msr	BASEPRI, r3
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	623b      	str	r3, [r7, #32]
 8003c5e:	e7fe      	b.n	8003c5e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d102      	bne.n	8003c6c <xQueueGenericCreateStatic+0x78>
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <xQueueGenericCreateStatic+0x7c>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <xQueueGenericCreateStatic+0x7e>
 8003c70:	2300      	movs	r3, #0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d109      	bne.n	8003c8a <xQueueGenericCreateStatic+0x96>
 8003c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	61fb      	str	r3, [r7, #28]
 8003c88:	e7fe      	b.n	8003c88 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003c8a:	2350      	movs	r3, #80	; 0x50
 8003c8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b50      	cmp	r3, #80	; 0x50
 8003c92:	d009      	beq.n	8003ca8 <xQueueGenericCreateStatic+0xb4>
 8003c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	e7fe      	b.n	8003ca6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00d      	beq.n	8003cce <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003cba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	68b9      	ldr	r1, [r7, #8]
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 f842 	bl	8003d52 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3730      	adds	r7, #48	; 0x30
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08a      	sub	sp, #40	; 0x28
 8003cdc:	af02      	add	r7, sp, #8
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d109      	bne.n	8003d00 <xQueueGenericCreate+0x28>
 8003cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf0:	f383 8811 	msr	BASEPRI, r3
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	613b      	str	r3, [r7, #16]
 8003cfe:	e7fe      	b.n	8003cfe <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d102      	bne.n	8003d0c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	61fb      	str	r3, [r7, #28]
 8003d0a:	e004      	b.n	8003d16 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	fb02 f303 	mul.w	r3, r2, r3
 8003d14:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	3350      	adds	r3, #80	; 0x50
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f002 f890 	bl	8005e40 <pvPortMalloc>
 8003d20:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00f      	beq.n	8003d48 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	3350      	adds	r3, #80	; 0x50
 8003d2c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d36:	79fa      	ldrb	r2, [r7, #7]
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	68b9      	ldr	r1, [r7, #8]
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f805 	bl	8003d52 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003d48:	69bb      	ldr	r3, [r7, #24]
	}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3720      	adds	r7, #32
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b084      	sub	sp, #16
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
 8003d5e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d103      	bne.n	8003d6e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	e002      	b.n	8003d74 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d80:	2101      	movs	r1, #1
 8003d82:	69b8      	ldr	r0, [r7, #24]
 8003d84:	f7ff fece 	bl	8003b24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	78fa      	ldrb	r2, [r7, #3]
 8003d8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d90:	bf00      	nop
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08e      	sub	sp, #56	; 0x38
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
 8003da4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003da6:	2300      	movs	r3, #0
 8003da8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d109      	bne.n	8003dc8 <xQueueGenericSend+0x30>
 8003db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dc6:	e7fe      	b.n	8003dc6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d103      	bne.n	8003dd6 <xQueueGenericSend+0x3e>
 8003dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <xQueueGenericSend+0x42>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <xQueueGenericSend+0x44>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d109      	bne.n	8003df4 <xQueueGenericSend+0x5c>
 8003de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
 8003df2:	e7fe      	b.n	8003df2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d103      	bne.n	8003e02 <xQueueGenericSend+0x6a>
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <xQueueGenericSend+0x6e>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <xQueueGenericSend+0x70>
 8003e06:	2300      	movs	r3, #0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d109      	bne.n	8003e20 <xQueueGenericSend+0x88>
 8003e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e10:	f383 8811 	msr	BASEPRI, r3
 8003e14:	f3bf 8f6f 	isb	sy
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	623b      	str	r3, [r7, #32]
 8003e1e:	e7fe      	b.n	8003e1e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e20:	f001 f9e4 	bl	80051ec <xTaskGetSchedulerState>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d102      	bne.n	8003e30 <xQueueGenericSend+0x98>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <xQueueGenericSend+0x9c>
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <xQueueGenericSend+0x9e>
 8003e34:	2300      	movs	r3, #0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d109      	bne.n	8003e4e <xQueueGenericSend+0xb6>
 8003e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	61fb      	str	r3, [r7, #28]
 8003e4c:	e7fe      	b.n	8003e4c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e4e:	f001 fedd 	bl	8005c0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d302      	bcc.n	8003e64 <xQueueGenericSend+0xcc>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d129      	bne.n	8003eb8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	68b9      	ldr	r1, [r7, #8]
 8003e68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e6a:	f000 fa7c 	bl	8004366 <prvCopyDataToQueue>
 8003e6e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d010      	beq.n	8003e9a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7a:	3324      	adds	r3, #36	; 0x24
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 fff9 	bl	8004e74 <xTaskRemoveFromEventList>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d013      	beq.n	8003eb0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e88:	4b3f      	ldr	r3, [pc, #252]	; (8003f88 <xQueueGenericSend+0x1f0>)
 8003e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	e00a      	b.n	8003eb0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d007      	beq.n	8003eb0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ea0:	4b39      	ldr	r3, [pc, #228]	; (8003f88 <xQueueGenericSend+0x1f0>)
 8003ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003eb0:	f001 feda 	bl	8005c68 <vPortExitCritical>
				return pdPASS;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e063      	b.n	8003f80 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d103      	bne.n	8003ec6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ebe:	f001 fed3 	bl	8005c68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e05c      	b.n	8003f80 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d106      	bne.n	8003eda <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ecc:	f107 0314 	add.w	r3, r7, #20
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f001 f831 	bl	8004f38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003eda:	f001 fec5 	bl	8005c68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ede:	f000 fda7 	bl	8004a30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ee2:	f001 fe93 	bl	8005c0c <vPortEnterCritical>
 8003ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eec:	b25b      	sxtb	r3, r3
 8003eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef2:	d103      	bne.n	8003efc <xQueueGenericSend+0x164>
 8003ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f02:	b25b      	sxtb	r3, r3
 8003f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f08:	d103      	bne.n	8003f12 <xQueueGenericSend+0x17a>
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f12:	f001 fea9 	bl	8005c68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f16:	1d3a      	adds	r2, r7, #4
 8003f18:	f107 0314 	add.w	r3, r7, #20
 8003f1c:	4611      	mov	r1, r2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f001 f820 	bl	8004f64 <xTaskCheckForTimeOut>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d124      	bne.n	8003f74 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f2c:	f000 fb13 	bl	8004556 <prvIsQueueFull>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d018      	beq.n	8003f68 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f38:	3310      	adds	r3, #16
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 ff4a 	bl	8004dd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f46:	f000 fa9e 	bl	8004486 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f4a:	f000 fd7f 	bl	8004a4c <xTaskResumeAll>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f47f af7c 	bne.w	8003e4e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003f56:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <xQueueGenericSend+0x1f0>)
 8003f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	e772      	b.n	8003e4e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f6a:	f000 fa8c 	bl	8004486 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f6e:	f000 fd6d 	bl	8004a4c <xTaskResumeAll>
 8003f72:	e76c      	b.n	8003e4e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f76:	f000 fa86 	bl	8004486 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f7a:	f000 fd67 	bl	8004a4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f7e:	2300      	movs	r3, #0
		}
	}
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3738      	adds	r7, #56	; 0x38
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	e000ed04 	.word	0xe000ed04

08003f8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08e      	sub	sp, #56	; 0x38
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d109      	bne.n	8003fb8 <xQueueGenericSendFromISR+0x2c>
 8003fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb6:	e7fe      	b.n	8003fb6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d103      	bne.n	8003fc6 <xQueueGenericSendFromISR+0x3a>
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <xQueueGenericSendFromISR+0x3e>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <xQueueGenericSendFromISR+0x40>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d109      	bne.n	8003fe4 <xQueueGenericSendFromISR+0x58>
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	623b      	str	r3, [r7, #32]
 8003fe2:	e7fe      	b.n	8003fe2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d103      	bne.n	8003ff2 <xQueueGenericSendFromISR+0x66>
 8003fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d101      	bne.n	8003ff6 <xQueueGenericSendFromISR+0x6a>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <xQueueGenericSendFromISR+0x6c>
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d109      	bne.n	8004010 <xQueueGenericSendFromISR+0x84>
 8003ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004000:	f383 8811 	msr	BASEPRI, r3
 8004004:	f3bf 8f6f 	isb	sy
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	e7fe      	b.n	800400e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004010:	f001 fed8 	bl	8005dc4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004014:	f3ef 8211 	mrs	r2, BASEPRI
 8004018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	61ba      	str	r2, [r7, #24]
 800402a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800402c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800402e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004038:	429a      	cmp	r2, r3
 800403a:	d302      	bcc.n	8004042 <xQueueGenericSendFromISR+0xb6>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d12c      	bne.n	800409c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004048:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004052:	f000 f988 	bl	8004366 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004056:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800405a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405e:	d112      	bne.n	8004086 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	2b00      	cmp	r3, #0
 8004066:	d016      	beq.n	8004096 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406a:	3324      	adds	r3, #36	; 0x24
 800406c:	4618      	mov	r0, r3
 800406e:	f000 ff01 	bl	8004e74 <xTaskRemoveFromEventList>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00e      	beq.n	8004096 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00b      	beq.n	8004096 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	e007      	b.n	8004096 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004086:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800408a:	3301      	adds	r3, #1
 800408c:	b2db      	uxtb	r3, r3
 800408e:	b25a      	sxtb	r2, r3
 8004090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004096:	2301      	movs	r3, #1
 8004098:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800409a:	e001      	b.n	80040a0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800409c:	2300      	movs	r3, #0
 800409e:	637b      	str	r3, [r7, #52]	; 0x34
 80040a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80040aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3738      	adds	r7, #56	; 0x38
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08c      	sub	sp, #48	; 0x30
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80040c0:	2300      	movs	r3, #0
 80040c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80040c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d109      	bne.n	80040e2 <xQueueReceive+0x2e>
	__asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	623b      	str	r3, [r7, #32]
 80040e0:	e7fe      	b.n	80040e0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d103      	bne.n	80040f0 <xQueueReceive+0x3c>
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <xQueueReceive+0x40>
 80040f0:	2301      	movs	r3, #1
 80040f2:	e000      	b.n	80040f6 <xQueueReceive+0x42>
 80040f4:	2300      	movs	r3, #0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d109      	bne.n	800410e <xQueueReceive+0x5a>
 80040fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	61fb      	str	r3, [r7, #28]
 800410c:	e7fe      	b.n	800410c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800410e:	f001 f86d 	bl	80051ec <xTaskGetSchedulerState>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d102      	bne.n	800411e <xQueueReceive+0x6a>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <xQueueReceive+0x6e>
 800411e:	2301      	movs	r3, #1
 8004120:	e000      	b.n	8004124 <xQueueReceive+0x70>
 8004122:	2300      	movs	r3, #0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d109      	bne.n	800413c <xQueueReceive+0x88>
 8004128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	61bb      	str	r3, [r7, #24]
 800413a:	e7fe      	b.n	800413a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800413c:	f001 fd66 	bl	8005c0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004144:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	2b00      	cmp	r3, #0
 800414a:	d01f      	beq.n	800418c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800414c:	68b9      	ldr	r1, [r7, #8]
 800414e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004150:	f000 f973 	bl	800443a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004156:	1e5a      	subs	r2, r3, #1
 8004158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00f      	beq.n	8004184 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004166:	3310      	adds	r3, #16
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fe83 	bl	8004e74 <xTaskRemoveFromEventList>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d007      	beq.n	8004184 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004174:	4b3c      	ldr	r3, [pc, #240]	; (8004268 <xQueueReceive+0x1b4>)
 8004176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004184:	f001 fd70 	bl	8005c68 <vPortExitCritical>
				return pdPASS;
 8004188:	2301      	movs	r3, #1
 800418a:	e069      	b.n	8004260 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d103      	bne.n	800419a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004192:	f001 fd69 	bl	8005c68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004196:	2300      	movs	r3, #0
 8004198:	e062      	b.n	8004260 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	2b00      	cmp	r3, #0
 800419e:	d106      	bne.n	80041ae <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041a0:	f107 0310 	add.w	r3, r7, #16
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 fec7 	bl	8004f38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041aa:	2301      	movs	r3, #1
 80041ac:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041ae:	f001 fd5b 	bl	8005c68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041b2:	f000 fc3d 	bl	8004a30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041b6:	f001 fd29 	bl	8005c0c <vPortEnterCritical>
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041c0:	b25b      	sxtb	r3, r3
 80041c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c6:	d103      	bne.n	80041d0 <xQueueReceive+0x11c>
 80041c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041d6:	b25b      	sxtb	r3, r3
 80041d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041dc:	d103      	bne.n	80041e6 <xQueueReceive+0x132>
 80041de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041e6:	f001 fd3f 	bl	8005c68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041ea:	1d3a      	adds	r2, r7, #4
 80041ec:	f107 0310 	add.w	r3, r7, #16
 80041f0:	4611      	mov	r1, r2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 feb6 	bl	8004f64 <xTaskCheckForTimeOut>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d123      	bne.n	8004246 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004200:	f000 f993 	bl	800452a <prvIsQueueEmpty>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d017      	beq.n	800423a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800420a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420c:	3324      	adds	r3, #36	; 0x24
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	4611      	mov	r1, r2
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fde0 	bl	8004dd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800421a:	f000 f934 	bl	8004486 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800421e:	f000 fc15 	bl	8004a4c <xTaskResumeAll>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d189      	bne.n	800413c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004228:	4b0f      	ldr	r3, [pc, #60]	; (8004268 <xQueueReceive+0x1b4>)
 800422a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	e780      	b.n	800413c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800423a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800423c:	f000 f923 	bl	8004486 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004240:	f000 fc04 	bl	8004a4c <xTaskResumeAll>
 8004244:	e77a      	b.n	800413c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004248:	f000 f91d 	bl	8004486 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800424c:	f000 fbfe 	bl	8004a4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004252:	f000 f96a 	bl	800452a <prvIsQueueEmpty>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	f43f af6f 	beq.w	800413c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800425e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004260:	4618      	mov	r0, r3
 8004262:	3730      	adds	r7, #48	; 0x30
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	e000ed04 	.word	0xe000ed04

0800426c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08e      	sub	sp, #56	; 0x38
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427e:	2b00      	cmp	r3, #0
 8004280:	d109      	bne.n	8004296 <xQueueReceiveFromISR+0x2a>
 8004282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	623b      	str	r3, [r7, #32]
 8004294:	e7fe      	b.n	8004294 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d103      	bne.n	80042a4 <xQueueReceiveFromISR+0x38>
 800429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <xQueueReceiveFromISR+0x3c>
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <xQueueReceiveFromISR+0x3e>
 80042a8:	2300      	movs	r3, #0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d109      	bne.n	80042c2 <xQueueReceiveFromISR+0x56>
 80042ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	61fb      	str	r3, [r7, #28]
 80042c0:	e7fe      	b.n	80042c0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042c2:	f001 fd7f 	bl	8005dc4 <vPortValidateInterruptPriority>
	__asm volatile
 80042c6:	f3ef 8211 	mrs	r2, BASEPRI
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	61ba      	str	r2, [r7, #24]
 80042dc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80042de:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80042e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d02f      	beq.n	800434e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80042ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042f8:	68b9      	ldr	r1, [r7, #8]
 80042fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042fc:	f000 f89d 	bl	800443a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	1e5a      	subs	r2, r3, #1
 8004304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004306:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004308:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004310:	d112      	bne.n	8004338 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d016      	beq.n	8004348 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800431a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431c:	3310      	adds	r3, #16
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fda8 	bl	8004e74 <xTaskRemoveFromEventList>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00e      	beq.n	8004348 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00b      	beq.n	8004348 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	e007      	b.n	8004348 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800433c:	3301      	adds	r3, #1
 800433e:	b2db      	uxtb	r3, r3
 8004340:	b25a      	sxtb	r2, r3
 8004342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004348:	2301      	movs	r3, #1
 800434a:	637b      	str	r3, [r7, #52]	; 0x34
 800434c:	e001      	b.n	8004352 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800434e:	2300      	movs	r3, #0
 8004350:	637b      	str	r3, [r7, #52]	; 0x34
 8004352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004354:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800435c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800435e:	4618      	mov	r0, r3
 8004360:	3738      	adds	r7, #56	; 0x38
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b086      	sub	sp, #24
 800436a:	af00      	add	r7, sp, #0
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10d      	bne.n	80043a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d14d      	bne.n	8004428 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	4618      	mov	r0, r3
 8004392:	f000 ff49 	bl	8005228 <xTaskPriorityDisinherit>
 8004396:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	605a      	str	r2, [r3, #4]
 800439e:	e043      	b.n	8004428 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d119      	bne.n	80043da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6898      	ldr	r0, [r3, #8]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	461a      	mov	r2, r3
 80043b0:	68b9      	ldr	r1, [r7, #8]
 80043b2:	f001 ff45 	bl	8006240 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	441a      	add	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d32b      	bcc.n	8004428 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	609a      	str	r2, [r3, #8]
 80043d8:	e026      	b.n	8004428 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	68d8      	ldr	r0, [r3, #12]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	461a      	mov	r2, r3
 80043e4:	68b9      	ldr	r1, [r7, #8]
 80043e6:	f001 ff2b 	bl	8006240 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	425b      	negs	r3, r3
 80043f4:	441a      	add	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d207      	bcs.n	8004416 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	425b      	negs	r3, r3
 8004410:	441a      	add	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d105      	bne.n	8004428 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	3b01      	subs	r3, #1
 8004426:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004430:	697b      	ldr	r3, [r7, #20]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b082      	sub	sp, #8
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	2b00      	cmp	r3, #0
 800444a:	d018      	beq.n	800447e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	441a      	add	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	429a      	cmp	r2, r3
 8004464:	d303      	bcc.n	800446e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68d9      	ldr	r1, [r3, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	461a      	mov	r2, r3
 8004478:	6838      	ldr	r0, [r7, #0]
 800447a:	f001 fee1 	bl	8006240 <memcpy>
	}
}
 800447e:	bf00      	nop
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800448e:	f001 fbbd 	bl	8005c0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004498:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800449a:	e011      	b.n	80044c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d012      	beq.n	80044ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3324      	adds	r3, #36	; 0x24
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fce3 	bl	8004e74 <xTaskRemoveFromEventList>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80044b4:	f000 fdb6 	bl	8005024 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	dce9      	bgt.n	800449c <prvUnlockQueue+0x16>
 80044c8:	e000      	b.n	80044cc <prvUnlockQueue+0x46>
					break;
 80044ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	22ff      	movs	r2, #255	; 0xff
 80044d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80044d4:	f001 fbc8 	bl	8005c68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80044d8:	f001 fb98 	bl	8005c0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044e4:	e011      	b.n	800450a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d012      	beq.n	8004514 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	3310      	adds	r3, #16
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fcbe 	bl	8004e74 <xTaskRemoveFromEventList>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80044fe:	f000 fd91 	bl	8005024 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004502:	7bbb      	ldrb	r3, [r7, #14]
 8004504:	3b01      	subs	r3, #1
 8004506:	b2db      	uxtb	r3, r3
 8004508:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800450a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800450e:	2b00      	cmp	r3, #0
 8004510:	dce9      	bgt.n	80044e6 <prvUnlockQueue+0x60>
 8004512:	e000      	b.n	8004516 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004514:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	22ff      	movs	r2, #255	; 0xff
 800451a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800451e:	f001 fba3 	bl	8005c68 <vPortExitCritical>
}
 8004522:	bf00      	nop
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004532:	f001 fb6b 	bl	8005c0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	2b00      	cmp	r3, #0
 800453c:	d102      	bne.n	8004544 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800453e:	2301      	movs	r3, #1
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	e001      	b.n	8004548 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004544:	2300      	movs	r3, #0
 8004546:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004548:	f001 fb8e 	bl	8005c68 <vPortExitCritical>

	return xReturn;
 800454c:	68fb      	ldr	r3, [r7, #12]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b084      	sub	sp, #16
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800455e:	f001 fb55 	bl	8005c0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456a:	429a      	cmp	r2, r3
 800456c:	d102      	bne.n	8004574 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800456e:	2301      	movs	r3, #1
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	e001      	b.n	8004578 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004578:	f001 fb76 	bl	8005c68 <vPortExitCritical>

	return xReturn;
 800457c:	68fb      	ldr	r3, [r7, #12]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	e014      	b.n	80045c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004598:	4a0e      	ldr	r2, [pc, #56]	; (80045d4 <vQueueAddToRegistry+0x4c>)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10b      	bne.n	80045bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80045a4:	490b      	ldr	r1, [pc, #44]	; (80045d4 <vQueueAddToRegistry+0x4c>)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80045ae:	4a09      	ldr	r2, [pc, #36]	; (80045d4 <vQueueAddToRegistry+0x4c>)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	4413      	add	r3, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80045ba:	e005      	b.n	80045c8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	3301      	adds	r3, #1
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2b07      	cmp	r3, #7
 80045c6:	d9e7      	bls.n	8004598 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80045c8:	bf00      	nop
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	20001a84 	.word	0x20001a84

080045d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80045e8:	f001 fb10 	bl	8005c0c <vPortEnterCritical>
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045f2:	b25b      	sxtb	r3, r3
 80045f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f8:	d103      	bne.n	8004602 <vQueueWaitForMessageRestricted+0x2a>
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004608:	b25b      	sxtb	r3, r3
 800460a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460e:	d103      	bne.n	8004618 <vQueueWaitForMessageRestricted+0x40>
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004618:	f001 fb26 	bl	8005c68 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	2b00      	cmp	r3, #0
 8004622:	d106      	bne.n	8004632 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	3324      	adds	r3, #36	; 0x24
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	68b9      	ldr	r1, [r7, #8]
 800462c:	4618      	mov	r0, r3
 800462e:	f000 fbf7 	bl	8004e20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004632:	6978      	ldr	r0, [r7, #20]
 8004634:	f7ff ff27 	bl	8004486 <prvUnlockQueue>
	}
 8004638:	bf00      	nop
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004640:	b580      	push	{r7, lr}
 8004642:	b08e      	sub	sp, #56	; 0x38
 8004644:	af04      	add	r7, sp, #16
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800464e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004650:	2b00      	cmp	r3, #0
 8004652:	d109      	bne.n	8004668 <xTaskCreateStatic+0x28>
	__asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	623b      	str	r3, [r7, #32]
 8004666:	e7fe      	b.n	8004666 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466a:	2b00      	cmp	r3, #0
 800466c:	d109      	bne.n	8004682 <xTaskCreateStatic+0x42>
 800466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	61fb      	str	r3, [r7, #28]
 8004680:	e7fe      	b.n	8004680 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004682:	235c      	movs	r3, #92	; 0x5c
 8004684:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	2b5c      	cmp	r3, #92	; 0x5c
 800468a:	d009      	beq.n	80046a0 <xTaskCreateStatic+0x60>
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	61bb      	str	r3, [r7, #24]
 800469e:	e7fe      	b.n	800469e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80046a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d01e      	beq.n	80046e4 <xTaskCreateStatic+0xa4>
 80046a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01b      	beq.n	80046e4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	2202      	movs	r2, #2
 80046ba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80046be:	2300      	movs	r3, #0
 80046c0:	9303      	str	r3, [sp, #12]
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	9302      	str	r3, [sp, #8]
 80046c6:	f107 0314 	add.w	r3, r7, #20
 80046ca:	9301      	str	r3, [sp, #4]
 80046cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 f850 	bl	800477c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046de:	f000 f8d3 	bl	8004888 <prvAddNewTaskToReadyList>
 80046e2:	e001      	b.n	80046e8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80046e4:	2300      	movs	r3, #0
 80046e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80046e8:	697b      	ldr	r3, [r7, #20]
	}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3728      	adds	r7, #40	; 0x28
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b08c      	sub	sp, #48	; 0x30
 80046f6:	af04      	add	r7, sp, #16
 80046f8:	60f8      	str	r0, [r7, #12]
 80046fa:	60b9      	str	r1, [r7, #8]
 80046fc:	603b      	str	r3, [r7, #0]
 80046fe:	4613      	mov	r3, r2
 8004700:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004702:	88fb      	ldrh	r3, [r7, #6]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4618      	mov	r0, r3
 8004708:	f001 fb9a 	bl	8005e40 <pvPortMalloc>
 800470c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00e      	beq.n	8004732 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004714:	205c      	movs	r0, #92	; 0x5c
 8004716:	f001 fb93 	bl	8005e40 <pvPortMalloc>
 800471a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	631a      	str	r2, [r3, #48]	; 0x30
 8004728:	e005      	b.n	8004736 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800472a:	6978      	ldr	r0, [r7, #20]
 800472c:	f001 fc4a 	bl	8005fc4 <vPortFree>
 8004730:	e001      	b.n	8004736 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004732:	2300      	movs	r3, #0
 8004734:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d017      	beq.n	800476c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004744:	88fa      	ldrh	r2, [r7, #6]
 8004746:	2300      	movs	r3, #0
 8004748:	9303      	str	r3, [sp, #12]
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	9302      	str	r3, [sp, #8]
 800474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004750:	9301      	str	r3, [sp, #4]
 8004752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 f80e 	bl	800477c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004760:	69f8      	ldr	r0, [r7, #28]
 8004762:	f000 f891 	bl	8004888 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004766:	2301      	movs	r3, #1
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	e002      	b.n	8004772 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800476c:	f04f 33ff 	mov.w	r3, #4294967295
 8004770:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004772:	69bb      	ldr	r3, [r7, #24]
	}
 8004774:	4618      	mov	r0, r3
 8004776:	3720      	adds	r7, #32
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	461a      	mov	r2, r3
 8004794:	21a5      	movs	r1, #165	; 0xa5
 8004796:	f001 fd5e 	bl	8006256 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80047a4:	3b01      	subs	r3, #1
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	f023 0307 	bic.w	r3, r3, #7
 80047b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d009      	beq.n	80047d2 <prvInitialiseNewTask+0x56>
 80047be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	e7fe      	b.n	80047d0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047d2:	2300      	movs	r3, #0
 80047d4:	61fb      	str	r3, [r7, #28]
 80047d6:	e012      	b.n	80047fe <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	4413      	add	r3, r2
 80047de:	7819      	ldrb	r1, [r3, #0]
 80047e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	4413      	add	r3, r2
 80047e6:	3334      	adds	r3, #52	; 0x34
 80047e8:	460a      	mov	r2, r1
 80047ea:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	4413      	add	r3, r2
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d006      	beq.n	8004806 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	3301      	adds	r3, #1
 80047fc:	61fb      	str	r3, [r7, #28]
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	2b0f      	cmp	r3, #15
 8004802:	d9e9      	bls.n	80047d8 <prvInitialiseNewTask+0x5c>
 8004804:	e000      	b.n	8004808 <prvInitialiseNewTask+0x8c>
		{
			break;
 8004806:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004812:	2b37      	cmp	r3, #55	; 0x37
 8004814:	d901      	bls.n	800481a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004816:	2337      	movs	r3, #55	; 0x37
 8004818:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800481e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004824:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	2200      	movs	r2, #0
 800482a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800482c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482e:	3304      	adds	r3, #4
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff f8e3 	bl	80039fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004838:	3318      	adds	r3, #24
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff f8de 	bl	80039fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004844:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004848:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800484c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004854:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	2200      	movs	r2, #0
 800485a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800485c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	68f9      	ldr	r1, [r7, #12]
 8004868:	69b8      	ldr	r0, [r7, #24]
 800486a:	f001 f8a7 	bl	80059bc <pxPortInitialiseStack>
 800486e:	4602      	mov	r2, r0
 8004870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004872:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800487a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800487e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004880:	bf00      	nop
 8004882:	3720      	adds	r7, #32
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004890:	f001 f9bc 	bl	8005c0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004894:	4b2d      	ldr	r3, [pc, #180]	; (800494c <prvAddNewTaskToReadyList+0xc4>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3301      	adds	r3, #1
 800489a:	4a2c      	ldr	r2, [pc, #176]	; (800494c <prvAddNewTaskToReadyList+0xc4>)
 800489c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800489e:	4b2c      	ldr	r3, [pc, #176]	; (8004950 <prvAddNewTaskToReadyList+0xc8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d109      	bne.n	80048ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80048a6:	4a2a      	ldr	r2, [pc, #168]	; (8004950 <prvAddNewTaskToReadyList+0xc8>)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80048ac:	4b27      	ldr	r3, [pc, #156]	; (800494c <prvAddNewTaskToReadyList+0xc4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d110      	bne.n	80048d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80048b4:	f000 fbda 	bl	800506c <prvInitialiseTaskLists>
 80048b8:	e00d      	b.n	80048d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80048ba:	4b26      	ldr	r3, [pc, #152]	; (8004954 <prvAddNewTaskToReadyList+0xcc>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d109      	bne.n	80048d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048c2:	4b23      	ldr	r3, [pc, #140]	; (8004950 <prvAddNewTaskToReadyList+0xc8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d802      	bhi.n	80048d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048d0:	4a1f      	ldr	r2, [pc, #124]	; (8004950 <prvAddNewTaskToReadyList+0xc8>)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048d6:	4b20      	ldr	r3, [pc, #128]	; (8004958 <prvAddNewTaskToReadyList+0xd0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3301      	adds	r3, #1
 80048dc:	4a1e      	ldr	r2, [pc, #120]	; (8004958 <prvAddNewTaskToReadyList+0xd0>)
 80048de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80048e0:	4b1d      	ldr	r3, [pc, #116]	; (8004958 <prvAddNewTaskToReadyList+0xd0>)
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ec:	4b1b      	ldr	r3, [pc, #108]	; (800495c <prvAddNewTaskToReadyList+0xd4>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d903      	bls.n	80048fc <prvAddNewTaskToReadyList+0x74>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	4a18      	ldr	r2, [pc, #96]	; (800495c <prvAddNewTaskToReadyList+0xd4>)
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004900:	4613      	mov	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4a15      	ldr	r2, [pc, #84]	; (8004960 <prvAddNewTaskToReadyList+0xd8>)
 800490a:	441a      	add	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3304      	adds	r3, #4
 8004910:	4619      	mov	r1, r3
 8004912:	4610      	mov	r0, r2
 8004914:	f7ff f87f 	bl	8003a16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004918:	f001 f9a6 	bl	8005c68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800491c:	4b0d      	ldr	r3, [pc, #52]	; (8004954 <prvAddNewTaskToReadyList+0xcc>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00e      	beq.n	8004942 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004924:	4b0a      	ldr	r3, [pc, #40]	; (8004950 <prvAddNewTaskToReadyList+0xc8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492e:	429a      	cmp	r2, r3
 8004930:	d207      	bcs.n	8004942 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004932:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <prvAddNewTaskToReadyList+0xdc>)
 8004934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004942:	bf00      	nop
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	20000c28 	.word	0x20000c28
 8004950:	20000754 	.word	0x20000754
 8004954:	20000c34 	.word	0x20000c34
 8004958:	20000c44 	.word	0x20000c44
 800495c:	20000c30 	.word	0x20000c30
 8004960:	20000758 	.word	0x20000758
 8004964:	e000ed04 	.word	0xe000ed04

08004968 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08a      	sub	sp, #40	; 0x28
 800496c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800496e:	2300      	movs	r3, #0
 8004970:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004972:	2300      	movs	r3, #0
 8004974:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004976:	463a      	mov	r2, r7
 8004978:	1d39      	adds	r1, r7, #4
 800497a:	f107 0308 	add.w	r3, r7, #8
 800497e:	4618      	mov	r0, r3
 8004980:	f7fe ffe8 	bl	8003954 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004984:	6839      	ldr	r1, [r7, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	9202      	str	r2, [sp, #8]
 800498c:	9301      	str	r3, [sp, #4]
 800498e:	2300      	movs	r3, #0
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	2300      	movs	r3, #0
 8004994:	460a      	mov	r2, r1
 8004996:	4920      	ldr	r1, [pc, #128]	; (8004a18 <vTaskStartScheduler+0xb0>)
 8004998:	4820      	ldr	r0, [pc, #128]	; (8004a1c <vTaskStartScheduler+0xb4>)
 800499a:	f7ff fe51 	bl	8004640 <xTaskCreateStatic>
 800499e:	4602      	mov	r2, r0
 80049a0:	4b1f      	ldr	r3, [pc, #124]	; (8004a20 <vTaskStartScheduler+0xb8>)
 80049a2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80049a4:	4b1e      	ldr	r3, [pc, #120]	; (8004a20 <vTaskStartScheduler+0xb8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80049ac:	2301      	movs	r3, #1
 80049ae:	617b      	str	r3, [r7, #20]
 80049b0:	e001      	b.n	80049b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d102      	bne.n	80049c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80049bc:	f000 fcf4 	bl	80053a8 <xTimerCreateTimerTask>
 80049c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d115      	bne.n	80049f4 <vTaskStartScheduler+0x8c>
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049da:	4b12      	ldr	r3, [pc, #72]	; (8004a24 <vTaskStartScheduler+0xbc>)
 80049dc:	f04f 32ff 	mov.w	r2, #4294967295
 80049e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049e2:	4b11      	ldr	r3, [pc, #68]	; (8004a28 <vTaskStartScheduler+0xc0>)
 80049e4:	2201      	movs	r2, #1
 80049e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80049e8:	4b10      	ldr	r3, [pc, #64]	; (8004a2c <vTaskStartScheduler+0xc4>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049ee:	f001 f86f 	bl	8005ad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049f2:	e00d      	b.n	8004a10 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fa:	d109      	bne.n	8004a10 <vTaskStartScheduler+0xa8>
 80049fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	e7fe      	b.n	8004a0e <vTaskStartScheduler+0xa6>
}
 8004a10:	bf00      	nop
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	08006ad0 	.word	0x08006ad0
 8004a1c:	0800503d 	.word	0x0800503d
 8004a20:	20000c4c 	.word	0x20000c4c
 8004a24:	20000c48 	.word	0x20000c48
 8004a28:	20000c34 	.word	0x20000c34
 8004a2c:	20000c2c 	.word	0x20000c2c

08004a30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004a34:	4b04      	ldr	r3, [pc, #16]	; (8004a48 <vTaskSuspendAll+0x18>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	4a03      	ldr	r2, [pc, #12]	; (8004a48 <vTaskSuspendAll+0x18>)
 8004a3c:	6013      	str	r3, [r2, #0]
}
 8004a3e:	bf00      	nop
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	20000c50 	.word	0x20000c50

08004a4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a5a:	4b41      	ldr	r3, [pc, #260]	; (8004b60 <xTaskResumeAll+0x114>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d109      	bne.n	8004a76 <xTaskResumeAll+0x2a>
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	e7fe      	b.n	8004a74 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a76:	f001 f8c9 	bl	8005c0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a7a:	4b39      	ldr	r3, [pc, #228]	; (8004b60 <xTaskResumeAll+0x114>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	4a37      	ldr	r2, [pc, #220]	; (8004b60 <xTaskResumeAll+0x114>)
 8004a82:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a84:	4b36      	ldr	r3, [pc, #216]	; (8004b60 <xTaskResumeAll+0x114>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d162      	bne.n	8004b52 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a8c:	4b35      	ldr	r3, [pc, #212]	; (8004b64 <xTaskResumeAll+0x118>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d05e      	beq.n	8004b52 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a94:	e02f      	b.n	8004af6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004a96:	4b34      	ldr	r3, [pc, #208]	; (8004b68 <xTaskResumeAll+0x11c>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	3318      	adds	r3, #24
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff f814 	bl	8003ad0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff f80f 	bl	8003ad0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab6:	4b2d      	ldr	r3, [pc, #180]	; (8004b6c <xTaskResumeAll+0x120>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d903      	bls.n	8004ac6 <xTaskResumeAll+0x7a>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac2:	4a2a      	ldr	r2, [pc, #168]	; (8004b6c <xTaskResumeAll+0x120>)
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aca:	4613      	mov	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4a27      	ldr	r2, [pc, #156]	; (8004b70 <xTaskResumeAll+0x124>)
 8004ad4:	441a      	add	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	3304      	adds	r3, #4
 8004ada:	4619      	mov	r1, r3
 8004adc:	4610      	mov	r0, r2
 8004ade:	f7fe ff9a 	bl	8003a16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae6:	4b23      	ldr	r3, [pc, #140]	; (8004b74 <xTaskResumeAll+0x128>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d302      	bcc.n	8004af6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004af0:	4b21      	ldr	r3, [pc, #132]	; (8004b78 <xTaskResumeAll+0x12c>)
 8004af2:	2201      	movs	r2, #1
 8004af4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004af6:	4b1c      	ldr	r3, [pc, #112]	; (8004b68 <xTaskResumeAll+0x11c>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1cb      	bne.n	8004a96 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b04:	f000 fb4c 	bl	80051a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004b08:	4b1c      	ldr	r3, [pc, #112]	; (8004b7c <xTaskResumeAll+0x130>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d010      	beq.n	8004b36 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b14:	f000 f846 	bl	8004ba4 <xTaskIncrementTick>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d002      	beq.n	8004b24 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004b1e:	4b16      	ldr	r3, [pc, #88]	; (8004b78 <xTaskResumeAll+0x12c>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1f1      	bne.n	8004b14 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004b30:	4b12      	ldr	r3, [pc, #72]	; (8004b7c <xTaskResumeAll+0x130>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b36:	4b10      	ldr	r3, [pc, #64]	; (8004b78 <xTaskResumeAll+0x12c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d009      	beq.n	8004b52 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b42:	4b0f      	ldr	r3, [pc, #60]	; (8004b80 <xTaskResumeAll+0x134>)
 8004b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b52:	f001 f889 	bl	8005c68 <vPortExitCritical>

	return xAlreadyYielded;
 8004b56:	68bb      	ldr	r3, [r7, #8]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	20000c50 	.word	0x20000c50
 8004b64:	20000c28 	.word	0x20000c28
 8004b68:	20000be8 	.word	0x20000be8
 8004b6c:	20000c30 	.word	0x20000c30
 8004b70:	20000758 	.word	0x20000758
 8004b74:	20000754 	.word	0x20000754
 8004b78:	20000c3c 	.word	0x20000c3c
 8004b7c:	20000c38 	.word	0x20000c38
 8004b80:	e000ed04 	.word	0xe000ed04

08004b84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b8a:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <xTaskGetTickCount+0x1c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b90:	687b      	ldr	r3, [r7, #4]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	20000c2c 	.word	0x20000c2c

08004ba4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bae:	4b51      	ldr	r3, [pc, #324]	; (8004cf4 <xTaskIncrementTick+0x150>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f040 808d 	bne.w	8004cd2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bb8:	4b4f      	ldr	r3, [pc, #316]	; (8004cf8 <xTaskIncrementTick+0x154>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004bc0:	4a4d      	ldr	r2, [pc, #308]	; (8004cf8 <xTaskIncrementTick+0x154>)
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d11f      	bne.n	8004c0c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004bcc:	4b4b      	ldr	r3, [pc, #300]	; (8004cfc <xTaskIncrementTick+0x158>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d009      	beq.n	8004bea <xTaskIncrementTick+0x46>
 8004bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	603b      	str	r3, [r7, #0]
 8004be8:	e7fe      	b.n	8004be8 <xTaskIncrementTick+0x44>
 8004bea:	4b44      	ldr	r3, [pc, #272]	; (8004cfc <xTaskIncrementTick+0x158>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	4b43      	ldr	r3, [pc, #268]	; (8004d00 <xTaskIncrementTick+0x15c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a41      	ldr	r2, [pc, #260]	; (8004cfc <xTaskIncrementTick+0x158>)
 8004bf6:	6013      	str	r3, [r2, #0]
 8004bf8:	4a41      	ldr	r2, [pc, #260]	; (8004d00 <xTaskIncrementTick+0x15c>)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	4b41      	ldr	r3, [pc, #260]	; (8004d04 <xTaskIncrementTick+0x160>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3301      	adds	r3, #1
 8004c04:	4a3f      	ldr	r2, [pc, #252]	; (8004d04 <xTaskIncrementTick+0x160>)
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	f000 faca 	bl	80051a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c0c:	4b3e      	ldr	r3, [pc, #248]	; (8004d08 <xTaskIncrementTick+0x164>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d34e      	bcc.n	8004cb4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c16:	4b39      	ldr	r3, [pc, #228]	; (8004cfc <xTaskIncrementTick+0x158>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <xTaskIncrementTick+0x80>
 8004c20:	2301      	movs	r3, #1
 8004c22:	e000      	b.n	8004c26 <xTaskIncrementTick+0x82>
 8004c24:	2300      	movs	r3, #0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d004      	beq.n	8004c34 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c2a:	4b37      	ldr	r3, [pc, #220]	; (8004d08 <xTaskIncrementTick+0x164>)
 8004c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c30:	601a      	str	r2, [r3, #0]
					break;
 8004c32:	e03f      	b.n	8004cb4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c34:	4b31      	ldr	r3, [pc, #196]	; (8004cfc <xTaskIncrementTick+0x158>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d203      	bcs.n	8004c54 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c4c:	4a2e      	ldr	r2, [pc, #184]	; (8004d08 <xTaskIncrementTick+0x164>)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6013      	str	r3, [r2, #0]
						break;
 8004c52:	e02f      	b.n	8004cb4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	3304      	adds	r3, #4
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fe ff39 	bl	8003ad0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d004      	beq.n	8004c70 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	3318      	adds	r3, #24
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fe ff30 	bl	8003ad0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c74:	4b25      	ldr	r3, [pc, #148]	; (8004d0c <xTaskIncrementTick+0x168>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d903      	bls.n	8004c84 <xTaskIncrementTick+0xe0>
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	4a22      	ldr	r2, [pc, #136]	; (8004d0c <xTaskIncrementTick+0x168>)
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4a1f      	ldr	r2, [pc, #124]	; (8004d10 <xTaskIncrementTick+0x16c>)
 8004c92:	441a      	add	r2, r3
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	3304      	adds	r3, #4
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	f7fe febb 	bl	8003a16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca4:	4b1b      	ldr	r3, [pc, #108]	; (8004d14 <xTaskIncrementTick+0x170>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d3b3      	bcc.n	8004c16 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cb2:	e7b0      	b.n	8004c16 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004cb4:	4b17      	ldr	r3, [pc, #92]	; (8004d14 <xTaskIncrementTick+0x170>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cba:	4915      	ldr	r1, [pc, #84]	; (8004d10 <xTaskIncrementTick+0x16c>)
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d907      	bls.n	8004cdc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	e004      	b.n	8004cdc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004cd2:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <xTaskIncrementTick+0x174>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	4a0f      	ldr	r2, [pc, #60]	; (8004d18 <xTaskIncrementTick+0x174>)
 8004cda:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004cdc:	4b0f      	ldr	r3, [pc, #60]	; (8004d1c <xTaskIncrementTick+0x178>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004ce8:	697b      	ldr	r3, [r7, #20]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	20000c50 	.word	0x20000c50
 8004cf8:	20000c2c 	.word	0x20000c2c
 8004cfc:	20000be0 	.word	0x20000be0
 8004d00:	20000be4 	.word	0x20000be4
 8004d04:	20000c40 	.word	0x20000c40
 8004d08:	20000c48 	.word	0x20000c48
 8004d0c:	20000c30 	.word	0x20000c30
 8004d10:	20000758 	.word	0x20000758
 8004d14:	20000754 	.word	0x20000754
 8004d18:	20000c38 	.word	0x20000c38
 8004d1c:	20000c3c 	.word	0x20000c3c

08004d20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d26:	4b27      	ldr	r3, [pc, #156]	; (8004dc4 <vTaskSwitchContext+0xa4>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d2e:	4b26      	ldr	r3, [pc, #152]	; (8004dc8 <vTaskSwitchContext+0xa8>)
 8004d30:	2201      	movs	r2, #1
 8004d32:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d34:	e040      	b.n	8004db8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004d36:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <vTaskSwitchContext+0xa8>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004d3c:	4b23      	ldr	r3, [pc, #140]	; (8004dcc <vTaskSwitchContext+0xac>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	e00f      	b.n	8004d64 <vTaskSwitchContext+0x44>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d109      	bne.n	8004d5e <vTaskSwitchContext+0x3e>
 8004d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	607b      	str	r3, [r7, #4]
 8004d5c:	e7fe      	b.n	8004d5c <vTaskSwitchContext+0x3c>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3b01      	subs	r3, #1
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	491a      	ldr	r1, [pc, #104]	; (8004dd0 <vTaskSwitchContext+0xb0>)
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0e5      	beq.n	8004d44 <vTaskSwitchContext+0x24>
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4a13      	ldr	r2, [pc, #76]	; (8004dd0 <vTaskSwitchContext+0xb0>)
 8004d84:	4413      	add	r3, r2
 8004d86:	60bb      	str	r3, [r7, #8]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	605a      	str	r2, [r3, #4]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	3308      	adds	r3, #8
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d104      	bne.n	8004da8 <vTaskSwitchContext+0x88>
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	605a      	str	r2, [r3, #4]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	4a09      	ldr	r2, [pc, #36]	; (8004dd4 <vTaskSwitchContext+0xb4>)
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	4a06      	ldr	r2, [pc, #24]	; (8004dcc <vTaskSwitchContext+0xac>)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6013      	str	r3, [r2, #0]
}
 8004db8:	bf00      	nop
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	20000c50 	.word	0x20000c50
 8004dc8:	20000c3c 	.word	0x20000c3c
 8004dcc:	20000c30 	.word	0x20000c30
 8004dd0:	20000758 	.word	0x20000758
 8004dd4:	20000754 	.word	0x20000754

08004dd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d109      	bne.n	8004dfc <vTaskPlaceOnEventList+0x24>
 8004de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	e7fe      	b.n	8004dfa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004dfc:	4b07      	ldr	r3, [pc, #28]	; (8004e1c <vTaskPlaceOnEventList+0x44>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3318      	adds	r3, #24
 8004e02:	4619      	mov	r1, r3
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fe fe2a 	bl	8003a5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	6838      	ldr	r0, [r7, #0]
 8004e0e:	f000 fa77 	bl	8005300 <prvAddCurrentTaskToDelayedList>
}
 8004e12:	bf00      	nop
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	20000754 	.word	0x20000754

08004e20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d109      	bne.n	8004e46 <vTaskPlaceOnEventListRestricted+0x26>
 8004e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	e7fe      	b.n	8004e44 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e46:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <vTaskPlaceOnEventListRestricted+0x50>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3318      	adds	r3, #24
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f7fe fde1 	bl	8003a16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e5e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	68b8      	ldr	r0, [r7, #8]
 8004e64:	f000 fa4c 	bl	8005300 <prvAddCurrentTaskToDelayedList>
	}
 8004e68:	bf00      	nop
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	20000754 	.word	0x20000754

08004e74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d109      	bne.n	8004e9e <xTaskRemoveFromEventList+0x2a>
 8004e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8e:	f383 8811 	msr	BASEPRI, r3
 8004e92:	f3bf 8f6f 	isb	sy
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	e7fe      	b.n	8004e9c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	3318      	adds	r3, #24
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fe fe14 	bl	8003ad0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ea8:	4b1d      	ldr	r3, [pc, #116]	; (8004f20 <xTaskRemoveFromEventList+0xac>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d11d      	bne.n	8004eec <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7fe fe0b 	bl	8003ad0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ebe:	4b19      	ldr	r3, [pc, #100]	; (8004f24 <xTaskRemoveFromEventList+0xb0>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d903      	bls.n	8004ece <xTaskRemoveFromEventList+0x5a>
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eca:	4a16      	ldr	r2, [pc, #88]	; (8004f24 <xTaskRemoveFromEventList+0xb0>)
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4a13      	ldr	r2, [pc, #76]	; (8004f28 <xTaskRemoveFromEventList+0xb4>)
 8004edc:	441a      	add	r2, r3
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	f7fe fd96 	bl	8003a16 <vListInsertEnd>
 8004eea:	e005      	b.n	8004ef8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	3318      	adds	r3, #24
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	480e      	ldr	r0, [pc, #56]	; (8004f2c <xTaskRemoveFromEventList+0xb8>)
 8004ef4:	f7fe fd8f 	bl	8003a16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004efc:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <xTaskRemoveFromEventList+0xbc>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d905      	bls.n	8004f12 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f06:	2301      	movs	r3, #1
 8004f08:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004f0a:	4b0a      	ldr	r3, [pc, #40]	; (8004f34 <xTaskRemoveFromEventList+0xc0>)
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	e001      	b.n	8004f16 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004f16:	697b      	ldr	r3, [r7, #20]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	20000c50 	.word	0x20000c50
 8004f24:	20000c30 	.word	0x20000c30
 8004f28:	20000758 	.word	0x20000758
 8004f2c:	20000be8 	.word	0x20000be8
 8004f30:	20000754 	.word	0x20000754
 8004f34:	20000c3c 	.word	0x20000c3c

08004f38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f40:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <vTaskInternalSetTimeOutState+0x24>)
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f48:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <vTaskInternalSetTimeOutState+0x28>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	605a      	str	r2, [r3, #4]
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	20000c40 	.word	0x20000c40
 8004f60:	20000c2c 	.word	0x20000c2c

08004f64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d109      	bne.n	8004f88 <xTaskCheckForTimeOut+0x24>
 8004f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	613b      	str	r3, [r7, #16]
 8004f86:	e7fe      	b.n	8004f86 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d109      	bne.n	8004fa2 <xTaskCheckForTimeOut+0x3e>
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	e7fe      	b.n	8004fa0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004fa2:	f000 fe33 	bl	8005c0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004fa6:	4b1d      	ldr	r3, [pc, #116]	; (800501c <xTaskCheckForTimeOut+0xb8>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbe:	d102      	bne.n	8004fc6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	61fb      	str	r3, [r7, #28]
 8004fc4:	e023      	b.n	800500e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	4b15      	ldr	r3, [pc, #84]	; (8005020 <xTaskCheckForTimeOut+0xbc>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d007      	beq.n	8004fe2 <xTaskCheckForTimeOut+0x7e>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d302      	bcc.n	8004fe2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	61fb      	str	r3, [r7, #28]
 8004fe0:	e015      	b.n	800500e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d20b      	bcs.n	8005004 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	1ad2      	subs	r2, r2, r3
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff ff9d 	bl	8004f38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004ffe:	2300      	movs	r3, #0
 8005000:	61fb      	str	r3, [r7, #28]
 8005002:	e004      	b.n	800500e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800500a:	2301      	movs	r3, #1
 800500c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800500e:	f000 fe2b 	bl	8005c68 <vPortExitCritical>

	return xReturn;
 8005012:	69fb      	ldr	r3, [r7, #28]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3720      	adds	r7, #32
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	20000c2c 	.word	0x20000c2c
 8005020:	20000c40 	.word	0x20000c40

08005024 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005028:	4b03      	ldr	r3, [pc, #12]	; (8005038 <vTaskMissedYield+0x14>)
 800502a:	2201      	movs	r2, #1
 800502c:	601a      	str	r2, [r3, #0]
}
 800502e:	bf00      	nop
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	20000c3c 	.word	0x20000c3c

0800503c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005044:	f000 f852 	bl	80050ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005048:	4b06      	ldr	r3, [pc, #24]	; (8005064 <prvIdleTask+0x28>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d9f9      	bls.n	8005044 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005050:	4b05      	ldr	r3, [pc, #20]	; (8005068 <prvIdleTask+0x2c>)
 8005052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005060:	e7f0      	b.n	8005044 <prvIdleTask+0x8>
 8005062:	bf00      	nop
 8005064:	20000758 	.word	0x20000758
 8005068:	e000ed04 	.word	0xe000ed04

0800506c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005072:	2300      	movs	r3, #0
 8005074:	607b      	str	r3, [r7, #4]
 8005076:	e00c      	b.n	8005092 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	4613      	mov	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4a12      	ldr	r2, [pc, #72]	; (80050cc <prvInitialiseTaskLists+0x60>)
 8005084:	4413      	add	r3, r2
 8005086:	4618      	mov	r0, r3
 8005088:	f7fe fc98 	bl	80039bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3301      	adds	r3, #1
 8005090:	607b      	str	r3, [r7, #4]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b37      	cmp	r3, #55	; 0x37
 8005096:	d9ef      	bls.n	8005078 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005098:	480d      	ldr	r0, [pc, #52]	; (80050d0 <prvInitialiseTaskLists+0x64>)
 800509a:	f7fe fc8f 	bl	80039bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800509e:	480d      	ldr	r0, [pc, #52]	; (80050d4 <prvInitialiseTaskLists+0x68>)
 80050a0:	f7fe fc8c 	bl	80039bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050a4:	480c      	ldr	r0, [pc, #48]	; (80050d8 <prvInitialiseTaskLists+0x6c>)
 80050a6:	f7fe fc89 	bl	80039bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050aa:	480c      	ldr	r0, [pc, #48]	; (80050dc <prvInitialiseTaskLists+0x70>)
 80050ac:	f7fe fc86 	bl	80039bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050b0:	480b      	ldr	r0, [pc, #44]	; (80050e0 <prvInitialiseTaskLists+0x74>)
 80050b2:	f7fe fc83 	bl	80039bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050b6:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <prvInitialiseTaskLists+0x78>)
 80050b8:	4a05      	ldr	r2, [pc, #20]	; (80050d0 <prvInitialiseTaskLists+0x64>)
 80050ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <prvInitialiseTaskLists+0x7c>)
 80050be:	4a05      	ldr	r2, [pc, #20]	; (80050d4 <prvInitialiseTaskLists+0x68>)
 80050c0:	601a      	str	r2, [r3, #0]
}
 80050c2:	bf00      	nop
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20000758 	.word	0x20000758
 80050d0:	20000bb8 	.word	0x20000bb8
 80050d4:	20000bcc 	.word	0x20000bcc
 80050d8:	20000be8 	.word	0x20000be8
 80050dc:	20000bfc 	.word	0x20000bfc
 80050e0:	20000c14 	.word	0x20000c14
 80050e4:	20000be0 	.word	0x20000be0
 80050e8:	20000be4 	.word	0x20000be4

080050ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050f2:	e019      	b.n	8005128 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050f4:	f000 fd8a 	bl	8005c0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80050f8:	4b0f      	ldr	r3, [pc, #60]	; (8005138 <prvCheckTasksWaitingTermination+0x4c>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	3304      	adds	r3, #4
 8005104:	4618      	mov	r0, r3
 8005106:	f7fe fce3 	bl	8003ad0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800510a:	4b0c      	ldr	r3, [pc, #48]	; (800513c <prvCheckTasksWaitingTermination+0x50>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3b01      	subs	r3, #1
 8005110:	4a0a      	ldr	r2, [pc, #40]	; (800513c <prvCheckTasksWaitingTermination+0x50>)
 8005112:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005114:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <prvCheckTasksWaitingTermination+0x54>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3b01      	subs	r3, #1
 800511a:	4a09      	ldr	r2, [pc, #36]	; (8005140 <prvCheckTasksWaitingTermination+0x54>)
 800511c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800511e:	f000 fda3 	bl	8005c68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f80e 	bl	8005144 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005128:	4b05      	ldr	r3, [pc, #20]	; (8005140 <prvCheckTasksWaitingTermination+0x54>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e1      	bne.n	80050f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005130:	bf00      	nop
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	20000bfc 	.word	0x20000bfc
 800513c:	20000c28 	.word	0x20000c28
 8005140:	20000c10 	.word	0x20000c10

08005144 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005152:	2b00      	cmp	r3, #0
 8005154:	d108      	bne.n	8005168 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515a:	4618      	mov	r0, r3
 800515c:	f000 ff32 	bl	8005fc4 <vPortFree>
				vPortFree( pxTCB );
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 ff2f 	bl	8005fc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005166:	e017      	b.n	8005198 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800516e:	2b01      	cmp	r3, #1
 8005170:	d103      	bne.n	800517a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 ff26 	bl	8005fc4 <vPortFree>
	}
 8005178:	e00e      	b.n	8005198 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005180:	2b02      	cmp	r3, #2
 8005182:	d009      	beq.n	8005198 <prvDeleteTCB+0x54>
 8005184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	e7fe      	b.n	8005196 <prvDeleteTCB+0x52>
	}
 8005198:	bf00      	nop
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051a6:	4b0f      	ldr	r3, [pc, #60]	; (80051e4 <prvResetNextTaskUnblockTime+0x44>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <prvResetNextTaskUnblockTime+0x14>
 80051b0:	2301      	movs	r3, #1
 80051b2:	e000      	b.n	80051b6 <prvResetNextTaskUnblockTime+0x16>
 80051b4:	2300      	movs	r3, #0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d004      	beq.n	80051c4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051ba:	4b0b      	ldr	r3, [pc, #44]	; (80051e8 <prvResetNextTaskUnblockTime+0x48>)
 80051bc:	f04f 32ff 	mov.w	r2, #4294967295
 80051c0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051c2:	e008      	b.n	80051d6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80051c4:	4b07      	ldr	r3, [pc, #28]	; (80051e4 <prvResetNextTaskUnblockTime+0x44>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	4a05      	ldr	r2, [pc, #20]	; (80051e8 <prvResetNextTaskUnblockTime+0x48>)
 80051d4:	6013      	str	r3, [r2, #0]
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20000be0 	.word	0x20000be0
 80051e8:	20000c48 	.word	0x20000c48

080051ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80051f2:	4b0b      	ldr	r3, [pc, #44]	; (8005220 <xTaskGetSchedulerState+0x34>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d102      	bne.n	8005200 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051fa:	2301      	movs	r3, #1
 80051fc:	607b      	str	r3, [r7, #4]
 80051fe:	e008      	b.n	8005212 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005200:	4b08      	ldr	r3, [pc, #32]	; (8005224 <xTaskGetSchedulerState+0x38>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d102      	bne.n	800520e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005208:	2302      	movs	r3, #2
 800520a:	607b      	str	r3, [r7, #4]
 800520c:	e001      	b.n	8005212 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800520e:	2300      	movs	r3, #0
 8005210:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005212:	687b      	ldr	r3, [r7, #4]
	}
 8005214:	4618      	mov	r0, r3
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	20000c34 	.word	0x20000c34
 8005224:	20000c50 	.word	0x20000c50

08005228 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d054      	beq.n	80052e8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800523e:	4b2d      	ldr	r3, [pc, #180]	; (80052f4 <xTaskPriorityDisinherit+0xcc>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	429a      	cmp	r2, r3
 8005246:	d009      	beq.n	800525c <xTaskPriorityDisinherit+0x34>
 8005248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	60fb      	str	r3, [r7, #12]
 800525a:	e7fe      	b.n	800525a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005260:	2b00      	cmp	r3, #0
 8005262:	d109      	bne.n	8005278 <xTaskPriorityDisinherit+0x50>
 8005264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	60bb      	str	r3, [r7, #8]
 8005276:	e7fe      	b.n	8005276 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800527c:	1e5a      	subs	r2, r3, #1
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800528a:	429a      	cmp	r2, r3
 800528c:	d02c      	beq.n	80052e8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005292:	2b00      	cmp	r3, #0
 8005294:	d128      	bne.n	80052e8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	3304      	adds	r3, #4
 800529a:	4618      	mov	r0, r3
 800529c:	f7fe fc18 	bl	8003ad0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b8:	4b0f      	ldr	r3, [pc, #60]	; (80052f8 <xTaskPriorityDisinherit+0xd0>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d903      	bls.n	80052c8 <xTaskPriorityDisinherit+0xa0>
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	4a0c      	ldr	r2, [pc, #48]	; (80052f8 <xTaskPriorityDisinherit+0xd0>)
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052cc:	4613      	mov	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4a09      	ldr	r2, [pc, #36]	; (80052fc <xTaskPriorityDisinherit+0xd4>)
 80052d6:	441a      	add	r2, r3
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	3304      	adds	r3, #4
 80052dc:	4619      	mov	r1, r3
 80052de:	4610      	mov	r0, r2
 80052e0:	f7fe fb99 	bl	8003a16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052e4:	2301      	movs	r3, #1
 80052e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052e8:	697b      	ldr	r3, [r7, #20]
	}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	20000754 	.word	0x20000754
 80052f8:	20000c30 	.word	0x20000c30
 80052fc:	20000758 	.word	0x20000758

08005300 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800530a:	4b21      	ldr	r3, [pc, #132]	; (8005390 <prvAddCurrentTaskToDelayedList+0x90>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005310:	4b20      	ldr	r3, [pc, #128]	; (8005394 <prvAddCurrentTaskToDelayedList+0x94>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3304      	adds	r3, #4
 8005316:	4618      	mov	r0, r3
 8005318:	f7fe fbda 	bl	8003ad0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005322:	d10a      	bne.n	800533a <prvAddCurrentTaskToDelayedList+0x3a>
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d007      	beq.n	800533a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800532a:	4b1a      	ldr	r3, [pc, #104]	; (8005394 <prvAddCurrentTaskToDelayedList+0x94>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3304      	adds	r3, #4
 8005330:	4619      	mov	r1, r3
 8005332:	4819      	ldr	r0, [pc, #100]	; (8005398 <prvAddCurrentTaskToDelayedList+0x98>)
 8005334:	f7fe fb6f 	bl	8003a16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005338:	e026      	b.n	8005388 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4413      	add	r3, r2
 8005340:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005342:	4b14      	ldr	r3, [pc, #80]	; (8005394 <prvAddCurrentTaskToDelayedList+0x94>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	429a      	cmp	r2, r3
 8005350:	d209      	bcs.n	8005366 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005352:	4b12      	ldr	r3, [pc, #72]	; (800539c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	4b0f      	ldr	r3, [pc, #60]	; (8005394 <prvAddCurrentTaskToDelayedList+0x94>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3304      	adds	r3, #4
 800535c:	4619      	mov	r1, r3
 800535e:	4610      	mov	r0, r2
 8005360:	f7fe fb7d 	bl	8003a5e <vListInsert>
}
 8005364:	e010      	b.n	8005388 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005366:	4b0e      	ldr	r3, [pc, #56]	; (80053a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <prvAddCurrentTaskToDelayedList+0x94>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3304      	adds	r3, #4
 8005370:	4619      	mov	r1, r3
 8005372:	4610      	mov	r0, r2
 8005374:	f7fe fb73 	bl	8003a5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005378:	4b0a      	ldr	r3, [pc, #40]	; (80053a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	429a      	cmp	r2, r3
 8005380:	d202      	bcs.n	8005388 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005382:	4a08      	ldr	r2, [pc, #32]	; (80053a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	6013      	str	r3, [r2, #0]
}
 8005388:	bf00      	nop
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	20000c2c 	.word	0x20000c2c
 8005394:	20000754 	.word	0x20000754
 8005398:	20000c14 	.word	0x20000c14
 800539c:	20000be4 	.word	0x20000be4
 80053a0:	20000be0 	.word	0x20000be0
 80053a4:	20000c48 	.word	0x20000c48

080053a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08a      	sub	sp, #40	; 0x28
 80053ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80053ae:	2300      	movs	r3, #0
 80053b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80053b2:	f000 fac3 	bl	800593c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80053b6:	4b1c      	ldr	r3, [pc, #112]	; (8005428 <xTimerCreateTimerTask+0x80>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d021      	beq.n	8005402 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80053be:	2300      	movs	r3, #0
 80053c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80053c2:	2300      	movs	r3, #0
 80053c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80053c6:	1d3a      	adds	r2, r7, #4
 80053c8:	f107 0108 	add.w	r1, r7, #8
 80053cc:	f107 030c 	add.w	r3, r7, #12
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fe fad9 	bl	8003988 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80053d6:	6879      	ldr	r1, [r7, #4]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	9202      	str	r2, [sp, #8]
 80053de:	9301      	str	r3, [sp, #4]
 80053e0:	2302      	movs	r3, #2
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	2300      	movs	r3, #0
 80053e6:	460a      	mov	r2, r1
 80053e8:	4910      	ldr	r1, [pc, #64]	; (800542c <xTimerCreateTimerTask+0x84>)
 80053ea:	4811      	ldr	r0, [pc, #68]	; (8005430 <xTimerCreateTimerTask+0x88>)
 80053ec:	f7ff f928 	bl	8004640 <xTaskCreateStatic>
 80053f0:	4602      	mov	r2, r0
 80053f2:	4b10      	ldr	r3, [pc, #64]	; (8005434 <xTimerCreateTimerTask+0x8c>)
 80053f4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80053f6:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <xTimerCreateTimerTask+0x8c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80053fe:	2301      	movs	r3, #1
 8005400:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d109      	bne.n	800541c <xTimerCreateTimerTask+0x74>
 8005408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	613b      	str	r3, [r7, #16]
 800541a:	e7fe      	b.n	800541a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800541c:	697b      	ldr	r3, [r7, #20]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20000c84 	.word	0x20000c84
 800542c:	08006ad8 	.word	0x08006ad8
 8005430:	08005551 	.word	0x08005551
 8005434:	20000c88 	.word	0x20000c88

08005438 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08a      	sub	sp, #40	; 0x28
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005446:	2300      	movs	r3, #0
 8005448:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d109      	bne.n	8005464 <xTimerGenericCommand+0x2c>
 8005450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	623b      	str	r3, [r7, #32]
 8005462:	e7fe      	b.n	8005462 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005464:	4b19      	ldr	r3, [pc, #100]	; (80054cc <xTimerGenericCommand+0x94>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d02a      	beq.n	80054c2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b05      	cmp	r3, #5
 800547c:	dc18      	bgt.n	80054b0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800547e:	f7ff feb5 	bl	80051ec <xTaskGetSchedulerState>
 8005482:	4603      	mov	r3, r0
 8005484:	2b02      	cmp	r3, #2
 8005486:	d109      	bne.n	800549c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005488:	4b10      	ldr	r3, [pc, #64]	; (80054cc <xTimerGenericCommand+0x94>)
 800548a:	6818      	ldr	r0, [r3, #0]
 800548c:	f107 0110 	add.w	r1, r7, #16
 8005490:	2300      	movs	r3, #0
 8005492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005494:	f7fe fc80 	bl	8003d98 <xQueueGenericSend>
 8005498:	6278      	str	r0, [r7, #36]	; 0x24
 800549a:	e012      	b.n	80054c2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800549c:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <xTimerGenericCommand+0x94>)
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	f107 0110 	add.w	r1, r7, #16
 80054a4:	2300      	movs	r3, #0
 80054a6:	2200      	movs	r2, #0
 80054a8:	f7fe fc76 	bl	8003d98 <xQueueGenericSend>
 80054ac:	6278      	str	r0, [r7, #36]	; 0x24
 80054ae:	e008      	b.n	80054c2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80054b0:	4b06      	ldr	r3, [pc, #24]	; (80054cc <xTimerGenericCommand+0x94>)
 80054b2:	6818      	ldr	r0, [r3, #0]
 80054b4:	f107 0110 	add.w	r1, r7, #16
 80054b8:	2300      	movs	r3, #0
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	f7fe fd66 	bl	8003f8c <xQueueGenericSendFromISR>
 80054c0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3728      	adds	r7, #40	; 0x28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	20000c84 	.word	0x20000c84

080054d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b088      	sub	sp, #32
 80054d4:	af02      	add	r7, sp, #8
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054da:	4b1c      	ldr	r3, [pc, #112]	; (800554c <prvProcessExpiredTimer+0x7c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	3304      	adds	r3, #4
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fe faf1 	bl	8003ad0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d121      	bne.n	800553a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	699a      	ldr	r2, [r3, #24]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	18d1      	adds	r1, r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	6978      	ldr	r0, [r7, #20]
 8005504:	f000 f8c8 	bl	8005698 <prvInsertTimerInActiveList>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d015      	beq.n	800553a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800550e:	2300      	movs	r3, #0
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	2300      	movs	r3, #0
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	2100      	movs	r1, #0
 8005518:	6978      	ldr	r0, [r7, #20]
 800551a:	f7ff ff8d 	bl	8005438 <xTimerGenericCommand>
 800551e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <prvProcessExpiredTimer+0x6a>
 8005526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	e7fe      	b.n	8005538 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	6978      	ldr	r0, [r7, #20]
 8005540:	4798      	blx	r3
}
 8005542:	bf00      	nop
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	20000c7c 	.word	0x20000c7c

08005550 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005558:	f107 0308 	add.w	r3, r7, #8
 800555c:	4618      	mov	r0, r3
 800555e:	f000 f857 	bl	8005610 <prvGetNextExpireTime>
 8005562:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	4619      	mov	r1, r3
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 f803 	bl	8005574 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800556e:	f000 f8d5 	bl	800571c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005572:	e7f1      	b.n	8005558 <prvTimerTask+0x8>

08005574 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800557e:	f7ff fa57 	bl	8004a30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005582:	f107 0308 	add.w	r3, r7, #8
 8005586:	4618      	mov	r0, r3
 8005588:	f000 f866 	bl	8005658 <prvSampleTimeNow>
 800558c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d130      	bne.n	80055f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10a      	bne.n	80055b0 <prvProcessTimerOrBlockTask+0x3c>
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d806      	bhi.n	80055b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80055a2:	f7ff fa53 	bl	8004a4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80055a6:	68f9      	ldr	r1, [r7, #12]
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7ff ff91 	bl	80054d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80055ae:	e024      	b.n	80055fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d008      	beq.n	80055c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80055b6:	4b13      	ldr	r3, [pc, #76]	; (8005604 <prvProcessTimerOrBlockTask+0x90>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	bf0c      	ite	eq
 80055c0:	2301      	moveq	r3, #1
 80055c2:	2300      	movne	r3, #0
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80055c8:	4b0f      	ldr	r3, [pc, #60]	; (8005608 <prvProcessTimerOrBlockTask+0x94>)
 80055ca:	6818      	ldr	r0, [r3, #0]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	4619      	mov	r1, r3
 80055d6:	f7fe ffff 	bl	80045d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80055da:	f7ff fa37 	bl	8004a4c <xTaskResumeAll>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10a      	bne.n	80055fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80055e4:	4b09      	ldr	r3, [pc, #36]	; (800560c <prvProcessTimerOrBlockTask+0x98>)
 80055e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	f3bf 8f6f 	isb	sy
}
 80055f4:	e001      	b.n	80055fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80055f6:	f7ff fa29 	bl	8004a4c <xTaskResumeAll>
}
 80055fa:	bf00      	nop
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20000c80 	.word	0x20000c80
 8005608:	20000c84 	.word	0x20000c84
 800560c:	e000ed04 	.word	0xe000ed04

08005610 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005618:	4b0e      	ldr	r3, [pc, #56]	; (8005654 <prvGetNextExpireTime+0x44>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	bf0c      	ite	eq
 8005622:	2301      	moveq	r3, #1
 8005624:	2300      	movne	r3, #0
 8005626:	b2db      	uxtb	r3, r3
 8005628:	461a      	mov	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d105      	bne.n	8005642 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005636:	4b07      	ldr	r3, [pc, #28]	; (8005654 <prvGetNextExpireTime+0x44>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	e001      	b.n	8005646 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005642:	2300      	movs	r3, #0
 8005644:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005646:	68fb      	ldr	r3, [r7, #12]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	20000c7c 	.word	0x20000c7c

08005658 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005660:	f7ff fa90 	bl	8004b84 <xTaskGetTickCount>
 8005664:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005666:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <prvSampleTimeNow+0x3c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	429a      	cmp	r2, r3
 800566e:	d205      	bcs.n	800567c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005670:	f000 f904 	bl	800587c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	e002      	b.n	8005682 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005682:	4a04      	ldr	r2, [pc, #16]	; (8005694 <prvSampleTimeNow+0x3c>)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005688:	68fb      	ldr	r3, [r7, #12]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20000c8c 	.word	0x20000c8c

08005698 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80056a6:	2300      	movs	r3, #0
 80056a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d812      	bhi.n	80056e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	1ad2      	subs	r2, r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d302      	bcc.n	80056d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80056cc:	2301      	movs	r3, #1
 80056ce:	617b      	str	r3, [r7, #20]
 80056d0:	e01b      	b.n	800570a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80056d2:	4b10      	ldr	r3, [pc, #64]	; (8005714 <prvInsertTimerInActiveList+0x7c>)
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	3304      	adds	r3, #4
 80056da:	4619      	mov	r1, r3
 80056dc:	4610      	mov	r0, r2
 80056de:	f7fe f9be 	bl	8003a5e <vListInsert>
 80056e2:	e012      	b.n	800570a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d206      	bcs.n	80056fa <prvInsertTimerInActiveList+0x62>
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d302      	bcc.n	80056fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80056f4:	2301      	movs	r3, #1
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	e007      	b.n	800570a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056fa:	4b07      	ldr	r3, [pc, #28]	; (8005718 <prvInsertTimerInActiveList+0x80>)
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3304      	adds	r3, #4
 8005702:	4619      	mov	r1, r3
 8005704:	4610      	mov	r0, r2
 8005706:	f7fe f9aa 	bl	8003a5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800570a:	697b      	ldr	r3, [r7, #20]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3718      	adds	r7, #24
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	20000c80 	.word	0x20000c80
 8005718:	20000c7c 	.word	0x20000c7c

0800571c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08e      	sub	sp, #56	; 0x38
 8005720:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005722:	e099      	b.n	8005858 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	da17      	bge.n	800575a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800572a:	1d3b      	adds	r3, r7, #4
 800572c:	3304      	adds	r3, #4
 800572e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005732:	2b00      	cmp	r3, #0
 8005734:	d109      	bne.n	800574a <prvProcessReceivedCommands+0x2e>
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	61fb      	str	r3, [r7, #28]
 8005748:	e7fe      	b.n	8005748 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800574a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005750:	6850      	ldr	r0, [r2, #4]
 8005752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005754:	6892      	ldr	r2, [r2, #8]
 8005756:	4611      	mov	r1, r2
 8005758:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	db7a      	blt.n	8005856 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d004      	beq.n	8005776 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576e:	3304      	adds	r3, #4
 8005770:	4618      	mov	r0, r3
 8005772:	f7fe f9ad 	bl	8003ad0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005776:	463b      	mov	r3, r7
 8005778:	4618      	mov	r0, r3
 800577a:	f7ff ff6d 	bl	8005658 <prvSampleTimeNow>
 800577e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b09      	cmp	r3, #9
 8005784:	d868      	bhi.n	8005858 <prvProcessReceivedCommands+0x13c>
 8005786:	a201      	add	r2, pc, #4	; (adr r2, 800578c <prvProcessReceivedCommands+0x70>)
 8005788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578c:	080057b5 	.word	0x080057b5
 8005790:	080057b5 	.word	0x080057b5
 8005794:	080057b5 	.word	0x080057b5
 8005798:	08005859 	.word	0x08005859
 800579c:	0800580f 	.word	0x0800580f
 80057a0:	08005845 	.word	0x08005845
 80057a4:	080057b5 	.word	0x080057b5
 80057a8:	080057b5 	.word	0x080057b5
 80057ac:	08005859 	.word	0x08005859
 80057b0:	0800580f 	.word	0x0800580f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	18d1      	adds	r1, r2, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057c2:	f7ff ff69 	bl	8005698 <prvInsertTimerInActiveList>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d045      	beq.n	8005858 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057d2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d13d      	bne.n	8005858 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	441a      	add	r2, r3
 80057e4:	2300      	movs	r3, #0
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	2300      	movs	r3, #0
 80057ea:	2100      	movs	r1, #0
 80057ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057ee:	f7ff fe23 	bl	8005438 <xTimerGenericCommand>
 80057f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d12e      	bne.n	8005858 <prvProcessReceivedCommands+0x13c>
 80057fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	61bb      	str	r3, [r7, #24]
 800580c:	e7fe      	b.n	800580c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d109      	bne.n	8005830 <prvProcessReceivedCommands+0x114>
 800581c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	617b      	str	r3, [r7, #20]
 800582e:	e7fe      	b.n	800582e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005832:	699a      	ldr	r2, [r3, #24]
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	18d1      	adds	r1, r2, r3
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800583c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800583e:	f7ff ff2b 	bl	8005698 <prvInsertTimerInActiveList>
					break;
 8005842:	e009      	b.n	8005858 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005846:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800584a:	2b00      	cmp	r3, #0
 800584c:	d104      	bne.n	8005858 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800584e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005850:	f000 fbb8 	bl	8005fc4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005854:	e000      	b.n	8005858 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005856:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005858:	4b07      	ldr	r3, [pc, #28]	; (8005878 <prvProcessReceivedCommands+0x15c>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	1d39      	adds	r1, r7, #4
 800585e:	2200      	movs	r2, #0
 8005860:	4618      	mov	r0, r3
 8005862:	f7fe fc27 	bl	80040b4 <xQueueReceive>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	f47f af5b 	bne.w	8005724 <prvProcessReceivedCommands+0x8>
	}
}
 800586e:	bf00      	nop
 8005870:	3730      	adds	r7, #48	; 0x30
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000c84 	.word	0x20000c84

0800587c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b088      	sub	sp, #32
 8005880:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005882:	e044      	b.n	800590e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005884:	4b2b      	ldr	r3, [pc, #172]	; (8005934 <prvSwitchTimerLists+0xb8>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800588e:	4b29      	ldr	r3, [pc, #164]	; (8005934 <prvSwitchTimerLists+0xb8>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	3304      	adds	r3, #4
 800589c:	4618      	mov	r0, r3
 800589e:	f7fe f917 	bl	8003ad0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d12d      	bne.n	800590e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4413      	add	r3, r2
 80058ba:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d90e      	bls.n	80058e2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058d0:	4b18      	ldr	r3, [pc, #96]	; (8005934 <prvSwitchTimerLists+0xb8>)
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3304      	adds	r3, #4
 80058d8:	4619      	mov	r1, r3
 80058da:	4610      	mov	r0, r2
 80058dc:	f7fe f8bf 	bl	8003a5e <vListInsert>
 80058e0:	e015      	b.n	800590e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058e2:	2300      	movs	r3, #0
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	2300      	movs	r3, #0
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	2100      	movs	r1, #0
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f7ff fda3 	bl	8005438 <xTimerGenericCommand>
 80058f2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d109      	bne.n	800590e <prvSwitchTimerLists+0x92>
 80058fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fe:	f383 8811 	msr	BASEPRI, r3
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	e7fe      	b.n	800590c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800590e:	4b09      	ldr	r3, [pc, #36]	; (8005934 <prvSwitchTimerLists+0xb8>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1b5      	bne.n	8005884 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005918:	4b06      	ldr	r3, [pc, #24]	; (8005934 <prvSwitchTimerLists+0xb8>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800591e:	4b06      	ldr	r3, [pc, #24]	; (8005938 <prvSwitchTimerLists+0xbc>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a04      	ldr	r2, [pc, #16]	; (8005934 <prvSwitchTimerLists+0xb8>)
 8005924:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005926:	4a04      	ldr	r2, [pc, #16]	; (8005938 <prvSwitchTimerLists+0xbc>)
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	6013      	str	r3, [r2, #0]
}
 800592c:	bf00      	nop
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	20000c7c 	.word	0x20000c7c
 8005938:	20000c80 	.word	0x20000c80

0800593c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005942:	f000 f963 	bl	8005c0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005946:	4b15      	ldr	r3, [pc, #84]	; (800599c <prvCheckForValidListAndQueue+0x60>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d120      	bne.n	8005990 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800594e:	4814      	ldr	r0, [pc, #80]	; (80059a0 <prvCheckForValidListAndQueue+0x64>)
 8005950:	f7fe f834 	bl	80039bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005954:	4813      	ldr	r0, [pc, #76]	; (80059a4 <prvCheckForValidListAndQueue+0x68>)
 8005956:	f7fe f831 	bl	80039bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800595a:	4b13      	ldr	r3, [pc, #76]	; (80059a8 <prvCheckForValidListAndQueue+0x6c>)
 800595c:	4a10      	ldr	r2, [pc, #64]	; (80059a0 <prvCheckForValidListAndQueue+0x64>)
 800595e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005960:	4b12      	ldr	r3, [pc, #72]	; (80059ac <prvCheckForValidListAndQueue+0x70>)
 8005962:	4a10      	ldr	r2, [pc, #64]	; (80059a4 <prvCheckForValidListAndQueue+0x68>)
 8005964:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005966:	2300      	movs	r3, #0
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	4b11      	ldr	r3, [pc, #68]	; (80059b0 <prvCheckForValidListAndQueue+0x74>)
 800596c:	4a11      	ldr	r2, [pc, #68]	; (80059b4 <prvCheckForValidListAndQueue+0x78>)
 800596e:	2110      	movs	r1, #16
 8005970:	200a      	movs	r0, #10
 8005972:	f7fe f93f 	bl	8003bf4 <xQueueGenericCreateStatic>
 8005976:	4602      	mov	r2, r0
 8005978:	4b08      	ldr	r3, [pc, #32]	; (800599c <prvCheckForValidListAndQueue+0x60>)
 800597a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800597c:	4b07      	ldr	r3, [pc, #28]	; (800599c <prvCheckForValidListAndQueue+0x60>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d005      	beq.n	8005990 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005984:	4b05      	ldr	r3, [pc, #20]	; (800599c <prvCheckForValidListAndQueue+0x60>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	490b      	ldr	r1, [pc, #44]	; (80059b8 <prvCheckForValidListAndQueue+0x7c>)
 800598a:	4618      	mov	r0, r3
 800598c:	f7fe fdfc 	bl	8004588 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005990:	f000 f96a 	bl	8005c68 <vPortExitCritical>
}
 8005994:	bf00      	nop
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	20000c84 	.word	0x20000c84
 80059a0:	20000c54 	.word	0x20000c54
 80059a4:	20000c68 	.word	0x20000c68
 80059a8:	20000c7c 	.word	0x20000c7c
 80059ac:	20000c80 	.word	0x20000c80
 80059b0:	20000d30 	.word	0x20000d30
 80059b4:	20000c90 	.word	0x20000c90
 80059b8:	08006ae0 	.word	0x08006ae0

080059bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	3b04      	subs	r3, #4
 80059cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	3b04      	subs	r3, #4
 80059da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f023 0201 	bic.w	r2, r3, #1
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3b04      	subs	r3, #4
 80059ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80059ec:	4a0c      	ldr	r2, [pc, #48]	; (8005a20 <pxPortInitialiseStack+0x64>)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3b14      	subs	r3, #20
 80059f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	3b04      	subs	r3, #4
 8005a02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f06f 0202 	mvn.w	r2, #2
 8005a0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	3b20      	subs	r3, #32
 8005a10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a12:	68fb      	ldr	r3, [r7, #12]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	08005a25 	.word	0x08005a25

08005a24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a2e:	4b11      	ldr	r3, [pc, #68]	; (8005a74 <prvTaskExitError+0x50>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a36:	d009      	beq.n	8005a4c <prvTaskExitError+0x28>
 8005a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3c:	f383 8811 	msr	BASEPRI, r3
 8005a40:	f3bf 8f6f 	isb	sy
 8005a44:	f3bf 8f4f 	dsb	sy
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	e7fe      	b.n	8005a4a <prvTaskExitError+0x26>
 8005a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a5e:	bf00      	nop
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d0fc      	beq.n	8005a60 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a66:	bf00      	nop
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	2000000c 	.word	0x2000000c
	...

08005a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a80:	4b07      	ldr	r3, [pc, #28]	; (8005aa0 <pxCurrentTCBConst2>)
 8005a82:	6819      	ldr	r1, [r3, #0]
 8005a84:	6808      	ldr	r0, [r1, #0]
 8005a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a8a:	f380 8809 	msr	PSP, r0
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f04f 0000 	mov.w	r0, #0
 8005a96:	f380 8811 	msr	BASEPRI, r0
 8005a9a:	4770      	bx	lr
 8005a9c:	f3af 8000 	nop.w

08005aa0 <pxCurrentTCBConst2>:
 8005aa0:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005aa4:	bf00      	nop
 8005aa6:	bf00      	nop

08005aa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005aa8:	4808      	ldr	r0, [pc, #32]	; (8005acc <prvPortStartFirstTask+0x24>)
 8005aaa:	6800      	ldr	r0, [r0, #0]
 8005aac:	6800      	ldr	r0, [r0, #0]
 8005aae:	f380 8808 	msr	MSP, r0
 8005ab2:	f04f 0000 	mov.w	r0, #0
 8005ab6:	f380 8814 	msr	CONTROL, r0
 8005aba:	b662      	cpsie	i
 8005abc:	b661      	cpsie	f
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	df00      	svc	0
 8005ac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005aca:	bf00      	nop
 8005acc:	e000ed08 	.word	0xe000ed08

08005ad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ad6:	4b44      	ldr	r3, [pc, #272]	; (8005be8 <xPortStartScheduler+0x118>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a44      	ldr	r2, [pc, #272]	; (8005bec <xPortStartScheduler+0x11c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d109      	bne.n	8005af4 <xPortStartScheduler+0x24>
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	613b      	str	r3, [r7, #16]
 8005af2:	e7fe      	b.n	8005af2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005af4:	4b3c      	ldr	r3, [pc, #240]	; (8005be8 <xPortStartScheduler+0x118>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a3d      	ldr	r2, [pc, #244]	; (8005bf0 <xPortStartScheduler+0x120>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d109      	bne.n	8005b12 <xPortStartScheduler+0x42>
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	e7fe      	b.n	8005b10 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b12:	4b38      	ldr	r3, [pc, #224]	; (8005bf4 <xPortStartScheduler+0x124>)
 8005b14:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	22ff      	movs	r2, #255	; 0xff
 8005b22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	4b30      	ldr	r3, [pc, #192]	; (8005bf8 <xPortStartScheduler+0x128>)
 8005b38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b3a:	4b30      	ldr	r3, [pc, #192]	; (8005bfc <xPortStartScheduler+0x12c>)
 8005b3c:	2207      	movs	r2, #7
 8005b3e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b40:	e009      	b.n	8005b56 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005b42:	4b2e      	ldr	r3, [pc, #184]	; (8005bfc <xPortStartScheduler+0x12c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	3b01      	subs	r3, #1
 8005b48:	4a2c      	ldr	r2, [pc, #176]	; (8005bfc <xPortStartScheduler+0x12c>)
 8005b4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b4c:	78fb      	ldrb	r3, [r7, #3]
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b56:	78fb      	ldrb	r3, [r7, #3]
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5e:	2b80      	cmp	r3, #128	; 0x80
 8005b60:	d0ef      	beq.n	8005b42 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b62:	4b26      	ldr	r3, [pc, #152]	; (8005bfc <xPortStartScheduler+0x12c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f1c3 0307 	rsb	r3, r3, #7
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	d009      	beq.n	8005b82 <xPortStartScheduler+0xb2>
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	60bb      	str	r3, [r7, #8]
 8005b80:	e7fe      	b.n	8005b80 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b82:	4b1e      	ldr	r3, [pc, #120]	; (8005bfc <xPortStartScheduler+0x12c>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	021b      	lsls	r3, r3, #8
 8005b88:	4a1c      	ldr	r2, [pc, #112]	; (8005bfc <xPortStartScheduler+0x12c>)
 8005b8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b8c:	4b1b      	ldr	r3, [pc, #108]	; (8005bfc <xPortStartScheduler+0x12c>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b94:	4a19      	ldr	r2, [pc, #100]	; (8005bfc <xPortStartScheduler+0x12c>)
 8005b96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ba0:	4b17      	ldr	r3, [pc, #92]	; (8005c00 <xPortStartScheduler+0x130>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a16      	ldr	r2, [pc, #88]	; (8005c00 <xPortStartScheduler+0x130>)
 8005ba6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005baa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005bac:	4b14      	ldr	r3, [pc, #80]	; (8005c00 <xPortStartScheduler+0x130>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a13      	ldr	r2, [pc, #76]	; (8005c00 <xPortStartScheduler+0x130>)
 8005bb2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005bb6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005bb8:	f000 f8d6 	bl	8005d68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005bbc:	4b11      	ldr	r3, [pc, #68]	; (8005c04 <xPortStartScheduler+0x134>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005bc2:	f000 f8f5 	bl	8005db0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005bc6:	4b10      	ldr	r3, [pc, #64]	; (8005c08 <xPortStartScheduler+0x138>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a0f      	ldr	r2, [pc, #60]	; (8005c08 <xPortStartScheduler+0x138>)
 8005bcc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005bd0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005bd2:	f7ff ff69 	bl	8005aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005bd6:	f7ff f8a3 	bl	8004d20 <vTaskSwitchContext>
	prvTaskExitError();
 8005bda:	f7ff ff23 	bl	8005a24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3718      	adds	r7, #24
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	e000ed00 	.word	0xe000ed00
 8005bec:	410fc271 	.word	0x410fc271
 8005bf0:	410fc270 	.word	0x410fc270
 8005bf4:	e000e400 	.word	0xe000e400
 8005bf8:	20000d80 	.word	0x20000d80
 8005bfc:	20000d84 	.word	0x20000d84
 8005c00:	e000ed20 	.word	0xe000ed20
 8005c04:	2000000c 	.word	0x2000000c
 8005c08:	e000ef34 	.word	0xe000ef34

08005c0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c24:	4b0e      	ldr	r3, [pc, #56]	; (8005c60 <vPortEnterCritical+0x54>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	4a0d      	ldr	r2, [pc, #52]	; (8005c60 <vPortEnterCritical+0x54>)
 8005c2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c2e:	4b0c      	ldr	r3, [pc, #48]	; (8005c60 <vPortEnterCritical+0x54>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d10e      	bne.n	8005c54 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c36:	4b0b      	ldr	r3, [pc, #44]	; (8005c64 <vPortEnterCritical+0x58>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d009      	beq.n	8005c54 <vPortEnterCritical+0x48>
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	603b      	str	r3, [r7, #0]
 8005c52:	e7fe      	b.n	8005c52 <vPortEnterCritical+0x46>
	}
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	2000000c 	.word	0x2000000c
 8005c64:	e000ed04 	.word	0xe000ed04

08005c68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c6e:	4b11      	ldr	r3, [pc, #68]	; (8005cb4 <vPortExitCritical+0x4c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d109      	bne.n	8005c8a <vPortExitCritical+0x22>
 8005c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7a:	f383 8811 	msr	BASEPRI, r3
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	607b      	str	r3, [r7, #4]
 8005c88:	e7fe      	b.n	8005c88 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005c8a:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <vPortExitCritical+0x4c>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	4a08      	ldr	r2, [pc, #32]	; (8005cb4 <vPortExitCritical+0x4c>)
 8005c92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c94:	4b07      	ldr	r3, [pc, #28]	; (8005cb4 <vPortExitCritical+0x4c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d104      	bne.n	8005ca6 <vPortExitCritical+0x3e>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ca6:	bf00      	nop
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	2000000c 	.word	0x2000000c
	...

08005cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005cc0:	f3ef 8009 	mrs	r0, PSP
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	4b15      	ldr	r3, [pc, #84]	; (8005d20 <pxCurrentTCBConst>)
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	f01e 0f10 	tst.w	lr, #16
 8005cd0:	bf08      	it	eq
 8005cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cda:	6010      	str	r0, [r2, #0]
 8005cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ce0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ce4:	f380 8811 	msr	BASEPRI, r0
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f7ff f816 	bl	8004d20 <vTaskSwitchContext>
 8005cf4:	f04f 0000 	mov.w	r0, #0
 8005cf8:	f380 8811 	msr	BASEPRI, r0
 8005cfc:	bc09      	pop	{r0, r3}
 8005cfe:	6819      	ldr	r1, [r3, #0]
 8005d00:	6808      	ldr	r0, [r1, #0]
 8005d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d06:	f01e 0f10 	tst.w	lr, #16
 8005d0a:	bf08      	it	eq
 8005d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d10:	f380 8809 	msr	PSP, r0
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	f3af 8000 	nop.w

08005d20 <pxCurrentTCBConst>:
 8005d20:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d24:	bf00      	nop
 8005d26:	bf00      	nop

08005d28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d40:	f7fe ff30 	bl	8004ba4 <xTaskIncrementTick>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d4a:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <SysTick_Handler+0x3c>)
 8005d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	2300      	movs	r3, #0
 8005d54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d5c:	bf00      	nop
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	e000ed04 	.word	0xe000ed04

08005d68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d68:	b480      	push	{r7}
 8005d6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d6c:	4b0b      	ldr	r3, [pc, #44]	; (8005d9c <vPortSetupTimerInterrupt+0x34>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d72:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <vPortSetupTimerInterrupt+0x38>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d78:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <vPortSetupTimerInterrupt+0x3c>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a0a      	ldr	r2, [pc, #40]	; (8005da8 <vPortSetupTimerInterrupt+0x40>)
 8005d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d82:	099b      	lsrs	r3, r3, #6
 8005d84:	4a09      	ldr	r2, [pc, #36]	; (8005dac <vPortSetupTimerInterrupt+0x44>)
 8005d86:	3b01      	subs	r3, #1
 8005d88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d8a:	4b04      	ldr	r3, [pc, #16]	; (8005d9c <vPortSetupTimerInterrupt+0x34>)
 8005d8c:	2207      	movs	r2, #7
 8005d8e:	601a      	str	r2, [r3, #0]
}
 8005d90:	bf00      	nop
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	e000e010 	.word	0xe000e010
 8005da0:	e000e018 	.word	0xe000e018
 8005da4:	20000000 	.word	0x20000000
 8005da8:	10624dd3 	.word	0x10624dd3
 8005dac:	e000e014 	.word	0xe000e014

08005db0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005db0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005dc0 <vPortEnableVFP+0x10>
 8005db4:	6801      	ldr	r1, [r0, #0]
 8005db6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005dba:	6001      	str	r1, [r0, #0]
 8005dbc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005dbe:	bf00      	nop
 8005dc0:	e000ed88 	.word	0xe000ed88

08005dc4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005dca:	f3ef 8305 	mrs	r3, IPSR
 8005dce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2b0f      	cmp	r3, #15
 8005dd4:	d913      	bls.n	8005dfe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005dd6:	4a16      	ldr	r2, [pc, #88]	; (8005e30 <vPortValidateInterruptPriority+0x6c>)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4413      	add	r3, r2
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005de0:	4b14      	ldr	r3, [pc, #80]	; (8005e34 <vPortValidateInterruptPriority+0x70>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	7afa      	ldrb	r2, [r7, #11]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d209      	bcs.n	8005dfe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dee:	f383 8811 	msr	BASEPRI, r3
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	607b      	str	r3, [r7, #4]
 8005dfc:	e7fe      	b.n	8005dfc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005dfe:	4b0e      	ldr	r3, [pc, #56]	; (8005e38 <vPortValidateInterruptPriority+0x74>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e06:	4b0d      	ldr	r3, [pc, #52]	; (8005e3c <vPortValidateInterruptPriority+0x78>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d909      	bls.n	8005e22 <vPortValidateInterruptPriority+0x5e>
 8005e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	603b      	str	r3, [r7, #0]
 8005e20:	e7fe      	b.n	8005e20 <vPortValidateInterruptPriority+0x5c>
	}
 8005e22:	bf00      	nop
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	e000e3f0 	.word	0xe000e3f0
 8005e34:	20000d80 	.word	0x20000d80
 8005e38:	e000ed0c 	.word	0xe000ed0c
 8005e3c:	20000d84 	.word	0x20000d84

08005e40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08a      	sub	sp, #40	; 0x28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e4c:	f7fe fdf0 	bl	8004a30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e50:	4b57      	ldr	r3, [pc, #348]	; (8005fb0 <pvPortMalloc+0x170>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e58:	f000 f90c 	bl	8006074 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e5c:	4b55      	ldr	r3, [pc, #340]	; (8005fb4 <pvPortMalloc+0x174>)
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4013      	ands	r3, r2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f040 808c 	bne.w	8005f82 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01c      	beq.n	8005eaa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005e70:	2208      	movs	r2, #8
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4413      	add	r3, r2
 8005e76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f003 0307 	and.w	r3, r3, #7
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d013      	beq.n	8005eaa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f023 0307 	bic.w	r3, r3, #7
 8005e88:	3308      	adds	r3, #8
 8005e8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d009      	beq.n	8005eaa <pvPortMalloc+0x6a>
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	617b      	str	r3, [r7, #20]
 8005ea8:	e7fe      	b.n	8005ea8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d068      	beq.n	8005f82 <pvPortMalloc+0x142>
 8005eb0:	4b41      	ldr	r3, [pc, #260]	; (8005fb8 <pvPortMalloc+0x178>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d863      	bhi.n	8005f82 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005eba:	4b40      	ldr	r3, [pc, #256]	; (8005fbc <pvPortMalloc+0x17c>)
 8005ebc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ebe:	4b3f      	ldr	r3, [pc, #252]	; (8005fbc <pvPortMalloc+0x17c>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ec4:	e004      	b.n	8005ed0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d903      	bls.n	8005ee2 <pvPortMalloc+0xa2>
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1f1      	bne.n	8005ec6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ee2:	4b33      	ldr	r3, [pc, #204]	; (8005fb0 <pvPortMalloc+0x170>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d04a      	beq.n	8005f82 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2208      	movs	r2, #8
 8005ef2:	4413      	add	r3, r2
 8005ef4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	1ad2      	subs	r2, r2, r3
 8005f06:	2308      	movs	r3, #8
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d91e      	bls.n	8005f4c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4413      	add	r3, r2
 8005f14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d009      	beq.n	8005f34 <pvPortMalloc+0xf4>
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	e7fe      	b.n	8005f32 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	1ad2      	subs	r2, r2, r3
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f46:	69b8      	ldr	r0, [r7, #24]
 8005f48:	f000 f8f6 	bl	8006138 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f4c:	4b1a      	ldr	r3, [pc, #104]	; (8005fb8 <pvPortMalloc+0x178>)
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	4a18      	ldr	r2, [pc, #96]	; (8005fb8 <pvPortMalloc+0x178>)
 8005f58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f5a:	4b17      	ldr	r3, [pc, #92]	; (8005fb8 <pvPortMalloc+0x178>)
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	4b18      	ldr	r3, [pc, #96]	; (8005fc0 <pvPortMalloc+0x180>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d203      	bcs.n	8005f6e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f66:	4b14      	ldr	r3, [pc, #80]	; (8005fb8 <pvPortMalloc+0x178>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a15      	ldr	r2, [pc, #84]	; (8005fc0 <pvPortMalloc+0x180>)
 8005f6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	4b10      	ldr	r3, [pc, #64]	; (8005fb4 <pvPortMalloc+0x174>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	431a      	orrs	r2, r3
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	2200      	movs	r2, #0
 8005f80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f82:	f7fe fd63 	bl	8004a4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	f003 0307 	and.w	r3, r3, #7
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d009      	beq.n	8005fa4 <pvPortMalloc+0x164>
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	e7fe      	b.n	8005fa2 <pvPortMalloc+0x162>
	return pvReturn;
 8005fa4:	69fb      	ldr	r3, [r7, #28]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3728      	adds	r7, #40	; 0x28
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	20001990 	.word	0x20001990
 8005fb4:	2000199c 	.word	0x2000199c
 8005fb8:	20001994 	.word	0x20001994
 8005fbc:	20001988 	.word	0x20001988
 8005fc0:	20001998 	.word	0x20001998

08005fc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d046      	beq.n	8006064 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005fd6:	2308      	movs	r3, #8
 8005fd8:	425b      	negs	r3, r3
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	4413      	add	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	4b20      	ldr	r3, [pc, #128]	; (800606c <vPortFree+0xa8>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4013      	ands	r3, r2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d109      	bne.n	8006006 <vPortFree+0x42>
 8005ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	e7fe      	b.n	8006004 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d009      	beq.n	8006022 <vPortFree+0x5e>
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	60bb      	str	r3, [r7, #8]
 8006020:	e7fe      	b.n	8006020 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	4b11      	ldr	r3, [pc, #68]	; (800606c <vPortFree+0xa8>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4013      	ands	r3, r2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d019      	beq.n	8006064 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d115      	bne.n	8006064 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	4b0b      	ldr	r3, [pc, #44]	; (800606c <vPortFree+0xa8>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	43db      	mvns	r3, r3
 8006042:	401a      	ands	r2, r3
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006048:	f7fe fcf2 	bl	8004a30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	4b07      	ldr	r3, [pc, #28]	; (8006070 <vPortFree+0xac>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4413      	add	r3, r2
 8006056:	4a06      	ldr	r2, [pc, #24]	; (8006070 <vPortFree+0xac>)
 8006058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800605a:	6938      	ldr	r0, [r7, #16]
 800605c:	f000 f86c 	bl	8006138 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006060:	f7fe fcf4 	bl	8004a4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006064:	bf00      	nop
 8006066:	3718      	adds	r7, #24
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	2000199c 	.word	0x2000199c
 8006070:	20001994 	.word	0x20001994

08006074 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800607a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800607e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006080:	4b27      	ldr	r3, [pc, #156]	; (8006120 <prvHeapInit+0xac>)
 8006082:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00c      	beq.n	80060a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	3307      	adds	r3, #7
 8006092:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f023 0307 	bic.w	r3, r3, #7
 800609a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	4a1f      	ldr	r2, [pc, #124]	; (8006120 <prvHeapInit+0xac>)
 80060a4:	4413      	add	r3, r2
 80060a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80060ac:	4a1d      	ldr	r2, [pc, #116]	; (8006124 <prvHeapInit+0xb0>)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80060b2:	4b1c      	ldr	r3, [pc, #112]	; (8006124 <prvHeapInit+0xb0>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	4413      	add	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80060c0:	2208      	movs	r2, #8
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	1a9b      	subs	r3, r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 0307 	bic.w	r3, r3, #7
 80060ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4a15      	ldr	r2, [pc, #84]	; (8006128 <prvHeapInit+0xb4>)
 80060d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80060d6:	4b14      	ldr	r3, [pc, #80]	; (8006128 <prvHeapInit+0xb4>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2200      	movs	r2, #0
 80060dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80060de:	4b12      	ldr	r3, [pc, #72]	; (8006128 <prvHeapInit+0xb4>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2200      	movs	r2, #0
 80060e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	1ad2      	subs	r2, r2, r3
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80060f4:	4b0c      	ldr	r3, [pc, #48]	; (8006128 <prvHeapInit+0xb4>)
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	4a0a      	ldr	r2, [pc, #40]	; (800612c <prvHeapInit+0xb8>)
 8006102:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	4a09      	ldr	r2, [pc, #36]	; (8006130 <prvHeapInit+0xbc>)
 800610a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800610c:	4b09      	ldr	r3, [pc, #36]	; (8006134 <prvHeapInit+0xc0>)
 800610e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006112:	601a      	str	r2, [r3, #0]
}
 8006114:	bf00      	nop
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	20000d88 	.word	0x20000d88
 8006124:	20001988 	.word	0x20001988
 8006128:	20001990 	.word	0x20001990
 800612c:	20001998 	.word	0x20001998
 8006130:	20001994 	.word	0x20001994
 8006134:	2000199c 	.word	0x2000199c

08006138 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006140:	4b28      	ldr	r3, [pc, #160]	; (80061e4 <prvInsertBlockIntoFreeList+0xac>)
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	e002      	b.n	800614c <prvInsertBlockIntoFreeList+0x14>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	429a      	cmp	r2, r3
 8006154:	d8f7      	bhi.n	8006146 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	4413      	add	r3, r2
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	429a      	cmp	r2, r3
 8006166:	d108      	bne.n	800617a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	441a      	add	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	441a      	add	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	429a      	cmp	r2, r3
 800618c:	d118      	bne.n	80061c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	4b15      	ldr	r3, [pc, #84]	; (80061e8 <prvInsertBlockIntoFreeList+0xb0>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	429a      	cmp	r2, r3
 8006198:	d00d      	beq.n	80061b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	441a      	add	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	e008      	b.n	80061c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80061b6:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <prvInsertBlockIntoFreeList+0xb0>)
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	e003      	b.n	80061c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d002      	beq.n	80061d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061d6:	bf00      	nop
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	20001988 	.word	0x20001988
 80061e8:	20001990 	.word	0x20001990

080061ec <__errno>:
 80061ec:	4b01      	ldr	r3, [pc, #4]	; (80061f4 <__errno+0x8>)
 80061ee:	6818      	ldr	r0, [r3, #0]
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	20000010 	.word	0x20000010

080061f8 <__libc_init_array>:
 80061f8:	b570      	push	{r4, r5, r6, lr}
 80061fa:	4e0d      	ldr	r6, [pc, #52]	; (8006230 <__libc_init_array+0x38>)
 80061fc:	4c0d      	ldr	r4, [pc, #52]	; (8006234 <__libc_init_array+0x3c>)
 80061fe:	1ba4      	subs	r4, r4, r6
 8006200:	10a4      	asrs	r4, r4, #2
 8006202:	2500      	movs	r5, #0
 8006204:	42a5      	cmp	r5, r4
 8006206:	d109      	bne.n	800621c <__libc_init_array+0x24>
 8006208:	4e0b      	ldr	r6, [pc, #44]	; (8006238 <__libc_init_array+0x40>)
 800620a:	4c0c      	ldr	r4, [pc, #48]	; (800623c <__libc_init_array+0x44>)
 800620c:	f000 fc28 	bl	8006a60 <_init>
 8006210:	1ba4      	subs	r4, r4, r6
 8006212:	10a4      	asrs	r4, r4, #2
 8006214:	2500      	movs	r5, #0
 8006216:	42a5      	cmp	r5, r4
 8006218:	d105      	bne.n	8006226 <__libc_init_array+0x2e>
 800621a:	bd70      	pop	{r4, r5, r6, pc}
 800621c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006220:	4798      	blx	r3
 8006222:	3501      	adds	r5, #1
 8006224:	e7ee      	b.n	8006204 <__libc_init_array+0xc>
 8006226:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800622a:	4798      	blx	r3
 800622c:	3501      	adds	r5, #1
 800622e:	e7f2      	b.n	8006216 <__libc_init_array+0x1e>
 8006230:	08006b9c 	.word	0x08006b9c
 8006234:	08006b9c 	.word	0x08006b9c
 8006238:	08006b9c 	.word	0x08006b9c
 800623c:	08006ba0 	.word	0x08006ba0

08006240 <memcpy>:
 8006240:	b510      	push	{r4, lr}
 8006242:	1e43      	subs	r3, r0, #1
 8006244:	440a      	add	r2, r1
 8006246:	4291      	cmp	r1, r2
 8006248:	d100      	bne.n	800624c <memcpy+0xc>
 800624a:	bd10      	pop	{r4, pc}
 800624c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006250:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006254:	e7f7      	b.n	8006246 <memcpy+0x6>

08006256 <memset>:
 8006256:	4402      	add	r2, r0
 8006258:	4603      	mov	r3, r0
 800625a:	4293      	cmp	r3, r2
 800625c:	d100      	bne.n	8006260 <memset+0xa>
 800625e:	4770      	bx	lr
 8006260:	f803 1b01 	strb.w	r1, [r3], #1
 8006264:	e7f9      	b.n	800625a <memset+0x4>
	...

08006268 <siprintf>:
 8006268:	b40e      	push	{r1, r2, r3}
 800626a:	b500      	push	{lr}
 800626c:	b09c      	sub	sp, #112	; 0x70
 800626e:	ab1d      	add	r3, sp, #116	; 0x74
 8006270:	9002      	str	r0, [sp, #8]
 8006272:	9006      	str	r0, [sp, #24]
 8006274:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006278:	4809      	ldr	r0, [pc, #36]	; (80062a0 <siprintf+0x38>)
 800627a:	9107      	str	r1, [sp, #28]
 800627c:	9104      	str	r1, [sp, #16]
 800627e:	4909      	ldr	r1, [pc, #36]	; (80062a4 <siprintf+0x3c>)
 8006280:	f853 2b04 	ldr.w	r2, [r3], #4
 8006284:	9105      	str	r1, [sp, #20]
 8006286:	6800      	ldr	r0, [r0, #0]
 8006288:	9301      	str	r3, [sp, #4]
 800628a:	a902      	add	r1, sp, #8
 800628c:	f000 f866 	bl	800635c <_svfiprintf_r>
 8006290:	9b02      	ldr	r3, [sp, #8]
 8006292:	2200      	movs	r2, #0
 8006294:	701a      	strb	r2, [r3, #0]
 8006296:	b01c      	add	sp, #112	; 0x70
 8006298:	f85d eb04 	ldr.w	lr, [sp], #4
 800629c:	b003      	add	sp, #12
 800629e:	4770      	bx	lr
 80062a0:	20000010 	.word	0x20000010
 80062a4:	ffff0208 	.word	0xffff0208

080062a8 <__ssputs_r>:
 80062a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062ac:	688e      	ldr	r6, [r1, #8]
 80062ae:	429e      	cmp	r6, r3
 80062b0:	4682      	mov	sl, r0
 80062b2:	460c      	mov	r4, r1
 80062b4:	4690      	mov	r8, r2
 80062b6:	4699      	mov	r9, r3
 80062b8:	d837      	bhi.n	800632a <__ssputs_r+0x82>
 80062ba:	898a      	ldrh	r2, [r1, #12]
 80062bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80062c0:	d031      	beq.n	8006326 <__ssputs_r+0x7e>
 80062c2:	6825      	ldr	r5, [r4, #0]
 80062c4:	6909      	ldr	r1, [r1, #16]
 80062c6:	1a6f      	subs	r7, r5, r1
 80062c8:	6965      	ldr	r5, [r4, #20]
 80062ca:	2302      	movs	r3, #2
 80062cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062d0:	fb95 f5f3 	sdiv	r5, r5, r3
 80062d4:	f109 0301 	add.w	r3, r9, #1
 80062d8:	443b      	add	r3, r7
 80062da:	429d      	cmp	r5, r3
 80062dc:	bf38      	it	cc
 80062de:	461d      	movcc	r5, r3
 80062e0:	0553      	lsls	r3, r2, #21
 80062e2:	d530      	bpl.n	8006346 <__ssputs_r+0x9e>
 80062e4:	4629      	mov	r1, r5
 80062e6:	f000 fb21 	bl	800692c <_malloc_r>
 80062ea:	4606      	mov	r6, r0
 80062ec:	b950      	cbnz	r0, 8006304 <__ssputs_r+0x5c>
 80062ee:	230c      	movs	r3, #12
 80062f0:	f8ca 3000 	str.w	r3, [sl]
 80062f4:	89a3      	ldrh	r3, [r4, #12]
 80062f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062fa:	81a3      	strh	r3, [r4, #12]
 80062fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006304:	463a      	mov	r2, r7
 8006306:	6921      	ldr	r1, [r4, #16]
 8006308:	f7ff ff9a 	bl	8006240 <memcpy>
 800630c:	89a3      	ldrh	r3, [r4, #12]
 800630e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006316:	81a3      	strh	r3, [r4, #12]
 8006318:	6126      	str	r6, [r4, #16]
 800631a:	6165      	str	r5, [r4, #20]
 800631c:	443e      	add	r6, r7
 800631e:	1bed      	subs	r5, r5, r7
 8006320:	6026      	str	r6, [r4, #0]
 8006322:	60a5      	str	r5, [r4, #8]
 8006324:	464e      	mov	r6, r9
 8006326:	454e      	cmp	r6, r9
 8006328:	d900      	bls.n	800632c <__ssputs_r+0x84>
 800632a:	464e      	mov	r6, r9
 800632c:	4632      	mov	r2, r6
 800632e:	4641      	mov	r1, r8
 8006330:	6820      	ldr	r0, [r4, #0]
 8006332:	f000 fa93 	bl	800685c <memmove>
 8006336:	68a3      	ldr	r3, [r4, #8]
 8006338:	1b9b      	subs	r3, r3, r6
 800633a:	60a3      	str	r3, [r4, #8]
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	441e      	add	r6, r3
 8006340:	6026      	str	r6, [r4, #0]
 8006342:	2000      	movs	r0, #0
 8006344:	e7dc      	b.n	8006300 <__ssputs_r+0x58>
 8006346:	462a      	mov	r2, r5
 8006348:	f000 fb4a 	bl	80069e0 <_realloc_r>
 800634c:	4606      	mov	r6, r0
 800634e:	2800      	cmp	r0, #0
 8006350:	d1e2      	bne.n	8006318 <__ssputs_r+0x70>
 8006352:	6921      	ldr	r1, [r4, #16]
 8006354:	4650      	mov	r0, sl
 8006356:	f000 fa9b 	bl	8006890 <_free_r>
 800635a:	e7c8      	b.n	80062ee <__ssputs_r+0x46>

0800635c <_svfiprintf_r>:
 800635c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006360:	461d      	mov	r5, r3
 8006362:	898b      	ldrh	r3, [r1, #12]
 8006364:	061f      	lsls	r7, r3, #24
 8006366:	b09d      	sub	sp, #116	; 0x74
 8006368:	4680      	mov	r8, r0
 800636a:	460c      	mov	r4, r1
 800636c:	4616      	mov	r6, r2
 800636e:	d50f      	bpl.n	8006390 <_svfiprintf_r+0x34>
 8006370:	690b      	ldr	r3, [r1, #16]
 8006372:	b96b      	cbnz	r3, 8006390 <_svfiprintf_r+0x34>
 8006374:	2140      	movs	r1, #64	; 0x40
 8006376:	f000 fad9 	bl	800692c <_malloc_r>
 800637a:	6020      	str	r0, [r4, #0]
 800637c:	6120      	str	r0, [r4, #16]
 800637e:	b928      	cbnz	r0, 800638c <_svfiprintf_r+0x30>
 8006380:	230c      	movs	r3, #12
 8006382:	f8c8 3000 	str.w	r3, [r8]
 8006386:	f04f 30ff 	mov.w	r0, #4294967295
 800638a:	e0c8      	b.n	800651e <_svfiprintf_r+0x1c2>
 800638c:	2340      	movs	r3, #64	; 0x40
 800638e:	6163      	str	r3, [r4, #20]
 8006390:	2300      	movs	r3, #0
 8006392:	9309      	str	r3, [sp, #36]	; 0x24
 8006394:	2320      	movs	r3, #32
 8006396:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800639a:	2330      	movs	r3, #48	; 0x30
 800639c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063a0:	9503      	str	r5, [sp, #12]
 80063a2:	f04f 0b01 	mov.w	fp, #1
 80063a6:	4637      	mov	r7, r6
 80063a8:	463d      	mov	r5, r7
 80063aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80063ae:	b10b      	cbz	r3, 80063b4 <_svfiprintf_r+0x58>
 80063b0:	2b25      	cmp	r3, #37	; 0x25
 80063b2:	d13e      	bne.n	8006432 <_svfiprintf_r+0xd6>
 80063b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80063b8:	d00b      	beq.n	80063d2 <_svfiprintf_r+0x76>
 80063ba:	4653      	mov	r3, sl
 80063bc:	4632      	mov	r2, r6
 80063be:	4621      	mov	r1, r4
 80063c0:	4640      	mov	r0, r8
 80063c2:	f7ff ff71 	bl	80062a8 <__ssputs_r>
 80063c6:	3001      	adds	r0, #1
 80063c8:	f000 80a4 	beq.w	8006514 <_svfiprintf_r+0x1b8>
 80063cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ce:	4453      	add	r3, sl
 80063d0:	9309      	str	r3, [sp, #36]	; 0x24
 80063d2:	783b      	ldrb	r3, [r7, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 809d 	beq.w	8006514 <_svfiprintf_r+0x1b8>
 80063da:	2300      	movs	r3, #0
 80063dc:	f04f 32ff 	mov.w	r2, #4294967295
 80063e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063e4:	9304      	str	r3, [sp, #16]
 80063e6:	9307      	str	r3, [sp, #28]
 80063e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063ec:	931a      	str	r3, [sp, #104]	; 0x68
 80063ee:	462f      	mov	r7, r5
 80063f0:	2205      	movs	r2, #5
 80063f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80063f6:	4850      	ldr	r0, [pc, #320]	; (8006538 <_svfiprintf_r+0x1dc>)
 80063f8:	f7f9 fefa 	bl	80001f0 <memchr>
 80063fc:	9b04      	ldr	r3, [sp, #16]
 80063fe:	b9d0      	cbnz	r0, 8006436 <_svfiprintf_r+0xda>
 8006400:	06d9      	lsls	r1, r3, #27
 8006402:	bf44      	itt	mi
 8006404:	2220      	movmi	r2, #32
 8006406:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800640a:	071a      	lsls	r2, r3, #28
 800640c:	bf44      	itt	mi
 800640e:	222b      	movmi	r2, #43	; 0x2b
 8006410:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006414:	782a      	ldrb	r2, [r5, #0]
 8006416:	2a2a      	cmp	r2, #42	; 0x2a
 8006418:	d015      	beq.n	8006446 <_svfiprintf_r+0xea>
 800641a:	9a07      	ldr	r2, [sp, #28]
 800641c:	462f      	mov	r7, r5
 800641e:	2000      	movs	r0, #0
 8006420:	250a      	movs	r5, #10
 8006422:	4639      	mov	r1, r7
 8006424:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006428:	3b30      	subs	r3, #48	; 0x30
 800642a:	2b09      	cmp	r3, #9
 800642c:	d94d      	bls.n	80064ca <_svfiprintf_r+0x16e>
 800642e:	b1b8      	cbz	r0, 8006460 <_svfiprintf_r+0x104>
 8006430:	e00f      	b.n	8006452 <_svfiprintf_r+0xf6>
 8006432:	462f      	mov	r7, r5
 8006434:	e7b8      	b.n	80063a8 <_svfiprintf_r+0x4c>
 8006436:	4a40      	ldr	r2, [pc, #256]	; (8006538 <_svfiprintf_r+0x1dc>)
 8006438:	1a80      	subs	r0, r0, r2
 800643a:	fa0b f000 	lsl.w	r0, fp, r0
 800643e:	4318      	orrs	r0, r3
 8006440:	9004      	str	r0, [sp, #16]
 8006442:	463d      	mov	r5, r7
 8006444:	e7d3      	b.n	80063ee <_svfiprintf_r+0x92>
 8006446:	9a03      	ldr	r2, [sp, #12]
 8006448:	1d11      	adds	r1, r2, #4
 800644a:	6812      	ldr	r2, [r2, #0]
 800644c:	9103      	str	r1, [sp, #12]
 800644e:	2a00      	cmp	r2, #0
 8006450:	db01      	blt.n	8006456 <_svfiprintf_r+0xfa>
 8006452:	9207      	str	r2, [sp, #28]
 8006454:	e004      	b.n	8006460 <_svfiprintf_r+0x104>
 8006456:	4252      	negs	r2, r2
 8006458:	f043 0302 	orr.w	r3, r3, #2
 800645c:	9207      	str	r2, [sp, #28]
 800645e:	9304      	str	r3, [sp, #16]
 8006460:	783b      	ldrb	r3, [r7, #0]
 8006462:	2b2e      	cmp	r3, #46	; 0x2e
 8006464:	d10c      	bne.n	8006480 <_svfiprintf_r+0x124>
 8006466:	787b      	ldrb	r3, [r7, #1]
 8006468:	2b2a      	cmp	r3, #42	; 0x2a
 800646a:	d133      	bne.n	80064d4 <_svfiprintf_r+0x178>
 800646c:	9b03      	ldr	r3, [sp, #12]
 800646e:	1d1a      	adds	r2, r3, #4
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	9203      	str	r2, [sp, #12]
 8006474:	2b00      	cmp	r3, #0
 8006476:	bfb8      	it	lt
 8006478:	f04f 33ff 	movlt.w	r3, #4294967295
 800647c:	3702      	adds	r7, #2
 800647e:	9305      	str	r3, [sp, #20]
 8006480:	4d2e      	ldr	r5, [pc, #184]	; (800653c <_svfiprintf_r+0x1e0>)
 8006482:	7839      	ldrb	r1, [r7, #0]
 8006484:	2203      	movs	r2, #3
 8006486:	4628      	mov	r0, r5
 8006488:	f7f9 feb2 	bl	80001f0 <memchr>
 800648c:	b138      	cbz	r0, 800649e <_svfiprintf_r+0x142>
 800648e:	2340      	movs	r3, #64	; 0x40
 8006490:	1b40      	subs	r0, r0, r5
 8006492:	fa03 f000 	lsl.w	r0, r3, r0
 8006496:	9b04      	ldr	r3, [sp, #16]
 8006498:	4303      	orrs	r3, r0
 800649a:	3701      	adds	r7, #1
 800649c:	9304      	str	r3, [sp, #16]
 800649e:	7839      	ldrb	r1, [r7, #0]
 80064a0:	4827      	ldr	r0, [pc, #156]	; (8006540 <_svfiprintf_r+0x1e4>)
 80064a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064a6:	2206      	movs	r2, #6
 80064a8:	1c7e      	adds	r6, r7, #1
 80064aa:	f7f9 fea1 	bl	80001f0 <memchr>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	d038      	beq.n	8006524 <_svfiprintf_r+0x1c8>
 80064b2:	4b24      	ldr	r3, [pc, #144]	; (8006544 <_svfiprintf_r+0x1e8>)
 80064b4:	bb13      	cbnz	r3, 80064fc <_svfiprintf_r+0x1a0>
 80064b6:	9b03      	ldr	r3, [sp, #12]
 80064b8:	3307      	adds	r3, #7
 80064ba:	f023 0307 	bic.w	r3, r3, #7
 80064be:	3308      	adds	r3, #8
 80064c0:	9303      	str	r3, [sp, #12]
 80064c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c4:	444b      	add	r3, r9
 80064c6:	9309      	str	r3, [sp, #36]	; 0x24
 80064c8:	e76d      	b.n	80063a6 <_svfiprintf_r+0x4a>
 80064ca:	fb05 3202 	mla	r2, r5, r2, r3
 80064ce:	2001      	movs	r0, #1
 80064d0:	460f      	mov	r7, r1
 80064d2:	e7a6      	b.n	8006422 <_svfiprintf_r+0xc6>
 80064d4:	2300      	movs	r3, #0
 80064d6:	3701      	adds	r7, #1
 80064d8:	9305      	str	r3, [sp, #20]
 80064da:	4619      	mov	r1, r3
 80064dc:	250a      	movs	r5, #10
 80064de:	4638      	mov	r0, r7
 80064e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064e4:	3a30      	subs	r2, #48	; 0x30
 80064e6:	2a09      	cmp	r2, #9
 80064e8:	d903      	bls.n	80064f2 <_svfiprintf_r+0x196>
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d0c8      	beq.n	8006480 <_svfiprintf_r+0x124>
 80064ee:	9105      	str	r1, [sp, #20]
 80064f0:	e7c6      	b.n	8006480 <_svfiprintf_r+0x124>
 80064f2:	fb05 2101 	mla	r1, r5, r1, r2
 80064f6:	2301      	movs	r3, #1
 80064f8:	4607      	mov	r7, r0
 80064fa:	e7f0      	b.n	80064de <_svfiprintf_r+0x182>
 80064fc:	ab03      	add	r3, sp, #12
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	4622      	mov	r2, r4
 8006502:	4b11      	ldr	r3, [pc, #68]	; (8006548 <_svfiprintf_r+0x1ec>)
 8006504:	a904      	add	r1, sp, #16
 8006506:	4640      	mov	r0, r8
 8006508:	f3af 8000 	nop.w
 800650c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006510:	4681      	mov	r9, r0
 8006512:	d1d6      	bne.n	80064c2 <_svfiprintf_r+0x166>
 8006514:	89a3      	ldrh	r3, [r4, #12]
 8006516:	065b      	lsls	r3, r3, #25
 8006518:	f53f af35 	bmi.w	8006386 <_svfiprintf_r+0x2a>
 800651c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800651e:	b01d      	add	sp, #116	; 0x74
 8006520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006524:	ab03      	add	r3, sp, #12
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	4622      	mov	r2, r4
 800652a:	4b07      	ldr	r3, [pc, #28]	; (8006548 <_svfiprintf_r+0x1ec>)
 800652c:	a904      	add	r1, sp, #16
 800652e:	4640      	mov	r0, r8
 8006530:	f000 f882 	bl	8006638 <_printf_i>
 8006534:	e7ea      	b.n	800650c <_svfiprintf_r+0x1b0>
 8006536:	bf00      	nop
 8006538:	08006b68 	.word	0x08006b68
 800653c:	08006b6e 	.word	0x08006b6e
 8006540:	08006b72 	.word	0x08006b72
 8006544:	00000000 	.word	0x00000000
 8006548:	080062a9 	.word	0x080062a9

0800654c <_printf_common>:
 800654c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006550:	4691      	mov	r9, r2
 8006552:	461f      	mov	r7, r3
 8006554:	688a      	ldr	r2, [r1, #8]
 8006556:	690b      	ldr	r3, [r1, #16]
 8006558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800655c:	4293      	cmp	r3, r2
 800655e:	bfb8      	it	lt
 8006560:	4613      	movlt	r3, r2
 8006562:	f8c9 3000 	str.w	r3, [r9]
 8006566:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800656a:	4606      	mov	r6, r0
 800656c:	460c      	mov	r4, r1
 800656e:	b112      	cbz	r2, 8006576 <_printf_common+0x2a>
 8006570:	3301      	adds	r3, #1
 8006572:	f8c9 3000 	str.w	r3, [r9]
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	0699      	lsls	r1, r3, #26
 800657a:	bf42      	ittt	mi
 800657c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006580:	3302      	addmi	r3, #2
 8006582:	f8c9 3000 	strmi.w	r3, [r9]
 8006586:	6825      	ldr	r5, [r4, #0]
 8006588:	f015 0506 	ands.w	r5, r5, #6
 800658c:	d107      	bne.n	800659e <_printf_common+0x52>
 800658e:	f104 0a19 	add.w	sl, r4, #25
 8006592:	68e3      	ldr	r3, [r4, #12]
 8006594:	f8d9 2000 	ldr.w	r2, [r9]
 8006598:	1a9b      	subs	r3, r3, r2
 800659a:	42ab      	cmp	r3, r5
 800659c:	dc28      	bgt.n	80065f0 <_printf_common+0xa4>
 800659e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80065a2:	6822      	ldr	r2, [r4, #0]
 80065a4:	3300      	adds	r3, #0
 80065a6:	bf18      	it	ne
 80065a8:	2301      	movne	r3, #1
 80065aa:	0692      	lsls	r2, r2, #26
 80065ac:	d42d      	bmi.n	800660a <_printf_common+0xbe>
 80065ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065b2:	4639      	mov	r1, r7
 80065b4:	4630      	mov	r0, r6
 80065b6:	47c0      	blx	r8
 80065b8:	3001      	adds	r0, #1
 80065ba:	d020      	beq.n	80065fe <_printf_common+0xb2>
 80065bc:	6823      	ldr	r3, [r4, #0]
 80065be:	68e5      	ldr	r5, [r4, #12]
 80065c0:	f8d9 2000 	ldr.w	r2, [r9]
 80065c4:	f003 0306 	and.w	r3, r3, #6
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	bf08      	it	eq
 80065cc:	1aad      	subeq	r5, r5, r2
 80065ce:	68a3      	ldr	r3, [r4, #8]
 80065d0:	6922      	ldr	r2, [r4, #16]
 80065d2:	bf0c      	ite	eq
 80065d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065d8:	2500      	movne	r5, #0
 80065da:	4293      	cmp	r3, r2
 80065dc:	bfc4      	itt	gt
 80065de:	1a9b      	subgt	r3, r3, r2
 80065e0:	18ed      	addgt	r5, r5, r3
 80065e2:	f04f 0900 	mov.w	r9, #0
 80065e6:	341a      	adds	r4, #26
 80065e8:	454d      	cmp	r5, r9
 80065ea:	d11a      	bne.n	8006622 <_printf_common+0xd6>
 80065ec:	2000      	movs	r0, #0
 80065ee:	e008      	b.n	8006602 <_printf_common+0xb6>
 80065f0:	2301      	movs	r3, #1
 80065f2:	4652      	mov	r2, sl
 80065f4:	4639      	mov	r1, r7
 80065f6:	4630      	mov	r0, r6
 80065f8:	47c0      	blx	r8
 80065fa:	3001      	adds	r0, #1
 80065fc:	d103      	bne.n	8006606 <_printf_common+0xba>
 80065fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006606:	3501      	adds	r5, #1
 8006608:	e7c3      	b.n	8006592 <_printf_common+0x46>
 800660a:	18e1      	adds	r1, r4, r3
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	2030      	movs	r0, #48	; 0x30
 8006610:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006614:	4422      	add	r2, r4
 8006616:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800661a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800661e:	3302      	adds	r3, #2
 8006620:	e7c5      	b.n	80065ae <_printf_common+0x62>
 8006622:	2301      	movs	r3, #1
 8006624:	4622      	mov	r2, r4
 8006626:	4639      	mov	r1, r7
 8006628:	4630      	mov	r0, r6
 800662a:	47c0      	blx	r8
 800662c:	3001      	adds	r0, #1
 800662e:	d0e6      	beq.n	80065fe <_printf_common+0xb2>
 8006630:	f109 0901 	add.w	r9, r9, #1
 8006634:	e7d8      	b.n	80065e8 <_printf_common+0x9c>
	...

08006638 <_printf_i>:
 8006638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800663c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006640:	460c      	mov	r4, r1
 8006642:	7e09      	ldrb	r1, [r1, #24]
 8006644:	b085      	sub	sp, #20
 8006646:	296e      	cmp	r1, #110	; 0x6e
 8006648:	4617      	mov	r7, r2
 800664a:	4606      	mov	r6, r0
 800664c:	4698      	mov	r8, r3
 800664e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006650:	f000 80b3 	beq.w	80067ba <_printf_i+0x182>
 8006654:	d822      	bhi.n	800669c <_printf_i+0x64>
 8006656:	2963      	cmp	r1, #99	; 0x63
 8006658:	d036      	beq.n	80066c8 <_printf_i+0x90>
 800665a:	d80a      	bhi.n	8006672 <_printf_i+0x3a>
 800665c:	2900      	cmp	r1, #0
 800665e:	f000 80b9 	beq.w	80067d4 <_printf_i+0x19c>
 8006662:	2958      	cmp	r1, #88	; 0x58
 8006664:	f000 8083 	beq.w	800676e <_printf_i+0x136>
 8006668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800666c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006670:	e032      	b.n	80066d8 <_printf_i+0xa0>
 8006672:	2964      	cmp	r1, #100	; 0x64
 8006674:	d001      	beq.n	800667a <_printf_i+0x42>
 8006676:	2969      	cmp	r1, #105	; 0x69
 8006678:	d1f6      	bne.n	8006668 <_printf_i+0x30>
 800667a:	6820      	ldr	r0, [r4, #0]
 800667c:	6813      	ldr	r3, [r2, #0]
 800667e:	0605      	lsls	r5, r0, #24
 8006680:	f103 0104 	add.w	r1, r3, #4
 8006684:	d52a      	bpl.n	80066dc <_printf_i+0xa4>
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6011      	str	r1, [r2, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	da03      	bge.n	8006696 <_printf_i+0x5e>
 800668e:	222d      	movs	r2, #45	; 0x2d
 8006690:	425b      	negs	r3, r3
 8006692:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006696:	486f      	ldr	r0, [pc, #444]	; (8006854 <_printf_i+0x21c>)
 8006698:	220a      	movs	r2, #10
 800669a:	e039      	b.n	8006710 <_printf_i+0xd8>
 800669c:	2973      	cmp	r1, #115	; 0x73
 800669e:	f000 809d 	beq.w	80067dc <_printf_i+0x1a4>
 80066a2:	d808      	bhi.n	80066b6 <_printf_i+0x7e>
 80066a4:	296f      	cmp	r1, #111	; 0x6f
 80066a6:	d020      	beq.n	80066ea <_printf_i+0xb2>
 80066a8:	2970      	cmp	r1, #112	; 0x70
 80066aa:	d1dd      	bne.n	8006668 <_printf_i+0x30>
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	f043 0320 	orr.w	r3, r3, #32
 80066b2:	6023      	str	r3, [r4, #0]
 80066b4:	e003      	b.n	80066be <_printf_i+0x86>
 80066b6:	2975      	cmp	r1, #117	; 0x75
 80066b8:	d017      	beq.n	80066ea <_printf_i+0xb2>
 80066ba:	2978      	cmp	r1, #120	; 0x78
 80066bc:	d1d4      	bne.n	8006668 <_printf_i+0x30>
 80066be:	2378      	movs	r3, #120	; 0x78
 80066c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066c4:	4864      	ldr	r0, [pc, #400]	; (8006858 <_printf_i+0x220>)
 80066c6:	e055      	b.n	8006774 <_printf_i+0x13c>
 80066c8:	6813      	ldr	r3, [r2, #0]
 80066ca:	1d19      	adds	r1, r3, #4
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6011      	str	r1, [r2, #0]
 80066d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066d8:	2301      	movs	r3, #1
 80066da:	e08c      	b.n	80067f6 <_printf_i+0x1be>
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6011      	str	r1, [r2, #0]
 80066e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066e4:	bf18      	it	ne
 80066e6:	b21b      	sxthne	r3, r3
 80066e8:	e7cf      	b.n	800668a <_printf_i+0x52>
 80066ea:	6813      	ldr	r3, [r2, #0]
 80066ec:	6825      	ldr	r5, [r4, #0]
 80066ee:	1d18      	adds	r0, r3, #4
 80066f0:	6010      	str	r0, [r2, #0]
 80066f2:	0628      	lsls	r0, r5, #24
 80066f4:	d501      	bpl.n	80066fa <_printf_i+0xc2>
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	e002      	b.n	8006700 <_printf_i+0xc8>
 80066fa:	0668      	lsls	r0, r5, #25
 80066fc:	d5fb      	bpl.n	80066f6 <_printf_i+0xbe>
 80066fe:	881b      	ldrh	r3, [r3, #0]
 8006700:	4854      	ldr	r0, [pc, #336]	; (8006854 <_printf_i+0x21c>)
 8006702:	296f      	cmp	r1, #111	; 0x6f
 8006704:	bf14      	ite	ne
 8006706:	220a      	movne	r2, #10
 8006708:	2208      	moveq	r2, #8
 800670a:	2100      	movs	r1, #0
 800670c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006710:	6865      	ldr	r5, [r4, #4]
 8006712:	60a5      	str	r5, [r4, #8]
 8006714:	2d00      	cmp	r5, #0
 8006716:	f2c0 8095 	blt.w	8006844 <_printf_i+0x20c>
 800671a:	6821      	ldr	r1, [r4, #0]
 800671c:	f021 0104 	bic.w	r1, r1, #4
 8006720:	6021      	str	r1, [r4, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d13d      	bne.n	80067a2 <_printf_i+0x16a>
 8006726:	2d00      	cmp	r5, #0
 8006728:	f040 808e 	bne.w	8006848 <_printf_i+0x210>
 800672c:	4665      	mov	r5, ip
 800672e:	2a08      	cmp	r2, #8
 8006730:	d10b      	bne.n	800674a <_printf_i+0x112>
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	07db      	lsls	r3, r3, #31
 8006736:	d508      	bpl.n	800674a <_printf_i+0x112>
 8006738:	6923      	ldr	r3, [r4, #16]
 800673a:	6862      	ldr	r2, [r4, #4]
 800673c:	429a      	cmp	r2, r3
 800673e:	bfde      	ittt	le
 8006740:	2330      	movle	r3, #48	; 0x30
 8006742:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006746:	f105 35ff 	addle.w	r5, r5, #4294967295
 800674a:	ebac 0305 	sub.w	r3, ip, r5
 800674e:	6123      	str	r3, [r4, #16]
 8006750:	f8cd 8000 	str.w	r8, [sp]
 8006754:	463b      	mov	r3, r7
 8006756:	aa03      	add	r2, sp, #12
 8006758:	4621      	mov	r1, r4
 800675a:	4630      	mov	r0, r6
 800675c:	f7ff fef6 	bl	800654c <_printf_common>
 8006760:	3001      	adds	r0, #1
 8006762:	d14d      	bne.n	8006800 <_printf_i+0x1c8>
 8006764:	f04f 30ff 	mov.w	r0, #4294967295
 8006768:	b005      	add	sp, #20
 800676a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800676e:	4839      	ldr	r0, [pc, #228]	; (8006854 <_printf_i+0x21c>)
 8006770:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006774:	6813      	ldr	r3, [r2, #0]
 8006776:	6821      	ldr	r1, [r4, #0]
 8006778:	1d1d      	adds	r5, r3, #4
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6015      	str	r5, [r2, #0]
 800677e:	060a      	lsls	r2, r1, #24
 8006780:	d50b      	bpl.n	800679a <_printf_i+0x162>
 8006782:	07ca      	lsls	r2, r1, #31
 8006784:	bf44      	itt	mi
 8006786:	f041 0120 	orrmi.w	r1, r1, #32
 800678a:	6021      	strmi	r1, [r4, #0]
 800678c:	b91b      	cbnz	r3, 8006796 <_printf_i+0x15e>
 800678e:	6822      	ldr	r2, [r4, #0]
 8006790:	f022 0220 	bic.w	r2, r2, #32
 8006794:	6022      	str	r2, [r4, #0]
 8006796:	2210      	movs	r2, #16
 8006798:	e7b7      	b.n	800670a <_printf_i+0xd2>
 800679a:	064d      	lsls	r5, r1, #25
 800679c:	bf48      	it	mi
 800679e:	b29b      	uxthmi	r3, r3
 80067a0:	e7ef      	b.n	8006782 <_printf_i+0x14a>
 80067a2:	4665      	mov	r5, ip
 80067a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80067a8:	fb02 3311 	mls	r3, r2, r1, r3
 80067ac:	5cc3      	ldrb	r3, [r0, r3]
 80067ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80067b2:	460b      	mov	r3, r1
 80067b4:	2900      	cmp	r1, #0
 80067b6:	d1f5      	bne.n	80067a4 <_printf_i+0x16c>
 80067b8:	e7b9      	b.n	800672e <_printf_i+0xf6>
 80067ba:	6813      	ldr	r3, [r2, #0]
 80067bc:	6825      	ldr	r5, [r4, #0]
 80067be:	6961      	ldr	r1, [r4, #20]
 80067c0:	1d18      	adds	r0, r3, #4
 80067c2:	6010      	str	r0, [r2, #0]
 80067c4:	0628      	lsls	r0, r5, #24
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	d501      	bpl.n	80067ce <_printf_i+0x196>
 80067ca:	6019      	str	r1, [r3, #0]
 80067cc:	e002      	b.n	80067d4 <_printf_i+0x19c>
 80067ce:	066a      	lsls	r2, r5, #25
 80067d0:	d5fb      	bpl.n	80067ca <_printf_i+0x192>
 80067d2:	8019      	strh	r1, [r3, #0]
 80067d4:	2300      	movs	r3, #0
 80067d6:	6123      	str	r3, [r4, #16]
 80067d8:	4665      	mov	r5, ip
 80067da:	e7b9      	b.n	8006750 <_printf_i+0x118>
 80067dc:	6813      	ldr	r3, [r2, #0]
 80067de:	1d19      	adds	r1, r3, #4
 80067e0:	6011      	str	r1, [r2, #0]
 80067e2:	681d      	ldr	r5, [r3, #0]
 80067e4:	6862      	ldr	r2, [r4, #4]
 80067e6:	2100      	movs	r1, #0
 80067e8:	4628      	mov	r0, r5
 80067ea:	f7f9 fd01 	bl	80001f0 <memchr>
 80067ee:	b108      	cbz	r0, 80067f4 <_printf_i+0x1bc>
 80067f0:	1b40      	subs	r0, r0, r5
 80067f2:	6060      	str	r0, [r4, #4]
 80067f4:	6863      	ldr	r3, [r4, #4]
 80067f6:	6123      	str	r3, [r4, #16]
 80067f8:	2300      	movs	r3, #0
 80067fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067fe:	e7a7      	b.n	8006750 <_printf_i+0x118>
 8006800:	6923      	ldr	r3, [r4, #16]
 8006802:	462a      	mov	r2, r5
 8006804:	4639      	mov	r1, r7
 8006806:	4630      	mov	r0, r6
 8006808:	47c0      	blx	r8
 800680a:	3001      	adds	r0, #1
 800680c:	d0aa      	beq.n	8006764 <_printf_i+0x12c>
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	079b      	lsls	r3, r3, #30
 8006812:	d413      	bmi.n	800683c <_printf_i+0x204>
 8006814:	68e0      	ldr	r0, [r4, #12]
 8006816:	9b03      	ldr	r3, [sp, #12]
 8006818:	4298      	cmp	r0, r3
 800681a:	bfb8      	it	lt
 800681c:	4618      	movlt	r0, r3
 800681e:	e7a3      	b.n	8006768 <_printf_i+0x130>
 8006820:	2301      	movs	r3, #1
 8006822:	464a      	mov	r2, r9
 8006824:	4639      	mov	r1, r7
 8006826:	4630      	mov	r0, r6
 8006828:	47c0      	blx	r8
 800682a:	3001      	adds	r0, #1
 800682c:	d09a      	beq.n	8006764 <_printf_i+0x12c>
 800682e:	3501      	adds	r5, #1
 8006830:	68e3      	ldr	r3, [r4, #12]
 8006832:	9a03      	ldr	r2, [sp, #12]
 8006834:	1a9b      	subs	r3, r3, r2
 8006836:	42ab      	cmp	r3, r5
 8006838:	dcf2      	bgt.n	8006820 <_printf_i+0x1e8>
 800683a:	e7eb      	b.n	8006814 <_printf_i+0x1dc>
 800683c:	2500      	movs	r5, #0
 800683e:	f104 0919 	add.w	r9, r4, #25
 8006842:	e7f5      	b.n	8006830 <_printf_i+0x1f8>
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1ac      	bne.n	80067a2 <_printf_i+0x16a>
 8006848:	7803      	ldrb	r3, [r0, #0]
 800684a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800684e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006852:	e76c      	b.n	800672e <_printf_i+0xf6>
 8006854:	08006b79 	.word	0x08006b79
 8006858:	08006b8a 	.word	0x08006b8a

0800685c <memmove>:
 800685c:	4288      	cmp	r0, r1
 800685e:	b510      	push	{r4, lr}
 8006860:	eb01 0302 	add.w	r3, r1, r2
 8006864:	d807      	bhi.n	8006876 <memmove+0x1a>
 8006866:	1e42      	subs	r2, r0, #1
 8006868:	4299      	cmp	r1, r3
 800686a:	d00a      	beq.n	8006882 <memmove+0x26>
 800686c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006870:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006874:	e7f8      	b.n	8006868 <memmove+0xc>
 8006876:	4283      	cmp	r3, r0
 8006878:	d9f5      	bls.n	8006866 <memmove+0xa>
 800687a:	1881      	adds	r1, r0, r2
 800687c:	1ad2      	subs	r2, r2, r3
 800687e:	42d3      	cmn	r3, r2
 8006880:	d100      	bne.n	8006884 <memmove+0x28>
 8006882:	bd10      	pop	{r4, pc}
 8006884:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006888:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800688c:	e7f7      	b.n	800687e <memmove+0x22>
	...

08006890 <_free_r>:
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	4605      	mov	r5, r0
 8006894:	2900      	cmp	r1, #0
 8006896:	d045      	beq.n	8006924 <_free_r+0x94>
 8006898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800689c:	1f0c      	subs	r4, r1, #4
 800689e:	2b00      	cmp	r3, #0
 80068a0:	bfb8      	it	lt
 80068a2:	18e4      	addlt	r4, r4, r3
 80068a4:	f000 f8d2 	bl	8006a4c <__malloc_lock>
 80068a8:	4a1f      	ldr	r2, [pc, #124]	; (8006928 <_free_r+0x98>)
 80068aa:	6813      	ldr	r3, [r2, #0]
 80068ac:	4610      	mov	r0, r2
 80068ae:	b933      	cbnz	r3, 80068be <_free_r+0x2e>
 80068b0:	6063      	str	r3, [r4, #4]
 80068b2:	6014      	str	r4, [r2, #0]
 80068b4:	4628      	mov	r0, r5
 80068b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068ba:	f000 b8c8 	b.w	8006a4e <__malloc_unlock>
 80068be:	42a3      	cmp	r3, r4
 80068c0:	d90c      	bls.n	80068dc <_free_r+0x4c>
 80068c2:	6821      	ldr	r1, [r4, #0]
 80068c4:	1862      	adds	r2, r4, r1
 80068c6:	4293      	cmp	r3, r2
 80068c8:	bf04      	itt	eq
 80068ca:	681a      	ldreq	r2, [r3, #0]
 80068cc:	685b      	ldreq	r3, [r3, #4]
 80068ce:	6063      	str	r3, [r4, #4]
 80068d0:	bf04      	itt	eq
 80068d2:	1852      	addeq	r2, r2, r1
 80068d4:	6022      	streq	r2, [r4, #0]
 80068d6:	6004      	str	r4, [r0, #0]
 80068d8:	e7ec      	b.n	80068b4 <_free_r+0x24>
 80068da:	4613      	mov	r3, r2
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	b10a      	cbz	r2, 80068e4 <_free_r+0x54>
 80068e0:	42a2      	cmp	r2, r4
 80068e2:	d9fa      	bls.n	80068da <_free_r+0x4a>
 80068e4:	6819      	ldr	r1, [r3, #0]
 80068e6:	1858      	adds	r0, r3, r1
 80068e8:	42a0      	cmp	r0, r4
 80068ea:	d10b      	bne.n	8006904 <_free_r+0x74>
 80068ec:	6820      	ldr	r0, [r4, #0]
 80068ee:	4401      	add	r1, r0
 80068f0:	1858      	adds	r0, r3, r1
 80068f2:	4282      	cmp	r2, r0
 80068f4:	6019      	str	r1, [r3, #0]
 80068f6:	d1dd      	bne.n	80068b4 <_free_r+0x24>
 80068f8:	6810      	ldr	r0, [r2, #0]
 80068fa:	6852      	ldr	r2, [r2, #4]
 80068fc:	605a      	str	r2, [r3, #4]
 80068fe:	4401      	add	r1, r0
 8006900:	6019      	str	r1, [r3, #0]
 8006902:	e7d7      	b.n	80068b4 <_free_r+0x24>
 8006904:	d902      	bls.n	800690c <_free_r+0x7c>
 8006906:	230c      	movs	r3, #12
 8006908:	602b      	str	r3, [r5, #0]
 800690a:	e7d3      	b.n	80068b4 <_free_r+0x24>
 800690c:	6820      	ldr	r0, [r4, #0]
 800690e:	1821      	adds	r1, r4, r0
 8006910:	428a      	cmp	r2, r1
 8006912:	bf04      	itt	eq
 8006914:	6811      	ldreq	r1, [r2, #0]
 8006916:	6852      	ldreq	r2, [r2, #4]
 8006918:	6062      	str	r2, [r4, #4]
 800691a:	bf04      	itt	eq
 800691c:	1809      	addeq	r1, r1, r0
 800691e:	6021      	streq	r1, [r4, #0]
 8006920:	605c      	str	r4, [r3, #4]
 8006922:	e7c7      	b.n	80068b4 <_free_r+0x24>
 8006924:	bd38      	pop	{r3, r4, r5, pc}
 8006926:	bf00      	nop
 8006928:	200019a0 	.word	0x200019a0

0800692c <_malloc_r>:
 800692c:	b570      	push	{r4, r5, r6, lr}
 800692e:	1ccd      	adds	r5, r1, #3
 8006930:	f025 0503 	bic.w	r5, r5, #3
 8006934:	3508      	adds	r5, #8
 8006936:	2d0c      	cmp	r5, #12
 8006938:	bf38      	it	cc
 800693a:	250c      	movcc	r5, #12
 800693c:	2d00      	cmp	r5, #0
 800693e:	4606      	mov	r6, r0
 8006940:	db01      	blt.n	8006946 <_malloc_r+0x1a>
 8006942:	42a9      	cmp	r1, r5
 8006944:	d903      	bls.n	800694e <_malloc_r+0x22>
 8006946:	230c      	movs	r3, #12
 8006948:	6033      	str	r3, [r6, #0]
 800694a:	2000      	movs	r0, #0
 800694c:	bd70      	pop	{r4, r5, r6, pc}
 800694e:	f000 f87d 	bl	8006a4c <__malloc_lock>
 8006952:	4a21      	ldr	r2, [pc, #132]	; (80069d8 <_malloc_r+0xac>)
 8006954:	6814      	ldr	r4, [r2, #0]
 8006956:	4621      	mov	r1, r4
 8006958:	b991      	cbnz	r1, 8006980 <_malloc_r+0x54>
 800695a:	4c20      	ldr	r4, [pc, #128]	; (80069dc <_malloc_r+0xb0>)
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	b91b      	cbnz	r3, 8006968 <_malloc_r+0x3c>
 8006960:	4630      	mov	r0, r6
 8006962:	f000 f863 	bl	8006a2c <_sbrk_r>
 8006966:	6020      	str	r0, [r4, #0]
 8006968:	4629      	mov	r1, r5
 800696a:	4630      	mov	r0, r6
 800696c:	f000 f85e 	bl	8006a2c <_sbrk_r>
 8006970:	1c43      	adds	r3, r0, #1
 8006972:	d124      	bne.n	80069be <_malloc_r+0x92>
 8006974:	230c      	movs	r3, #12
 8006976:	6033      	str	r3, [r6, #0]
 8006978:	4630      	mov	r0, r6
 800697a:	f000 f868 	bl	8006a4e <__malloc_unlock>
 800697e:	e7e4      	b.n	800694a <_malloc_r+0x1e>
 8006980:	680b      	ldr	r3, [r1, #0]
 8006982:	1b5b      	subs	r3, r3, r5
 8006984:	d418      	bmi.n	80069b8 <_malloc_r+0x8c>
 8006986:	2b0b      	cmp	r3, #11
 8006988:	d90f      	bls.n	80069aa <_malloc_r+0x7e>
 800698a:	600b      	str	r3, [r1, #0]
 800698c:	50cd      	str	r5, [r1, r3]
 800698e:	18cc      	adds	r4, r1, r3
 8006990:	4630      	mov	r0, r6
 8006992:	f000 f85c 	bl	8006a4e <__malloc_unlock>
 8006996:	f104 000b 	add.w	r0, r4, #11
 800699a:	1d23      	adds	r3, r4, #4
 800699c:	f020 0007 	bic.w	r0, r0, #7
 80069a0:	1ac3      	subs	r3, r0, r3
 80069a2:	d0d3      	beq.n	800694c <_malloc_r+0x20>
 80069a4:	425a      	negs	r2, r3
 80069a6:	50e2      	str	r2, [r4, r3]
 80069a8:	e7d0      	b.n	800694c <_malloc_r+0x20>
 80069aa:	428c      	cmp	r4, r1
 80069ac:	684b      	ldr	r3, [r1, #4]
 80069ae:	bf16      	itet	ne
 80069b0:	6063      	strne	r3, [r4, #4]
 80069b2:	6013      	streq	r3, [r2, #0]
 80069b4:	460c      	movne	r4, r1
 80069b6:	e7eb      	b.n	8006990 <_malloc_r+0x64>
 80069b8:	460c      	mov	r4, r1
 80069ba:	6849      	ldr	r1, [r1, #4]
 80069bc:	e7cc      	b.n	8006958 <_malloc_r+0x2c>
 80069be:	1cc4      	adds	r4, r0, #3
 80069c0:	f024 0403 	bic.w	r4, r4, #3
 80069c4:	42a0      	cmp	r0, r4
 80069c6:	d005      	beq.n	80069d4 <_malloc_r+0xa8>
 80069c8:	1a21      	subs	r1, r4, r0
 80069ca:	4630      	mov	r0, r6
 80069cc:	f000 f82e 	bl	8006a2c <_sbrk_r>
 80069d0:	3001      	adds	r0, #1
 80069d2:	d0cf      	beq.n	8006974 <_malloc_r+0x48>
 80069d4:	6025      	str	r5, [r4, #0]
 80069d6:	e7db      	b.n	8006990 <_malloc_r+0x64>
 80069d8:	200019a0 	.word	0x200019a0
 80069dc:	200019a4 	.word	0x200019a4

080069e0 <_realloc_r>:
 80069e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e2:	4607      	mov	r7, r0
 80069e4:	4614      	mov	r4, r2
 80069e6:	460e      	mov	r6, r1
 80069e8:	b921      	cbnz	r1, 80069f4 <_realloc_r+0x14>
 80069ea:	4611      	mov	r1, r2
 80069ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80069f0:	f7ff bf9c 	b.w	800692c <_malloc_r>
 80069f4:	b922      	cbnz	r2, 8006a00 <_realloc_r+0x20>
 80069f6:	f7ff ff4b 	bl	8006890 <_free_r>
 80069fa:	4625      	mov	r5, r4
 80069fc:	4628      	mov	r0, r5
 80069fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a00:	f000 f826 	bl	8006a50 <_malloc_usable_size_r>
 8006a04:	42a0      	cmp	r0, r4
 8006a06:	d20f      	bcs.n	8006a28 <_realloc_r+0x48>
 8006a08:	4621      	mov	r1, r4
 8006a0a:	4638      	mov	r0, r7
 8006a0c:	f7ff ff8e 	bl	800692c <_malloc_r>
 8006a10:	4605      	mov	r5, r0
 8006a12:	2800      	cmp	r0, #0
 8006a14:	d0f2      	beq.n	80069fc <_realloc_r+0x1c>
 8006a16:	4631      	mov	r1, r6
 8006a18:	4622      	mov	r2, r4
 8006a1a:	f7ff fc11 	bl	8006240 <memcpy>
 8006a1e:	4631      	mov	r1, r6
 8006a20:	4638      	mov	r0, r7
 8006a22:	f7ff ff35 	bl	8006890 <_free_r>
 8006a26:	e7e9      	b.n	80069fc <_realloc_r+0x1c>
 8006a28:	4635      	mov	r5, r6
 8006a2a:	e7e7      	b.n	80069fc <_realloc_r+0x1c>

08006a2c <_sbrk_r>:
 8006a2c:	b538      	push	{r3, r4, r5, lr}
 8006a2e:	4c06      	ldr	r4, [pc, #24]	; (8006a48 <_sbrk_r+0x1c>)
 8006a30:	2300      	movs	r3, #0
 8006a32:	4605      	mov	r5, r0
 8006a34:	4608      	mov	r0, r1
 8006a36:	6023      	str	r3, [r4, #0]
 8006a38:	f7f9 ff20 	bl	800087c <_sbrk>
 8006a3c:	1c43      	adds	r3, r0, #1
 8006a3e:	d102      	bne.n	8006a46 <_sbrk_r+0x1a>
 8006a40:	6823      	ldr	r3, [r4, #0]
 8006a42:	b103      	cbz	r3, 8006a46 <_sbrk_r+0x1a>
 8006a44:	602b      	str	r3, [r5, #0]
 8006a46:	bd38      	pop	{r3, r4, r5, pc}
 8006a48:	20001ac4 	.word	0x20001ac4

08006a4c <__malloc_lock>:
 8006a4c:	4770      	bx	lr

08006a4e <__malloc_unlock>:
 8006a4e:	4770      	bx	lr

08006a50 <_malloc_usable_size_r>:
 8006a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a54:	1f18      	subs	r0, r3, #4
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	bfbc      	itt	lt
 8006a5a:	580b      	ldrlt	r3, [r1, r0]
 8006a5c:	18c0      	addlt	r0, r0, r3
 8006a5e:	4770      	bx	lr

08006a60 <_init>:
 8006a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a62:	bf00      	nop
 8006a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a66:	bc08      	pop	{r3}
 8006a68:	469e      	mov	lr, r3
 8006a6a:	4770      	bx	lr

08006a6c <_fini>:
 8006a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a6e:	bf00      	nop
 8006a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a72:	bc08      	pop	{r3}
 8006a74:	469e      	mov	lr, r3
 8006a76:	4770      	bx	lr
