
SharedQueues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006838  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080069d8  080069d8  000169d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b14  08006b14  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006b14  08006b14  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b14  08006b14  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b14  08006b14  00016b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b18  08006b18  00016b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a54  20000074  08006b90  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ac8  08006b90  00021ac8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001998e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f68  00000000  00000000  00039a32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001370  00000000  00000000  0003c9a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001248  00000000  00000000  0003dd10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003b34  00000000  00000000  0003ef58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011328  00000000  00000000  00042a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d412f  00000000  00000000  00053db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00127ee3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005494  00000000  00000000  00127f60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080069c0 	.word	0x080069c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080069c0 	.word	0x080069c0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000294:	f000 fb14 	bl	80008c0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000298:	f000 f832 	bl	8000300 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800029c:	f000 f8be 	bl	800041c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80002a0:	f000 f88c 	bl	80003bc <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80002a4:	f003 f856 	bl	8003354 <osKernelInitialize>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of myQueue01 */
	myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 80002a8:	4a0d      	ldr	r2, [pc, #52]	; (80002e0 <main+0x50>)
 80002aa:	2102      	movs	r1, #2
 80002ac:	2010      	movs	r0, #16
 80002ae:	f003 f995 	bl	80035dc <osMessageQueueNew>
 80002b2:	4602      	mov	r2, r0
 80002b4:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <main+0x54>)
 80002b6:	601a      	str	r2, [r3, #0]

	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of queue01 */
	queue01Handle = osThreadNew(ManageQueue01, NULL, &queue01_attributes);
 80002b8:	4a0b      	ldr	r2, [pc, #44]	; (80002e8 <main+0x58>)
 80002ba:	2100      	movs	r1, #0
 80002bc:	480b      	ldr	r0, [pc, #44]	; (80002ec <main+0x5c>)
 80002be:	f003 f8b1 	bl	8003424 <osThreadNew>
 80002c2:	4602      	mov	r2, r0
 80002c4:	4b0a      	ldr	r3, [pc, #40]	; (80002f0 <main+0x60>)
 80002c6:	601a      	str	r2, [r3, #0]

	/* creation of queue02 */
	queue02Handle = osThreadNew(ManageQueue02, NULL, &queue02_attributes);
 80002c8:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <main+0x64>)
 80002ca:	2100      	movs	r1, #0
 80002cc:	480a      	ldr	r0, [pc, #40]	; (80002f8 <main+0x68>)
 80002ce:	f003 f8a9 	bl	8003424 <osThreadNew>
 80002d2:	4602      	mov	r2, r0
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <main+0x6c>)
 80002d6:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80002d8:	f003 f870 	bl	80033bc <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80002dc:	e7fe      	b.n	80002dc <main+0x4c>
 80002de:	bf00      	nop
 80002e0:	08006a90 	.word	0x08006a90
 80002e4:	200019a8 	.word	0x200019a8
 80002e8:	08006a48 	.word	0x08006a48
 80002ec:	080004ed 	.word	0x080004ed
 80002f0:	200019a4 	.word	0x200019a4
 80002f4:	08006a6c 	.word	0x08006a6c
 80002f8:	08000569 	.word	0x08000569
 80002fc:	20001a30 	.word	0x20001a30

08000300 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b0a6      	sub	sp, #152	; 0x98
 8000304:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000306:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800030a:	2228      	movs	r2, #40	; 0x28
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f005 ff51 	bl	80061b6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000314:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	609a      	str	r2, [r3, #8]
 8000320:	60da      	str	r2, [r3, #12]
 8000322:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2258      	movs	r2, #88	; 0x58
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f005 ff43 	bl	80061b6 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000330:	2302      	movs	r3, #2
 8000332:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000334:	2301      	movs	r3, #1
 8000336:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000338:	2310      	movs	r3, #16
 800033a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800033e:	2302      	movs	r3, #2
 8000340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000344:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000348:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800034c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000350:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800035e:	4618      	mov	r0, r3
 8000360:	f000 fd68 	bl	8000e34 <HAL_RCC_OscConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x6e>
	{
		Error_Handler();
 800036a:	f000 f951 	bl	8000610 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036e:	230f      	movs	r3, #15
 8000370:	65fb      	str	r3, [r7, #92]	; 0x5c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000372:	2302      	movs	r3, #2
 8000374:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800037a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800037e:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000384:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000388:	2102      	movs	r1, #2
 800038a:	4618      	mov	r0, r3
 800038c:	f001 fc68 	bl	8001c60 <HAL_RCC_ClockConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000396:	f000 f93b 	bl	8000610 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800039a:	2302      	movs	r3, #2
 800039c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800039e:	2300      	movs	r3, #0
 80003a0:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	4618      	mov	r0, r3
 80003a6:	f001 fec3 	bl	8002130 <HAL_RCCEx_PeriphCLKConfig>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <SystemClock_Config+0xb4>
	{
		Error_Handler();
 80003b0:	f000 f92e 	bl	8000610 <Error_Handler>
	}
}
 80003b4:	bf00      	nop
 80003b6:	3798      	adds	r7, #152	; 0x98
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80003c0:	4b14      	ldr	r3, [pc, #80]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003c2:	4a15      	ldr	r2, [pc, #84]	; (8000418 <MX_USART2_UART_Init+0x5c>)
 80003c4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 80003c6:	4b13      	ldr	r3, [pc, #76]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003c8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003cc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003e2:	220c      	movs	r2, #12
 80003e4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_USART2_UART_Init+0x58>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80003fe:	4805      	ldr	r0, [pc, #20]	; (8000414 <MX_USART2_UART_Init+0x58>)
 8000400:	f002 fb8a 	bl	8002b18 <HAL_UART_Init>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 800040a:	f000 f901 	bl	8000610 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	200019ac 	.word	0x200019ac
 8000418:	40004400 	.word	0x40004400

0800041c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08a      	sub	sp, #40	; 0x28
 8000420:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000422:	f107 0314 	add.w	r3, r7, #20
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
 8000430:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000432:	4b2b      	ldr	r3, [pc, #172]	; (80004e0 <MX_GPIO_Init+0xc4>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a2a      	ldr	r2, [pc, #168]	; (80004e0 <MX_GPIO_Init+0xc4>)
 8000438:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b28      	ldr	r3, [pc, #160]	; (80004e0 <MX_GPIO_Init+0xc4>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000446:	613b      	str	r3, [r7, #16]
 8000448:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800044a:	4b25      	ldr	r3, [pc, #148]	; (80004e0 <MX_GPIO_Init+0xc4>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a24      	ldr	r2, [pc, #144]	; (80004e0 <MX_GPIO_Init+0xc4>)
 8000450:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b22      	ldr	r3, [pc, #136]	; (80004e0 <MX_GPIO_Init+0xc4>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000462:	4b1f      	ldr	r3, [pc, #124]	; (80004e0 <MX_GPIO_Init+0xc4>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a1e      	ldr	r2, [pc, #120]	; (80004e0 <MX_GPIO_Init+0xc4>)
 8000468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800046c:	6153      	str	r3, [r2, #20]
 800046e:	4b1c      	ldr	r3, [pc, #112]	; (80004e0 <MX_GPIO_Init+0xc4>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000476:	60bb      	str	r3, [r7, #8]
 8000478:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800047a:	4b19      	ldr	r3, [pc, #100]	; (80004e0 <MX_GPIO_Init+0xc4>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a18      	ldr	r2, [pc, #96]	; (80004e0 <MX_GPIO_Init+0xc4>)
 8000480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000484:	6153      	str	r3, [r2, #20]
 8000486:	4b16      	ldr	r3, [pc, #88]	; (80004e0 <MX_GPIO_Init+0xc4>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000492:	2200      	movs	r2, #0
 8000494:	2120      	movs	r1, #32
 8000496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800049a:	f000 fcb3 	bl	8000e04 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800049e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004a2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004a4:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <MX_GPIO_Init+0xc8>)
 80004a6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004ac:	f107 0314 	add.w	r3, r7, #20
 80004b0:	4619      	mov	r1, r3
 80004b2:	480d      	ldr	r0, [pc, #52]	; (80004e8 <MX_GPIO_Init+0xcc>)
 80004b4:	f000 fb1c 	bl	8000af0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80004b8:	2320      	movs	r3, #32
 80004ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004bc:	2301      	movs	r3, #1
 80004be:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c4:	2300      	movs	r3, #0
 80004c6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004c8:	f107 0314 	add.w	r3, r7, #20
 80004cc:	4619      	mov	r1, r3
 80004ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d2:	f000 fb0d 	bl	8000af0 <HAL_GPIO_Init>

}
 80004d6:	bf00      	nop
 80004d8:	3728      	adds	r7, #40	; 0x28
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000
 80004e4:	10210000 	.word	0x10210000
 80004e8:	48000800 	.word	0x48000800

080004ec <ManageQueue01>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_ManageQueue01 */
void ManageQueue01(void *argument)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	6018      	str	r0, [r3, #0]
	/* Infinite loop */
	char msg[1000];
	uint16_t number ;
	//sprintf(msg, "Start get\n");

	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff fe6f 	bl	80001e0 <strlen>
 8000502:	4603      	mov	r3, r0
 8000504:	b29a      	uxth	r2, r3
 8000506:	f107 0110 	add.w	r1, r7, #16
 800050a:	f04f 33ff 	mov.w	r3, #4294967295
 800050e:	4813      	ldr	r0, [pc, #76]	; (800055c <ManageQueue01+0x70>)
 8000510:	f002 fb50 	bl	8002bb4 <HAL_UART_Transmit>
	for (;;) {
		osMessageQueueGet(myQueue01Handle, &number, NULL, 0);
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <ManageQueue01+0x74>)
 8000516:	6818      	ldr	r0, [r3, #0]
 8000518:	f107 010e 	add.w	r1, r7, #14
 800051c:	2300      	movs	r3, #0
 800051e:	2200      	movs	r2, #0
 8000520:	f003 f956 	bl	80037d0 <osMessageQueueGet>
		sprintf(msg, "Receive value: number =  %hu\n", number);
 8000524:	f107 030e 	add.w	r3, r7, #14
 8000528:	881b      	ldrh	r3, [r3, #0]
 800052a:	461a      	mov	r2, r3
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	490c      	ldr	r1, [pc, #48]	; (8000564 <ManageQueue01+0x78>)
 8000532:	4618      	mov	r0, r3
 8000534:	f005 fe48 	bl	80061c8 <siprintf>

		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff fe4f 	bl	80001e0 <strlen>
 8000542:	4603      	mov	r3, r0
 8000544:	b29a      	uxth	r2, r3
 8000546:	f107 0110 	add.w	r1, r7, #16
 800054a:	f04f 33ff 	mov.w	r3, #4294967295
 800054e:	4803      	ldr	r0, [pc, #12]	; (800055c <ManageQueue01+0x70>)
 8000550:	f002 fb30 	bl	8002bb4 <HAL_UART_Transmit>



		osThreadYield();
 8000554:	f003 f810 	bl	8003578 <osThreadYield>
		osMessageQueueGet(myQueue01Handle, &number, NULL, 0);
 8000558:	e7dc      	b.n	8000514 <ManageQueue01+0x28>
 800055a:	bf00      	nop
 800055c:	200019ac 	.word	0x200019ac
 8000560:	200019a8 	.word	0x200019a8
 8000564:	080069f4 	.word	0x080069f4

08000568 <ManageQueue02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ManageQueue02 */
void ManageQueue02(void *argument)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 800056e:	af00      	add	r7, sp, #0
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	6018      	str	r0, [r3, #0]
	/* Infinite loop */
	char msg[1000];
	uint16_t number;

	//sprintf(msg, "Start put\n");
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	4618      	mov	r0, r3
 800057a:	f7ff fe31 	bl	80001e0 <strlen>
 800057e:	4603      	mov	r3, r0
 8000580:	b29a      	uxth	r2, r3
 8000582:	f107 0110 	add.w	r1, r7, #16
 8000586:	f04f 33ff 	mov.w	r3, #4294967295
 800058a:	4815      	ldr	r0, [pc, #84]	; (80005e0 <ManageQueue02+0x78>)
 800058c:	f002 fb12 	bl	8002bb4 <HAL_UART_Transmit>
	for (;;) {

		number =310;
 8000590:	f107 030e 	add.w	r3, r7, #14
 8000594:	f44f 729b 	mov.w	r2, #310	; 0x136
 8000598:	801a      	strh	r2, [r3, #0]
		sprintf(msg, "Put value: number =  %hu\n", number);
 800059a:	f107 030e 	add.w	r3, r7, #14
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	461a      	mov	r2, r3
 80005a2:	f107 0310 	add.w	r3, r7, #16
 80005a6:	490f      	ldr	r1, [pc, #60]	; (80005e4 <ManageQueue02+0x7c>)
 80005a8:	4618      	mov	r0, r3
 80005aa:	f005 fe0d 	bl	80061c8 <siprintf>

		osMessageQueuePut(myQueue01Handle, &number, 0, 100);
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <ManageQueue02+0x80>)
 80005b0:	6818      	ldr	r0, [r3, #0]
 80005b2:	f107 010e 	add.w	r1, r7, #14
 80005b6:	2364      	movs	r3, #100	; 0x64
 80005b8:	2200      	movs	r2, #0
 80005ba:	f003 f895 	bl	80036e8 <osMessageQueuePut>


		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80005be:	f107 0310 	add.w	r3, r7, #16
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fe0c 	bl	80001e0 <strlen>
 80005c8:	4603      	mov	r3, r0
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	f107 0110 	add.w	r1, r7, #16
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295
 80005d4:	4802      	ldr	r0, [pc, #8]	; (80005e0 <ManageQueue02+0x78>)
 80005d6:	f002 faed 	bl	8002bb4 <HAL_UART_Transmit>

		osThreadYield();
 80005da:	f002 ffcd 	bl	8003578 <osThreadYield>
		number =310;
 80005de:	e7d7      	b.n	8000590 <ManageQueue02+0x28>
 80005e0:	200019ac 	.word	0x200019ac
 80005e4:	08006a14 	.word	0x08006a14
 80005e8:	200019a8 	.word	0x200019a8

080005ec <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a04      	ldr	r2, [pc, #16]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d101      	bne.n	8000602 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80005fe:	f000 f975 	bl	80008ec <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40001000 	.word	0x40001000

08000610 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000614:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000616:	e7fe      	b.n	8000616 <Error_Handler+0x6>

08000618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <HAL_MspInit+0x4c>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	4a10      	ldr	r2, [pc, #64]	; (8000664 <HAL_MspInit+0x4c>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6193      	str	r3, [r2, #24]
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <HAL_MspInit+0x4c>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <HAL_MspInit+0x4c>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <HAL_MspInit+0x4c>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000640:	61d3      	str	r3, [r2, #28]
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <HAL_MspInit+0x4c>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	210f      	movs	r1, #15
 8000652:	f06f 0001 	mvn.w	r0, #1
 8000656:	f000 fa21 	bl	8000a9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40021000 	.word	0x40021000

08000668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a17      	ldr	r2, [pc, #92]	; (80006e4 <HAL_UART_MspInit+0x7c>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d128      	bne.n	80006dc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <HAL_UART_MspInit+0x80>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	4a16      	ldr	r2, [pc, #88]	; (80006e8 <HAL_UART_MspInit+0x80>)
 8000690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000694:	61d3      	str	r3, [r2, #28]
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <HAL_UART_MspInit+0x80>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <HAL_UART_MspInit+0x80>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	4a10      	ldr	r2, [pc, #64]	; (80006e8 <HAL_UART_MspInit+0x80>)
 80006a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ac:	6153      	str	r3, [r2, #20]
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <HAL_UART_MspInit+0x80>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006ba:	230c      	movs	r3, #12
 80006bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006be:	2302      	movs	r3, #2
 80006c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2300      	movs	r3, #0
 80006c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006ca:	2307      	movs	r3, #7
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d8:	f000 fa0a 	bl	8000af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006dc:	bf00      	nop
 80006de:	3728      	adds	r7, #40	; 0x28
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40004400 	.word	0x40004400
 80006e8:	40021000 	.word	0x40021000

080006ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08c      	sub	sp, #48	; 0x30
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80006fc:	2200      	movs	r2, #0
 80006fe:	6879      	ldr	r1, [r7, #4]
 8000700:	2036      	movs	r0, #54	; 0x36
 8000702:	f000 f9cb 	bl	8000a9c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000706:	2036      	movs	r0, #54	; 0x36
 8000708:	f000 f9e4 	bl	8000ad4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <HAL_InitTick+0xa0>)
 800070e:	69db      	ldr	r3, [r3, #28]
 8000710:	4a1e      	ldr	r2, [pc, #120]	; (800078c <HAL_InitTick+0xa0>)
 8000712:	f043 0310 	orr.w	r3, r3, #16
 8000716:	61d3      	str	r3, [r2, #28]
 8000718:	4b1c      	ldr	r3, [pc, #112]	; (800078c <HAL_InitTick+0xa0>)
 800071a:	69db      	ldr	r3, [r3, #28]
 800071c:	f003 0310 	and.w	r3, r3, #16
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000724:	f107 0210 	add.w	r2, r7, #16
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4611      	mov	r1, r2
 800072e:	4618      	mov	r0, r3
 8000730:	f001 fccc 	bl	80020cc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000734:	f001 fc86 	bl	8002044 <HAL_RCC_GetPCLK1Freq>
 8000738:	4603      	mov	r3, r0
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800073e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000740:	4a13      	ldr	r2, [pc, #76]	; (8000790 <HAL_InitTick+0xa4>)
 8000742:	fba2 2303 	umull	r2, r3, r2, r3
 8000746:	0c9b      	lsrs	r3, r3, #18
 8000748:	3b01      	subs	r3, #1
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <HAL_InitTick+0xa8>)
 800074e:	4a12      	ldr	r2, [pc, #72]	; (8000798 <HAL_InitTick+0xac>)
 8000750:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <HAL_InitTick+0xa8>)
 8000754:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000758:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800075a:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <HAL_InitTick+0xa8>)
 800075c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800075e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <HAL_InitTick+0xa8>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <HAL_InitTick+0xa8>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800076c:	4809      	ldr	r0, [pc, #36]	; (8000794 <HAL_InitTick+0xa8>)
 800076e:	f001 fefd 	bl	800256c <HAL_TIM_Base_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d104      	bne.n	8000782 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000778:	4806      	ldr	r0, [pc, #24]	; (8000794 <HAL_InitTick+0xa8>)
 800077a:	f001 ff59 	bl	8002630 <HAL_TIM_Base_Start_IT>
 800077e:	4603      	mov	r3, r0
 8000780:	e000      	b.n	8000784 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
}
 8000784:	4618      	mov	r0, r3
 8000786:	3730      	adds	r7, #48	; 0x30
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021000 	.word	0x40021000
 8000790:	431bde83 	.word	0x431bde83
 8000794:	20001a34 	.word	0x20001a34
 8000798:	40001000 	.word	0x40001000

0800079c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <NMI_Handler+0x4>

080007a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <HardFault_Handler+0x4>

080007a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <MemManage_Handler+0x4>

080007ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <BusFault_Handler+0x4>

080007b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <UsageFault_Handler+0x4>

080007ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007cc:	4802      	ldr	r0, [pc, #8]	; (80007d8 <TIM6_DAC_IRQHandler+0x10>)
 80007ce:	f001 ff9f 	bl	8002710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20001a34 	.word	0x20001a34

080007dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007e4:	4a14      	ldr	r2, [pc, #80]	; (8000838 <_sbrk+0x5c>)
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <_sbrk+0x60>)
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007f0:	4b13      	ldr	r3, [pc, #76]	; (8000840 <_sbrk+0x64>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d102      	bne.n	80007fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <_sbrk+0x64>)
 80007fa:	4a12      	ldr	r2, [pc, #72]	; (8000844 <_sbrk+0x68>)
 80007fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <_sbrk+0x64>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4413      	add	r3, r2
 8000806:	693a      	ldr	r2, [r7, #16]
 8000808:	429a      	cmp	r2, r3
 800080a:	d207      	bcs.n	800081c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800080c:	f005 fc9e 	bl	800614c <__errno>
 8000810:	4602      	mov	r2, r0
 8000812:	230c      	movs	r3, #12
 8000814:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
 800081a:	e009      	b.n	8000830 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <_sbrk+0x64>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <_sbrk+0x64>)
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4413      	add	r3, r2
 800082a:	4a05      	ldr	r2, [pc, #20]	; (8000840 <_sbrk+0x64>)
 800082c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800082e:	68fb      	ldr	r3, [r7, #12]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20010000 	.word	0x20010000
 800083c:	00000400 	.word	0x00000400
 8000840:	20000090 	.word	0x20000090
 8000844:	20001ac8 	.word	0x20001ac8

08000848 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <SystemInit+0x20>)
 800084e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000852:	4a05      	ldr	r2, [pc, #20]	; (8000868 <SystemInit+0x20>)
 8000854:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000858:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800086c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000870:	480d      	ldr	r0, [pc, #52]	; (80008a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000872:	490e      	ldr	r1, [pc, #56]	; (80008ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000874:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <LoopForever+0xe>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000878:	e002      	b.n	8000880 <LoopCopyDataInit>

0800087a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800087c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087e:	3304      	adds	r3, #4

08000880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000884:	d3f9      	bcc.n	800087a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000886:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000888:	4c0b      	ldr	r4, [pc, #44]	; (80008b8 <LoopForever+0x16>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800088c:	e001      	b.n	8000892 <LoopFillZerobss>

0800088e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000890:	3204      	adds	r2, #4

08000892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000894:	d3fb      	bcc.n	800088e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000896:	f7ff ffd7 	bl	8000848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800089a:	f005 fc5d 	bl	8006158 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800089e:	f7ff fcf7 	bl	8000290 <main>

080008a2 <LoopForever>:

LoopForever:
    b LoopForever
 80008a2:	e7fe      	b.n	80008a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ac:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80008b0:	08006b1c 	.word	0x08006b1c
  ldr r2, =_sbss
 80008b4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80008b8:	20001ac8 	.word	0x20001ac8

080008bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008bc:	e7fe      	b.n	80008bc <ADC1_2_IRQHandler>
	...

080008c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <HAL_Init+0x28>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a07      	ldr	r2, [pc, #28]	; (80008e8 <HAL_Init+0x28>)
 80008ca:	f043 0310 	orr.w	r3, r3, #16
 80008ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d0:	2003      	movs	r0, #3
 80008d2:	f000 f8d8 	bl	8000a86 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008d6:	2000      	movs	r0, #0
 80008d8:	f7ff ff08 	bl	80006ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008dc:	f7ff fe9c 	bl	8000618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40022000 	.word	0x40022000

080008ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_IncTick+0x20>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_IncTick+0x24>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	4a04      	ldr	r2, [pc, #16]	; (8000910 <HAL_IncTick+0x24>)
 80008fe:	6013      	str	r3, [r2, #0]
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	20000008 	.word	0x20000008
 8000910:	20001a80 	.word	0x20001a80

08000914 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return uwTick;  
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <HAL_GetTick+0x14>)
 800091a:	681b      	ldr	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20001a80 	.word	0x20001a80

0800092c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000948:	4013      	ands	r3, r2
 800094a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800095e:	4a04      	ldr	r2, [pc, #16]	; (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	60d3      	str	r3, [r2, #12]
}
 8000964:	bf00      	nop
 8000966:	3714      	adds	r7, #20
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <__NVIC_GetPriorityGrouping+0x18>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	0a1b      	lsrs	r3, r3, #8
 800097e:	f003 0307 	and.w	r3, r3, #7
}
 8000982:	4618      	mov	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	db0b      	blt.n	80009ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	f003 021f 	and.w	r2, r3, #31
 80009a8:	4907      	ldr	r1, [pc, #28]	; (80009c8 <__NVIC_EnableIRQ+0x38>)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	095b      	lsrs	r3, r3, #5
 80009b0:	2001      	movs	r0, #1
 80009b2:	fa00 f202 	lsl.w	r2, r0, r2
 80009b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000e100 	.word	0xe000e100

080009cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	6039      	str	r1, [r7, #0]
 80009d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	db0a      	blt.n	80009f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	490c      	ldr	r1, [pc, #48]	; (8000a18 <__NVIC_SetPriority+0x4c>)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	0112      	lsls	r2, r2, #4
 80009ec:	b2d2      	uxtb	r2, r2
 80009ee:	440b      	add	r3, r1
 80009f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f4:	e00a      	b.n	8000a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4908      	ldr	r1, [pc, #32]	; (8000a1c <__NVIC_SetPriority+0x50>)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	f003 030f 	and.w	r3, r3, #15
 8000a02:	3b04      	subs	r3, #4
 8000a04:	0112      	lsls	r2, r2, #4
 8000a06:	b2d2      	uxtb	r2, r2
 8000a08:	440b      	add	r3, r1
 8000a0a:	761a      	strb	r2, [r3, #24]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000e100 	.word	0xe000e100
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b089      	sub	sp, #36	; 0x24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	f1c3 0307 	rsb	r3, r3, #7
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	bf28      	it	cs
 8000a3e:	2304      	movcs	r3, #4
 8000a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3304      	adds	r3, #4
 8000a46:	2b06      	cmp	r3, #6
 8000a48:	d902      	bls.n	8000a50 <NVIC_EncodePriority+0x30>
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3b03      	subs	r3, #3
 8000a4e:	e000      	b.n	8000a52 <NVIC_EncodePriority+0x32>
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	f04f 32ff 	mov.w	r2, #4294967295
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43da      	mvns	r2, r3
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	401a      	ands	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a68:	f04f 31ff 	mov.w	r1, #4294967295
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a72:	43d9      	mvns	r1, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	4313      	orrs	r3, r2
         );
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3724      	adds	r7, #36	; 0x24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff ff4c 	bl	800092c <__NVIC_SetPriorityGrouping>
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
 8000aa8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aae:	f7ff ff61 	bl	8000974 <__NVIC_GetPriorityGrouping>
 8000ab2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	68b9      	ldr	r1, [r7, #8]
 8000ab8:	6978      	ldr	r0, [r7, #20]
 8000aba:	f7ff ffb1 	bl	8000a20 <NVIC_EncodePriority>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff ff80 	bl	80009cc <__NVIC_SetPriority>
}
 8000acc:	bf00      	nop
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff ff54 	bl	8000990 <__NVIC_EnableIRQ>
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b087      	sub	sp, #28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000afe:	e160      	b.n	8000dc2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	2101      	movs	r1, #1
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f000 8152 	beq.w	8000dbc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d00b      	beq.n	8000b38 <HAL_GPIO_Init+0x48>
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d007      	beq.n	8000b38 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b2c:	2b11      	cmp	r3, #17
 8000b2e:	d003      	beq.n	8000b38 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	2b12      	cmp	r3, #18
 8000b36:	d130      	bne.n	8000b9a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	2203      	movs	r2, #3
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	68da      	ldr	r2, [r3, #12]
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b6e:	2201      	movs	r2, #1
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	091b      	lsrs	r3, r3, #4
 8000b84:	f003 0201 	and.w	r2, r3, #1
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43db      	mvns	r3, r3
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	689a      	ldr	r2, [r3, #8]
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d003      	beq.n	8000bda <HAL_GPIO_Init+0xea>
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	2b12      	cmp	r3, #18
 8000bd8:	d123      	bne.n	8000c22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	08da      	lsrs	r2, r3, #3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	3208      	adds	r2, #8
 8000be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000be6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	220f      	movs	r2, #15
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	691a      	ldr	r2, [r3, #16]
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	f003 0307 	and.w	r3, r3, #7
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	08da      	lsrs	r2, r3, #3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3208      	adds	r2, #8
 8000c1c:	6939      	ldr	r1, [r7, #16]
 8000c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 0203 	and.w	r2, r3, #3
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f000 80ac 	beq.w	8000dbc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c64:	4b5e      	ldr	r3, [pc, #376]	; (8000de0 <HAL_GPIO_Init+0x2f0>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a5d      	ldr	r2, [pc, #372]	; (8000de0 <HAL_GPIO_Init+0x2f0>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b5b      	ldr	r3, [pc, #364]	; (8000de0 <HAL_GPIO_Init+0x2f0>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c7c:	4a59      	ldr	r2, [pc, #356]	; (8000de4 <HAL_GPIO_Init+0x2f4>)
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	089b      	lsrs	r3, r3, #2
 8000c82:	3302      	adds	r3, #2
 8000c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	f003 0303 	and.w	r3, r3, #3
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	220f      	movs	r2, #15
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ca6:	d025      	beq.n	8000cf4 <HAL_GPIO_Init+0x204>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a4f      	ldr	r2, [pc, #316]	; (8000de8 <HAL_GPIO_Init+0x2f8>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d01f      	beq.n	8000cf0 <HAL_GPIO_Init+0x200>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a4e      	ldr	r2, [pc, #312]	; (8000dec <HAL_GPIO_Init+0x2fc>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d019      	beq.n	8000cec <HAL_GPIO_Init+0x1fc>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a4d      	ldr	r2, [pc, #308]	; (8000df0 <HAL_GPIO_Init+0x300>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d013      	beq.n	8000ce8 <HAL_GPIO_Init+0x1f8>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a4c      	ldr	r2, [pc, #304]	; (8000df4 <HAL_GPIO_Init+0x304>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d00d      	beq.n	8000ce4 <HAL_GPIO_Init+0x1f4>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a4b      	ldr	r2, [pc, #300]	; (8000df8 <HAL_GPIO_Init+0x308>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d007      	beq.n	8000ce0 <HAL_GPIO_Init+0x1f0>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a4a      	ldr	r2, [pc, #296]	; (8000dfc <HAL_GPIO_Init+0x30c>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d101      	bne.n	8000cdc <HAL_GPIO_Init+0x1ec>
 8000cd8:	2306      	movs	r3, #6
 8000cda:	e00c      	b.n	8000cf6 <HAL_GPIO_Init+0x206>
 8000cdc:	2307      	movs	r3, #7
 8000cde:	e00a      	b.n	8000cf6 <HAL_GPIO_Init+0x206>
 8000ce0:	2305      	movs	r3, #5
 8000ce2:	e008      	b.n	8000cf6 <HAL_GPIO_Init+0x206>
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	e006      	b.n	8000cf6 <HAL_GPIO_Init+0x206>
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e004      	b.n	8000cf6 <HAL_GPIO_Init+0x206>
 8000cec:	2302      	movs	r3, #2
 8000cee:	e002      	b.n	8000cf6 <HAL_GPIO_Init+0x206>
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e000      	b.n	8000cf6 <HAL_GPIO_Init+0x206>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	f002 0203 	and.w	r2, r2, #3
 8000cfc:	0092      	lsls	r2, r2, #2
 8000cfe:	4093      	lsls	r3, r2
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d06:	4937      	ldr	r1, [pc, #220]	; (8000de4 <HAL_GPIO_Init+0x2f4>)
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	3302      	adds	r3, #2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d14:	4b3a      	ldr	r3, [pc, #232]	; (8000e00 <HAL_GPIO_Init+0x310>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d003      	beq.n	8000d38 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d38:	4a31      	ldr	r2, [pc, #196]	; (8000e00 <HAL_GPIO_Init+0x310>)
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d3e:	4b30      	ldr	r3, [pc, #192]	; (8000e00 <HAL_GPIO_Init+0x310>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d62:	4a27      	ldr	r2, [pc, #156]	; (8000e00 <HAL_GPIO_Init+0x310>)
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d68:	4b25      	ldr	r3, [pc, #148]	; (8000e00 <HAL_GPIO_Init+0x310>)
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	43db      	mvns	r3, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d003      	beq.n	8000d8c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d8c:	4a1c      	ldr	r2, [pc, #112]	; (8000e00 <HAL_GPIO_Init+0x310>)
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d92:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <HAL_GPIO_Init+0x310>)
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000db6:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <HAL_GPIO_Init+0x310>)
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	f47f ae97 	bne.w	8000b00 <HAL_GPIO_Init+0x10>
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	371c      	adds	r7, #28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40010000 	.word	0x40010000
 8000de8:	48000400 	.word	0x48000400
 8000dec:	48000800 	.word	0x48000800
 8000df0:	48000c00 	.word	0x48000c00
 8000df4:	48001000 	.word	0x48001000
 8000df8:	48001400 	.word	0x48001400
 8000dfc:	48001800 	.word	0x48001800
 8000e00:	40010400 	.word	0x40010400

08000e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	807b      	strh	r3, [r7, #2]
 8000e10:	4613      	mov	r3, r2
 8000e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e14:	787b      	ldrb	r3, [r7, #1]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e1a:	887a      	ldrh	r2, [r7, #2]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e20:	e002      	b.n	8000e28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e22:	887a      	ldrh	r2, [r7, #2]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	f000 bf01 	b.w	8001c50 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f000 8160 	beq.w	800111e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e5e:	4bae      	ldr	r3, [pc, #696]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 030c 	and.w	r3, r3, #12
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	d00c      	beq.n	8000e84 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e6a:	4bab      	ldr	r3, [pc, #684]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 030c 	and.w	r3, r3, #12
 8000e72:	2b08      	cmp	r3, #8
 8000e74:	d159      	bne.n	8000f2a <HAL_RCC_OscConfig+0xf6>
 8000e76:	4ba8      	ldr	r3, [pc, #672]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e82:	d152      	bne.n	8000f2a <HAL_RCC_OscConfig+0xf6>
 8000e84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e88:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e8c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000e90:	fa93 f3a3 	rbit	r3, r3
 8000e94:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e98:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9c:	fab3 f383 	clz	r3, r3
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	095b      	lsrs	r3, r3, #5
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d102      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x82>
 8000eb0:	4b99      	ldr	r3, [pc, #612]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	e015      	b.n	8000ee2 <HAL_RCC_OscConfig+0xae>
 8000eb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eba:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ebe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000ec2:	fa93 f3a3 	rbit	r3, r3
 8000ec6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000eca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ece:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000ed2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000ed6:	fa93 f3a3 	rbit	r3, r3
 8000eda:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000ede:	4b8e      	ldr	r3, [pc, #568]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ee6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000eea:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000eee:	fa92 f2a2 	rbit	r2, r2
 8000ef2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000ef6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000efa:	fab2 f282 	clz	r2, r2
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	f042 0220 	orr.w	r2, r2, #32
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	f002 021f 	and.w	r2, r2, #31
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f10:	4013      	ands	r3, r2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 8102 	beq.w	800111c <HAL_RCC_OscConfig+0x2e8>
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f040 80fc 	bne.w	800111c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	f000 be93 	b.w	8001c50 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f34:	d106      	bne.n	8000f44 <HAL_RCC_OscConfig+0x110>
 8000f36:	4b78      	ldr	r3, [pc, #480]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a77      	ldr	r2, [pc, #476]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	e030      	b.n	8000fa6 <HAL_RCC_OscConfig+0x172>
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10c      	bne.n	8000f68 <HAL_RCC_OscConfig+0x134>
 8000f4e:	4b72      	ldr	r3, [pc, #456]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a71      	ldr	r2, [pc, #452]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	4b6f      	ldr	r3, [pc, #444]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a6e      	ldr	r2, [pc, #440]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000f60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e01e      	b.n	8000fa6 <HAL_RCC_OscConfig+0x172>
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f72:	d10c      	bne.n	8000f8e <HAL_RCC_OscConfig+0x15a>
 8000f74:	4b68      	ldr	r3, [pc, #416]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a67      	ldr	r2, [pc, #412]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000f7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b65      	ldr	r3, [pc, #404]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a64      	ldr	r2, [pc, #400]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	e00b      	b.n	8000fa6 <HAL_RCC_OscConfig+0x172>
 8000f8e:	4b62      	ldr	r3, [pc, #392]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a61      	ldr	r2, [pc, #388]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000f94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	4b5f      	ldr	r3, [pc, #380]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a5e      	ldr	r2, [pc, #376]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000fa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fa4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d059      	beq.n	8001064 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb0:	f7ff fcb0 	bl	8000914 <HAL_GetTick>
 8000fb4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb8:	e00a      	b.n	8000fd0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fba:	f7ff fcab 	bl	8000914 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b64      	cmp	r3, #100	; 0x64
 8000fc8:	d902      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	f000 be40 	b.w	8001c50 <HAL_RCC_OscConfig+0xe1c>
 8000fd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fd4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000fdc:	fa93 f3a3 	rbit	r3, r3
 8000fe0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000fe4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe8:	fab3 f383 	clz	r3, r3
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	095b      	lsrs	r3, r3, #5
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d102      	bne.n	8001002 <HAL_RCC_OscConfig+0x1ce>
 8000ffc:	4b46      	ldr	r3, [pc, #280]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	e015      	b.n	800102e <HAL_RCC_OscConfig+0x1fa>
 8001002:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001006:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800100e:	fa93 f3a3 	rbit	r3, r3
 8001012:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001016:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800101a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800101e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001022:	fa93 f3a3 	rbit	r3, r3
 8001026:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800102a:	4b3b      	ldr	r3, [pc, #236]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001032:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001036:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800103a:	fa92 f2a2 	rbit	r2, r2
 800103e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001042:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001046:	fab2 f282 	clz	r2, r2
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	f042 0220 	orr.w	r2, r2, #32
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	f002 021f 	and.w	r2, r2, #31
 8001056:	2101      	movs	r1, #1
 8001058:	fa01 f202 	lsl.w	r2, r1, r2
 800105c:	4013      	ands	r3, r2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0ab      	beq.n	8000fba <HAL_RCC_OscConfig+0x186>
 8001062:	e05c      	b.n	800111e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fc56 	bl	8000914 <HAL_GetTick>
 8001068:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106c:	e00a      	b.n	8001084 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800106e:	f7ff fc51 	bl	8000914 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b64      	cmp	r3, #100	; 0x64
 800107c:	d902      	bls.n	8001084 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	f000 bde6 	b.w	8001c50 <HAL_RCC_OscConfig+0xe1c>
 8001084:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001088:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001090:	fa93 f3a3 	rbit	r3, r3
 8001094:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001098:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109c:	fab3 f383 	clz	r3, r3
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	095b      	lsrs	r3, r3, #5
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d102      	bne.n	80010b6 <HAL_RCC_OscConfig+0x282>
 80010b0:	4b19      	ldr	r3, [pc, #100]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	e015      	b.n	80010e2 <HAL_RCC_OscConfig+0x2ae>
 80010b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ba:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010be:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80010c2:	fa93 f3a3 	rbit	r3, r3
 80010c6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80010ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ce:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80010d2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80010d6:	fa93 f3a3 	rbit	r3, r3
 80010da:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 80010e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010e6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80010ea:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80010ee:	fa92 f2a2 	rbit	r2, r2
 80010f2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80010f6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80010fa:	fab2 f282 	clz	r2, r2
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	f042 0220 	orr.w	r2, r2, #32
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	f002 021f 	and.w	r2, r2, #31
 800110a:	2101      	movs	r1, #1
 800110c:	fa01 f202 	lsl.w	r2, r1, r2
 8001110:	4013      	ands	r3, r2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1ab      	bne.n	800106e <HAL_RCC_OscConfig+0x23a>
 8001116:	e002      	b.n	800111e <HAL_RCC_OscConfig+0x2ea>
 8001118:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 8170 	beq.w	800140e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800112e:	4bd0      	ldr	r3, [pc, #832]	; (8001470 <HAL_RCC_OscConfig+0x63c>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 030c 	and.w	r3, r3, #12
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00c      	beq.n	8001154 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800113a:	4bcd      	ldr	r3, [pc, #820]	; (8001470 <HAL_RCC_OscConfig+0x63c>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 030c 	and.w	r3, r3, #12
 8001142:	2b08      	cmp	r3, #8
 8001144:	d16d      	bne.n	8001222 <HAL_RCC_OscConfig+0x3ee>
 8001146:	4bca      	ldr	r3, [pc, #808]	; (8001470 <HAL_RCC_OscConfig+0x63c>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800114e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001152:	d166      	bne.n	8001222 <HAL_RCC_OscConfig+0x3ee>
 8001154:	2302      	movs	r3, #2
 8001156:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800115e:	fa93 f3a3 	rbit	r3, r3
 8001162:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001166:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116a:	fab3 f383 	clz	r3, r3
 800116e:	b2db      	uxtb	r3, r3
 8001170:	095b      	lsrs	r3, r3, #5
 8001172:	b2db      	uxtb	r3, r3
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b01      	cmp	r3, #1
 800117c:	d102      	bne.n	8001184 <HAL_RCC_OscConfig+0x350>
 800117e:	4bbc      	ldr	r3, [pc, #752]	; (8001470 <HAL_RCC_OscConfig+0x63c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	e013      	b.n	80011ac <HAL_RCC_OscConfig+0x378>
 8001184:	2302      	movs	r3, #2
 8001186:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800118e:	fa93 f3a3 	rbit	r3, r3
 8001192:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001196:	2302      	movs	r3, #2
 8001198:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800119c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80011a0:	fa93 f3a3 	rbit	r3, r3
 80011a4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80011a8:	4bb1      	ldr	r3, [pc, #708]	; (8001470 <HAL_RCC_OscConfig+0x63c>)
 80011aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ac:	2202      	movs	r2, #2
 80011ae:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80011b2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80011b6:	fa92 f2a2 	rbit	r2, r2
 80011ba:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80011be:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80011c2:	fab2 f282 	clz	r2, r2
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	f042 0220 	orr.w	r2, r2, #32
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	f002 021f 	and.w	r2, r2, #31
 80011d2:	2101      	movs	r1, #1
 80011d4:	fa01 f202 	lsl.w	r2, r1, r2
 80011d8:	4013      	ands	r3, r2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d007      	beq.n	80011ee <HAL_RCC_OscConfig+0x3ba>
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d002      	beq.n	80011ee <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	f000 bd31 	b.w	8001c50 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ee:	4ba0      	ldr	r3, [pc, #640]	; (8001470 <HAL_RCC_OscConfig+0x63c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	21f8      	movs	r1, #248	; 0xf8
 80011fe:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001202:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001206:	fa91 f1a1 	rbit	r1, r1
 800120a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800120e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001212:	fab1 f181 	clz	r1, r1
 8001216:	b2c9      	uxtb	r1, r1
 8001218:	408b      	lsls	r3, r1
 800121a:	4995      	ldr	r1, [pc, #596]	; (8001470 <HAL_RCC_OscConfig+0x63c>)
 800121c:	4313      	orrs	r3, r2
 800121e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001220:	e0f5      	b.n	800140e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	2b00      	cmp	r3, #0
 800122a:	f000 8085 	beq.w	8001338 <HAL_RCC_OscConfig+0x504>
 800122e:	2301      	movs	r3, #1
 8001230:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001234:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001238:	fa93 f3a3 	rbit	r3, r3
 800123c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001240:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001244:	fab3 f383 	clz	r3, r3
 8001248:	b2db      	uxtb	r3, r3
 800124a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800124e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	461a      	mov	r2, r3
 8001256:	2301      	movs	r3, #1
 8001258:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125a:	f7ff fb5b 	bl	8000914 <HAL_GetTick>
 800125e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001262:	e00a      	b.n	800127a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001264:	f7ff fb56 	bl	8000914 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d902      	bls.n	800127a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	f000 bceb 	b.w	8001c50 <HAL_RCC_OscConfig+0xe1c>
 800127a:	2302      	movs	r3, #2
 800127c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001280:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001284:	fa93 f3a3 	rbit	r3, r3
 8001288:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800128c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001290:	fab3 f383 	clz	r3, r3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	095b      	lsrs	r3, r3, #5
 8001298:	b2db      	uxtb	r3, r3
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d102      	bne.n	80012aa <HAL_RCC_OscConfig+0x476>
 80012a4:	4b72      	ldr	r3, [pc, #456]	; (8001470 <HAL_RCC_OscConfig+0x63c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	e013      	b.n	80012d2 <HAL_RCC_OscConfig+0x49e>
 80012aa:	2302      	movs	r3, #2
 80012ac:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80012b4:	fa93 f3a3 	rbit	r3, r3
 80012b8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80012bc:	2302      	movs	r3, #2
 80012be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80012c2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80012c6:	fa93 f3a3 	rbit	r3, r3
 80012ca:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80012ce:	4b68      	ldr	r3, [pc, #416]	; (8001470 <HAL_RCC_OscConfig+0x63c>)
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	2202      	movs	r2, #2
 80012d4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80012d8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80012dc:	fa92 f2a2 	rbit	r2, r2
 80012e0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80012e4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80012e8:	fab2 f282 	clz	r2, r2
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	f042 0220 	orr.w	r2, r2, #32
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	f002 021f 	and.w	r2, r2, #31
 80012f8:	2101      	movs	r1, #1
 80012fa:	fa01 f202 	lsl.w	r2, r1, r2
 80012fe:	4013      	ands	r3, r2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0af      	beq.n	8001264 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001304:	4b5a      	ldr	r3, [pc, #360]	; (8001470 <HAL_RCC_OscConfig+0x63c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	21f8      	movs	r1, #248	; 0xf8
 8001314:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001318:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800131c:	fa91 f1a1 	rbit	r1, r1
 8001320:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001324:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001328:	fab1 f181 	clz	r1, r1
 800132c:	b2c9      	uxtb	r1, r1
 800132e:	408b      	lsls	r3, r1
 8001330:	494f      	ldr	r1, [pc, #316]	; (8001470 <HAL_RCC_OscConfig+0x63c>)
 8001332:	4313      	orrs	r3, r2
 8001334:	600b      	str	r3, [r1, #0]
 8001336:	e06a      	b.n	800140e <HAL_RCC_OscConfig+0x5da>
 8001338:	2301      	movs	r3, #1
 800133a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001342:	fa93 f3a3 	rbit	r3, r3
 8001346:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800134a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800134e:	fab3 f383 	clz	r3, r3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001358:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	461a      	mov	r2, r3
 8001360:	2300      	movs	r3, #0
 8001362:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fad6 	bl	8000914 <HAL_GetTick>
 8001368:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136c:	e00a      	b.n	8001384 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800136e:	f7ff fad1 	bl	8000914 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d902      	bls.n	8001384 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	f000 bc66 	b.w	8001c50 <HAL_RCC_OscConfig+0xe1c>
 8001384:	2302      	movs	r3, #2
 8001386:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800138e:	fa93 f3a3 	rbit	r3, r3
 8001392:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001396:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139a:	fab3 f383 	clz	r3, r3
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	095b      	lsrs	r3, r3, #5
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d102      	bne.n	80013b4 <HAL_RCC_OscConfig+0x580>
 80013ae:	4b30      	ldr	r3, [pc, #192]	; (8001470 <HAL_RCC_OscConfig+0x63c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	e013      	b.n	80013dc <HAL_RCC_OscConfig+0x5a8>
 80013b4:	2302      	movs	r3, #2
 80013b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013be:	fa93 f3a3 	rbit	r3, r3
 80013c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80013c6:	2302      	movs	r3, #2
 80013c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80013cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80013d0:	fa93 f3a3 	rbit	r3, r3
 80013d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80013d8:	4b25      	ldr	r3, [pc, #148]	; (8001470 <HAL_RCC_OscConfig+0x63c>)
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	2202      	movs	r2, #2
 80013de:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80013e2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80013e6:	fa92 f2a2 	rbit	r2, r2
 80013ea:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80013ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80013f2:	fab2 f282 	clz	r2, r2
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	f042 0220 	orr.w	r2, r2, #32
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	f002 021f 	and.w	r2, r2, #31
 8001402:	2101      	movs	r1, #1
 8001404:	fa01 f202 	lsl.w	r2, r1, r2
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1af      	bne.n	800136e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 80da 	beq.w	80015d2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d069      	beq.n	80014fc <HAL_RCC_OscConfig+0x6c8>
 8001428:	2301      	movs	r3, #1
 800142a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001432:	fa93 f3a3 	rbit	r3, r3
 8001436:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800143a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143e:	fab3 f383 	clz	r3, r3
 8001442:	b2db      	uxtb	r3, r3
 8001444:	461a      	mov	r2, r3
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_RCC_OscConfig+0x640>)
 8001448:	4413      	add	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	461a      	mov	r2, r3
 800144e:	2301      	movs	r3, #1
 8001450:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001452:	f7ff fa5f 	bl	8000914 <HAL_GetTick>
 8001456:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145a:	e00d      	b.n	8001478 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145c:	f7ff fa5a 	bl	8000914 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d905      	bls.n	8001478 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e3ef      	b.n	8001c50 <HAL_RCC_OscConfig+0xe1c>
 8001470:	40021000 	.word	0x40021000
 8001474:	10908120 	.word	0x10908120
 8001478:	2302      	movs	r3, #2
 800147a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001482:	fa93 f2a3 	rbit	r2, r3
 8001486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001490:	2202      	movs	r2, #2
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	fa93 f2a3 	rbit	r2, r3
 800149e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80014a8:	2202      	movs	r2, #2
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	fa93 f2a3 	rbit	r2, r3
 80014b6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80014ba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014bc:	4ba4      	ldr	r3, [pc, #656]	; (8001750 <HAL_RCC_OscConfig+0x91c>)
 80014be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014c0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80014c4:	2102      	movs	r1, #2
 80014c6:	6019      	str	r1, [r3, #0]
 80014c8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	fa93 f1a3 	rbit	r1, r3
 80014d2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80014d6:	6019      	str	r1, [r3, #0]
  return result;
 80014d8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	fab3 f383 	clz	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	f003 031f 	and.w	r3, r3, #31
 80014ee:	2101      	movs	r1, #1
 80014f0:	fa01 f303 	lsl.w	r3, r1, r3
 80014f4:	4013      	ands	r3, r2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0b0      	beq.n	800145c <HAL_RCC_OscConfig+0x628>
 80014fa:	e06a      	b.n	80015d2 <HAL_RCC_OscConfig+0x79e>
 80014fc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001500:	2201      	movs	r2, #1
 8001502:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001504:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	fa93 f2a3 	rbit	r2, r3
 800150e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001512:	601a      	str	r2, [r3, #0]
  return result;
 8001514:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001518:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800151a:	fab3 f383 	clz	r3, r3
 800151e:	b2db      	uxtb	r3, r3
 8001520:	461a      	mov	r2, r3
 8001522:	4b8c      	ldr	r3, [pc, #560]	; (8001754 <HAL_RCC_OscConfig+0x920>)
 8001524:	4413      	add	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	461a      	mov	r2, r3
 800152a:	2300      	movs	r3, #0
 800152c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152e:	f7ff f9f1 	bl	8000914 <HAL_GetTick>
 8001532:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001536:	e009      	b.n	800154c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001538:	f7ff f9ec 	bl	8000914 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e381      	b.n	8001c50 <HAL_RCC_OscConfig+0xe1c>
 800154c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001550:	2202      	movs	r2, #2
 8001552:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001554:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	fa93 f2a3 	rbit	r2, r3
 800155e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001568:	2202      	movs	r2, #2
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	fa93 f2a3 	rbit	r2, r3
 8001576:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001580:	2202      	movs	r2, #2
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	fa93 f2a3 	rbit	r2, r3
 800158e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001592:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001594:	4b6e      	ldr	r3, [pc, #440]	; (8001750 <HAL_RCC_OscConfig+0x91c>)
 8001596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001598:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800159c:	2102      	movs	r1, #2
 800159e:	6019      	str	r1, [r3, #0]
 80015a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	fa93 f1a3 	rbit	r1, r3
 80015aa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80015ae:	6019      	str	r1, [r3, #0]
  return result;
 80015b0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	fab3 f383 	clz	r3, r3
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f003 031f 	and.w	r3, r3, #31
 80015c6:	2101      	movs	r1, #1
 80015c8:	fa01 f303 	lsl.w	r3, r1, r3
 80015cc:	4013      	ands	r3, r2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1b2      	bne.n	8001538 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 8157 	beq.w	8001890 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015e8:	4b59      	ldr	r3, [pc, #356]	; (8001750 <HAL_RCC_OscConfig+0x91c>)
 80015ea:	69db      	ldr	r3, [r3, #28]
 80015ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d112      	bne.n	800161a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f4:	4b56      	ldr	r3, [pc, #344]	; (8001750 <HAL_RCC_OscConfig+0x91c>)
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	4a55      	ldr	r2, [pc, #340]	; (8001750 <HAL_RCC_OscConfig+0x91c>)
 80015fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fe:	61d3      	str	r3, [r2, #28]
 8001600:	4b53      	ldr	r3, [pc, #332]	; (8001750 <HAL_RCC_OscConfig+0x91c>)
 8001602:	69db      	ldr	r3, [r3, #28]
 8001604:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	f107 030c 	add.w	r3, r7, #12
 8001612:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001614:	2301      	movs	r3, #1
 8001616:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161a:	4b4f      	ldr	r3, [pc, #316]	; (8001758 <HAL_RCC_OscConfig+0x924>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001622:	2b00      	cmp	r3, #0
 8001624:	d11a      	bne.n	800165c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001626:	4b4c      	ldr	r3, [pc, #304]	; (8001758 <HAL_RCC_OscConfig+0x924>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a4b      	ldr	r2, [pc, #300]	; (8001758 <HAL_RCC_OscConfig+0x924>)
 800162c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001630:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001632:	f7ff f96f 	bl	8000914 <HAL_GetTick>
 8001636:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163a:	e009      	b.n	8001650 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163c:	f7ff f96a 	bl	8000914 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b64      	cmp	r3, #100	; 0x64
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e2ff      	b.n	8001c50 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001650:	4b41      	ldr	r3, [pc, #260]	; (8001758 <HAL_RCC_OscConfig+0x924>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0ef      	beq.n	800163c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d106      	bne.n	8001674 <HAL_RCC_OscConfig+0x840>
 8001666:	4b3a      	ldr	r3, [pc, #232]	; (8001750 <HAL_RCC_OscConfig+0x91c>)
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	4a39      	ldr	r2, [pc, #228]	; (8001750 <HAL_RCC_OscConfig+0x91c>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6213      	str	r3, [r2, #32]
 8001672:	e02f      	b.n	80016d4 <HAL_RCC_OscConfig+0x8a0>
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0x864>
 800167e:	4b34      	ldr	r3, [pc, #208]	; (8001750 <HAL_RCC_OscConfig+0x91c>)
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	4a33      	ldr	r2, [pc, #204]	; (8001750 <HAL_RCC_OscConfig+0x91c>)
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	6213      	str	r3, [r2, #32]
 800168a:	4b31      	ldr	r3, [pc, #196]	; (8001750 <HAL_RCC_OscConfig+0x91c>)
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	4a30      	ldr	r2, [pc, #192]	; (8001750 <HAL_RCC_OscConfig+0x91c>)
 8001690:	f023 0304 	bic.w	r3, r3, #4
 8001694:	6213      	str	r3, [r2, #32]
 8001696:	e01d      	b.n	80016d4 <HAL_RCC_OscConfig+0x8a0>
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2b05      	cmp	r3, #5
 80016a0:	d10c      	bne.n	80016bc <HAL_RCC_OscConfig+0x888>
 80016a2:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <HAL_RCC_OscConfig+0x91c>)
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	4a2a      	ldr	r2, [pc, #168]	; (8001750 <HAL_RCC_OscConfig+0x91c>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6213      	str	r3, [r2, #32]
 80016ae:	4b28      	ldr	r3, [pc, #160]	; (8001750 <HAL_RCC_OscConfig+0x91c>)
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	4a27      	ldr	r2, [pc, #156]	; (8001750 <HAL_RCC_OscConfig+0x91c>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6213      	str	r3, [r2, #32]
 80016ba:	e00b      	b.n	80016d4 <HAL_RCC_OscConfig+0x8a0>
 80016bc:	4b24      	ldr	r3, [pc, #144]	; (8001750 <HAL_RCC_OscConfig+0x91c>)
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	4a23      	ldr	r2, [pc, #140]	; (8001750 <HAL_RCC_OscConfig+0x91c>)
 80016c2:	f023 0301 	bic.w	r3, r3, #1
 80016c6:	6213      	str	r3, [r2, #32]
 80016c8:	4b21      	ldr	r3, [pc, #132]	; (8001750 <HAL_RCC_OscConfig+0x91c>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	4a20      	ldr	r2, [pc, #128]	; (8001750 <HAL_RCC_OscConfig+0x91c>)
 80016ce:	f023 0304 	bic.w	r3, r3, #4
 80016d2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d06a      	beq.n	80017b4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016de:	f7ff f919 	bl	8000914 <HAL_GetTick>
 80016e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e6:	e00b      	b.n	8001700 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e8:	f7ff f914 	bl	8000914 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e2a7      	b.n	8001c50 <HAL_RCC_OscConfig+0xe1c>
 8001700:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001704:	2202      	movs	r2, #2
 8001706:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001708:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	fa93 f2a3 	rbit	r2, r3
 8001712:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800171c:	2202      	movs	r2, #2
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	fa93 f2a3 	rbit	r2, r3
 800172a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800172e:	601a      	str	r2, [r3, #0]
  return result;
 8001730:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001734:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001736:	fab3 f383 	clz	r3, r3
 800173a:	b2db      	uxtb	r3, r3
 800173c:	095b      	lsrs	r3, r3, #5
 800173e:	b2db      	uxtb	r3, r3
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d108      	bne.n	800175c <HAL_RCC_OscConfig+0x928>
 800174a:	4b01      	ldr	r3, [pc, #4]	; (8001750 <HAL_RCC_OscConfig+0x91c>)
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	e013      	b.n	8001778 <HAL_RCC_OscConfig+0x944>
 8001750:	40021000 	.word	0x40021000
 8001754:	10908120 	.word	0x10908120
 8001758:	40007000 	.word	0x40007000
 800175c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001760:	2202      	movs	r2, #2
 8001762:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001764:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	fa93 f2a3 	rbit	r2, r3
 800176e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	4bc0      	ldr	r3, [pc, #768]	; (8001a78 <HAL_RCC_OscConfig+0xc44>)
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800177c:	2102      	movs	r1, #2
 800177e:	6011      	str	r1, [r2, #0]
 8001780:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	fa92 f1a2 	rbit	r1, r2
 800178a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800178e:	6011      	str	r1, [r2, #0]
  return result;
 8001790:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	fab2 f282 	clz	r2, r2
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	f002 021f 	and.w	r2, r2, #31
 80017a6:	2101      	movs	r1, #1
 80017a8:	fa01 f202 	lsl.w	r2, r1, r2
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d09a      	beq.n	80016e8 <HAL_RCC_OscConfig+0x8b4>
 80017b2:	e063      	b.n	800187c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b4:	f7ff f8ae 	bl	8000914 <HAL_GetTick>
 80017b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017bc:	e00b      	b.n	80017d6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7ff f8a9 	bl	8000914 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e23c      	b.n	8001c50 <HAL_RCC_OscConfig+0xe1c>
 80017d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017da:	2202      	movs	r2, #2
 80017dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	fa93 f2a3 	rbit	r2, r3
 80017e8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017f2:	2202      	movs	r2, #2
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	fa93 f2a3 	rbit	r2, r3
 8001800:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001804:	601a      	str	r2, [r3, #0]
  return result;
 8001806:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800180a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180c:	fab3 f383 	clz	r3, r3
 8001810:	b2db      	uxtb	r3, r3
 8001812:	095b      	lsrs	r3, r3, #5
 8001814:	b2db      	uxtb	r3, r3
 8001816:	f043 0302 	orr.w	r3, r3, #2
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d102      	bne.n	8001826 <HAL_RCC_OscConfig+0x9f2>
 8001820:	4b95      	ldr	r3, [pc, #596]	; (8001a78 <HAL_RCC_OscConfig+0xc44>)
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	e00d      	b.n	8001842 <HAL_RCC_OscConfig+0xa0e>
 8001826:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800182a:	2202      	movs	r2, #2
 800182c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	fa93 f2a3 	rbit	r2, r3
 8001838:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	4b8e      	ldr	r3, [pc, #568]	; (8001a78 <HAL_RCC_OscConfig+0xc44>)
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001846:	2102      	movs	r1, #2
 8001848:	6011      	str	r1, [r2, #0]
 800184a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	fa92 f1a2 	rbit	r1, r2
 8001854:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001858:	6011      	str	r1, [r2, #0]
  return result;
 800185a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	fab2 f282 	clz	r2, r2
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	f002 021f 	and.w	r2, r2, #31
 8001870:	2101      	movs	r1, #1
 8001872:	fa01 f202 	lsl.w	r2, r1, r2
 8001876:	4013      	ands	r3, r2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1a0      	bne.n	80017be <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800187c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001880:	2b01      	cmp	r3, #1
 8001882:	d105      	bne.n	8001890 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001884:	4b7c      	ldr	r3, [pc, #496]	; (8001a78 <HAL_RCC_OscConfig+0xc44>)
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	4a7b      	ldr	r2, [pc, #492]	; (8001a78 <HAL_RCC_OscConfig+0xc44>)
 800188a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800188e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 81d9 	beq.w	8001c4e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800189c:	4b76      	ldr	r3, [pc, #472]	; (8001a78 <HAL_RCC_OscConfig+0xc44>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	f000 81a6 	beq.w	8001bf6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	f040 811e 	bne.w	8001af2 <HAL_RCC_OscConfig+0xcbe>
 80018b6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80018ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	fa93 f2a3 	rbit	r2, r3
 80018ca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018ce:	601a      	str	r2, [r3, #0]
  return result;
 80018d0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018d4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d6:	fab3 f383 	clz	r3, r3
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	461a      	mov	r2, r3
 80018e8:	2300      	movs	r3, #0
 80018ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff f812 	bl	8000914 <HAL_GetTick>
 80018f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f4:	e009      	b.n	800190a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f6:	f7ff f80d 	bl	8000914 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e1a2      	b.n	8001c50 <HAL_RCC_OscConfig+0xe1c>
 800190a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800190e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001912:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001914:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	fa93 f2a3 	rbit	r2, r3
 800191e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001922:	601a      	str	r2, [r3, #0]
  return result;
 8001924:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001928:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800192a:	fab3 f383 	clz	r3, r3
 800192e:	b2db      	uxtb	r3, r3
 8001930:	095b      	lsrs	r3, r3, #5
 8001932:	b2db      	uxtb	r3, r3
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b01      	cmp	r3, #1
 800193c:	d102      	bne.n	8001944 <HAL_RCC_OscConfig+0xb10>
 800193e:	4b4e      	ldr	r3, [pc, #312]	; (8001a78 <HAL_RCC_OscConfig+0xc44>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	e01b      	b.n	800197c <HAL_RCC_OscConfig+0xb48>
 8001944:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001948:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800194c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	fa93 f2a3 	rbit	r2, r3
 8001958:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001962:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	fa93 f2a3 	rbit	r2, r3
 8001972:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	4b3f      	ldr	r3, [pc, #252]	; (8001a78 <HAL_RCC_OscConfig+0xc44>)
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001980:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001984:	6011      	str	r1, [r2, #0]
 8001986:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	fa92 f1a2 	rbit	r1, r2
 8001990:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001994:	6011      	str	r1, [r2, #0]
  return result;
 8001996:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	fab2 f282 	clz	r2, r2
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	f042 0220 	orr.w	r2, r2, #32
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	f002 021f 	and.w	r2, r2, #31
 80019ac:	2101      	movs	r1, #1
 80019ae:	fa01 f202 	lsl.w	r2, r1, r2
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d19e      	bne.n	80018f6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019b8:	4b2f      	ldr	r3, [pc, #188]	; (8001a78 <HAL_RCC_OscConfig+0xc44>)
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	f023 020f 	bic.w	r2, r3, #15
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	492c      	ldr	r1, [pc, #176]	; (8001a78 <HAL_RCC_OscConfig+0xc44>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	62cb      	str	r3, [r1, #44]	; 0x2c
 80019cc:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <HAL_RCC_OscConfig+0xc44>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6a19      	ldr	r1, [r3, #32]
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	430b      	orrs	r3, r1
 80019e2:	4925      	ldr	r1, [pc, #148]	; (8001a78 <HAL_RCC_OscConfig+0xc44>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
 80019e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80019ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	fa93 f2a3 	rbit	r2, r3
 80019fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a00:	601a      	str	r2, [r3, #0]
  return result;
 8001a02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a06:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a08:	fab3 f383 	clz	r3, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a12:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1e:	f7fe ff79 	bl	8000914 <HAL_GetTick>
 8001a22:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a26:	e009      	b.n	8001a3c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a28:	f7fe ff74 	bl	8000914 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e109      	b.n	8001c50 <HAL_RCC_OscConfig+0xe1c>
 8001a3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	fa93 f2a3 	rbit	r2, r3
 8001a50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a54:	601a      	str	r2, [r3, #0]
  return result;
 8001a56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a5a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a5c:	fab3 f383 	clz	r3, r3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d105      	bne.n	8001a7c <HAL_RCC_OscConfig+0xc48>
 8001a70:	4b01      	ldr	r3, [pc, #4]	; (8001a78 <HAL_RCC_OscConfig+0xc44>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	e01e      	b.n	8001ab4 <HAL_RCC_OscConfig+0xc80>
 8001a76:	bf00      	nop
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	fa93 f2a3 	rbit	r2, r3
 8001a90:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	fa93 f2a3 	rbit	r2, r3
 8001aaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	4b6a      	ldr	r3, [pc, #424]	; (8001c5c <HAL_RCC_OscConfig+0xe28>)
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001ab8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001abc:	6011      	str	r1, [r2, #0]
 8001abe:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	fa92 f1a2 	rbit	r1, r2
 8001ac8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001acc:	6011      	str	r1, [r2, #0]
  return result;
 8001ace:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ad2:	6812      	ldr	r2, [r2, #0]
 8001ad4:	fab2 f282 	clz	r2, r2
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	f042 0220 	orr.w	r2, r2, #32
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	f002 021f 	and.w	r2, r2, #31
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aea:	4013      	ands	r3, r2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d09b      	beq.n	8001a28 <HAL_RCC_OscConfig+0xbf4>
 8001af0:	e0ad      	b.n	8001c4e <HAL_RCC_OscConfig+0xe1a>
 8001af2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001af6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001afa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	fa93 f2a3 	rbit	r2, r3
 8001b06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b0a:	601a      	str	r2, [r3, #0]
  return result;
 8001b0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b10:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b12:	fab3 f383 	clz	r3, r3
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	461a      	mov	r2, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b28:	f7fe fef4 	bl	8000914 <HAL_GetTick>
 8001b2c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b30:	e009      	b.n	8001b46 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b32:	f7fe feef 	bl	8000914 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e084      	b.n	8001c50 <HAL_RCC_OscConfig+0xe1c>
 8001b46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	fa93 f2a3 	rbit	r2, r3
 8001b5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b5e:	601a      	str	r2, [r3, #0]
  return result;
 8001b60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b64:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b66:	fab3 f383 	clz	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	095b      	lsrs	r3, r3, #5
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d102      	bne.n	8001b80 <HAL_RCC_OscConfig+0xd4c>
 8001b7a:	4b38      	ldr	r3, [pc, #224]	; (8001c5c <HAL_RCC_OscConfig+0xe28>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	e01b      	b.n	8001bb8 <HAL_RCC_OscConfig+0xd84>
 8001b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	fa93 f2a3 	rbit	r2, r3
 8001b94:	f107 0320 	add.w	r3, r7, #32
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	f107 031c 	add.w	r3, r7, #28
 8001b9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	fa93 f2a3 	rbit	r2, r3
 8001bae:	f107 0318 	add.w	r3, r7, #24
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	4b29      	ldr	r3, [pc, #164]	; (8001c5c <HAL_RCC_OscConfig+0xe28>)
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	f107 0214 	add.w	r2, r7, #20
 8001bbc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bc0:	6011      	str	r1, [r2, #0]
 8001bc2:	f107 0214 	add.w	r2, r7, #20
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	fa92 f1a2 	rbit	r1, r2
 8001bcc:	f107 0210 	add.w	r2, r7, #16
 8001bd0:	6011      	str	r1, [r2, #0]
  return result;
 8001bd2:	f107 0210 	add.w	r2, r7, #16
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	fab2 f282 	clz	r2, r2
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	f042 0220 	orr.w	r2, r2, #32
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	f002 021f 	and.w	r2, r2, #31
 8001be8:	2101      	movs	r1, #1
 8001bea:	fa01 f202 	lsl.w	r2, r1, r2
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d19e      	bne.n	8001b32 <HAL_RCC_OscConfig+0xcfe>
 8001bf4:	e02b      	b.n	8001c4e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e025      	b.n	8001c50 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c04:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <HAL_RCC_OscConfig+0xe28>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001c0c:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <HAL_RCC_OscConfig+0xe28>)
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001c18:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d111      	bne.n	8001c4a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001c26:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001c2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d108      	bne.n	8001c4a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001c38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c3c:	f003 020f 	and.w	r2, r3, #15
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d001      	beq.n	8001c4e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000

08001c60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b09e      	sub	sp, #120	; 0x78
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e162      	b.n	8001f3e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c78:	4b90      	ldr	r3, [pc, #576]	; (8001ebc <HAL_RCC_ClockConfig+0x25c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d910      	bls.n	8001ca8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c86:	4b8d      	ldr	r3, [pc, #564]	; (8001ebc <HAL_RCC_ClockConfig+0x25c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f023 0207 	bic.w	r2, r3, #7
 8001c8e:	498b      	ldr	r1, [pc, #556]	; (8001ebc <HAL_RCC_ClockConfig+0x25c>)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c96:	4b89      	ldr	r3, [pc, #548]	; (8001ebc <HAL_RCC_ClockConfig+0x25c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e14a      	b.n	8001f3e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d008      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb4:	4b82      	ldr	r3, [pc, #520]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	497f      	ldr	r1, [pc, #508]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 80dc 	beq.w	8001e8c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d13c      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xf6>
 8001cdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ce0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cec:	fab3 f383 	clz	r3, r3
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	095b      	lsrs	r3, r3, #5
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d102      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xa6>
 8001d00:	4b6f      	ldr	r3, [pc, #444]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	e00f      	b.n	8001d26 <HAL_RCC_ClockConfig+0xc6>
 8001d06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d0e:	fa93 f3a3 	rbit	r3, r3
 8001d12:	667b      	str	r3, [r7, #100]	; 0x64
 8001d14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d18:	663b      	str	r3, [r7, #96]	; 0x60
 8001d1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d1c:	fa93 f3a3 	rbit	r3, r3
 8001d20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d22:	4b67      	ldr	r3, [pc, #412]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d2a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d2e:	fa92 f2a2 	rbit	r2, r2
 8001d32:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001d34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d36:	fab2 f282 	clz	r2, r2
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	f042 0220 	orr.w	r2, r2, #32
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	f002 021f 	and.w	r2, r2, #31
 8001d46:	2101      	movs	r1, #1
 8001d48:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d17b      	bne.n	8001e4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0f3      	b.n	8001f3e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d13c      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x178>
 8001d5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d6e:	fab3 f383 	clz	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	095b      	lsrs	r3, r3, #5
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d102      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x128>
 8001d82:	4b4f      	ldr	r3, [pc, #316]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	e00f      	b.n	8001da8 <HAL_RCC_ClockConfig+0x148>
 8001d88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d90:	fa93 f3a3 	rbit	r3, r3
 8001d94:	647b      	str	r3, [r7, #68]	; 0x44
 8001d96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d9a:	643b      	str	r3, [r7, #64]	; 0x40
 8001d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d9e:	fa93 f3a3 	rbit	r3, r3
 8001da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001da4:	4b46      	ldr	r3, [pc, #280]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dac:	63ba      	str	r2, [r7, #56]	; 0x38
 8001dae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001db0:	fa92 f2a2 	rbit	r2, r2
 8001db4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001db6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001db8:	fab2 f282 	clz	r2, r2
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	f042 0220 	orr.w	r2, r2, #32
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	f002 021f 	and.w	r2, r2, #31
 8001dc8:	2101      	movs	r1, #1
 8001dca:	fa01 f202 	lsl.w	r2, r1, r2
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d13a      	bne.n	8001e4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0b2      	b.n	8001f3e <HAL_RCC_ClockConfig+0x2de>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dde:	fa93 f3a3 	rbit	r3, r3
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	095b      	lsrs	r3, r3, #5
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d102      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x1a0>
 8001dfa:	4b31      	ldr	r3, [pc, #196]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	e00d      	b.n	8001e1c <HAL_RCC_ClockConfig+0x1bc>
 8001e00:	2302      	movs	r3, #2
 8001e02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e06:	fa93 f3a3 	rbit	r3, r3
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	623b      	str	r3, [r7, #32]
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	fa93 f3a3 	rbit	r3, r3
 8001e16:	61fb      	str	r3, [r7, #28]
 8001e18:	4b29      	ldr	r3, [pc, #164]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	61ba      	str	r2, [r7, #24]
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	fa92 f2a2 	rbit	r2, r2
 8001e26:	617a      	str	r2, [r7, #20]
  return result;
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	fab2 f282 	clz	r2, r2
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	f042 0220 	orr.w	r2, r2, #32
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	f002 021f 	and.w	r2, r2, #31
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e079      	b.n	8001f3e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f023 0203 	bic.w	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	491a      	ldr	r1, [pc, #104]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e5c:	f7fe fd5a 	bl	8000914 <HAL_GetTick>
 8001e60:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e62:	e00a      	b.n	8001e7a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e64:	f7fe fd56 	bl	8000914 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e061      	b.n	8001f3e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <HAL_RCC_ClockConfig+0x260>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 020c 	and.w	r2, r3, #12
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d1eb      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_RCC_ClockConfig+0x25c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d214      	bcs.n	8001ec4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <HAL_RCC_ClockConfig+0x25c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 0207 	bic.w	r2, r3, #7
 8001ea2:	4906      	ldr	r1, [pc, #24]	; (8001ebc <HAL_RCC_ClockConfig+0x25c>)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <HAL_RCC_ClockConfig+0x25c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d005      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e040      	b.n	8001f3e <HAL_RCC_ClockConfig+0x2de>
 8001ebc:	40022000 	.word	0x40022000
 8001ec0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d008      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <HAL_RCC_ClockConfig+0x2e8>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	491a      	ldr	r1, [pc, #104]	; (8001f48 <HAL_RCC_ClockConfig+0x2e8>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d009      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eee:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <HAL_RCC_ClockConfig+0x2e8>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4912      	ldr	r1, [pc, #72]	; (8001f48 <HAL_RCC_ClockConfig+0x2e8>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f02:	f000 f829 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8001f06:	4601      	mov	r1, r0
 8001f08:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <HAL_RCC_ClockConfig+0x2e8>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f10:	22f0      	movs	r2, #240	; 0xf0
 8001f12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	fa92 f2a2 	rbit	r2, r2
 8001f1a:	60fa      	str	r2, [r7, #12]
  return result;
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	fab2 f282 	clz	r2, r2
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	40d3      	lsrs	r3, r2
 8001f26:	4a09      	ldr	r2, [pc, #36]	; (8001f4c <HAL_RCC_ClockConfig+0x2ec>)
 8001f28:	5cd3      	ldrb	r3, [r2, r3]
 8001f2a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f2e:	4a08      	ldr	r2, [pc, #32]	; (8001f50 <HAL_RCC_ClockConfig+0x2f0>)
 8001f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <HAL_RCC_ClockConfig+0x2f4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fbd8 	bl	80006ec <HAL_InitTick>
  
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3778      	adds	r7, #120	; 0x78
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	08006aa8 	.word	0x08006aa8
 8001f50:	20000000 	.word	0x20000000
 8001f54:	20000004 	.word	0x20000004

08001f58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b08b      	sub	sp, #44	; 0x2c
 8001f5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
 8001f66:	2300      	movs	r3, #0
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001f72:	4b2a      	ldr	r3, [pc, #168]	; (800201c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d002      	beq.n	8001f88 <HAL_RCC_GetSysClockFreq+0x30>
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d003      	beq.n	8001f8e <HAL_RCC_GetSysClockFreq+0x36>
 8001f86:	e03f      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f88:	4b25      	ldr	r3, [pc, #148]	; (8002020 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f8a:	623b      	str	r3, [r7, #32]
      break;
 8001f8c:	e03f      	b.n	800200e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f94:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001f98:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	fa92 f2a2 	rbit	r2, r2
 8001fa0:	607a      	str	r2, [r7, #4]
  return result;
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	fab2 f282 	clz	r2, r2
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	40d3      	lsrs	r3, r2
 8001fac:	4a1d      	ldr	r2, [pc, #116]	; (8002024 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001fae:	5cd3      	ldrb	r3, [r2, r3]
 8001fb0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001fb2:	4b1a      	ldr	r3, [pc, #104]	; (800201c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	220f      	movs	r2, #15
 8001fbc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	fa92 f2a2 	rbit	r2, r2
 8001fc4:	60fa      	str	r2, [r7, #12]
  return result;
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	fab2 f282 	clz	r2, r2
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	40d3      	lsrs	r3, r2
 8001fd0:	4a15      	ldr	r2, [pc, #84]	; (8002028 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fd2:	5cd3      	ldrb	r3, [r2, r3]
 8001fd4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fe0:	4a0f      	ldr	r2, [pc, #60]	; (8002020 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff0:	e007      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ff2:	4a0b      	ldr	r2, [pc, #44]	; (8002020 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	fb02 f303 	mul.w	r3, r2, r3
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	623b      	str	r3, [r7, #32]
      break;
 8002006:	e002      	b.n	800200e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_RCC_GetSysClockFreq+0xc8>)
 800200a:	623b      	str	r3, [r7, #32]
      break;
 800200c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800200e:	6a3b      	ldr	r3, [r7, #32]
}
 8002010:	4618      	mov	r0, r3
 8002012:	372c      	adds	r7, #44	; 0x2c
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	40021000 	.word	0x40021000
 8002020:	007a1200 	.word	0x007a1200
 8002024:	08006ac0 	.word	0x08006ac0
 8002028:	08006ad0 	.word	0x08006ad0

0800202c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002030:	4b03      	ldr	r3, [pc, #12]	; (8002040 <HAL_RCC_GetHCLKFreq+0x14>)
 8002032:	681b      	ldr	r3, [r3, #0]
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	20000000 	.word	0x20000000

08002044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800204a:	f7ff ffef 	bl	800202c <HAL_RCC_GetHCLKFreq>
 800204e:	4601      	mov	r1, r0
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002058:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800205c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	fa92 f2a2 	rbit	r2, r2
 8002064:	603a      	str	r2, [r7, #0]
  return result;
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	fab2 f282 	clz	r2, r2
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	40d3      	lsrs	r3, r2
 8002070:	4a04      	ldr	r2, [pc, #16]	; (8002084 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002072:	5cd3      	ldrb	r3, [r2, r3]
 8002074:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	08006ab8 	.word	0x08006ab8

08002088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800208e:	f7ff ffcd 	bl	800202c <HAL_RCC_GetHCLKFreq>
 8002092:	4601      	mov	r1, r0
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800209c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80020a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	fa92 f2a2 	rbit	r2, r2
 80020a8:	603a      	str	r2, [r7, #0]
  return result;
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	fab2 f282 	clz	r2, r2
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	40d3      	lsrs	r3, r2
 80020b4:	4a04      	ldr	r2, [pc, #16]	; (80020c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80020b6:	5cd3      	ldrb	r3, [r2, r3]
 80020b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40021000 	.word	0x40021000
 80020c8:	08006ab8 	.word	0x08006ab8

080020cc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	220f      	movs	r2, #15
 80020da:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_RCC_GetClockConfig+0x5c>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0203 	and.w	r2, r3, #3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <HAL_RCC_GetClockConfig+0x5c>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <HAL_RCC_GetClockConfig+0x5c>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002100:	4b09      	ldr	r3, [pc, #36]	; (8002128 <HAL_RCC_GetClockConfig+0x5c>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	08db      	lsrs	r3, r3, #3
 8002106:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800210e:	4b07      	ldr	r3, [pc, #28]	; (800212c <HAL_RCC_GetClockConfig+0x60>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0207 	and.w	r2, r3, #7
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	601a      	str	r2, [r3, #0]
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000
 800212c:	40022000 	.word	0x40022000

08002130 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b092      	sub	sp, #72	; 0x48
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002140:	2300      	movs	r3, #0
 8002142:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 80d4 	beq.w	80022fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002154:	4b4e      	ldr	r3, [pc, #312]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10e      	bne.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002160:	4b4b      	ldr	r3, [pc, #300]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	4a4a      	ldr	r2, [pc, #296]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800216a:	61d3      	str	r3, [r2, #28]
 800216c:	4b48      	ldr	r3, [pc, #288]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002178:	2301      	movs	r3, #1
 800217a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217e:	4b45      	ldr	r3, [pc, #276]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002186:	2b00      	cmp	r3, #0
 8002188:	d118      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800218a:	4b42      	ldr	r3, [pc, #264]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a41      	ldr	r2, [pc, #260]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002194:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002196:	f7fe fbbd 	bl	8000914 <HAL_GetTick>
 800219a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219c:	e008      	b.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219e:	f7fe fbb9 	bl	8000914 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b64      	cmp	r3, #100	; 0x64
 80021aa:	d901      	bls.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e1d6      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b0:	4b38      	ldr	r3, [pc, #224]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0f0      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021bc:	4b34      	ldr	r3, [pc, #208]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 8084 	beq.w	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021d8:	429a      	cmp	r2, r3
 80021da:	d07c      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021dc:	4b2c      	ldr	r3, [pc, #176]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80021f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b26      	ldr	r3, [pc, #152]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	461a      	mov	r2, r3
 8002206:	2301      	movs	r3, #1
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800220e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	461a      	mov	r2, r3
 8002222:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002224:	4413      	add	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	461a      	mov	r2, r3
 800222a:	2300      	movs	r3, #0
 800222c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800222e:	4a18      	ldr	r2, [pc, #96]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002232:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d04b      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223e:	f7fe fb69 	bl	8000914 <HAL_GetTick>
 8002242:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002244:	e00a      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002246:	f7fe fb65 	bl	8000914 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	f241 3288 	movw	r2, #5000	; 0x1388
 8002254:	4293      	cmp	r3, r2
 8002256:	d901      	bls.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e180      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800225c:	2302      	movs	r3, #2
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002262:	fa93 f3a3 	rbit	r3, r3
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
 8002268:	2302      	movs	r3, #2
 800226a:	623b      	str	r3, [r7, #32]
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	fa93 f3a3 	rbit	r3, r3
 8002272:	61fb      	str	r3, [r7, #28]
  return result;
 8002274:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	095b      	lsrs	r3, r3, #5
 800227e:	b2db      	uxtb	r3, r3
 8002280:	f043 0302 	orr.w	r3, r3, #2
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d108      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800228a:	4b01      	ldr	r3, [pc, #4]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	e00d      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002290:	40021000 	.word	0x40021000
 8002294:	40007000 	.word	0x40007000
 8002298:	10908100 	.word	0x10908100
 800229c:	2302      	movs	r3, #2
 800229e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	4ba0      	ldr	r3, [pc, #640]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	2202      	movs	r2, #2
 80022ae:	613a      	str	r2, [r7, #16]
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	fa92 f2a2 	rbit	r2, r2
 80022b6:	60fa      	str	r2, [r7, #12]
  return result;
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	fab2 f282 	clz	r2, r2
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	f002 021f 	and.w	r2, r2, #31
 80022ca:	2101      	movs	r1, #1
 80022cc:	fa01 f202 	lsl.w	r2, r1, r2
 80022d0:	4013      	ands	r3, r2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0b7      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80022d6:	4b95      	ldr	r3, [pc, #596]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4992      	ldr	r1, [pc, #584]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d105      	bne.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f0:	4b8e      	ldr	r3, [pc, #568]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	4a8d      	ldr	r2, [pc, #564]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d008      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002308:	4b88      	ldr	r3, [pc, #544]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	f023 0203 	bic.w	r2, r3, #3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	4985      	ldr	r1, [pc, #532]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002316:	4313      	orrs	r3, r2
 8002318:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d008      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002326:	4b81      	ldr	r3, [pc, #516]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	497e      	ldr	r1, [pc, #504]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002334:	4313      	orrs	r3, r2
 8002336:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002344:	4b79      	ldr	r3, [pc, #484]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	4976      	ldr	r1, [pc, #472]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002352:	4313      	orrs	r3, r2
 8002354:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0320 	and.w	r3, r3, #32
 800235e:	2b00      	cmp	r3, #0
 8002360:	d008      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002362:	4b72      	ldr	r3, [pc, #456]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f023 0210 	bic.w	r2, r3, #16
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	496f      	ldr	r1, [pc, #444]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002370:	4313      	orrs	r3, r2
 8002372:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002380:	4b6a      	ldr	r3, [pc, #424]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238c:	4967      	ldr	r1, [pc, #412]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800238e:	4313      	orrs	r3, r2
 8002390:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239a:	2b00      	cmp	r3, #0
 800239c:	d008      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800239e:	4b63      	ldr	r3, [pc, #396]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f023 0220 	bic.w	r2, r3, #32
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	4960      	ldr	r1, [pc, #384]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023bc:	4b5b      	ldr	r3, [pc, #364]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	4958      	ldr	r1, [pc, #352]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d008      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023da:	4b54      	ldr	r3, [pc, #336]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	4951      	ldr	r1, [pc, #324]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023f8:	4b4c      	ldr	r3, [pc, #304]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	4949      	ldr	r1, [pc, #292]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002406:	4313      	orrs	r3, r2
 8002408:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002416:	4b45      	ldr	r3, [pc, #276]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4942      	ldr	r1, [pc, #264]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002434:	4b3d      	ldr	r3, [pc, #244]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	493a      	ldr	r1, [pc, #232]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002442:	4313      	orrs	r3, r2
 8002444:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244e:	2b00      	cmp	r3, #0
 8002450:	d008      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002452:	4b36      	ldr	r3, [pc, #216]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002456:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245e:	4933      	ldr	r1, [pc, #204]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002460:	4313      	orrs	r3, r2
 8002462:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002470:	4b2e      	ldr	r3, [pc, #184]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247c:	492b      	ldr	r1, [pc, #172]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800247e:	4313      	orrs	r3, r2
 8002480:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d008      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800248e:	4b27      	ldr	r3, [pc, #156]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	4924      	ldr	r1, [pc, #144]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800249c:	4313      	orrs	r3, r2
 800249e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80024ac:	4b1f      	ldr	r3, [pc, #124]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b8:	491c      	ldr	r1, [pc, #112]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d008      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80024ca:	4b18      	ldr	r3, [pc, #96]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d6:	4915      	ldr	r1, [pc, #84]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80024e8:	4b10      	ldr	r3, [pc, #64]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f4:	490d      	ldr	r1, [pc, #52]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d008      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002512:	4906      	ldr	r1, [pc, #24]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002514:	4313      	orrs	r3, r2
 8002516:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00c      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002524:	4b01      	ldr	r3, [pc, #4]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	e002      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002538:	490b      	ldr	r1, [pc, #44]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800253a:	4313      	orrs	r3, r2
 800253c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d008      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800254a:	4b07      	ldr	r3, [pc, #28]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002556:	4904      	ldr	r1, [pc, #16]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002558:	4313      	orrs	r3, r2
 800255a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3748      	adds	r7, #72	; 0x48
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000

0800256c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e049      	b.n	8002612 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f841 	bl	800261a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3304      	adds	r3, #4
 80025a8:	4619      	mov	r1, r3
 80025aa:	4610      	mov	r0, r2
 80025ac:	f000 f9f8 	bl	80029a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b01      	cmp	r3, #1
 8002642:	d001      	beq.n	8002648 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e04f      	b.n	80026e8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2202      	movs	r2, #2
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a23      	ldr	r2, [pc, #140]	; (80026f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d01d      	beq.n	80026a6 <HAL_TIM_Base_Start_IT+0x76>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002672:	d018      	beq.n	80026a6 <HAL_TIM_Base_Start_IT+0x76>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a1f      	ldr	r2, [pc, #124]	; (80026f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d013      	beq.n	80026a6 <HAL_TIM_Base_Start_IT+0x76>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a1e      	ldr	r2, [pc, #120]	; (80026fc <HAL_TIM_Base_Start_IT+0xcc>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d00e      	beq.n	80026a6 <HAL_TIM_Base_Start_IT+0x76>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a1c      	ldr	r2, [pc, #112]	; (8002700 <HAL_TIM_Base_Start_IT+0xd0>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d009      	beq.n	80026a6 <HAL_TIM_Base_Start_IT+0x76>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a1b      	ldr	r2, [pc, #108]	; (8002704 <HAL_TIM_Base_Start_IT+0xd4>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d004      	beq.n	80026a6 <HAL_TIM_Base_Start_IT+0x76>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a19      	ldr	r2, [pc, #100]	; (8002708 <HAL_TIM_Base_Start_IT+0xd8>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d115      	bne.n	80026d2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	4b17      	ldr	r3, [pc, #92]	; (800270c <HAL_TIM_Base_Start_IT+0xdc>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2b06      	cmp	r3, #6
 80026b6:	d015      	beq.n	80026e4 <HAL_TIM_Base_Start_IT+0xb4>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026be:	d011      	beq.n	80026e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d0:	e008      	b.n	80026e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0201 	orr.w	r2, r2, #1
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	e000      	b.n	80026e6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	40012c00 	.word	0x40012c00
 80026f8:	40000400 	.word	0x40000400
 80026fc:	40000800 	.word	0x40000800
 8002700:	40013400 	.word	0x40013400
 8002704:	40014000 	.word	0x40014000
 8002708:	40015000 	.word	0x40015000
 800270c:	00010007 	.word	0x00010007

08002710 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b02      	cmp	r3, #2
 8002724:	d122      	bne.n	800276c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b02      	cmp	r3, #2
 8002732:	d11b      	bne.n	800276c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f06f 0202 	mvn.w	r2, #2
 800273c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f905 	bl	8002962 <HAL_TIM_IC_CaptureCallback>
 8002758:	e005      	b.n	8002766 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f8f7 	bl	800294e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f908 	bl	8002976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b04      	cmp	r3, #4
 8002778:	d122      	bne.n	80027c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b04      	cmp	r3, #4
 8002786:	d11b      	bne.n	80027c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0204 	mvn.w	r2, #4
 8002790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2202      	movs	r2, #2
 8002796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f8db 	bl	8002962 <HAL_TIM_IC_CaptureCallback>
 80027ac:	e005      	b.n	80027ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f8cd 	bl	800294e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f8de 	bl	8002976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d122      	bne.n	8002814 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d11b      	bne.n	8002814 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0208 	mvn.w	r2, #8
 80027e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2204      	movs	r2, #4
 80027ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f8b1 	bl	8002962 <HAL_TIM_IC_CaptureCallback>
 8002800:	e005      	b.n	800280e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f8a3 	bl	800294e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f8b4 	bl	8002976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	2b10      	cmp	r3, #16
 8002820:	d122      	bne.n	8002868 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	2b10      	cmp	r3, #16
 800282e:	d11b      	bne.n	8002868 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0210 	mvn.w	r2, #16
 8002838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2208      	movs	r2, #8
 800283e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f887 	bl	8002962 <HAL_TIM_IC_CaptureCallback>
 8002854:	e005      	b.n	8002862 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f879 	bl	800294e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f88a 	bl	8002976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b01      	cmp	r3, #1
 8002874:	d10e      	bne.n	8002894 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b01      	cmp	r3, #1
 8002882:	d107      	bne.n	8002894 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0201 	mvn.w	r2, #1
 800288c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7fd feac 	bl	80005ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289e:	2b80      	cmp	r3, #128	; 0x80
 80028a0:	d10e      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	2b80      	cmp	r3, #128	; 0x80
 80028ae:	d107      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f918 	bl	8002af0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ce:	d10e      	bne.n	80028ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028da:	2b80      	cmp	r3, #128	; 0x80
 80028dc:	d107      	bne.n	80028ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80028e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f90b 	bl	8002b04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f8:	2b40      	cmp	r3, #64	; 0x40
 80028fa:	d10e      	bne.n	800291a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002906:	2b40      	cmp	r3, #64	; 0x40
 8002908:	d107      	bne.n	800291a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f838 	bl	800298a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	f003 0320 	and.w	r3, r3, #32
 8002924:	2b20      	cmp	r3, #32
 8002926:	d10e      	bne.n	8002946 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b20      	cmp	r3, #32
 8002934:	d107      	bne.n	8002946 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f06f 0220 	mvn.w	r2, #32
 800293e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f8cb 	bl	8002adc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a42      	ldr	r2, [pc, #264]	; (8002abc <TIM_Base_SetConfig+0x11c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d013      	beq.n	80029e0 <TIM_Base_SetConfig+0x40>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029be:	d00f      	beq.n	80029e0 <TIM_Base_SetConfig+0x40>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a3f      	ldr	r2, [pc, #252]	; (8002ac0 <TIM_Base_SetConfig+0x120>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d00b      	beq.n	80029e0 <TIM_Base_SetConfig+0x40>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a3e      	ldr	r2, [pc, #248]	; (8002ac4 <TIM_Base_SetConfig+0x124>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d007      	beq.n	80029e0 <TIM_Base_SetConfig+0x40>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a3d      	ldr	r2, [pc, #244]	; (8002ac8 <TIM_Base_SetConfig+0x128>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d003      	beq.n	80029e0 <TIM_Base_SetConfig+0x40>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a3c      	ldr	r2, [pc, #240]	; (8002acc <TIM_Base_SetConfig+0x12c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d108      	bne.n	80029f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a31      	ldr	r2, [pc, #196]	; (8002abc <TIM_Base_SetConfig+0x11c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d01f      	beq.n	8002a3a <TIM_Base_SetConfig+0x9a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a00:	d01b      	beq.n	8002a3a <TIM_Base_SetConfig+0x9a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a2e      	ldr	r2, [pc, #184]	; (8002ac0 <TIM_Base_SetConfig+0x120>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d017      	beq.n	8002a3a <TIM_Base_SetConfig+0x9a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a2d      	ldr	r2, [pc, #180]	; (8002ac4 <TIM_Base_SetConfig+0x124>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d013      	beq.n	8002a3a <TIM_Base_SetConfig+0x9a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a2c      	ldr	r2, [pc, #176]	; (8002ac8 <TIM_Base_SetConfig+0x128>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00f      	beq.n	8002a3a <TIM_Base_SetConfig+0x9a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a2c      	ldr	r2, [pc, #176]	; (8002ad0 <TIM_Base_SetConfig+0x130>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00b      	beq.n	8002a3a <TIM_Base_SetConfig+0x9a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a2b      	ldr	r2, [pc, #172]	; (8002ad4 <TIM_Base_SetConfig+0x134>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d007      	beq.n	8002a3a <TIM_Base_SetConfig+0x9a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a2a      	ldr	r2, [pc, #168]	; (8002ad8 <TIM_Base_SetConfig+0x138>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d003      	beq.n	8002a3a <TIM_Base_SetConfig+0x9a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a25      	ldr	r2, [pc, #148]	; (8002acc <TIM_Base_SetConfig+0x12c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d108      	bne.n	8002a4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a12      	ldr	r2, [pc, #72]	; (8002abc <TIM_Base_SetConfig+0x11c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d013      	beq.n	8002aa0 <TIM_Base_SetConfig+0x100>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a13      	ldr	r2, [pc, #76]	; (8002ac8 <TIM_Base_SetConfig+0x128>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d00f      	beq.n	8002aa0 <TIM_Base_SetConfig+0x100>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a13      	ldr	r2, [pc, #76]	; (8002ad0 <TIM_Base_SetConfig+0x130>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d00b      	beq.n	8002aa0 <TIM_Base_SetConfig+0x100>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a12      	ldr	r2, [pc, #72]	; (8002ad4 <TIM_Base_SetConfig+0x134>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d007      	beq.n	8002aa0 <TIM_Base_SetConfig+0x100>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a11      	ldr	r2, [pc, #68]	; (8002ad8 <TIM_Base_SetConfig+0x138>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d003      	beq.n	8002aa0 <TIM_Base_SetConfig+0x100>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a0c      	ldr	r2, [pc, #48]	; (8002acc <TIM_Base_SetConfig+0x12c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d103      	bne.n	8002aa8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	615a      	str	r2, [r3, #20]
}
 8002aae:	bf00      	nop
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40012c00 	.word	0x40012c00
 8002ac0:	40000400 	.word	0x40000400
 8002ac4:	40000800 	.word	0x40000800
 8002ac8:	40013400 	.word	0x40013400
 8002acc:	40015000 	.word	0x40015000
 8002ad0:	40014000 	.word	0x40014000
 8002ad4:	40014400 	.word	0x40014400
 8002ad8:	40014800 	.word	0x40014800

08002adc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e040      	b.n	8002bac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d106      	bne.n	8002b40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7fd fd94 	bl	8000668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2224      	movs	r2, #36	; 0x24
 8002b44:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0201 	bic.w	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f8c0 	bl	8002cdc <UART_SetConfig>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e022      	b.n	8002bac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fa88 	bl	8003084 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 fb0f 	bl	80031c8 <UART_CheckIdleState>
 8002baa:	4603      	mov	r3, r0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08a      	sub	sp, #40	; 0x28
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	f040 8082 	bne.w	8002cd2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <HAL_UART_Transmit+0x26>
 8002bd4:	88fb      	ldrh	r3, [r7, #6]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e07a      	b.n	8002cd4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_UART_Transmit+0x38>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e073      	b.n	8002cd4 <HAL_UART_Transmit+0x120>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2221      	movs	r2, #33	; 0x21
 8002c00:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c02:	f7fd fe87 	bl	8000914 <HAL_GetTick>
 8002c06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	88fa      	ldrh	r2, [r7, #6]
 8002c0c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	88fa      	ldrh	r2, [r7, #6]
 8002c14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c20:	d108      	bne.n	8002c34 <HAL_UART_Transmit+0x80>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d104      	bne.n	8002c34 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	61bb      	str	r3, [r7, #24]
 8002c32:	e003      	b.n	8002c3c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002c44:	e02d      	b.n	8002ca2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2180      	movs	r1, #128	; 0x80
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 fb02 	bl	800325a <UART_WaitOnFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e039      	b.n	8002cd4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10b      	bne.n	8002c7e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	881a      	ldrh	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c72:	b292      	uxth	r2, r2
 8002c74:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	3302      	adds	r3, #2
 8002c7a:	61bb      	str	r3, [r7, #24]
 8002c7c:	e008      	b.n	8002c90 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	781a      	ldrb	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	b292      	uxth	r2, r2
 8002c88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1cb      	bne.n	8002c46 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2140      	movs	r1, #64	; 0x40
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 face 	bl	800325a <UART_WaitOnFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e005      	b.n	8002cd4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e000      	b.n	8002cd4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002cd2:	2302      	movs	r3, #2
  }
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3720      	adds	r7, #32
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	4baa      	ldr	r3, [pc, #680]	; (8002fb0 <UART_SetConfig+0x2d4>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	6979      	ldr	r1, [r7, #20]
 8002d10:	430b      	orrs	r3, r1
 8002d12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a98      	ldr	r2, [pc, #608]	; (8002fb4 <UART_SetConfig+0x2d8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d121      	bne.n	8002d9c <UART_SetConfig+0xc0>
 8002d58:	4b97      	ldr	r3, [pc, #604]	; (8002fb8 <UART_SetConfig+0x2dc>)
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d817      	bhi.n	8002d94 <UART_SetConfig+0xb8>
 8002d64:	a201      	add	r2, pc, #4	; (adr r2, 8002d6c <UART_SetConfig+0x90>)
 8002d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6a:	bf00      	nop
 8002d6c:	08002d7d 	.word	0x08002d7d
 8002d70:	08002d89 	.word	0x08002d89
 8002d74:	08002d8f 	.word	0x08002d8f
 8002d78:	08002d83 	.word	0x08002d83
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	77fb      	strb	r3, [r7, #31]
 8002d80:	e0b2      	b.n	8002ee8 <UART_SetConfig+0x20c>
 8002d82:	2302      	movs	r3, #2
 8002d84:	77fb      	strb	r3, [r7, #31]
 8002d86:	e0af      	b.n	8002ee8 <UART_SetConfig+0x20c>
 8002d88:	2304      	movs	r3, #4
 8002d8a:	77fb      	strb	r3, [r7, #31]
 8002d8c:	e0ac      	b.n	8002ee8 <UART_SetConfig+0x20c>
 8002d8e:	2308      	movs	r3, #8
 8002d90:	77fb      	strb	r3, [r7, #31]
 8002d92:	e0a9      	b.n	8002ee8 <UART_SetConfig+0x20c>
 8002d94:	2310      	movs	r3, #16
 8002d96:	77fb      	strb	r3, [r7, #31]
 8002d98:	bf00      	nop
 8002d9a:	e0a5      	b.n	8002ee8 <UART_SetConfig+0x20c>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a86      	ldr	r2, [pc, #536]	; (8002fbc <UART_SetConfig+0x2e0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d123      	bne.n	8002dee <UART_SetConfig+0x112>
 8002da6:	4b84      	ldr	r3, [pc, #528]	; (8002fb8 <UART_SetConfig+0x2dc>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db2:	d012      	beq.n	8002dda <UART_SetConfig+0xfe>
 8002db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db8:	d802      	bhi.n	8002dc0 <UART_SetConfig+0xe4>
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d007      	beq.n	8002dce <UART_SetConfig+0xf2>
 8002dbe:	e012      	b.n	8002de6 <UART_SetConfig+0x10a>
 8002dc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dc4:	d00c      	beq.n	8002de0 <UART_SetConfig+0x104>
 8002dc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dca:	d003      	beq.n	8002dd4 <UART_SetConfig+0xf8>
 8002dcc:	e00b      	b.n	8002de6 <UART_SetConfig+0x10a>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	77fb      	strb	r3, [r7, #31]
 8002dd2:	e089      	b.n	8002ee8 <UART_SetConfig+0x20c>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	77fb      	strb	r3, [r7, #31]
 8002dd8:	e086      	b.n	8002ee8 <UART_SetConfig+0x20c>
 8002dda:	2304      	movs	r3, #4
 8002ddc:	77fb      	strb	r3, [r7, #31]
 8002dde:	e083      	b.n	8002ee8 <UART_SetConfig+0x20c>
 8002de0:	2308      	movs	r3, #8
 8002de2:	77fb      	strb	r3, [r7, #31]
 8002de4:	e080      	b.n	8002ee8 <UART_SetConfig+0x20c>
 8002de6:	2310      	movs	r3, #16
 8002de8:	77fb      	strb	r3, [r7, #31]
 8002dea:	bf00      	nop
 8002dec:	e07c      	b.n	8002ee8 <UART_SetConfig+0x20c>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a73      	ldr	r2, [pc, #460]	; (8002fc0 <UART_SetConfig+0x2e4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d123      	bne.n	8002e40 <UART_SetConfig+0x164>
 8002df8:	4b6f      	ldr	r3, [pc, #444]	; (8002fb8 <UART_SetConfig+0x2dc>)
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002e00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e04:	d012      	beq.n	8002e2c <UART_SetConfig+0x150>
 8002e06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e0a:	d802      	bhi.n	8002e12 <UART_SetConfig+0x136>
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d007      	beq.n	8002e20 <UART_SetConfig+0x144>
 8002e10:	e012      	b.n	8002e38 <UART_SetConfig+0x15c>
 8002e12:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e16:	d00c      	beq.n	8002e32 <UART_SetConfig+0x156>
 8002e18:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e1c:	d003      	beq.n	8002e26 <UART_SetConfig+0x14a>
 8002e1e:	e00b      	b.n	8002e38 <UART_SetConfig+0x15c>
 8002e20:	2300      	movs	r3, #0
 8002e22:	77fb      	strb	r3, [r7, #31]
 8002e24:	e060      	b.n	8002ee8 <UART_SetConfig+0x20c>
 8002e26:	2302      	movs	r3, #2
 8002e28:	77fb      	strb	r3, [r7, #31]
 8002e2a:	e05d      	b.n	8002ee8 <UART_SetConfig+0x20c>
 8002e2c:	2304      	movs	r3, #4
 8002e2e:	77fb      	strb	r3, [r7, #31]
 8002e30:	e05a      	b.n	8002ee8 <UART_SetConfig+0x20c>
 8002e32:	2308      	movs	r3, #8
 8002e34:	77fb      	strb	r3, [r7, #31]
 8002e36:	e057      	b.n	8002ee8 <UART_SetConfig+0x20c>
 8002e38:	2310      	movs	r3, #16
 8002e3a:	77fb      	strb	r3, [r7, #31]
 8002e3c:	bf00      	nop
 8002e3e:	e053      	b.n	8002ee8 <UART_SetConfig+0x20c>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a5f      	ldr	r2, [pc, #380]	; (8002fc4 <UART_SetConfig+0x2e8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d123      	bne.n	8002e92 <UART_SetConfig+0x1b6>
 8002e4a:	4b5b      	ldr	r3, [pc, #364]	; (8002fb8 <UART_SetConfig+0x2dc>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e56:	d012      	beq.n	8002e7e <UART_SetConfig+0x1a2>
 8002e58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e5c:	d802      	bhi.n	8002e64 <UART_SetConfig+0x188>
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d007      	beq.n	8002e72 <UART_SetConfig+0x196>
 8002e62:	e012      	b.n	8002e8a <UART_SetConfig+0x1ae>
 8002e64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e68:	d00c      	beq.n	8002e84 <UART_SetConfig+0x1a8>
 8002e6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e6e:	d003      	beq.n	8002e78 <UART_SetConfig+0x19c>
 8002e70:	e00b      	b.n	8002e8a <UART_SetConfig+0x1ae>
 8002e72:	2300      	movs	r3, #0
 8002e74:	77fb      	strb	r3, [r7, #31]
 8002e76:	e037      	b.n	8002ee8 <UART_SetConfig+0x20c>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	77fb      	strb	r3, [r7, #31]
 8002e7c:	e034      	b.n	8002ee8 <UART_SetConfig+0x20c>
 8002e7e:	2304      	movs	r3, #4
 8002e80:	77fb      	strb	r3, [r7, #31]
 8002e82:	e031      	b.n	8002ee8 <UART_SetConfig+0x20c>
 8002e84:	2308      	movs	r3, #8
 8002e86:	77fb      	strb	r3, [r7, #31]
 8002e88:	e02e      	b.n	8002ee8 <UART_SetConfig+0x20c>
 8002e8a:	2310      	movs	r3, #16
 8002e8c:	77fb      	strb	r3, [r7, #31]
 8002e8e:	bf00      	nop
 8002e90:	e02a      	b.n	8002ee8 <UART_SetConfig+0x20c>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a4c      	ldr	r2, [pc, #304]	; (8002fc8 <UART_SetConfig+0x2ec>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d123      	bne.n	8002ee4 <UART_SetConfig+0x208>
 8002e9c:	4b46      	ldr	r3, [pc, #280]	; (8002fb8 <UART_SetConfig+0x2dc>)
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea8:	d012      	beq.n	8002ed0 <UART_SetConfig+0x1f4>
 8002eaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eae:	d802      	bhi.n	8002eb6 <UART_SetConfig+0x1da>
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d007      	beq.n	8002ec4 <UART_SetConfig+0x1e8>
 8002eb4:	e012      	b.n	8002edc <UART_SetConfig+0x200>
 8002eb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002eba:	d00c      	beq.n	8002ed6 <UART_SetConfig+0x1fa>
 8002ebc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ec0:	d003      	beq.n	8002eca <UART_SetConfig+0x1ee>
 8002ec2:	e00b      	b.n	8002edc <UART_SetConfig+0x200>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	77fb      	strb	r3, [r7, #31]
 8002ec8:	e00e      	b.n	8002ee8 <UART_SetConfig+0x20c>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	77fb      	strb	r3, [r7, #31]
 8002ece:	e00b      	b.n	8002ee8 <UART_SetConfig+0x20c>
 8002ed0:	2304      	movs	r3, #4
 8002ed2:	77fb      	strb	r3, [r7, #31]
 8002ed4:	e008      	b.n	8002ee8 <UART_SetConfig+0x20c>
 8002ed6:	2308      	movs	r3, #8
 8002ed8:	77fb      	strb	r3, [r7, #31]
 8002eda:	e005      	b.n	8002ee8 <UART_SetConfig+0x20c>
 8002edc:	2310      	movs	r3, #16
 8002ede:	77fb      	strb	r3, [r7, #31]
 8002ee0:	bf00      	nop
 8002ee2:	e001      	b.n	8002ee8 <UART_SetConfig+0x20c>
 8002ee4:	2310      	movs	r3, #16
 8002ee6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ef0:	d16e      	bne.n	8002fd0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002ef2:	7ffb      	ldrb	r3, [r7, #31]
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d828      	bhi.n	8002f4a <UART_SetConfig+0x26e>
 8002ef8:	a201      	add	r2, pc, #4	; (adr r2, 8002f00 <UART_SetConfig+0x224>)
 8002efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efe:	bf00      	nop
 8002f00:	08002f25 	.word	0x08002f25
 8002f04:	08002f2d 	.word	0x08002f2d
 8002f08:	08002f35 	.word	0x08002f35
 8002f0c:	08002f4b 	.word	0x08002f4b
 8002f10:	08002f3b 	.word	0x08002f3b
 8002f14:	08002f4b 	.word	0x08002f4b
 8002f18:	08002f4b 	.word	0x08002f4b
 8002f1c:	08002f4b 	.word	0x08002f4b
 8002f20:	08002f43 	.word	0x08002f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f24:	f7ff f88e 	bl	8002044 <HAL_RCC_GetPCLK1Freq>
 8002f28:	61b8      	str	r0, [r7, #24]
        break;
 8002f2a:	e013      	b.n	8002f54 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f2c:	f7ff f8ac 	bl	8002088 <HAL_RCC_GetPCLK2Freq>
 8002f30:	61b8      	str	r0, [r7, #24]
        break;
 8002f32:	e00f      	b.n	8002f54 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f34:	4b25      	ldr	r3, [pc, #148]	; (8002fcc <UART_SetConfig+0x2f0>)
 8002f36:	61bb      	str	r3, [r7, #24]
        break;
 8002f38:	e00c      	b.n	8002f54 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f3a:	f7ff f80d 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8002f3e:	61b8      	str	r0, [r7, #24]
        break;
 8002f40:	e008      	b.n	8002f54 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f46:	61bb      	str	r3, [r7, #24]
        break;
 8002f48:	e004      	b.n	8002f54 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	77bb      	strb	r3, [r7, #30]
        break;
 8002f52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 8086 	beq.w	8003068 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	005a      	lsls	r2, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	085b      	lsrs	r3, r3, #1
 8002f66:	441a      	add	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	2b0f      	cmp	r3, #15
 8002f78:	d916      	bls.n	8002fa8 <UART_SetConfig+0x2cc>
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f80:	d212      	bcs.n	8002fa8 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	f023 030f 	bic.w	r3, r3, #15
 8002f8a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	085b      	lsrs	r3, r3, #1
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	89fb      	ldrh	r3, [r7, #14]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	89fa      	ldrh	r2, [r7, #14]
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	e05f      	b.n	8003068 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	77bb      	strb	r3, [r7, #30]
 8002fac:	e05c      	b.n	8003068 <UART_SetConfig+0x38c>
 8002fae:	bf00      	nop
 8002fb0:	efff69f3 	.word	0xefff69f3
 8002fb4:	40013800 	.word	0x40013800
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40004400 	.word	0x40004400
 8002fc0:	40004800 	.word	0x40004800
 8002fc4:	40004c00 	.word	0x40004c00
 8002fc8:	40005000 	.word	0x40005000
 8002fcc:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fd0:	7ffb      	ldrb	r3, [r7, #31]
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d827      	bhi.n	8003026 <UART_SetConfig+0x34a>
 8002fd6:	a201      	add	r2, pc, #4	; (adr r2, 8002fdc <UART_SetConfig+0x300>)
 8002fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fdc:	08003001 	.word	0x08003001
 8002fe0:	08003009 	.word	0x08003009
 8002fe4:	08003011 	.word	0x08003011
 8002fe8:	08003027 	.word	0x08003027
 8002fec:	08003017 	.word	0x08003017
 8002ff0:	08003027 	.word	0x08003027
 8002ff4:	08003027 	.word	0x08003027
 8002ff8:	08003027 	.word	0x08003027
 8002ffc:	0800301f 	.word	0x0800301f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003000:	f7ff f820 	bl	8002044 <HAL_RCC_GetPCLK1Freq>
 8003004:	61b8      	str	r0, [r7, #24]
        break;
 8003006:	e013      	b.n	8003030 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003008:	f7ff f83e 	bl	8002088 <HAL_RCC_GetPCLK2Freq>
 800300c:	61b8      	str	r0, [r7, #24]
        break;
 800300e:	e00f      	b.n	8003030 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003010:	4b1b      	ldr	r3, [pc, #108]	; (8003080 <UART_SetConfig+0x3a4>)
 8003012:	61bb      	str	r3, [r7, #24]
        break;
 8003014:	e00c      	b.n	8003030 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003016:	f7fe ff9f 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 800301a:	61b8      	str	r0, [r7, #24]
        break;
 800301c:	e008      	b.n	8003030 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800301e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003022:	61bb      	str	r3, [r7, #24]
        break;
 8003024:	e004      	b.n	8003030 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	77bb      	strb	r3, [r7, #30]
        break;
 800302e:	bf00      	nop
    }

    if (pclk != 0U)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d018      	beq.n	8003068 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	085a      	lsrs	r2, r3, #1
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	441a      	add	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	fbb2 f3f3 	udiv	r3, r2, r3
 8003048:	b29b      	uxth	r3, r3
 800304a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	2b0f      	cmp	r3, #15
 8003050:	d908      	bls.n	8003064 <UART_SetConfig+0x388>
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003058:	d204      	bcs.n	8003064 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	60da      	str	r2, [r3, #12]
 8003062:	e001      	b.n	8003068 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003074:	7fbb      	ldrb	r3, [r7, #30]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3720      	adds	r7, #32
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	007a1200 	.word	0x007a1200

08003084 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	f003 0310 	and.w	r3, r3, #16
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	f003 0320 	and.w	r3, r3, #32
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01a      	beq.n	800319a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003182:	d10a      	bne.n	800319a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	605a      	str	r2, [r3, #4]
  }
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af02      	add	r7, sp, #8
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031d8:	f7fd fb9c 	bl	8000914 <HAL_GetTick>
 80031dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d10e      	bne.n	800320a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f82d 	bl	800325a <UART_WaitOnFlagUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e023      	b.n	8003252 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b04      	cmp	r3, #4
 8003216:	d10e      	bne.n	8003236 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003218:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f817 	bl	800325a <UART_WaitOnFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e00d      	b.n	8003252 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2220      	movs	r2, #32
 800323a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2220      	movs	r2, #32
 8003240:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	603b      	str	r3, [r7, #0]
 8003266:	4613      	mov	r3, r2
 8003268:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800326a:	e05e      	b.n	800332a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003272:	d05a      	beq.n	800332a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003274:	f7fd fb4e 	bl	8000914 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	429a      	cmp	r2, r3
 8003282:	d302      	bcc.n	800328a <UART_WaitOnFlagUntilTimeout+0x30>
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d11b      	bne.n	80032c2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003298:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0201 	bic.w	r2, r2, #1
 80032a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2220      	movs	r2, #32
 80032ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2220      	movs	r2, #32
 80032b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e043      	b.n	800334a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d02c      	beq.n	800332a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032de:	d124      	bne.n	800332a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032f8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0201 	bic.w	r2, r2, #1
 8003308:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2220      	movs	r2, #32
 800330e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2220      	movs	r2, #32
 800331a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e00f      	b.n	800334a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69da      	ldr	r2, [r3, #28]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4013      	ands	r3, r2
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	429a      	cmp	r2, r3
 8003338:	bf0c      	ite	eq
 800333a:	2301      	moveq	r3, #1
 800333c:	2300      	movne	r3, #0
 800333e:	b2db      	uxtb	r3, r3
 8003340:	461a      	mov	r2, r3
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	429a      	cmp	r2, r3
 8003346:	d091      	beq.n	800326c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800335a:	f3ef 8305 	mrs	r3, IPSR
 800335e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003360:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10f      	bne.n	8003386 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003366:	f3ef 8310 	mrs	r3, PRIMASK
 800336a:	607b      	str	r3, [r7, #4]
  return(result);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <osKernelInitialize+0x32>
 8003372:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <osKernelInitialize+0x64>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d109      	bne.n	800338e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800337a:	f3ef 8311 	mrs	r3, BASEPRI
 800337e:	603b      	str	r3, [r7, #0]
  return(result);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003386:	f06f 0305 	mvn.w	r3, #5
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	e00c      	b.n	80033a8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800338e:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <osKernelInitialize+0x64>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d105      	bne.n	80033a2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003396:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <osKernelInitialize+0x64>)
 8003398:	2201      	movs	r2, #1
 800339a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800339c:	2300      	movs	r3, #0
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	e002      	b.n	80033a8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80033a2:	f04f 33ff 	mov.w	r3, #4294967295
 80033a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80033a8:	68fb      	ldr	r3, [r7, #12]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	20000094 	.word	0x20000094

080033bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033c2:	f3ef 8305 	mrs	r3, IPSR
 80033c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80033c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10f      	bne.n	80033ee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ce:	f3ef 8310 	mrs	r3, PRIMASK
 80033d2:	607b      	str	r3, [r7, #4]
  return(result);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d109      	bne.n	80033ee <osKernelStart+0x32>
 80033da:	4b11      	ldr	r3, [pc, #68]	; (8003420 <osKernelStart+0x64>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d109      	bne.n	80033f6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033e2:	f3ef 8311 	mrs	r3, BASEPRI
 80033e6:	603b      	str	r3, [r7, #0]
  return(result);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80033ee:	f06f 0305 	mvn.w	r3, #5
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	e00e      	b.n	8003414 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80033f6:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <osKernelStart+0x64>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d107      	bne.n	800340e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80033fe:	4b08      	ldr	r3, [pc, #32]	; (8003420 <osKernelStart+0x64>)
 8003400:	2202      	movs	r2, #2
 8003402:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003404:	f001 fa60 	bl	80048c8 <vTaskStartScheduler>
      stat = osOK;
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	e002      	b.n	8003414 <osKernelStart+0x58>
    } else {
      stat = osError;
 800340e:	f04f 33ff 	mov.w	r3, #4294967295
 8003412:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003414:	68fb      	ldr	r3, [r7, #12]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20000094 	.word	0x20000094

08003424 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003424:	b580      	push	{r7, lr}
 8003426:	b092      	sub	sp, #72	; 0x48
 8003428:	af04      	add	r7, sp, #16
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003430:	2300      	movs	r3, #0
 8003432:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003434:	f3ef 8305 	mrs	r3, IPSR
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800343c:	2b00      	cmp	r3, #0
 800343e:	f040 8094 	bne.w	800356a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003442:	f3ef 8310 	mrs	r3, PRIMASK
 8003446:	623b      	str	r3, [r7, #32]
  return(result);
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	2b00      	cmp	r3, #0
 800344c:	f040 808d 	bne.w	800356a <osThreadNew+0x146>
 8003450:	4b48      	ldr	r3, [pc, #288]	; (8003574 <osThreadNew+0x150>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d106      	bne.n	8003466 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003458:	f3ef 8311 	mrs	r3, BASEPRI
 800345c:	61fb      	str	r3, [r7, #28]
  return(result);
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	2b00      	cmp	r3, #0
 8003462:	f040 8082 	bne.w	800356a <osThreadNew+0x146>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d07e      	beq.n	800356a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800346c:	2380      	movs	r3, #128	; 0x80
 800346e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003470:	2318      	movs	r3, #24
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003474:	2300      	movs	r3, #0
 8003476:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003478:	f107 031b 	add.w	r3, r7, #27
 800347c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800347e:	f04f 33ff 	mov.w	r3, #4294967295
 8003482:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d045      	beq.n	8003516 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <osThreadNew+0x74>
        name = attr->name;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80034a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d008      	beq.n	80034be <osThreadNew+0x9a>
 80034ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ae:	2b38      	cmp	r3, #56	; 0x38
 80034b0:	d805      	bhi.n	80034be <osThreadNew+0x9a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <osThreadNew+0x9e>
        return (NULL);
 80034be:	2300      	movs	r3, #0
 80034c0:	e054      	b.n	800356c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	089b      	lsrs	r3, r3, #2
 80034d0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00e      	beq.n	80034f8 <osThreadNew+0xd4>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	2b5b      	cmp	r3, #91	; 0x5b
 80034e0:	d90a      	bls.n	80034f8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d006      	beq.n	80034f8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <osThreadNew+0xd4>
        mem = 1;
 80034f2:	2301      	movs	r3, #1
 80034f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034f6:	e010      	b.n	800351a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10c      	bne.n	800351a <osThreadNew+0xf6>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d108      	bne.n	800351a <osThreadNew+0xf6>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d104      	bne.n	800351a <osThreadNew+0xf6>
          mem = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	62bb      	str	r3, [r7, #40]	; 0x28
 8003514:	e001      	b.n	800351a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003516:	2300      	movs	r3, #0
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800351a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351c:	2b01      	cmp	r3, #1
 800351e:	d110      	bne.n	8003542 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003528:	9202      	str	r2, [sp, #8]
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003534:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f001 f832 	bl	80045a0 <xTaskCreateStatic>
 800353c:	4603      	mov	r3, r0
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	e013      	b.n	800356a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	2b00      	cmp	r3, #0
 8003546:	d110      	bne.n	800356a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354a:	b29a      	uxth	r2, r3
 800354c:	f107 0314 	add.w	r3, r7, #20
 8003550:	9301      	str	r3, [sp, #4]
 8003552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f001 f879 	bl	8004652 <xTaskCreate>
 8003560:	4603      	mov	r3, r0
 8003562:	2b01      	cmp	r3, #1
 8003564:	d001      	beq.n	800356a <osThreadNew+0x146>
          hTask = NULL;
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800356a:	697b      	ldr	r3, [r7, #20]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3738      	adds	r7, #56	; 0x38
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	20000094 	.word	0x20000094

08003578 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800357e:	f3ef 8305 	mrs	r3, IPSR
 8003582:	60bb      	str	r3, [r7, #8]
  return(result);
 8003584:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10f      	bne.n	80035aa <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800358a:	f3ef 8310 	mrs	r3, PRIMASK
 800358e:	607b      	str	r3, [r7, #4]
  return(result);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <osThreadYield+0x32>
 8003596:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <osThreadYield+0x5c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d109      	bne.n	80035b2 <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800359e:	f3ef 8311 	mrs	r3, BASEPRI
 80035a2:	603b      	str	r3, [r7, #0]
  return(result);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <osThreadYield+0x3a>
    stat = osErrorISR;
 80035aa:	f06f 0305 	mvn.w	r3, #5
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	e009      	b.n	80035c6 <osThreadYield+0x4e>
  } else {
    stat = osOK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 80035b6:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <osThreadYield+0x60>)
 80035b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80035c6:	68fb      	ldr	r3, [r7, #12]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	20000094 	.word	0x20000094
 80035d8:	e000ed04 	.word	0xe000ed04

080035dc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08c      	sub	sp, #48	; 0x30
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035ec:	f3ef 8305 	mrs	r3, IPSR
 80035f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80035f2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d170      	bne.n	80036da <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035f8:	f3ef 8310 	mrs	r3, PRIMASK
 80035fc:	617b      	str	r3, [r7, #20]
  return(result);
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d16a      	bne.n	80036da <osMessageQueueNew+0xfe>
 8003604:	4b37      	ldr	r3, [pc, #220]	; (80036e4 <osMessageQueueNew+0x108>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d105      	bne.n	8003618 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800360c:	f3ef 8311 	mrs	r3, BASEPRI
 8003610:	613b      	str	r3, [r7, #16]
  return(result);
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d160      	bne.n	80036da <osMessageQueueNew+0xfe>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d05d      	beq.n	80036da <osMessageQueueNew+0xfe>
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d05a      	beq.n	80036da <osMessageQueueNew+0xfe>
    mem = -1;
 8003624:	f04f 33ff 	mov.w	r3, #4294967295
 8003628:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d029      	beq.n	8003684 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d012      	beq.n	800365e <osMessageQueueNew+0x82>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	2b4f      	cmp	r3, #79	; 0x4f
 800363e:	d90e      	bls.n	800365e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	695a      	ldr	r2, [r3, #20]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	fb01 f303 	mul.w	r3, r1, r3
 8003654:	429a      	cmp	r2, r3
 8003656:	d302      	bcc.n	800365e <osMessageQueueNew+0x82>
        mem = 1;
 8003658:	2301      	movs	r3, #1
 800365a:	623b      	str	r3, [r7, #32]
 800365c:	e014      	b.n	8003688 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d110      	bne.n	8003688 <osMessageQueueNew+0xac>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10c      	bne.n	8003688 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003672:	2b00      	cmp	r3, #0
 8003674:	d108      	bne.n	8003688 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d104      	bne.n	8003688 <osMessageQueueNew+0xac>
          mem = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	623b      	str	r3, [r7, #32]
 8003682:	e001      	b.n	8003688 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d10c      	bne.n	80036a8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6899      	ldr	r1, [r3, #8]
 8003696:	2300      	movs	r3, #0
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	460b      	mov	r3, r1
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 fa58 	bl	8003b54 <xQueueGenericCreateStatic>
 80036a4:	6278      	str	r0, [r7, #36]	; 0x24
 80036a6:	e008      	b.n	80036ba <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d105      	bne.n	80036ba <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80036ae:	2200      	movs	r2, #0
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 fac0 	bl	8003c38 <xQueueGenericCreate>
 80036b8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00c      	beq.n	80036da <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <osMessageQueueNew+0xf2>
        name = attr->name;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	e001      	b.n	80036d2 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80036d2:	69f9      	ldr	r1, [r7, #28]
 80036d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036d6:	f000 ff07 	bl	80044e8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3728      	adds	r7, #40	; 0x28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20000094 	.word	0x20000094

080036e8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08a      	sub	sp, #40	; 0x28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	4613      	mov	r3, r2
 80036f6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003700:	f3ef 8305 	mrs	r3, IPSR
 8003704:	61fb      	str	r3, [r7, #28]
  return(result);
 8003706:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10f      	bne.n	800372c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800370c:	f3ef 8310 	mrs	r3, PRIMASK
 8003710:	61bb      	str	r3, [r7, #24]
  return(result);
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d109      	bne.n	800372c <osMessageQueuePut+0x44>
 8003718:	4b2b      	ldr	r3, [pc, #172]	; (80037c8 <osMessageQueuePut+0xe0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b02      	cmp	r3, #2
 800371e:	d12e      	bne.n	800377e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003720:	f3ef 8311 	mrs	r3, BASEPRI
 8003724:	617b      	str	r3, [r7, #20]
  return(result);
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d028      	beq.n	800377e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <osMessageQueuePut+0x56>
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <osMessageQueuePut+0x56>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800373e:	f06f 0303 	mvn.w	r3, #3
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003744:	e039      	b.n	80037ba <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8003746:	2300      	movs	r3, #0
 8003748:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800374a:	f107 0210 	add.w	r2, r7, #16
 800374e:	2300      	movs	r3, #0
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	6a38      	ldr	r0, [r7, #32]
 8003754:	f000 fbca 	bl	8003eec <xQueueGenericSendFromISR>
 8003758:	4603      	mov	r3, r0
 800375a:	2b01      	cmp	r3, #1
 800375c:	d003      	beq.n	8003766 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800375e:	f06f 0302 	mvn.w	r3, #2
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003764:	e029      	b.n	80037ba <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d026      	beq.n	80037ba <osMessageQueuePut+0xd2>
 800376c:	4b17      	ldr	r3, [pc, #92]	; (80037cc <osMessageQueuePut+0xe4>)
 800376e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800377c:	e01d      	b.n	80037ba <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <osMessageQueuePut+0xa2>
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d103      	bne.n	8003792 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800378a:	f06f 0303 	mvn.w	r3, #3
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
 8003790:	e014      	b.n	80037bc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003792:	2300      	movs	r3, #0
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	6a38      	ldr	r0, [r7, #32]
 800379a:	f000 faad 	bl	8003cf8 <xQueueGenericSend>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d00b      	beq.n	80037bc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80037aa:	f06f 0301 	mvn.w	r3, #1
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
 80037b0:	e004      	b.n	80037bc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80037b2:	f06f 0302 	mvn.w	r3, #2
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
 80037b8:	e000      	b.n	80037bc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80037ba:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3728      	adds	r7, #40	; 0x28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000094 	.word	0x20000094
 80037cc:	e000ed04 	.word	0xe000ed04

080037d0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08a      	sub	sp, #40	; 0x28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
 80037dc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037e6:	f3ef 8305 	mrs	r3, IPSR
 80037ea:	61fb      	str	r3, [r7, #28]
  return(result);
 80037ec:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10f      	bne.n	8003812 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037f2:	f3ef 8310 	mrs	r3, PRIMASK
 80037f6:	61bb      	str	r3, [r7, #24]
  return(result);
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <osMessageQueueGet+0x42>
 80037fe:	4b2b      	ldr	r3, [pc, #172]	; (80038ac <osMessageQueueGet+0xdc>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b02      	cmp	r3, #2
 8003804:	d12e      	bne.n	8003864 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003806:	f3ef 8311 	mrs	r3, BASEPRI
 800380a:	617b      	str	r3, [r7, #20]
  return(result);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d028      	beq.n	8003864 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <osMessageQueueGet+0x54>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <osMessageQueueGet+0x54>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003824:	f06f 0303 	mvn.w	r3, #3
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800382a:	e038      	b.n	800389e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800382c:	2300      	movs	r3, #0
 800382e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003830:	f107 0310 	add.w	r3, r7, #16
 8003834:	461a      	mov	r2, r3
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	6a38      	ldr	r0, [r7, #32]
 800383a:	f000 fcc7 	bl	80041cc <xQueueReceiveFromISR>
 800383e:	4603      	mov	r3, r0
 8003840:	2b01      	cmp	r3, #1
 8003842:	d003      	beq.n	800384c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8003844:	f06f 0302 	mvn.w	r3, #2
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800384a:	e028      	b.n	800389e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d025      	beq.n	800389e <osMessageQueueGet+0xce>
 8003852:	4b17      	ldr	r3, [pc, #92]	; (80038b0 <osMessageQueueGet+0xe0>)
 8003854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003862:	e01c      	b.n	800389e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <osMessageQueueGet+0xa0>
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d103      	bne.n	8003878 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8003870:	f06f 0303 	mvn.w	r3, #3
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
 8003876:	e013      	b.n	80038a0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	68b9      	ldr	r1, [r7, #8]
 800387c:	6a38      	ldr	r0, [r7, #32]
 800387e:	f000 fbc9 	bl	8004014 <xQueueReceive>
 8003882:	4603      	mov	r3, r0
 8003884:	2b01      	cmp	r3, #1
 8003886:	d00b      	beq.n	80038a0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800388e:	f06f 0301 	mvn.w	r3, #1
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
 8003894:	e004      	b.n	80038a0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8003896:	f06f 0302 	mvn.w	r3, #2
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
 800389c:	e000      	b.n	80038a0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800389e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3728      	adds	r7, #40	; 0x28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000094 	.word	0x20000094
 80038b0:	e000ed04 	.word	0xe000ed04

080038b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4a07      	ldr	r2, [pc, #28]	; (80038e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80038c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	4a06      	ldr	r2, [pc, #24]	; (80038e4 <vApplicationGetIdleTaskMemory+0x30>)
 80038ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2280      	movs	r2, #128	; 0x80
 80038d0:	601a      	str	r2, [r3, #0]
}
 80038d2:	bf00      	nop
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	20000098 	.word	0x20000098
 80038e4:	200000f4 	.word	0x200000f4

080038e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4a07      	ldr	r2, [pc, #28]	; (8003914 <vApplicationGetTimerTaskMemory+0x2c>)
 80038f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	4a06      	ldr	r2, [pc, #24]	; (8003918 <vApplicationGetTimerTaskMemory+0x30>)
 80038fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003906:	601a      	str	r2, [r3, #0]
}
 8003908:	bf00      	nop
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	200002f4 	.word	0x200002f4
 8003918:	20000350 	.word	0x20000350

0800391c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f103 0208 	add.w	r2, r3, #8
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f04f 32ff 	mov.w	r2, #4294967295
 8003934:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f103 0208 	add.w	r2, r3, #8
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f103 0208 	add.w	r2, r3, #8
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003976:	b480      	push	{r7}
 8003978:	b085      	sub	sp, #20
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	601a      	str	r2, [r3, #0]
}
 80039b2:	bf00      	nop
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039be:	b480      	push	{r7}
 80039c0:	b085      	sub	sp, #20
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d4:	d103      	bne.n	80039de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	e00c      	b.n	80039f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3308      	adds	r3, #8
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	e002      	b.n	80039ec <vListInsert+0x2e>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d2f6      	bcs.n	80039e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	601a      	str	r2, [r3, #0]
}
 8003a24:	bf00      	nop
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6892      	ldr	r2, [r2, #8]
 8003a46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6852      	ldr	r2, [r2, #4]
 8003a50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d103      	bne.n	8003a64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	1e5a      	subs	r2, r3, #1
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d109      	bne.n	8003aac <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	60bb      	str	r3, [r7, #8]
 8003aaa:	e7fe      	b.n	8003aaa <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003aac:	f002 f85e 	bl	8005b6c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab8:	68f9      	ldr	r1, [r7, #12]
 8003aba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003abc:	fb01 f303 	mul.w	r3, r1, r3
 8003ac0:	441a      	add	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003adc:	3b01      	subs	r3, #1
 8003ade:	68f9      	ldr	r1, [r7, #12]
 8003ae0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ae2:	fb01 f303 	mul.w	r3, r1, r3
 8003ae6:	441a      	add	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	22ff      	movs	r2, #255	; 0xff
 8003af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	22ff      	movs	r2, #255	; 0xff
 8003af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d114      	bne.n	8003b2c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d01a      	beq.n	8003b40 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	3310      	adds	r3, #16
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f001 f960 	bl	8004dd4 <xTaskRemoveFromEventList>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d012      	beq.n	8003b40 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b1a:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <xQueueGenericReset+0xcc>)
 8003b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	f3bf 8f6f 	isb	sy
 8003b2a:	e009      	b.n	8003b40 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3310      	adds	r3, #16
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff fef3 	bl	800391c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3324      	adds	r3, #36	; 0x24
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff feee 	bl	800391c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003b40:	f002 f842 	bl	8005bc8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b44:	2301      	movs	r3, #1
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	e000ed04 	.word	0xe000ed04

08003b54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08e      	sub	sp, #56	; 0x38
 8003b58:	af02      	add	r7, sp, #8
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d109      	bne.n	8003b7c <xQueueGenericCreateStatic+0x28>
 8003b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6c:	f383 8811 	msr	BASEPRI, r3
 8003b70:	f3bf 8f6f 	isb	sy
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b7a:	e7fe      	b.n	8003b7a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d109      	bne.n	8003b96 <xQueueGenericCreateStatic+0x42>
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
 8003b94:	e7fe      	b.n	8003b94 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <xQueueGenericCreateStatic+0x4e>
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <xQueueGenericCreateStatic+0x52>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <xQueueGenericCreateStatic+0x54>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d109      	bne.n	8003bc0 <xQueueGenericCreateStatic+0x6c>
 8003bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb0:	f383 8811 	msr	BASEPRI, r3
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	623b      	str	r3, [r7, #32]
 8003bbe:	e7fe      	b.n	8003bbe <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d102      	bne.n	8003bcc <xQueueGenericCreateStatic+0x78>
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <xQueueGenericCreateStatic+0x7c>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <xQueueGenericCreateStatic+0x7e>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <xQueueGenericCreateStatic+0x96>
 8003bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	61fb      	str	r3, [r7, #28]
 8003be8:	e7fe      	b.n	8003be8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003bea:	2350      	movs	r3, #80	; 0x50
 8003bec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2b50      	cmp	r3, #80	; 0x50
 8003bf2:	d009      	beq.n	8003c08 <xQueueGenericCreateStatic+0xb4>
 8003bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf8:	f383 8811 	msr	BASEPRI, r3
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	e7fe      	b.n	8003c06 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00d      	beq.n	8003c2e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	4613      	mov	r3, r2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	68b9      	ldr	r1, [r7, #8]
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 f842 	bl	8003cb2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3730      	adds	r7, #48	; 0x30
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08a      	sub	sp, #40	; 0x28
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	4613      	mov	r3, r2
 8003c44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d109      	bne.n	8003c60 <xQueueGenericCreate+0x28>
 8003c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c50:	f383 8811 	msr	BASEPRI, r3
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	e7fe      	b.n	8003c5e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d102      	bne.n	8003c6c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61fb      	str	r3, [r7, #28]
 8003c6a:	e004      	b.n	8003c76 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	fb02 f303 	mul.w	r3, r2, r3
 8003c74:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	3350      	adds	r3, #80	; 0x50
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f002 f890 	bl	8005da0 <pvPortMalloc>
 8003c80:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00f      	beq.n	8003ca8 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	3350      	adds	r3, #80	; 0x50
 8003c8c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c96:	79fa      	ldrb	r2, [r7, #7]
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	68b9      	ldr	r1, [r7, #8]
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 f805 	bl	8003cb2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003ca8:	69bb      	ldr	r3, [r7, #24]
	}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3720      	adds	r7, #32
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	60f8      	str	r0, [r7, #12]
 8003cba:	60b9      	str	r1, [r7, #8]
 8003cbc:	607a      	str	r2, [r7, #4]
 8003cbe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d103      	bne.n	8003cce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	e002      	b.n	8003cd4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	69b8      	ldr	r0, [r7, #24]
 8003ce4:	f7ff fece 	bl	8003a84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	78fa      	ldrb	r2, [r7, #3]
 8003cec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003cf0:	bf00      	nop
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08e      	sub	sp, #56	; 0x38
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
 8003d04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d06:	2300      	movs	r3, #0
 8003d08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d109      	bne.n	8003d28 <xQueueGenericSend+0x30>
 8003d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d18:	f383 8811 	msr	BASEPRI, r3
 8003d1c:	f3bf 8f6f 	isb	sy
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d26:	e7fe      	b.n	8003d26 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d103      	bne.n	8003d36 <xQueueGenericSend+0x3e>
 8003d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <xQueueGenericSend+0x42>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <xQueueGenericSend+0x44>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d109      	bne.n	8003d54 <xQueueGenericSend+0x5c>
 8003d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d44:	f383 8811 	msr	BASEPRI, r3
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
 8003d52:	e7fe      	b.n	8003d52 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d103      	bne.n	8003d62 <xQueueGenericSend+0x6a>
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <xQueueGenericSend+0x6e>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <xQueueGenericSend+0x70>
 8003d66:	2300      	movs	r3, #0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d109      	bne.n	8003d80 <xQueueGenericSend+0x88>
 8003d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	623b      	str	r3, [r7, #32]
 8003d7e:	e7fe      	b.n	8003d7e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d80:	f001 f9e4 	bl	800514c <xTaskGetSchedulerState>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d102      	bne.n	8003d90 <xQueueGenericSend+0x98>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <xQueueGenericSend+0x9c>
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <xQueueGenericSend+0x9e>
 8003d94:	2300      	movs	r3, #0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d109      	bne.n	8003dae <xQueueGenericSend+0xb6>
 8003d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9e:	f383 8811 	msr	BASEPRI, r3
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	61fb      	str	r3, [r7, #28]
 8003dac:	e7fe      	b.n	8003dac <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dae:	f001 fedd 	bl	8005b6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d302      	bcc.n	8003dc4 <xQueueGenericSend+0xcc>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d129      	bne.n	8003e18 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dca:	f000 fa7c 	bl	80042c6 <prvCopyDataToQueue>
 8003dce:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d010      	beq.n	8003dfa <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dda:	3324      	adds	r3, #36	; 0x24
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fff9 	bl	8004dd4 <xTaskRemoveFromEventList>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d013      	beq.n	8003e10 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003de8:	4b3f      	ldr	r3, [pc, #252]	; (8003ee8 <xQueueGenericSend+0x1f0>)
 8003dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	e00a      	b.n	8003e10 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d007      	beq.n	8003e10 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e00:	4b39      	ldr	r3, [pc, #228]	; (8003ee8 <xQueueGenericSend+0x1f0>)
 8003e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e10:	f001 feda 	bl	8005bc8 <vPortExitCritical>
				return pdPASS;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e063      	b.n	8003ee0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d103      	bne.n	8003e26 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e1e:	f001 fed3 	bl	8005bc8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e22:	2300      	movs	r3, #0
 8003e24:	e05c      	b.n	8003ee0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d106      	bne.n	8003e3a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e2c:	f107 0314 	add.w	r3, r7, #20
 8003e30:	4618      	mov	r0, r3
 8003e32:	f001 f831 	bl	8004e98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e36:	2301      	movs	r3, #1
 8003e38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e3a:	f001 fec5 	bl	8005bc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e3e:	f000 fda7 	bl	8004990 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e42:	f001 fe93 	bl	8005b6c <vPortEnterCritical>
 8003e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e4c:	b25b      	sxtb	r3, r3
 8003e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e52:	d103      	bne.n	8003e5c <xQueueGenericSend+0x164>
 8003e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e62:	b25b      	sxtb	r3, r3
 8003e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e68:	d103      	bne.n	8003e72 <xQueueGenericSend+0x17a>
 8003e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e72:	f001 fea9 	bl	8005bc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e76:	1d3a      	adds	r2, r7, #4
 8003e78:	f107 0314 	add.w	r3, r7, #20
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f001 f820 	bl	8004ec4 <xTaskCheckForTimeOut>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d124      	bne.n	8003ed4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e8c:	f000 fb13 	bl	80044b6 <prvIsQueueFull>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d018      	beq.n	8003ec8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e98:	3310      	adds	r3, #16
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 ff4a 	bl	8004d38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003ea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ea6:	f000 fa9e 	bl	80043e6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003eaa:	f000 fd7f 	bl	80049ac <xTaskResumeAll>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f47f af7c 	bne.w	8003dae <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003eb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <xQueueGenericSend+0x1f0>)
 8003eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	e772      	b.n	8003dae <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eca:	f000 fa8c 	bl	80043e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ece:	f000 fd6d 	bl	80049ac <xTaskResumeAll>
 8003ed2:	e76c      	b.n	8003dae <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ed6:	f000 fa86 	bl	80043e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003eda:	f000 fd67 	bl	80049ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ede:	2300      	movs	r3, #0
		}
	}
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3738      	adds	r7, #56	; 0x38
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	e000ed04 	.word	0xe000ed04

08003eec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08e      	sub	sp, #56	; 0x38
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d109      	bne.n	8003f18 <xQueueGenericSendFromISR+0x2c>
 8003f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
 8003f16:	e7fe      	b.n	8003f16 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d103      	bne.n	8003f26 <xQueueGenericSendFromISR+0x3a>
 8003f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <xQueueGenericSendFromISR+0x3e>
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <xQueueGenericSendFromISR+0x40>
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d109      	bne.n	8003f44 <xQueueGenericSendFromISR+0x58>
 8003f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	623b      	str	r3, [r7, #32]
 8003f42:	e7fe      	b.n	8003f42 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d103      	bne.n	8003f52 <xQueueGenericSendFromISR+0x66>
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d101      	bne.n	8003f56 <xQueueGenericSendFromISR+0x6a>
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <xQueueGenericSendFromISR+0x6c>
 8003f56:	2300      	movs	r3, #0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d109      	bne.n	8003f70 <xQueueGenericSendFromISR+0x84>
 8003f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	61fb      	str	r3, [r7, #28]
 8003f6e:	e7fe      	b.n	8003f6e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f70:	f001 fed8 	bl	8005d24 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003f74:	f3ef 8211 	mrs	r2, BASEPRI
 8003f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7c:	f383 8811 	msr	BASEPRI, r3
 8003f80:	f3bf 8f6f 	isb	sy
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	61ba      	str	r2, [r7, #24]
 8003f8a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003f8c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d302      	bcc.n	8003fa2 <xQueueGenericSendFromISR+0xb6>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d12c      	bne.n	8003ffc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	68b9      	ldr	r1, [r7, #8]
 8003fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fb2:	f000 f988 	bl	80042c6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003fb6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbe:	d112      	bne.n	8003fe6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d016      	beq.n	8003ff6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fca:	3324      	adds	r3, #36	; 0x24
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 ff01 	bl	8004dd4 <xTaskRemoveFromEventList>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00e      	beq.n	8003ff6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00b      	beq.n	8003ff6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	e007      	b.n	8003ff6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003fe6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003fea:	3301      	adds	r3, #1
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	b25a      	sxtb	r2, r3
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003ffa:	e001      	b.n	8004000 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8004000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004002:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800400a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800400c:	4618      	mov	r0, r3
 800400e:	3738      	adds	r7, #56	; 0x38
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08c      	sub	sp, #48	; 0x30
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004020:	2300      	movs	r3, #0
 8004022:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402a:	2b00      	cmp	r3, #0
 800402c:	d109      	bne.n	8004042 <xQueueReceive+0x2e>
	__asm volatile
 800402e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	623b      	str	r3, [r7, #32]
 8004040:	e7fe      	b.n	8004040 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d103      	bne.n	8004050 <xQueueReceive+0x3c>
 8004048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <xQueueReceive+0x40>
 8004050:	2301      	movs	r3, #1
 8004052:	e000      	b.n	8004056 <xQueueReceive+0x42>
 8004054:	2300      	movs	r3, #0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <xQueueReceive+0x5a>
 800405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	61fb      	str	r3, [r7, #28]
 800406c:	e7fe      	b.n	800406c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800406e:	f001 f86d 	bl	800514c <xTaskGetSchedulerState>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d102      	bne.n	800407e <xQueueReceive+0x6a>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <xQueueReceive+0x6e>
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <xQueueReceive+0x70>
 8004082:	2300      	movs	r3, #0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d109      	bne.n	800409c <xQueueReceive+0x88>
 8004088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	61bb      	str	r3, [r7, #24]
 800409a:	e7fe      	b.n	800409a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800409c:	f001 fd66 	bl	8005b6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d01f      	beq.n	80040ec <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040ac:	68b9      	ldr	r1, [r7, #8]
 80040ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040b0:	f000 f973 	bl	800439a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	1e5a      	subs	r2, r3, #1
 80040b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ba:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00f      	beq.n	80040e4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c6:	3310      	adds	r3, #16
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 fe83 	bl	8004dd4 <xTaskRemoveFromEventList>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d007      	beq.n	80040e4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80040d4:	4b3c      	ldr	r3, [pc, #240]	; (80041c8 <xQueueReceive+0x1b4>)
 80040d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80040e4:	f001 fd70 	bl	8005bc8 <vPortExitCritical>
				return pdPASS;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e069      	b.n	80041c0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d103      	bne.n	80040fa <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040f2:	f001 fd69 	bl	8005bc8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80040f6:	2300      	movs	r3, #0
 80040f8:	e062      	b.n	80041c0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d106      	bne.n	800410e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004100:	f107 0310 	add.w	r3, r7, #16
 8004104:	4618      	mov	r0, r3
 8004106:	f000 fec7 	bl	8004e98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800410a:	2301      	movs	r3, #1
 800410c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800410e:	f001 fd5b 	bl	8005bc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004112:	f000 fc3d 	bl	8004990 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004116:	f001 fd29 	bl	8005b6c <vPortEnterCritical>
 800411a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004120:	b25b      	sxtb	r3, r3
 8004122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004126:	d103      	bne.n	8004130 <xQueueReceive+0x11c>
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004136:	b25b      	sxtb	r3, r3
 8004138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413c:	d103      	bne.n	8004146 <xQueueReceive+0x132>
 800413e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004146:	f001 fd3f 	bl	8005bc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800414a:	1d3a      	adds	r2, r7, #4
 800414c:	f107 0310 	add.w	r3, r7, #16
 8004150:	4611      	mov	r1, r2
 8004152:	4618      	mov	r0, r3
 8004154:	f000 feb6 	bl	8004ec4 <xTaskCheckForTimeOut>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d123      	bne.n	80041a6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800415e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004160:	f000 f993 	bl	800448a <prvIsQueueEmpty>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d017      	beq.n	800419a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416c:	3324      	adds	r3, #36	; 0x24
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	4611      	mov	r1, r2
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fde0 	bl	8004d38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800417a:	f000 f934 	bl	80043e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800417e:	f000 fc15 	bl	80049ac <xTaskResumeAll>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d189      	bne.n	800409c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004188:	4b0f      	ldr	r3, [pc, #60]	; (80041c8 <xQueueReceive+0x1b4>)
 800418a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	e780      	b.n	800409c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800419a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800419c:	f000 f923 	bl	80043e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041a0:	f000 fc04 	bl	80049ac <xTaskResumeAll>
 80041a4:	e77a      	b.n	800409c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80041a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041a8:	f000 f91d 	bl	80043e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041ac:	f000 fbfe 	bl	80049ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041b2:	f000 f96a 	bl	800448a <prvIsQueueEmpty>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f43f af6f 	beq.w	800409c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80041be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3730      	adds	r7, #48	; 0x30
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	e000ed04 	.word	0xe000ed04

080041cc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08e      	sub	sp, #56	; 0x38
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d109      	bne.n	80041f6 <xQueueReceiveFromISR+0x2a>
 80041e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	623b      	str	r3, [r7, #32]
 80041f4:	e7fe      	b.n	80041f4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d103      	bne.n	8004204 <xQueueReceiveFromISR+0x38>
 80041fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <xQueueReceiveFromISR+0x3c>
 8004204:	2301      	movs	r3, #1
 8004206:	e000      	b.n	800420a <xQueueReceiveFromISR+0x3e>
 8004208:	2300      	movs	r3, #0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <xQueueReceiveFromISR+0x56>
 800420e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	61fb      	str	r3, [r7, #28]
 8004220:	e7fe      	b.n	8004220 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004222:	f001 fd7f 	bl	8005d24 <vPortValidateInterruptPriority>
	__asm volatile
 8004226:	f3ef 8211 	mrs	r2, BASEPRI
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	61ba      	str	r2, [r7, #24]
 800423c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800423e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004240:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424a:	2b00      	cmp	r3, #0
 800424c:	d02f      	beq.n	80042ae <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004250:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004258:	68b9      	ldr	r1, [r7, #8]
 800425a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800425c:	f000 f89d 	bl	800439a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004262:	1e5a      	subs	r2, r3, #1
 8004264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004266:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004268:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004270:	d112      	bne.n	8004298 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d016      	beq.n	80042a8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427c:	3310      	adds	r3, #16
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fda8 	bl	8004dd4 <xTaskRemoveFromEventList>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00e      	beq.n	80042a8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00b      	beq.n	80042a8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	e007      	b.n	80042a8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800429c:	3301      	adds	r3, #1
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	b25a      	sxtb	r2, r3
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80042a8:	2301      	movs	r3, #1
 80042aa:	637b      	str	r3, [r7, #52]	; 0x34
 80042ac:	e001      	b.n	80042b2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	637b      	str	r3, [r7, #52]	; 0x34
 80042b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3738      	adds	r7, #56	; 0x38
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b086      	sub	sp, #24
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042da:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10d      	bne.n	8004300 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d14d      	bne.n	8004388 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 ff49 	bl	8005188 <xTaskPriorityDisinherit>
 80042f6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	605a      	str	r2, [r3, #4]
 80042fe:	e043      	b.n	8004388 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d119      	bne.n	800433a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6898      	ldr	r0, [r3, #8]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	461a      	mov	r2, r3
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	f001 ff45 	bl	80061a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	441a      	add	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	429a      	cmp	r2, r3
 800432e:	d32b      	bcc.n	8004388 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	609a      	str	r2, [r3, #8]
 8004338:	e026      	b.n	8004388 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	68d8      	ldr	r0, [r3, #12]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	461a      	mov	r2, r3
 8004344:	68b9      	ldr	r1, [r7, #8]
 8004346:	f001 ff2b 	bl	80061a0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	425b      	negs	r3, r3
 8004354:	441a      	add	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d207      	bcs.n	8004376 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	425b      	negs	r3, r3
 8004370:	441a      	add	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b02      	cmp	r3, #2
 800437a:	d105      	bne.n	8004388 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	3b01      	subs	r3, #1
 8004386:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004390:	697b      	ldr	r3, [r7, #20]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b082      	sub	sp, #8
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d018      	beq.n	80043de <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	441a      	add	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d303      	bcc.n	80043ce <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68d9      	ldr	r1, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	461a      	mov	r2, r3
 80043d8:	6838      	ldr	r0, [r7, #0]
 80043da:	f001 fee1 	bl	80061a0 <memcpy>
	}
}
 80043de:	bf00      	nop
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b084      	sub	sp, #16
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80043ee:	f001 fbbd 	bl	8005b6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043f8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043fa:	e011      	b.n	8004420 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	2b00      	cmp	r3, #0
 8004402:	d012      	beq.n	800442a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3324      	adds	r3, #36	; 0x24
 8004408:	4618      	mov	r0, r3
 800440a:	f000 fce3 	bl	8004dd4 <xTaskRemoveFromEventList>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004414:	f000 fdb6 	bl	8004f84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	3b01      	subs	r3, #1
 800441c:	b2db      	uxtb	r3, r3
 800441e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004424:	2b00      	cmp	r3, #0
 8004426:	dce9      	bgt.n	80043fc <prvUnlockQueue+0x16>
 8004428:	e000      	b.n	800442c <prvUnlockQueue+0x46>
					break;
 800442a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	22ff      	movs	r2, #255	; 0xff
 8004430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004434:	f001 fbc8 	bl	8005bc8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004438:	f001 fb98 	bl	8005b6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004442:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004444:	e011      	b.n	800446a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d012      	beq.n	8004474 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3310      	adds	r3, #16
 8004452:	4618      	mov	r0, r3
 8004454:	f000 fcbe 	bl	8004dd4 <xTaskRemoveFromEventList>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800445e:	f000 fd91 	bl	8004f84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004462:	7bbb      	ldrb	r3, [r7, #14]
 8004464:	3b01      	subs	r3, #1
 8004466:	b2db      	uxtb	r3, r3
 8004468:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800446a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800446e:	2b00      	cmp	r3, #0
 8004470:	dce9      	bgt.n	8004446 <prvUnlockQueue+0x60>
 8004472:	e000      	b.n	8004476 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004474:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	22ff      	movs	r2, #255	; 0xff
 800447a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800447e:	f001 fba3 	bl	8005bc8 <vPortExitCritical>
}
 8004482:	bf00      	nop
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004492:	f001 fb6b 	bl	8005b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449a:	2b00      	cmp	r3, #0
 800449c:	d102      	bne.n	80044a4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800449e:	2301      	movs	r3, #1
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	e001      	b.n	80044a8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044a8:	f001 fb8e 	bl	8005bc8 <vPortExitCritical>

	return xReturn;
 80044ac:	68fb      	ldr	r3, [r7, #12]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b084      	sub	sp, #16
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044be:	f001 fb55 	bl	8005b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d102      	bne.n	80044d4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80044ce:	2301      	movs	r3, #1
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	e001      	b.n	80044d8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80044d4:	2300      	movs	r3, #0
 80044d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044d8:	f001 fb76 	bl	8005bc8 <vPortExitCritical>

	return xReturn;
 80044dc:	68fb      	ldr	r3, [r7, #12]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044f2:	2300      	movs	r3, #0
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	e014      	b.n	8004522 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80044f8:	4a0e      	ldr	r2, [pc, #56]	; (8004534 <vQueueAddToRegistry+0x4c>)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10b      	bne.n	800451c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004504:	490b      	ldr	r1, [pc, #44]	; (8004534 <vQueueAddToRegistry+0x4c>)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800450e:	4a09      	ldr	r2, [pc, #36]	; (8004534 <vQueueAddToRegistry+0x4c>)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	4413      	add	r3, r2
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800451a:	e005      	b.n	8004528 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	3301      	adds	r3, #1
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2b07      	cmp	r3, #7
 8004526:	d9e7      	bls.n	80044f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004528:	bf00      	nop
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	20001a84 	.word	0x20001a84

08004538 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004548:	f001 fb10 	bl	8005b6c <vPortEnterCritical>
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004552:	b25b      	sxtb	r3, r3
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004558:	d103      	bne.n	8004562 <vQueueWaitForMessageRestricted+0x2a>
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004568:	b25b      	sxtb	r3, r3
 800456a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456e:	d103      	bne.n	8004578 <vQueueWaitForMessageRestricted+0x40>
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004578:	f001 fb26 	bl	8005bc8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	2b00      	cmp	r3, #0
 8004582:	d106      	bne.n	8004592 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	3324      	adds	r3, #36	; 0x24
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	68b9      	ldr	r1, [r7, #8]
 800458c:	4618      	mov	r0, r3
 800458e:	f000 fbf7 	bl	8004d80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004592:	6978      	ldr	r0, [r7, #20]
 8004594:	f7ff ff27 	bl	80043e6 <prvUnlockQueue>
	}
 8004598:	bf00      	nop
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08e      	sub	sp, #56	; 0x38
 80045a4:	af04      	add	r7, sp, #16
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80045ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d109      	bne.n	80045c8 <xTaskCreateStatic+0x28>
	__asm volatile
 80045b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	623b      	str	r3, [r7, #32]
 80045c6:	e7fe      	b.n	80045c6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80045c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <xTaskCreateStatic+0x42>
 80045ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d2:	f383 8811 	msr	BASEPRI, r3
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	61fb      	str	r3, [r7, #28]
 80045e0:	e7fe      	b.n	80045e0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80045e2:	235c      	movs	r3, #92	; 0x5c
 80045e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	2b5c      	cmp	r3, #92	; 0x5c
 80045ea:	d009      	beq.n	8004600 <xTaskCreateStatic+0x60>
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	e7fe      	b.n	80045fe <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004602:	2b00      	cmp	r3, #0
 8004604:	d01e      	beq.n	8004644 <xTaskCreateStatic+0xa4>
 8004606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004608:	2b00      	cmp	r3, #0
 800460a:	d01b      	beq.n	8004644 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800460c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004614:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	2202      	movs	r2, #2
 800461a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800461e:	2300      	movs	r3, #0
 8004620:	9303      	str	r3, [sp, #12]
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	9302      	str	r3, [sp, #8]
 8004626:	f107 0314 	add.w	r3, r7, #20
 800462a:	9301      	str	r3, [sp, #4]
 800462c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	68b9      	ldr	r1, [r7, #8]
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f850 	bl	80046dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800463c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800463e:	f000 f8d3 	bl	80047e8 <prvAddNewTaskToReadyList>
 8004642:	e001      	b.n	8004648 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004644:	2300      	movs	r3, #0
 8004646:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004648:	697b      	ldr	r3, [r7, #20]
	}
 800464a:	4618      	mov	r0, r3
 800464c:	3728      	adds	r7, #40	; 0x28
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004652:	b580      	push	{r7, lr}
 8004654:	b08c      	sub	sp, #48	; 0x30
 8004656:	af04      	add	r7, sp, #16
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	603b      	str	r3, [r7, #0]
 800465e:	4613      	mov	r3, r2
 8004660:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004662:	88fb      	ldrh	r3, [r7, #6]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4618      	mov	r0, r3
 8004668:	f001 fb9a 	bl	8005da0 <pvPortMalloc>
 800466c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00e      	beq.n	8004692 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004674:	205c      	movs	r0, #92	; 0x5c
 8004676:	f001 fb93 	bl	8005da0 <pvPortMalloc>
 800467a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	631a      	str	r2, [r3, #48]	; 0x30
 8004688:	e005      	b.n	8004696 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800468a:	6978      	ldr	r0, [r7, #20]
 800468c:	f001 fc4a 	bl	8005f24 <vPortFree>
 8004690:	e001      	b.n	8004696 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004692:	2300      	movs	r3, #0
 8004694:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d017      	beq.n	80046cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046a4:	88fa      	ldrh	r2, [r7, #6]
 80046a6:	2300      	movs	r3, #0
 80046a8:	9303      	str	r3, [sp, #12]
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	9302      	str	r3, [sp, #8]
 80046ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b0:	9301      	str	r3, [sp, #4]
 80046b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68b9      	ldr	r1, [r7, #8]
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 f80e 	bl	80046dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046c0:	69f8      	ldr	r0, [r7, #28]
 80046c2:	f000 f891 	bl	80047e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80046c6:	2301      	movs	r3, #1
 80046c8:	61bb      	str	r3, [r7, #24]
 80046ca:	e002      	b.n	80046d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80046cc:	f04f 33ff 	mov.w	r3, #4294967295
 80046d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80046d2:	69bb      	ldr	r3, [r7, #24]
	}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3720      	adds	r7, #32
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	461a      	mov	r2, r3
 80046f4:	21a5      	movs	r1, #165	; 0xa5
 80046f6:	f001 fd5e 	bl	80061b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004704:	3b01      	subs	r3, #1
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	f023 0307 	bic.w	r3, r3, #7
 8004712:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	2b00      	cmp	r3, #0
 800471c:	d009      	beq.n	8004732 <prvInitialiseNewTask+0x56>
 800471e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	e7fe      	b.n	8004730 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004732:	2300      	movs	r3, #0
 8004734:	61fb      	str	r3, [r7, #28]
 8004736:	e012      	b.n	800475e <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	4413      	add	r3, r2
 800473e:	7819      	ldrb	r1, [r3, #0]
 8004740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	4413      	add	r3, r2
 8004746:	3334      	adds	r3, #52	; 0x34
 8004748:	460a      	mov	r2, r1
 800474a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	4413      	add	r3, r2
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d006      	beq.n	8004766 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	3301      	adds	r3, #1
 800475c:	61fb      	str	r3, [r7, #28]
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	2b0f      	cmp	r3, #15
 8004762:	d9e9      	bls.n	8004738 <prvInitialiseNewTask+0x5c>
 8004764:	e000      	b.n	8004768 <prvInitialiseNewTask+0x8c>
		{
			break;
 8004766:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	2b37      	cmp	r3, #55	; 0x37
 8004774:	d901      	bls.n	800477a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004776:	2337      	movs	r3, #55	; 0x37
 8004778:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800477a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800477e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004784:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004788:	2200      	movs	r2, #0
 800478a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800478c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478e:	3304      	adds	r3, #4
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff f8e3 	bl	800395c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004798:	3318      	adds	r3, #24
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff f8de 	bl	800395c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047b4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80047b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b8:	2200      	movs	r2, #0
 80047ba:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	68f9      	ldr	r1, [r7, #12]
 80047c8:	69b8      	ldr	r0, [r7, #24]
 80047ca:	f001 f8a7 	bl	800591c <pxPortInitialiseStack>
 80047ce:	4602      	mov	r2, r0
 80047d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80047d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047e0:	bf00      	nop
 80047e2:	3720      	adds	r7, #32
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80047f0:	f001 f9bc 	bl	8005b6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80047f4:	4b2d      	ldr	r3, [pc, #180]	; (80048ac <prvAddNewTaskToReadyList+0xc4>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3301      	adds	r3, #1
 80047fa:	4a2c      	ldr	r2, [pc, #176]	; (80048ac <prvAddNewTaskToReadyList+0xc4>)
 80047fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80047fe:	4b2c      	ldr	r3, [pc, #176]	; (80048b0 <prvAddNewTaskToReadyList+0xc8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d109      	bne.n	800481a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004806:	4a2a      	ldr	r2, [pc, #168]	; (80048b0 <prvAddNewTaskToReadyList+0xc8>)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800480c:	4b27      	ldr	r3, [pc, #156]	; (80048ac <prvAddNewTaskToReadyList+0xc4>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d110      	bne.n	8004836 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004814:	f000 fbda 	bl	8004fcc <prvInitialiseTaskLists>
 8004818:	e00d      	b.n	8004836 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800481a:	4b26      	ldr	r3, [pc, #152]	; (80048b4 <prvAddNewTaskToReadyList+0xcc>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d109      	bne.n	8004836 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004822:	4b23      	ldr	r3, [pc, #140]	; (80048b0 <prvAddNewTaskToReadyList+0xc8>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	429a      	cmp	r2, r3
 800482e:	d802      	bhi.n	8004836 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004830:	4a1f      	ldr	r2, [pc, #124]	; (80048b0 <prvAddNewTaskToReadyList+0xc8>)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004836:	4b20      	ldr	r3, [pc, #128]	; (80048b8 <prvAddNewTaskToReadyList+0xd0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3301      	adds	r3, #1
 800483c:	4a1e      	ldr	r2, [pc, #120]	; (80048b8 <prvAddNewTaskToReadyList+0xd0>)
 800483e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004840:	4b1d      	ldr	r3, [pc, #116]	; (80048b8 <prvAddNewTaskToReadyList+0xd0>)
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484c:	4b1b      	ldr	r3, [pc, #108]	; (80048bc <prvAddNewTaskToReadyList+0xd4>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	429a      	cmp	r2, r3
 8004852:	d903      	bls.n	800485c <prvAddNewTaskToReadyList+0x74>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004858:	4a18      	ldr	r2, [pc, #96]	; (80048bc <prvAddNewTaskToReadyList+0xd4>)
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004860:	4613      	mov	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4a15      	ldr	r2, [pc, #84]	; (80048c0 <prvAddNewTaskToReadyList+0xd8>)
 800486a:	441a      	add	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3304      	adds	r3, #4
 8004870:	4619      	mov	r1, r3
 8004872:	4610      	mov	r0, r2
 8004874:	f7ff f87f 	bl	8003976 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004878:	f001 f9a6 	bl	8005bc8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800487c:	4b0d      	ldr	r3, [pc, #52]	; (80048b4 <prvAddNewTaskToReadyList+0xcc>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00e      	beq.n	80048a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004884:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <prvAddNewTaskToReadyList+0xc8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488e:	429a      	cmp	r2, r3
 8004890:	d207      	bcs.n	80048a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004892:	4b0c      	ldr	r3, [pc, #48]	; (80048c4 <prvAddNewTaskToReadyList+0xdc>)
 8004894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000c24 	.word	0x20000c24
 80048b0:	20000750 	.word	0x20000750
 80048b4:	20000c30 	.word	0x20000c30
 80048b8:	20000c40 	.word	0x20000c40
 80048bc:	20000c2c 	.word	0x20000c2c
 80048c0:	20000754 	.word	0x20000754
 80048c4:	e000ed04 	.word	0xe000ed04

080048c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08a      	sub	sp, #40	; 0x28
 80048cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80048d6:	463a      	mov	r2, r7
 80048d8:	1d39      	adds	r1, r7, #4
 80048da:	f107 0308 	add.w	r3, r7, #8
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fe ffe8 	bl	80038b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80048e4:	6839      	ldr	r1, [r7, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	9202      	str	r2, [sp, #8]
 80048ec:	9301      	str	r3, [sp, #4]
 80048ee:	2300      	movs	r3, #0
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	2300      	movs	r3, #0
 80048f4:	460a      	mov	r2, r1
 80048f6:	4920      	ldr	r1, [pc, #128]	; (8004978 <vTaskStartScheduler+0xb0>)
 80048f8:	4820      	ldr	r0, [pc, #128]	; (800497c <vTaskStartScheduler+0xb4>)
 80048fa:	f7ff fe51 	bl	80045a0 <xTaskCreateStatic>
 80048fe:	4602      	mov	r2, r0
 8004900:	4b1f      	ldr	r3, [pc, #124]	; (8004980 <vTaskStartScheduler+0xb8>)
 8004902:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004904:	4b1e      	ldr	r3, [pc, #120]	; (8004980 <vTaskStartScheduler+0xb8>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800490c:	2301      	movs	r3, #1
 800490e:	617b      	str	r3, [r7, #20]
 8004910:	e001      	b.n	8004916 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d102      	bne.n	8004922 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800491c:	f000 fcf4 	bl	8005308 <xTimerCreateTimerTask>
 8004920:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d115      	bne.n	8004954 <vTaskStartScheduler+0x8c>
 8004928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492c:	f383 8811 	msr	BASEPRI, r3
 8004930:	f3bf 8f6f 	isb	sy
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800493a:	4b12      	ldr	r3, [pc, #72]	; (8004984 <vTaskStartScheduler+0xbc>)
 800493c:	f04f 32ff 	mov.w	r2, #4294967295
 8004940:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004942:	4b11      	ldr	r3, [pc, #68]	; (8004988 <vTaskStartScheduler+0xc0>)
 8004944:	2201      	movs	r2, #1
 8004946:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004948:	4b10      	ldr	r3, [pc, #64]	; (800498c <vTaskStartScheduler+0xc4>)
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800494e:	f001 f86f 	bl	8005a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004952:	e00d      	b.n	8004970 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495a:	d109      	bne.n	8004970 <vTaskStartScheduler+0xa8>
 800495c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	e7fe      	b.n	800496e <vTaskStartScheduler+0xa6>
}
 8004970:	bf00      	nop
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	08006a30 	.word	0x08006a30
 800497c:	08004f9d 	.word	0x08004f9d
 8004980:	20000c48 	.word	0x20000c48
 8004984:	20000c44 	.word	0x20000c44
 8004988:	20000c30 	.word	0x20000c30
 800498c:	20000c28 	.word	0x20000c28

08004990 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004994:	4b04      	ldr	r3, [pc, #16]	; (80049a8 <vTaskSuspendAll+0x18>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3301      	adds	r3, #1
 800499a:	4a03      	ldr	r2, [pc, #12]	; (80049a8 <vTaskSuspendAll+0x18>)
 800499c:	6013      	str	r3, [r2, #0]
}
 800499e:	bf00      	nop
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	20000c4c 	.word	0x20000c4c

080049ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80049b6:	2300      	movs	r3, #0
 80049b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80049ba:	4b41      	ldr	r3, [pc, #260]	; (8004ac0 <xTaskResumeAll+0x114>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d109      	bne.n	80049d6 <xTaskResumeAll+0x2a>
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	603b      	str	r3, [r7, #0]
 80049d4:	e7fe      	b.n	80049d4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80049d6:	f001 f8c9 	bl	8005b6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80049da:	4b39      	ldr	r3, [pc, #228]	; (8004ac0 <xTaskResumeAll+0x114>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3b01      	subs	r3, #1
 80049e0:	4a37      	ldr	r2, [pc, #220]	; (8004ac0 <xTaskResumeAll+0x114>)
 80049e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049e4:	4b36      	ldr	r3, [pc, #216]	; (8004ac0 <xTaskResumeAll+0x114>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d162      	bne.n	8004ab2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80049ec:	4b35      	ldr	r3, [pc, #212]	; (8004ac4 <xTaskResumeAll+0x118>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d05e      	beq.n	8004ab2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049f4:	e02f      	b.n	8004a56 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80049f6:	4b34      	ldr	r3, [pc, #208]	; (8004ac8 <xTaskResumeAll+0x11c>)
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	3318      	adds	r3, #24
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff f814 	bl	8003a30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff f80f 	bl	8003a30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a16:	4b2d      	ldr	r3, [pc, #180]	; (8004acc <xTaskResumeAll+0x120>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d903      	bls.n	8004a26 <xTaskResumeAll+0x7a>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a22:	4a2a      	ldr	r2, [pc, #168]	; (8004acc <xTaskResumeAll+0x120>)
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4a27      	ldr	r2, [pc, #156]	; (8004ad0 <xTaskResumeAll+0x124>)
 8004a34:	441a      	add	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	3304      	adds	r3, #4
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	f7fe ff9a 	bl	8003976 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a46:	4b23      	ldr	r3, [pc, #140]	; (8004ad4 <xTaskResumeAll+0x128>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d302      	bcc.n	8004a56 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004a50:	4b21      	ldr	r3, [pc, #132]	; (8004ad8 <xTaskResumeAll+0x12c>)
 8004a52:	2201      	movs	r2, #1
 8004a54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a56:	4b1c      	ldr	r3, [pc, #112]	; (8004ac8 <xTaskResumeAll+0x11c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1cb      	bne.n	80049f6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a64:	f000 fb4c 	bl	8005100 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004a68:	4b1c      	ldr	r3, [pc, #112]	; (8004adc <xTaskResumeAll+0x130>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d010      	beq.n	8004a96 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a74:	f000 f846 	bl	8004b04 <xTaskIncrementTick>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004a7e:	4b16      	ldr	r3, [pc, #88]	; (8004ad8 <xTaskResumeAll+0x12c>)
 8004a80:	2201      	movs	r2, #1
 8004a82:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1f1      	bne.n	8004a74 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004a90:	4b12      	ldr	r3, [pc, #72]	; (8004adc <xTaskResumeAll+0x130>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a96:	4b10      	ldr	r3, [pc, #64]	; (8004ad8 <xTaskResumeAll+0x12c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d009      	beq.n	8004ab2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004aa2:	4b0f      	ldr	r3, [pc, #60]	; (8004ae0 <xTaskResumeAll+0x134>)
 8004aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ab2:	f001 f889 	bl	8005bc8 <vPortExitCritical>

	return xAlreadyYielded;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	20000c4c 	.word	0x20000c4c
 8004ac4:	20000c24 	.word	0x20000c24
 8004ac8:	20000be4 	.word	0x20000be4
 8004acc:	20000c2c 	.word	0x20000c2c
 8004ad0:	20000754 	.word	0x20000754
 8004ad4:	20000750 	.word	0x20000750
 8004ad8:	20000c38 	.word	0x20000c38
 8004adc:	20000c34 	.word	0x20000c34
 8004ae0:	e000ed04 	.word	0xe000ed04

08004ae4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004aea:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <xTaskGetTickCount+0x1c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004af0:	687b      	ldr	r3, [r7, #4]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	20000c28 	.word	0x20000c28

08004b04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b0e:	4b51      	ldr	r3, [pc, #324]	; (8004c54 <xTaskIncrementTick+0x150>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f040 808d 	bne.w	8004c32 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b18:	4b4f      	ldr	r3, [pc, #316]	; (8004c58 <xTaskIncrementTick+0x154>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b20:	4a4d      	ldr	r2, [pc, #308]	; (8004c58 <xTaskIncrementTick+0x154>)
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d11f      	bne.n	8004b6c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b2c:	4b4b      	ldr	r3, [pc, #300]	; (8004c5c <xTaskIncrementTick+0x158>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d009      	beq.n	8004b4a <xTaskIncrementTick+0x46>
 8004b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3a:	f383 8811 	msr	BASEPRI, r3
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	f3bf 8f4f 	dsb	sy
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	e7fe      	b.n	8004b48 <xTaskIncrementTick+0x44>
 8004b4a:	4b44      	ldr	r3, [pc, #272]	; (8004c5c <xTaskIncrementTick+0x158>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	4b43      	ldr	r3, [pc, #268]	; (8004c60 <xTaskIncrementTick+0x15c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a41      	ldr	r2, [pc, #260]	; (8004c5c <xTaskIncrementTick+0x158>)
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	4a41      	ldr	r2, [pc, #260]	; (8004c60 <xTaskIncrementTick+0x15c>)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	4b41      	ldr	r3, [pc, #260]	; (8004c64 <xTaskIncrementTick+0x160>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3301      	adds	r3, #1
 8004b64:	4a3f      	ldr	r2, [pc, #252]	; (8004c64 <xTaskIncrementTick+0x160>)
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	f000 faca 	bl	8005100 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b6c:	4b3e      	ldr	r3, [pc, #248]	; (8004c68 <xTaskIncrementTick+0x164>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d34e      	bcc.n	8004c14 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b76:	4b39      	ldr	r3, [pc, #228]	; (8004c5c <xTaskIncrementTick+0x158>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <xTaskIncrementTick+0x80>
 8004b80:	2301      	movs	r3, #1
 8004b82:	e000      	b.n	8004b86 <xTaskIncrementTick+0x82>
 8004b84:	2300      	movs	r3, #0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d004      	beq.n	8004b94 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b8a:	4b37      	ldr	r3, [pc, #220]	; (8004c68 <xTaskIncrementTick+0x164>)
 8004b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b90:	601a      	str	r2, [r3, #0]
					break;
 8004b92:	e03f      	b.n	8004c14 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b94:	4b31      	ldr	r3, [pc, #196]	; (8004c5c <xTaskIncrementTick+0x158>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d203      	bcs.n	8004bb4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004bac:	4a2e      	ldr	r2, [pc, #184]	; (8004c68 <xTaskIncrementTick+0x164>)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6013      	str	r3, [r2, #0]
						break;
 8004bb2:	e02f      	b.n	8004c14 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fe ff39 	bl	8003a30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d004      	beq.n	8004bd0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	3318      	adds	r3, #24
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fe ff30 	bl	8003a30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd4:	4b25      	ldr	r3, [pc, #148]	; (8004c6c <xTaskIncrementTick+0x168>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d903      	bls.n	8004be4 <xTaskIncrementTick+0xe0>
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	4a22      	ldr	r2, [pc, #136]	; (8004c6c <xTaskIncrementTick+0x168>)
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be8:	4613      	mov	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4a1f      	ldr	r2, [pc, #124]	; (8004c70 <xTaskIncrementTick+0x16c>)
 8004bf2:	441a      	add	r2, r3
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	f7fe febb 	bl	8003976 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c04:	4b1b      	ldr	r3, [pc, #108]	; (8004c74 <xTaskIncrementTick+0x170>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d3b3      	bcc.n	8004b76 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c12:	e7b0      	b.n	8004b76 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c14:	4b17      	ldr	r3, [pc, #92]	; (8004c74 <xTaskIncrementTick+0x170>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c1a:	4915      	ldr	r1, [pc, #84]	; (8004c70 <xTaskIncrementTick+0x16c>)
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d907      	bls.n	8004c3c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	e004      	b.n	8004c3c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004c32:	4b11      	ldr	r3, [pc, #68]	; (8004c78 <xTaskIncrementTick+0x174>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3301      	adds	r3, #1
 8004c38:	4a0f      	ldr	r2, [pc, #60]	; (8004c78 <xTaskIncrementTick+0x174>)
 8004c3a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004c3c:	4b0f      	ldr	r3, [pc, #60]	; (8004c7c <xTaskIncrementTick+0x178>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004c44:	2301      	movs	r3, #1
 8004c46:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004c48:	697b      	ldr	r3, [r7, #20]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20000c4c 	.word	0x20000c4c
 8004c58:	20000c28 	.word	0x20000c28
 8004c5c:	20000bdc 	.word	0x20000bdc
 8004c60:	20000be0 	.word	0x20000be0
 8004c64:	20000c3c 	.word	0x20000c3c
 8004c68:	20000c44 	.word	0x20000c44
 8004c6c:	20000c2c 	.word	0x20000c2c
 8004c70:	20000754 	.word	0x20000754
 8004c74:	20000750 	.word	0x20000750
 8004c78:	20000c34 	.word	0x20000c34
 8004c7c:	20000c38 	.word	0x20000c38

08004c80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c86:	4b27      	ldr	r3, [pc, #156]	; (8004d24 <vTaskSwitchContext+0xa4>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c8e:	4b26      	ldr	r3, [pc, #152]	; (8004d28 <vTaskSwitchContext+0xa8>)
 8004c90:	2201      	movs	r2, #1
 8004c92:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c94:	e040      	b.n	8004d18 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004c96:	4b24      	ldr	r3, [pc, #144]	; (8004d28 <vTaskSwitchContext+0xa8>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004c9c:	4b23      	ldr	r3, [pc, #140]	; (8004d2c <vTaskSwitchContext+0xac>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	e00f      	b.n	8004cc4 <vTaskSwitchContext+0x44>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d109      	bne.n	8004cbe <vTaskSwitchContext+0x3e>
 8004caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cae:	f383 8811 	msr	BASEPRI, r3
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	607b      	str	r3, [r7, #4]
 8004cbc:	e7fe      	b.n	8004cbc <vTaskSwitchContext+0x3c>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	491a      	ldr	r1, [pc, #104]	; (8004d30 <vTaskSwitchContext+0xb0>)
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d0e5      	beq.n	8004ca4 <vTaskSwitchContext+0x24>
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4a13      	ldr	r2, [pc, #76]	; (8004d30 <vTaskSwitchContext+0xb0>)
 8004ce4:	4413      	add	r3, r2
 8004ce6:	60bb      	str	r3, [r7, #8]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	605a      	str	r2, [r3, #4]
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	3308      	adds	r3, #8
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d104      	bne.n	8004d08 <vTaskSwitchContext+0x88>
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	605a      	str	r2, [r3, #4]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	4a09      	ldr	r2, [pc, #36]	; (8004d34 <vTaskSwitchContext+0xb4>)
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	4a06      	ldr	r2, [pc, #24]	; (8004d2c <vTaskSwitchContext+0xac>)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6013      	str	r3, [r2, #0]
}
 8004d18:	bf00      	nop
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	20000c4c 	.word	0x20000c4c
 8004d28:	20000c38 	.word	0x20000c38
 8004d2c:	20000c2c 	.word	0x20000c2c
 8004d30:	20000754 	.word	0x20000754
 8004d34:	20000750 	.word	0x20000750

08004d38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d109      	bne.n	8004d5c <vTaskPlaceOnEventList+0x24>
 8004d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	e7fe      	b.n	8004d5a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d5c:	4b07      	ldr	r3, [pc, #28]	; (8004d7c <vTaskPlaceOnEventList+0x44>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3318      	adds	r3, #24
 8004d62:	4619      	mov	r1, r3
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f7fe fe2a 	bl	80039be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	6838      	ldr	r0, [r7, #0]
 8004d6e:	f000 fa77 	bl	8005260 <prvAddCurrentTaskToDelayedList>
}
 8004d72:	bf00      	nop
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000750 	.word	0x20000750

08004d80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d109      	bne.n	8004da6 <vTaskPlaceOnEventListRestricted+0x26>
 8004d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d96:	f383 8811 	msr	BASEPRI, r3
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	e7fe      	b.n	8004da4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004da6:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <vTaskPlaceOnEventListRestricted+0x50>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	3318      	adds	r3, #24
 8004dac:	4619      	mov	r1, r3
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f7fe fde1 	bl	8003976 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d002      	beq.n	8004dc0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004dba:	f04f 33ff 	mov.w	r3, #4294967295
 8004dbe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004dc0:	6879      	ldr	r1, [r7, #4]
 8004dc2:	68b8      	ldr	r0, [r7, #8]
 8004dc4:	f000 fa4c 	bl	8005260 <prvAddCurrentTaskToDelayedList>
	}
 8004dc8:	bf00      	nop
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	20000750 	.word	0x20000750

08004dd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d109      	bne.n	8004dfe <xTaskRemoveFromEventList+0x2a>
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	e7fe      	b.n	8004dfc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	3318      	adds	r3, #24
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7fe fe14 	bl	8003a30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e08:	4b1d      	ldr	r3, [pc, #116]	; (8004e80 <xTaskRemoveFromEventList+0xac>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d11d      	bne.n	8004e4c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	3304      	adds	r3, #4
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fe fe0b 	bl	8003a30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1e:	4b19      	ldr	r3, [pc, #100]	; (8004e84 <xTaskRemoveFromEventList+0xb0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d903      	bls.n	8004e2e <xTaskRemoveFromEventList+0x5a>
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2a:	4a16      	ldr	r2, [pc, #88]	; (8004e84 <xTaskRemoveFromEventList+0xb0>)
 8004e2c:	6013      	str	r3, [r2, #0]
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e32:	4613      	mov	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4a13      	ldr	r2, [pc, #76]	; (8004e88 <xTaskRemoveFromEventList+0xb4>)
 8004e3c:	441a      	add	r2, r3
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	3304      	adds	r3, #4
 8004e42:	4619      	mov	r1, r3
 8004e44:	4610      	mov	r0, r2
 8004e46:	f7fe fd96 	bl	8003976 <vListInsertEnd>
 8004e4a:	e005      	b.n	8004e58 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	3318      	adds	r3, #24
 8004e50:	4619      	mov	r1, r3
 8004e52:	480e      	ldr	r0, [pc, #56]	; (8004e8c <xTaskRemoveFromEventList+0xb8>)
 8004e54:	f7fe fd8f 	bl	8003976 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5c:	4b0c      	ldr	r3, [pc, #48]	; (8004e90 <xTaskRemoveFromEventList+0xbc>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d905      	bls.n	8004e72 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004e66:	2301      	movs	r3, #1
 8004e68:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004e6a:	4b0a      	ldr	r3, [pc, #40]	; (8004e94 <xTaskRemoveFromEventList+0xc0>)
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	e001      	b.n	8004e76 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004e76:	697b      	ldr	r3, [r7, #20]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	20000c4c 	.word	0x20000c4c
 8004e84:	20000c2c 	.word	0x20000c2c
 8004e88:	20000754 	.word	0x20000754
 8004e8c:	20000be4 	.word	0x20000be4
 8004e90:	20000750 	.word	0x20000750
 8004e94:	20000c38 	.word	0x20000c38

08004e98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ea0:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <vTaskInternalSetTimeOutState+0x24>)
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ea8:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <vTaskInternalSetTimeOutState+0x28>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	605a      	str	r2, [r3, #4]
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	20000c3c 	.word	0x20000c3c
 8004ec0:	20000c28 	.word	0x20000c28

08004ec4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d109      	bne.n	8004ee8 <xTaskCheckForTimeOut+0x24>
 8004ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	613b      	str	r3, [r7, #16]
 8004ee6:	e7fe      	b.n	8004ee6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d109      	bne.n	8004f02 <xTaskCheckForTimeOut+0x3e>
 8004eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	e7fe      	b.n	8004f00 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004f02:	f000 fe33 	bl	8005b6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f06:	4b1d      	ldr	r3, [pc, #116]	; (8004f7c <xTaskCheckForTimeOut+0xb8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1e:	d102      	bne.n	8004f26 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004f20:	2300      	movs	r3, #0
 8004f22:	61fb      	str	r3, [r7, #28]
 8004f24:	e023      	b.n	8004f6e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	4b15      	ldr	r3, [pc, #84]	; (8004f80 <xTaskCheckForTimeOut+0xbc>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d007      	beq.n	8004f42 <xTaskCheckForTimeOut+0x7e>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d302      	bcc.n	8004f42 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	61fb      	str	r3, [r7, #28]
 8004f40:	e015      	b.n	8004f6e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d20b      	bcs.n	8004f64 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	1ad2      	subs	r2, r2, r3
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff ff9d 	bl	8004e98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61fb      	str	r3, [r7, #28]
 8004f62:	e004      	b.n	8004f6e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2200      	movs	r2, #0
 8004f68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004f6e:	f000 fe2b 	bl	8005bc8 <vPortExitCritical>

	return xReturn;
 8004f72:	69fb      	ldr	r3, [r7, #28]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3720      	adds	r7, #32
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	20000c28 	.word	0x20000c28
 8004f80:	20000c3c 	.word	0x20000c3c

08004f84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f88:	4b03      	ldr	r3, [pc, #12]	; (8004f98 <vTaskMissedYield+0x14>)
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]
}
 8004f8e:	bf00      	nop
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	20000c38 	.word	0x20000c38

08004f9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004fa4:	f000 f852 	bl	800504c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004fa8:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <prvIdleTask+0x28>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d9f9      	bls.n	8004fa4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004fb0:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <prvIdleTask+0x2c>)
 8004fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004fc0:	e7f0      	b.n	8004fa4 <prvIdleTask+0x8>
 8004fc2:	bf00      	nop
 8004fc4:	20000754 	.word	0x20000754
 8004fc8:	e000ed04 	.word	0xe000ed04

08004fcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	607b      	str	r3, [r7, #4]
 8004fd6:	e00c      	b.n	8004ff2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4a12      	ldr	r2, [pc, #72]	; (800502c <prvInitialiseTaskLists+0x60>)
 8004fe4:	4413      	add	r3, r2
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fe fc98 	bl	800391c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	607b      	str	r3, [r7, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b37      	cmp	r3, #55	; 0x37
 8004ff6:	d9ef      	bls.n	8004fd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ff8:	480d      	ldr	r0, [pc, #52]	; (8005030 <prvInitialiseTaskLists+0x64>)
 8004ffa:	f7fe fc8f 	bl	800391c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ffe:	480d      	ldr	r0, [pc, #52]	; (8005034 <prvInitialiseTaskLists+0x68>)
 8005000:	f7fe fc8c 	bl	800391c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005004:	480c      	ldr	r0, [pc, #48]	; (8005038 <prvInitialiseTaskLists+0x6c>)
 8005006:	f7fe fc89 	bl	800391c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800500a:	480c      	ldr	r0, [pc, #48]	; (800503c <prvInitialiseTaskLists+0x70>)
 800500c:	f7fe fc86 	bl	800391c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005010:	480b      	ldr	r0, [pc, #44]	; (8005040 <prvInitialiseTaskLists+0x74>)
 8005012:	f7fe fc83 	bl	800391c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005016:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <prvInitialiseTaskLists+0x78>)
 8005018:	4a05      	ldr	r2, [pc, #20]	; (8005030 <prvInitialiseTaskLists+0x64>)
 800501a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800501c:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <prvInitialiseTaskLists+0x7c>)
 800501e:	4a05      	ldr	r2, [pc, #20]	; (8005034 <prvInitialiseTaskLists+0x68>)
 8005020:	601a      	str	r2, [r3, #0]
}
 8005022:	bf00      	nop
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000754 	.word	0x20000754
 8005030:	20000bb4 	.word	0x20000bb4
 8005034:	20000bc8 	.word	0x20000bc8
 8005038:	20000be4 	.word	0x20000be4
 800503c:	20000bf8 	.word	0x20000bf8
 8005040:	20000c10 	.word	0x20000c10
 8005044:	20000bdc 	.word	0x20000bdc
 8005048:	20000be0 	.word	0x20000be0

0800504c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005052:	e019      	b.n	8005088 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005054:	f000 fd8a 	bl	8005b6c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005058:	4b0f      	ldr	r3, [pc, #60]	; (8005098 <prvCheckTasksWaitingTermination+0x4c>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3304      	adds	r3, #4
 8005064:	4618      	mov	r0, r3
 8005066:	f7fe fce3 	bl	8003a30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800506a:	4b0c      	ldr	r3, [pc, #48]	; (800509c <prvCheckTasksWaitingTermination+0x50>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3b01      	subs	r3, #1
 8005070:	4a0a      	ldr	r2, [pc, #40]	; (800509c <prvCheckTasksWaitingTermination+0x50>)
 8005072:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005074:	4b0a      	ldr	r3, [pc, #40]	; (80050a0 <prvCheckTasksWaitingTermination+0x54>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3b01      	subs	r3, #1
 800507a:	4a09      	ldr	r2, [pc, #36]	; (80050a0 <prvCheckTasksWaitingTermination+0x54>)
 800507c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800507e:	f000 fda3 	bl	8005bc8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f80e 	bl	80050a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005088:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <prvCheckTasksWaitingTermination+0x54>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e1      	bne.n	8005054 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005090:	bf00      	nop
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	20000bf8 	.word	0x20000bf8
 800509c:	20000c24 	.word	0x20000c24
 80050a0:	20000c0c 	.word	0x20000c0c

080050a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d108      	bne.n	80050c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 ff32 	bl	8005f24 <vPortFree>
				vPortFree( pxTCB );
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 ff2f 	bl	8005f24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80050c6:	e017      	b.n	80050f8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d103      	bne.n	80050da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 ff26 	bl	8005f24 <vPortFree>
	}
 80050d8:	e00e      	b.n	80050f8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d009      	beq.n	80050f8 <prvDeleteTCB+0x54>
 80050e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	e7fe      	b.n	80050f6 <prvDeleteTCB+0x52>
	}
 80050f8:	bf00      	nop
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005106:	4b0f      	ldr	r3, [pc, #60]	; (8005144 <prvResetNextTaskUnblockTime+0x44>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <prvResetNextTaskUnblockTime+0x14>
 8005110:	2301      	movs	r3, #1
 8005112:	e000      	b.n	8005116 <prvResetNextTaskUnblockTime+0x16>
 8005114:	2300      	movs	r3, #0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d004      	beq.n	8005124 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800511a:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <prvResetNextTaskUnblockTime+0x48>)
 800511c:	f04f 32ff 	mov.w	r2, #4294967295
 8005120:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005122:	e008      	b.n	8005136 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005124:	4b07      	ldr	r3, [pc, #28]	; (8005144 <prvResetNextTaskUnblockTime+0x44>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	4a05      	ldr	r2, [pc, #20]	; (8005148 <prvResetNextTaskUnblockTime+0x48>)
 8005134:	6013      	str	r3, [r2, #0]
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	20000bdc 	.word	0x20000bdc
 8005148:	20000c44 	.word	0x20000c44

0800514c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005152:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <xTaskGetSchedulerState+0x34>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d102      	bne.n	8005160 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800515a:	2301      	movs	r3, #1
 800515c:	607b      	str	r3, [r7, #4]
 800515e:	e008      	b.n	8005172 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005160:	4b08      	ldr	r3, [pc, #32]	; (8005184 <xTaskGetSchedulerState+0x38>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d102      	bne.n	800516e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005168:	2302      	movs	r3, #2
 800516a:	607b      	str	r3, [r7, #4]
 800516c:	e001      	b.n	8005172 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800516e:	2300      	movs	r3, #0
 8005170:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005172:	687b      	ldr	r3, [r7, #4]
	}
 8005174:	4618      	mov	r0, r3
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	20000c30 	.word	0x20000c30
 8005184:	20000c4c 	.word	0x20000c4c

08005188 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005194:	2300      	movs	r3, #0
 8005196:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d054      	beq.n	8005248 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800519e:	4b2d      	ldr	r3, [pc, #180]	; (8005254 <xTaskPriorityDisinherit+0xcc>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d009      	beq.n	80051bc <xTaskPriorityDisinherit+0x34>
 80051a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	60fb      	str	r3, [r7, #12]
 80051ba:	e7fe      	b.n	80051ba <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d109      	bne.n	80051d8 <xTaskPriorityDisinherit+0x50>
 80051c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	60bb      	str	r3, [r7, #8]
 80051d6:	e7fe      	b.n	80051d6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051dc:	1e5a      	subs	r2, r3, #1
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d02c      	beq.n	8005248 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d128      	bne.n	8005248 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	3304      	adds	r3, #4
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fe fc18 	bl	8003a30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005218:	4b0f      	ldr	r3, [pc, #60]	; (8005258 <xTaskPriorityDisinherit+0xd0>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d903      	bls.n	8005228 <xTaskPriorityDisinherit+0xa0>
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005224:	4a0c      	ldr	r2, [pc, #48]	; (8005258 <xTaskPriorityDisinherit+0xd0>)
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522c:	4613      	mov	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4a09      	ldr	r2, [pc, #36]	; (800525c <xTaskPriorityDisinherit+0xd4>)
 8005236:	441a      	add	r2, r3
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	3304      	adds	r3, #4
 800523c:	4619      	mov	r1, r3
 800523e:	4610      	mov	r0, r2
 8005240:	f7fe fb99 	bl	8003976 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005244:	2301      	movs	r3, #1
 8005246:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005248:	697b      	ldr	r3, [r7, #20]
	}
 800524a:	4618      	mov	r0, r3
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	20000750 	.word	0x20000750
 8005258:	20000c2c 	.word	0x20000c2c
 800525c:	20000754 	.word	0x20000754

08005260 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800526a:	4b21      	ldr	r3, [pc, #132]	; (80052f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005270:	4b20      	ldr	r3, [pc, #128]	; (80052f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3304      	adds	r3, #4
 8005276:	4618      	mov	r0, r3
 8005278:	f7fe fbda 	bl	8003a30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005282:	d10a      	bne.n	800529a <prvAddCurrentTaskToDelayedList+0x3a>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d007      	beq.n	800529a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800528a:	4b1a      	ldr	r3, [pc, #104]	; (80052f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3304      	adds	r3, #4
 8005290:	4619      	mov	r1, r3
 8005292:	4819      	ldr	r0, [pc, #100]	; (80052f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005294:	f7fe fb6f 	bl	8003976 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005298:	e026      	b.n	80052e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4413      	add	r3, r2
 80052a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052a2:	4b14      	ldr	r3, [pc, #80]	; (80052f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d209      	bcs.n	80052c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052b2:	4b12      	ldr	r3, [pc, #72]	; (80052fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	4b0f      	ldr	r3, [pc, #60]	; (80052f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3304      	adds	r3, #4
 80052bc:	4619      	mov	r1, r3
 80052be:	4610      	mov	r0, r2
 80052c0:	f7fe fb7d 	bl	80039be <vListInsert>
}
 80052c4:	e010      	b.n	80052e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052c6:	4b0e      	ldr	r3, [pc, #56]	; (8005300 <prvAddCurrentTaskToDelayedList+0xa0>)
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3304      	adds	r3, #4
 80052d0:	4619      	mov	r1, r3
 80052d2:	4610      	mov	r0, r2
 80052d4:	f7fe fb73 	bl	80039be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80052d8:	4b0a      	ldr	r3, [pc, #40]	; (8005304 <prvAddCurrentTaskToDelayedList+0xa4>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d202      	bcs.n	80052e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80052e2:	4a08      	ldr	r2, [pc, #32]	; (8005304 <prvAddCurrentTaskToDelayedList+0xa4>)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	6013      	str	r3, [r2, #0]
}
 80052e8:	bf00      	nop
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	20000c28 	.word	0x20000c28
 80052f4:	20000750 	.word	0x20000750
 80052f8:	20000c10 	.word	0x20000c10
 80052fc:	20000be0 	.word	0x20000be0
 8005300:	20000bdc 	.word	0x20000bdc
 8005304:	20000c44 	.word	0x20000c44

08005308 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b08a      	sub	sp, #40	; 0x28
 800530c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800530e:	2300      	movs	r3, #0
 8005310:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005312:	f000 fac3 	bl	800589c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005316:	4b1c      	ldr	r3, [pc, #112]	; (8005388 <xTimerCreateTimerTask+0x80>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d021      	beq.n	8005362 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005322:	2300      	movs	r3, #0
 8005324:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005326:	1d3a      	adds	r2, r7, #4
 8005328:	f107 0108 	add.w	r1, r7, #8
 800532c:	f107 030c 	add.w	r3, r7, #12
 8005330:	4618      	mov	r0, r3
 8005332:	f7fe fad9 	bl	80038e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	9202      	str	r2, [sp, #8]
 800533e:	9301      	str	r3, [sp, #4]
 8005340:	2302      	movs	r3, #2
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	2300      	movs	r3, #0
 8005346:	460a      	mov	r2, r1
 8005348:	4910      	ldr	r1, [pc, #64]	; (800538c <xTimerCreateTimerTask+0x84>)
 800534a:	4811      	ldr	r0, [pc, #68]	; (8005390 <xTimerCreateTimerTask+0x88>)
 800534c:	f7ff f928 	bl	80045a0 <xTaskCreateStatic>
 8005350:	4602      	mov	r2, r0
 8005352:	4b10      	ldr	r3, [pc, #64]	; (8005394 <xTimerCreateTimerTask+0x8c>)
 8005354:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005356:	4b0f      	ldr	r3, [pc, #60]	; (8005394 <xTimerCreateTimerTask+0x8c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800535e:	2301      	movs	r3, #1
 8005360:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d109      	bne.n	800537c <xTimerCreateTimerTask+0x74>
 8005368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536c:	f383 8811 	msr	BASEPRI, r3
 8005370:	f3bf 8f6f 	isb	sy
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	613b      	str	r3, [r7, #16]
 800537a:	e7fe      	b.n	800537a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800537c:	697b      	ldr	r3, [r7, #20]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20000c80 	.word	0x20000c80
 800538c:	08006a38 	.word	0x08006a38
 8005390:	080054b1 	.word	0x080054b1
 8005394:	20000c84 	.word	0x20000c84

08005398 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b08a      	sub	sp, #40	; 0x28
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d109      	bne.n	80053c4 <xTimerGenericCommand+0x2c>
 80053b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	623b      	str	r3, [r7, #32]
 80053c2:	e7fe      	b.n	80053c2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80053c4:	4b19      	ldr	r3, [pc, #100]	; (800542c <xTimerGenericCommand+0x94>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d02a      	beq.n	8005422 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	2b05      	cmp	r3, #5
 80053dc:	dc18      	bgt.n	8005410 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80053de:	f7ff feb5 	bl	800514c <xTaskGetSchedulerState>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d109      	bne.n	80053fc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80053e8:	4b10      	ldr	r3, [pc, #64]	; (800542c <xTimerGenericCommand+0x94>)
 80053ea:	6818      	ldr	r0, [r3, #0]
 80053ec:	f107 0110 	add.w	r1, r7, #16
 80053f0:	2300      	movs	r3, #0
 80053f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053f4:	f7fe fc80 	bl	8003cf8 <xQueueGenericSend>
 80053f8:	6278      	str	r0, [r7, #36]	; 0x24
 80053fa:	e012      	b.n	8005422 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80053fc:	4b0b      	ldr	r3, [pc, #44]	; (800542c <xTimerGenericCommand+0x94>)
 80053fe:	6818      	ldr	r0, [r3, #0]
 8005400:	f107 0110 	add.w	r1, r7, #16
 8005404:	2300      	movs	r3, #0
 8005406:	2200      	movs	r2, #0
 8005408:	f7fe fc76 	bl	8003cf8 <xQueueGenericSend>
 800540c:	6278      	str	r0, [r7, #36]	; 0x24
 800540e:	e008      	b.n	8005422 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005410:	4b06      	ldr	r3, [pc, #24]	; (800542c <xTimerGenericCommand+0x94>)
 8005412:	6818      	ldr	r0, [r3, #0]
 8005414:	f107 0110 	add.w	r1, r7, #16
 8005418:	2300      	movs	r3, #0
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	f7fe fd66 	bl	8003eec <xQueueGenericSendFromISR>
 8005420:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005424:	4618      	mov	r0, r3
 8005426:	3728      	adds	r7, #40	; 0x28
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	20000c80 	.word	0x20000c80

08005430 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b088      	sub	sp, #32
 8005434:	af02      	add	r7, sp, #8
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800543a:	4b1c      	ldr	r3, [pc, #112]	; (80054ac <prvProcessExpiredTimer+0x7c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	3304      	adds	r3, #4
 8005448:	4618      	mov	r0, r3
 800544a:	f7fe faf1 	bl	8003a30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d121      	bne.n	800549a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	699a      	ldr	r2, [r3, #24]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	18d1      	adds	r1, r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	6978      	ldr	r0, [r7, #20]
 8005464:	f000 f8c8 	bl	80055f8 <prvInsertTimerInActiveList>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d015      	beq.n	800549a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800546e:	2300      	movs	r3, #0
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	2300      	movs	r3, #0
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	2100      	movs	r1, #0
 8005478:	6978      	ldr	r0, [r7, #20]
 800547a:	f7ff ff8d 	bl	8005398 <xTimerGenericCommand>
 800547e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d109      	bne.n	800549a <prvProcessExpiredTimer+0x6a>
 8005486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	e7fe      	b.n	8005498 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	6978      	ldr	r0, [r7, #20]
 80054a0:	4798      	blx	r3
}
 80054a2:	bf00      	nop
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000c78 	.word	0x20000c78

080054b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054b8:	f107 0308 	add.w	r3, r7, #8
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 f857 	bl	8005570 <prvGetNextExpireTime>
 80054c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4619      	mov	r1, r3
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 f803 	bl	80054d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80054ce:	f000 f8d5 	bl	800567c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054d2:	e7f1      	b.n	80054b8 <prvTimerTask+0x8>

080054d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80054de:	f7ff fa57 	bl	8004990 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054e2:	f107 0308 	add.w	r3, r7, #8
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 f866 	bl	80055b8 <prvSampleTimeNow>
 80054ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d130      	bne.n	8005556 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10a      	bne.n	8005510 <prvProcessTimerOrBlockTask+0x3c>
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d806      	bhi.n	8005510 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005502:	f7ff fa53 	bl	80049ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005506:	68f9      	ldr	r1, [r7, #12]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7ff ff91 	bl	8005430 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800550e:	e024      	b.n	800555a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d008      	beq.n	8005528 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005516:	4b13      	ldr	r3, [pc, #76]	; (8005564 <prvProcessTimerOrBlockTask+0x90>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	bf0c      	ite	eq
 8005520:	2301      	moveq	r3, #1
 8005522:	2300      	movne	r3, #0
 8005524:	b2db      	uxtb	r3, r3
 8005526:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005528:	4b0f      	ldr	r3, [pc, #60]	; (8005568 <prvProcessTimerOrBlockTask+0x94>)
 800552a:	6818      	ldr	r0, [r3, #0]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	4619      	mov	r1, r3
 8005536:	f7fe ffff 	bl	8004538 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800553a:	f7ff fa37 	bl	80049ac <xTaskResumeAll>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10a      	bne.n	800555a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005544:	4b09      	ldr	r3, [pc, #36]	; (800556c <prvProcessTimerOrBlockTask+0x98>)
 8005546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	f3bf 8f6f 	isb	sy
}
 8005554:	e001      	b.n	800555a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005556:	f7ff fa29 	bl	80049ac <xTaskResumeAll>
}
 800555a:	bf00      	nop
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	20000c7c 	.word	0x20000c7c
 8005568:	20000c80 	.word	0x20000c80
 800556c:	e000ed04 	.word	0xe000ed04

08005570 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005578:	4b0e      	ldr	r3, [pc, #56]	; (80055b4 <prvGetNextExpireTime+0x44>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	bf0c      	ite	eq
 8005582:	2301      	moveq	r3, #1
 8005584:	2300      	movne	r3, #0
 8005586:	b2db      	uxtb	r3, r3
 8005588:	461a      	mov	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d105      	bne.n	80055a2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005596:	4b07      	ldr	r3, [pc, #28]	; (80055b4 <prvGetNextExpireTime+0x44>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	e001      	b.n	80055a6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80055a6:	68fb      	ldr	r3, [r7, #12]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	20000c78 	.word	0x20000c78

080055b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80055c0:	f7ff fa90 	bl	8004ae4 <xTaskGetTickCount>
 80055c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80055c6:	4b0b      	ldr	r3, [pc, #44]	; (80055f4 <prvSampleTimeNow+0x3c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d205      	bcs.n	80055dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80055d0:	f000 f904 	bl	80057dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	e002      	b.n	80055e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80055e2:	4a04      	ldr	r2, [pc, #16]	; (80055f4 <prvSampleTimeNow+0x3c>)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80055e8:	68fb      	ldr	r3, [r7, #12]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	20000c88 	.word	0x20000c88

080055f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
 8005604:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005606:	2300      	movs	r3, #0
 8005608:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	429a      	cmp	r2, r3
 800561c:	d812      	bhi.n	8005644 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	1ad2      	subs	r2, r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	429a      	cmp	r2, r3
 800562a:	d302      	bcc.n	8005632 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800562c:	2301      	movs	r3, #1
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	e01b      	b.n	800566a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005632:	4b10      	ldr	r3, [pc, #64]	; (8005674 <prvInsertTimerInActiveList+0x7c>)
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	3304      	adds	r3, #4
 800563a:	4619      	mov	r1, r3
 800563c:	4610      	mov	r0, r2
 800563e:	f7fe f9be 	bl	80039be <vListInsert>
 8005642:	e012      	b.n	800566a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	d206      	bcs.n	800565a <prvInsertTimerInActiveList+0x62>
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d302      	bcc.n	800565a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005654:	2301      	movs	r3, #1
 8005656:	617b      	str	r3, [r7, #20]
 8005658:	e007      	b.n	800566a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800565a:	4b07      	ldr	r3, [pc, #28]	; (8005678 <prvInsertTimerInActiveList+0x80>)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	3304      	adds	r3, #4
 8005662:	4619      	mov	r1, r3
 8005664:	4610      	mov	r0, r2
 8005666:	f7fe f9aa 	bl	80039be <vListInsert>
		}
	}

	return xProcessTimerNow;
 800566a:	697b      	ldr	r3, [r7, #20]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	20000c7c 	.word	0x20000c7c
 8005678:	20000c78 	.word	0x20000c78

0800567c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08e      	sub	sp, #56	; 0x38
 8005680:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005682:	e099      	b.n	80057b8 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	da17      	bge.n	80056ba <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800568a:	1d3b      	adds	r3, r7, #4
 800568c:	3304      	adds	r3, #4
 800568e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005692:	2b00      	cmp	r3, #0
 8005694:	d109      	bne.n	80056aa <prvProcessReceivedCommands+0x2e>
 8005696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	61fb      	str	r3, [r7, #28]
 80056a8:	e7fe      	b.n	80056a8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80056aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056b0:	6850      	ldr	r0, [r2, #4]
 80056b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056b4:	6892      	ldr	r2, [r2, #8]
 80056b6:	4611      	mov	r1, r2
 80056b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	db7a      	blt.n	80057b6 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d004      	beq.n	80056d6 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ce:	3304      	adds	r3, #4
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7fe f9ad 	bl	8003a30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056d6:	463b      	mov	r3, r7
 80056d8:	4618      	mov	r0, r3
 80056da:	f7ff ff6d 	bl	80055b8 <prvSampleTimeNow>
 80056de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b09      	cmp	r3, #9
 80056e4:	d868      	bhi.n	80057b8 <prvProcessReceivedCommands+0x13c>
 80056e6:	a201      	add	r2, pc, #4	; (adr r2, 80056ec <prvProcessReceivedCommands+0x70>)
 80056e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ec:	08005715 	.word	0x08005715
 80056f0:	08005715 	.word	0x08005715
 80056f4:	08005715 	.word	0x08005715
 80056f8:	080057b9 	.word	0x080057b9
 80056fc:	0800576f 	.word	0x0800576f
 8005700:	080057a5 	.word	0x080057a5
 8005704:	08005715 	.word	0x08005715
 8005708:	08005715 	.word	0x08005715
 800570c:	080057b9 	.word	0x080057b9
 8005710:	0800576f 	.word	0x0800576f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	18d1      	adds	r1, r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005722:	f7ff ff69 	bl	80055f8 <prvInsertTimerInActiveList>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d045      	beq.n	80057b8 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005732:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005736:	69db      	ldr	r3, [r3, #28]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d13d      	bne.n	80057b8 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	441a      	add	r2, r3
 8005744:	2300      	movs	r3, #0
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	2300      	movs	r3, #0
 800574a:	2100      	movs	r1, #0
 800574c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800574e:	f7ff fe23 	bl	8005398 <xTimerGenericCommand>
 8005752:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d12e      	bne.n	80057b8 <prvProcessReceivedCommands+0x13c>
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	61bb      	str	r3, [r7, #24]
 800576c:	e7fe      	b.n	800576c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005772:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d109      	bne.n	8005790 <prvProcessReceivedCommands+0x114>
 800577c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	e7fe      	b.n	800578e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005792:	699a      	ldr	r2, [r3, #24]
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	18d1      	adds	r1, r2, r3
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800579c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800579e:	f7ff ff2b 	bl	80055f8 <prvInsertTimerInActiveList>
					break;
 80057a2:	e009      	b.n	80057b8 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80057a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d104      	bne.n	80057b8 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80057ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057b0:	f000 fbb8 	bl	8005f24 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80057b4:	e000      	b.n	80057b8 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80057b6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057b8:	4b07      	ldr	r3, [pc, #28]	; (80057d8 <prvProcessReceivedCommands+0x15c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	1d39      	adds	r1, r7, #4
 80057be:	2200      	movs	r2, #0
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fe fc27 	bl	8004014 <xQueueReceive>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f47f af5b 	bne.w	8005684 <prvProcessReceivedCommands+0x8>
	}
}
 80057ce:	bf00      	nop
 80057d0:	3730      	adds	r7, #48	; 0x30
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	20000c80 	.word	0x20000c80

080057dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b088      	sub	sp, #32
 80057e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80057e2:	e044      	b.n	800586e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057e4:	4b2b      	ldr	r3, [pc, #172]	; (8005894 <prvSwitchTimerLists+0xb8>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057ee:	4b29      	ldr	r3, [pc, #164]	; (8005894 <prvSwitchTimerLists+0xb8>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	3304      	adds	r3, #4
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fe f917 	bl	8003a30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d12d      	bne.n	800586e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	4413      	add	r3, r2
 800581a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	429a      	cmp	r2, r3
 8005822:	d90e      	bls.n	8005842 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005830:	4b18      	ldr	r3, [pc, #96]	; (8005894 <prvSwitchTimerLists+0xb8>)
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3304      	adds	r3, #4
 8005838:	4619      	mov	r1, r3
 800583a:	4610      	mov	r0, r2
 800583c:	f7fe f8bf 	bl	80039be <vListInsert>
 8005840:	e015      	b.n	800586e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005842:	2300      	movs	r3, #0
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	2300      	movs	r3, #0
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	2100      	movs	r1, #0
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f7ff fda3 	bl	8005398 <xTimerGenericCommand>
 8005852:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d109      	bne.n	800586e <prvSwitchTimerLists+0x92>
 800585a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	603b      	str	r3, [r7, #0]
 800586c:	e7fe      	b.n	800586c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800586e:	4b09      	ldr	r3, [pc, #36]	; (8005894 <prvSwitchTimerLists+0xb8>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1b5      	bne.n	80057e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005878:	4b06      	ldr	r3, [pc, #24]	; (8005894 <prvSwitchTimerLists+0xb8>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800587e:	4b06      	ldr	r3, [pc, #24]	; (8005898 <prvSwitchTimerLists+0xbc>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a04      	ldr	r2, [pc, #16]	; (8005894 <prvSwitchTimerLists+0xb8>)
 8005884:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005886:	4a04      	ldr	r2, [pc, #16]	; (8005898 <prvSwitchTimerLists+0xbc>)
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	6013      	str	r3, [r2, #0]
}
 800588c:	bf00      	nop
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	20000c78 	.word	0x20000c78
 8005898:	20000c7c 	.word	0x20000c7c

0800589c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80058a2:	f000 f963 	bl	8005b6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80058a6:	4b15      	ldr	r3, [pc, #84]	; (80058fc <prvCheckForValidListAndQueue+0x60>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d120      	bne.n	80058f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80058ae:	4814      	ldr	r0, [pc, #80]	; (8005900 <prvCheckForValidListAndQueue+0x64>)
 80058b0:	f7fe f834 	bl	800391c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80058b4:	4813      	ldr	r0, [pc, #76]	; (8005904 <prvCheckForValidListAndQueue+0x68>)
 80058b6:	f7fe f831 	bl	800391c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80058ba:	4b13      	ldr	r3, [pc, #76]	; (8005908 <prvCheckForValidListAndQueue+0x6c>)
 80058bc:	4a10      	ldr	r2, [pc, #64]	; (8005900 <prvCheckForValidListAndQueue+0x64>)
 80058be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80058c0:	4b12      	ldr	r3, [pc, #72]	; (800590c <prvCheckForValidListAndQueue+0x70>)
 80058c2:	4a10      	ldr	r2, [pc, #64]	; (8005904 <prvCheckForValidListAndQueue+0x68>)
 80058c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80058c6:	2300      	movs	r3, #0
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	4b11      	ldr	r3, [pc, #68]	; (8005910 <prvCheckForValidListAndQueue+0x74>)
 80058cc:	4a11      	ldr	r2, [pc, #68]	; (8005914 <prvCheckForValidListAndQueue+0x78>)
 80058ce:	2110      	movs	r1, #16
 80058d0:	200a      	movs	r0, #10
 80058d2:	f7fe f93f 	bl	8003b54 <xQueueGenericCreateStatic>
 80058d6:	4602      	mov	r2, r0
 80058d8:	4b08      	ldr	r3, [pc, #32]	; (80058fc <prvCheckForValidListAndQueue+0x60>)
 80058da:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80058dc:	4b07      	ldr	r3, [pc, #28]	; (80058fc <prvCheckForValidListAndQueue+0x60>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d005      	beq.n	80058f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80058e4:	4b05      	ldr	r3, [pc, #20]	; (80058fc <prvCheckForValidListAndQueue+0x60>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	490b      	ldr	r1, [pc, #44]	; (8005918 <prvCheckForValidListAndQueue+0x7c>)
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe fdfc 	bl	80044e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058f0:	f000 f96a 	bl	8005bc8 <vPortExitCritical>
}
 80058f4:	bf00      	nop
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	20000c80 	.word	0x20000c80
 8005900:	20000c50 	.word	0x20000c50
 8005904:	20000c64 	.word	0x20000c64
 8005908:	20000c78 	.word	0x20000c78
 800590c:	20000c7c 	.word	0x20000c7c
 8005910:	20000d2c 	.word	0x20000d2c
 8005914:	20000c8c 	.word	0x20000c8c
 8005918:	08006a40 	.word	0x08006a40

0800591c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	3b04      	subs	r3, #4
 800592c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3b04      	subs	r3, #4
 800593a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f023 0201 	bic.w	r2, r3, #1
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	3b04      	subs	r3, #4
 800594a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800594c:	4a0c      	ldr	r2, [pc, #48]	; (8005980 <pxPortInitialiseStack+0x64>)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3b14      	subs	r3, #20
 8005956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	3b04      	subs	r3, #4
 8005962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f06f 0202 	mvn.w	r2, #2
 800596a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	3b20      	subs	r3, #32
 8005970:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005972:	68fb      	ldr	r3, [r7, #12]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	08005985 	.word	0x08005985

08005984 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800598e:	4b11      	ldr	r3, [pc, #68]	; (80059d4 <prvTaskExitError+0x50>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005996:	d009      	beq.n	80059ac <prvTaskExitError+0x28>
 8005998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	e7fe      	b.n	80059aa <prvTaskExitError+0x26>
 80059ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80059be:	bf00      	nop
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0fc      	beq.n	80059c0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80059c6:	bf00      	nop
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	2000000c 	.word	0x2000000c
	...

080059e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80059e0:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <pxCurrentTCBConst2>)
 80059e2:	6819      	ldr	r1, [r3, #0]
 80059e4:	6808      	ldr	r0, [r1, #0]
 80059e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ea:	f380 8809 	msr	PSP, r0
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f04f 0000 	mov.w	r0, #0
 80059f6:	f380 8811 	msr	BASEPRI, r0
 80059fa:	4770      	bx	lr
 80059fc:	f3af 8000 	nop.w

08005a00 <pxCurrentTCBConst2>:
 8005a00:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a04:	bf00      	nop
 8005a06:	bf00      	nop

08005a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a08:	4808      	ldr	r0, [pc, #32]	; (8005a2c <prvPortStartFirstTask+0x24>)
 8005a0a:	6800      	ldr	r0, [r0, #0]
 8005a0c:	6800      	ldr	r0, [r0, #0]
 8005a0e:	f380 8808 	msr	MSP, r0
 8005a12:	f04f 0000 	mov.w	r0, #0
 8005a16:	f380 8814 	msr	CONTROL, r0
 8005a1a:	b662      	cpsie	i
 8005a1c:	b661      	cpsie	f
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	df00      	svc	0
 8005a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a2a:	bf00      	nop
 8005a2c:	e000ed08 	.word	0xe000ed08

08005a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a36:	4b44      	ldr	r3, [pc, #272]	; (8005b48 <xPortStartScheduler+0x118>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a44      	ldr	r2, [pc, #272]	; (8005b4c <xPortStartScheduler+0x11c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d109      	bne.n	8005a54 <xPortStartScheduler+0x24>
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	613b      	str	r3, [r7, #16]
 8005a52:	e7fe      	b.n	8005a52 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a54:	4b3c      	ldr	r3, [pc, #240]	; (8005b48 <xPortStartScheduler+0x118>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a3d      	ldr	r2, [pc, #244]	; (8005b50 <xPortStartScheduler+0x120>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d109      	bne.n	8005a72 <xPortStartScheduler+0x42>
 8005a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	e7fe      	b.n	8005a70 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a72:	4b38      	ldr	r3, [pc, #224]	; (8005b54 <xPortStartScheduler+0x124>)
 8005a74:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	22ff      	movs	r2, #255	; 0xff
 8005a82:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a8c:	78fb      	ldrb	r3, [r7, #3]
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	4b30      	ldr	r3, [pc, #192]	; (8005b58 <xPortStartScheduler+0x128>)
 8005a98:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a9a:	4b30      	ldr	r3, [pc, #192]	; (8005b5c <xPortStartScheduler+0x12c>)
 8005a9c:	2207      	movs	r2, #7
 8005a9e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005aa0:	e009      	b.n	8005ab6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005aa2:	4b2e      	ldr	r3, [pc, #184]	; (8005b5c <xPortStartScheduler+0x12c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	4a2c      	ldr	r2, [pc, #176]	; (8005b5c <xPortStartScheduler+0x12c>)
 8005aaa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005aac:	78fb      	ldrb	r3, [r7, #3]
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ab6:	78fb      	ldrb	r3, [r7, #3]
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005abe:	2b80      	cmp	r3, #128	; 0x80
 8005ac0:	d0ef      	beq.n	8005aa2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ac2:	4b26      	ldr	r3, [pc, #152]	; (8005b5c <xPortStartScheduler+0x12c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f1c3 0307 	rsb	r3, r3, #7
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d009      	beq.n	8005ae2 <xPortStartScheduler+0xb2>
 8005ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	60bb      	str	r3, [r7, #8]
 8005ae0:	e7fe      	b.n	8005ae0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ae2:	4b1e      	ldr	r3, [pc, #120]	; (8005b5c <xPortStartScheduler+0x12c>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	021b      	lsls	r3, r3, #8
 8005ae8:	4a1c      	ldr	r2, [pc, #112]	; (8005b5c <xPortStartScheduler+0x12c>)
 8005aea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005aec:	4b1b      	ldr	r3, [pc, #108]	; (8005b5c <xPortStartScheduler+0x12c>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005af4:	4a19      	ldr	r2, [pc, #100]	; (8005b5c <xPortStartScheduler+0x12c>)
 8005af6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b00:	4b17      	ldr	r3, [pc, #92]	; (8005b60 <xPortStartScheduler+0x130>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a16      	ldr	r2, [pc, #88]	; (8005b60 <xPortStartScheduler+0x130>)
 8005b06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b0c:	4b14      	ldr	r3, [pc, #80]	; (8005b60 <xPortStartScheduler+0x130>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a13      	ldr	r2, [pc, #76]	; (8005b60 <xPortStartScheduler+0x130>)
 8005b12:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b18:	f000 f8d6 	bl	8005cc8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b1c:	4b11      	ldr	r3, [pc, #68]	; (8005b64 <xPortStartScheduler+0x134>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b22:	f000 f8f5 	bl	8005d10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b26:	4b10      	ldr	r3, [pc, #64]	; (8005b68 <xPortStartScheduler+0x138>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a0f      	ldr	r2, [pc, #60]	; (8005b68 <xPortStartScheduler+0x138>)
 8005b2c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005b30:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b32:	f7ff ff69 	bl	8005a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b36:	f7ff f8a3 	bl	8004c80 <vTaskSwitchContext>
	prvTaskExitError();
 8005b3a:	f7ff ff23 	bl	8005984 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3718      	adds	r7, #24
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	e000ed00 	.word	0xe000ed00
 8005b4c:	410fc271 	.word	0x410fc271
 8005b50:	410fc270 	.word	0x410fc270
 8005b54:	e000e400 	.word	0xe000e400
 8005b58:	20000d7c 	.word	0x20000d7c
 8005b5c:	20000d80 	.word	0x20000d80
 8005b60:	e000ed20 	.word	0xe000ed20
 8005b64:	2000000c 	.word	0x2000000c
 8005b68:	e000ef34 	.word	0xe000ef34

08005b6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b84:	4b0e      	ldr	r3, [pc, #56]	; (8005bc0 <vPortEnterCritical+0x54>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	4a0d      	ldr	r2, [pc, #52]	; (8005bc0 <vPortEnterCritical+0x54>)
 8005b8c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b8e:	4b0c      	ldr	r3, [pc, #48]	; (8005bc0 <vPortEnterCritical+0x54>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d10e      	bne.n	8005bb4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b96:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <vPortEnterCritical+0x58>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d009      	beq.n	8005bb4 <vPortEnterCritical+0x48>
 8005ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	603b      	str	r3, [r7, #0]
 8005bb2:	e7fe      	b.n	8005bb2 <vPortEnterCritical+0x46>
	}
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	2000000c 	.word	0x2000000c
 8005bc4:	e000ed04 	.word	0xe000ed04

08005bc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005bce:	4b11      	ldr	r3, [pc, #68]	; (8005c14 <vPortExitCritical+0x4c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d109      	bne.n	8005bea <vPortExitCritical+0x22>
 8005bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bda:	f383 8811 	msr	BASEPRI, r3
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	607b      	str	r3, [r7, #4]
 8005be8:	e7fe      	b.n	8005be8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005bea:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <vPortExitCritical+0x4c>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	4a08      	ldr	r2, [pc, #32]	; (8005c14 <vPortExitCritical+0x4c>)
 8005bf2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005bf4:	4b07      	ldr	r3, [pc, #28]	; (8005c14 <vPortExitCritical+0x4c>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d104      	bne.n	8005c06 <vPortExitCritical+0x3e>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	2000000c 	.word	0x2000000c
	...

08005c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c20:	f3ef 8009 	mrs	r0, PSP
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	4b15      	ldr	r3, [pc, #84]	; (8005c80 <pxCurrentTCBConst>)
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	f01e 0f10 	tst.w	lr, #16
 8005c30:	bf08      	it	eq
 8005c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c3a:	6010      	str	r0, [r2, #0]
 8005c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c44:	f380 8811 	msr	BASEPRI, r0
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f7ff f816 	bl	8004c80 <vTaskSwitchContext>
 8005c54:	f04f 0000 	mov.w	r0, #0
 8005c58:	f380 8811 	msr	BASEPRI, r0
 8005c5c:	bc09      	pop	{r0, r3}
 8005c5e:	6819      	ldr	r1, [r3, #0]
 8005c60:	6808      	ldr	r0, [r1, #0]
 8005c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c66:	f01e 0f10 	tst.w	lr, #16
 8005c6a:	bf08      	it	eq
 8005c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c70:	f380 8809 	msr	PSP, r0
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	f3af 8000 	nop.w

08005c80 <pxCurrentTCBConst>:
 8005c80:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c84:	bf00      	nop
 8005c86:	bf00      	nop

08005c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ca0:	f7fe ff30 	bl	8004b04 <xTaskIncrementTick>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005caa:	4b06      	ldr	r3, [pc, #24]	; (8005cc4 <SysTick_Handler+0x3c>)
 8005cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005cbc:	bf00      	nop
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	e000ed04 	.word	0xe000ed04

08005cc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ccc:	4b0b      	ldr	r3, [pc, #44]	; (8005cfc <vPortSetupTimerInterrupt+0x34>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <vPortSetupTimerInterrupt+0x38>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005cd8:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <vPortSetupTimerInterrupt+0x3c>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a0a      	ldr	r2, [pc, #40]	; (8005d08 <vPortSetupTimerInterrupt+0x40>)
 8005cde:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce2:	099b      	lsrs	r3, r3, #6
 8005ce4:	4a09      	ldr	r2, [pc, #36]	; (8005d0c <vPortSetupTimerInterrupt+0x44>)
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cea:	4b04      	ldr	r3, [pc, #16]	; (8005cfc <vPortSetupTimerInterrupt+0x34>)
 8005cec:	2207      	movs	r2, #7
 8005cee:	601a      	str	r2, [r3, #0]
}
 8005cf0:	bf00      	nop
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	e000e010 	.word	0xe000e010
 8005d00:	e000e018 	.word	0xe000e018
 8005d04:	20000000 	.word	0x20000000
 8005d08:	10624dd3 	.word	0x10624dd3
 8005d0c:	e000e014 	.word	0xe000e014

08005d10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005d20 <vPortEnableVFP+0x10>
 8005d14:	6801      	ldr	r1, [r0, #0]
 8005d16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d1a:	6001      	str	r1, [r0, #0]
 8005d1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d1e:	bf00      	nop
 8005d20:	e000ed88 	.word	0xe000ed88

08005d24 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005d2a:	f3ef 8305 	mrs	r3, IPSR
 8005d2e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2b0f      	cmp	r3, #15
 8005d34:	d913      	bls.n	8005d5e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d36:	4a16      	ldr	r2, [pc, #88]	; (8005d90 <vPortValidateInterruptPriority+0x6c>)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d40:	4b14      	ldr	r3, [pc, #80]	; (8005d94 <vPortValidateInterruptPriority+0x70>)
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	7afa      	ldrb	r2, [r7, #11]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d209      	bcs.n	8005d5e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	607b      	str	r3, [r7, #4]
 8005d5c:	e7fe      	b.n	8005d5c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d5e:	4b0e      	ldr	r3, [pc, #56]	; (8005d98 <vPortValidateInterruptPriority+0x74>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d66:	4b0d      	ldr	r3, [pc, #52]	; (8005d9c <vPortValidateInterruptPriority+0x78>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d909      	bls.n	8005d82 <vPortValidateInterruptPriority+0x5e>
 8005d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	603b      	str	r3, [r7, #0]
 8005d80:	e7fe      	b.n	8005d80 <vPortValidateInterruptPriority+0x5c>
	}
 8005d82:	bf00      	nop
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	e000e3f0 	.word	0xe000e3f0
 8005d94:	20000d7c 	.word	0x20000d7c
 8005d98:	e000ed0c 	.word	0xe000ed0c
 8005d9c:	20000d80 	.word	0x20000d80

08005da0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b08a      	sub	sp, #40	; 0x28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005da8:	2300      	movs	r3, #0
 8005daa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005dac:	f7fe fdf0 	bl	8004990 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005db0:	4b57      	ldr	r3, [pc, #348]	; (8005f10 <pvPortMalloc+0x170>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005db8:	f000 f90c 	bl	8005fd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005dbc:	4b55      	ldr	r3, [pc, #340]	; (8005f14 <pvPortMalloc+0x174>)
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f040 808c 	bne.w	8005ee2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d01c      	beq.n	8005e0a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005dd0:	2208      	movs	r2, #8
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d013      	beq.n	8005e0a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f023 0307 	bic.w	r3, r3, #7
 8005de8:	3308      	adds	r3, #8
 8005dea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d009      	beq.n	8005e0a <pvPortMalloc+0x6a>
 8005df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfa:	f383 8811 	msr	BASEPRI, r3
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	617b      	str	r3, [r7, #20]
 8005e08:	e7fe      	b.n	8005e08 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d068      	beq.n	8005ee2 <pvPortMalloc+0x142>
 8005e10:	4b41      	ldr	r3, [pc, #260]	; (8005f18 <pvPortMalloc+0x178>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d863      	bhi.n	8005ee2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e1a:	4b40      	ldr	r3, [pc, #256]	; (8005f1c <pvPortMalloc+0x17c>)
 8005e1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e1e:	4b3f      	ldr	r3, [pc, #252]	; (8005f1c <pvPortMalloc+0x17c>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e24:	e004      	b.n	8005e30 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d903      	bls.n	8005e42 <pvPortMalloc+0xa2>
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1f1      	bne.n	8005e26 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e42:	4b33      	ldr	r3, [pc, #204]	; (8005f10 <pvPortMalloc+0x170>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d04a      	beq.n	8005ee2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2208      	movs	r2, #8
 8005e52:	4413      	add	r3, r2
 8005e54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	1ad2      	subs	r2, r2, r3
 8005e66:	2308      	movs	r3, #8
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d91e      	bls.n	8005eac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4413      	add	r3, r2
 8005e74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	f003 0307 	and.w	r3, r3, #7
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d009      	beq.n	8005e94 <pvPortMalloc+0xf4>
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	613b      	str	r3, [r7, #16]
 8005e92:	e7fe      	b.n	8005e92 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	1ad2      	subs	r2, r2, r3
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ea6:	69b8      	ldr	r0, [r7, #24]
 8005ea8:	f000 f8f6 	bl	8006098 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005eac:	4b1a      	ldr	r3, [pc, #104]	; (8005f18 <pvPortMalloc+0x178>)
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	4a18      	ldr	r2, [pc, #96]	; (8005f18 <pvPortMalloc+0x178>)
 8005eb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005eba:	4b17      	ldr	r3, [pc, #92]	; (8005f18 <pvPortMalloc+0x178>)
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	4b18      	ldr	r3, [pc, #96]	; (8005f20 <pvPortMalloc+0x180>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d203      	bcs.n	8005ece <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ec6:	4b14      	ldr	r3, [pc, #80]	; (8005f18 <pvPortMalloc+0x178>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a15      	ldr	r2, [pc, #84]	; (8005f20 <pvPortMalloc+0x180>)
 8005ecc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	4b10      	ldr	r3, [pc, #64]	; (8005f14 <pvPortMalloc+0x174>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	2200      	movs	r2, #0
 8005ee0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ee2:	f7fe fd63 	bl	80049ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	f003 0307 	and.w	r3, r3, #7
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d009      	beq.n	8005f04 <pvPortMalloc+0x164>
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	60fb      	str	r3, [r7, #12]
 8005f02:	e7fe      	b.n	8005f02 <pvPortMalloc+0x162>
	return pvReturn;
 8005f04:	69fb      	ldr	r3, [r7, #28]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3728      	adds	r7, #40	; 0x28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	2000198c 	.word	0x2000198c
 8005f14:	20001998 	.word	0x20001998
 8005f18:	20001990 	.word	0x20001990
 8005f1c:	20001984 	.word	0x20001984
 8005f20:	20001994 	.word	0x20001994

08005f24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d046      	beq.n	8005fc4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f36:	2308      	movs	r3, #8
 8005f38:	425b      	negs	r3, r3
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	4b20      	ldr	r3, [pc, #128]	; (8005fcc <vPortFree+0xa8>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d109      	bne.n	8005f66 <vPortFree+0x42>
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	e7fe      	b.n	8005f64 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d009      	beq.n	8005f82 <vPortFree+0x5e>
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	60bb      	str	r3, [r7, #8]
 8005f80:	e7fe      	b.n	8005f80 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	4b11      	ldr	r3, [pc, #68]	; (8005fcc <vPortFree+0xa8>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d019      	beq.n	8005fc4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d115      	bne.n	8005fc4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	4b0b      	ldr	r3, [pc, #44]	; (8005fcc <vPortFree+0xa8>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	43db      	mvns	r3, r3
 8005fa2:	401a      	ands	r2, r3
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005fa8:	f7fe fcf2 	bl	8004990 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	4b07      	ldr	r3, [pc, #28]	; (8005fd0 <vPortFree+0xac>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	4a06      	ldr	r2, [pc, #24]	; (8005fd0 <vPortFree+0xac>)
 8005fb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005fba:	6938      	ldr	r0, [r7, #16]
 8005fbc:	f000 f86c 	bl	8006098 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005fc0:	f7fe fcf4 	bl	80049ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005fc4:	bf00      	nop
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	20001998 	.word	0x20001998
 8005fd0:	20001990 	.word	0x20001990

08005fd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005fda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005fde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005fe0:	4b27      	ldr	r3, [pc, #156]	; (8006080 <prvHeapInit+0xac>)
 8005fe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00c      	beq.n	8006008 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3307      	adds	r3, #7
 8005ff2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0307 	bic.w	r3, r3, #7
 8005ffa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	4a1f      	ldr	r2, [pc, #124]	; (8006080 <prvHeapInit+0xac>)
 8006004:	4413      	add	r3, r2
 8006006:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800600c:	4a1d      	ldr	r2, [pc, #116]	; (8006084 <prvHeapInit+0xb0>)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006012:	4b1c      	ldr	r3, [pc, #112]	; (8006084 <prvHeapInit+0xb0>)
 8006014:	2200      	movs	r2, #0
 8006016:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	4413      	add	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006020:	2208      	movs	r2, #8
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	1a9b      	subs	r3, r3, r2
 8006026:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f023 0307 	bic.w	r3, r3, #7
 800602e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4a15      	ldr	r2, [pc, #84]	; (8006088 <prvHeapInit+0xb4>)
 8006034:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006036:	4b14      	ldr	r3, [pc, #80]	; (8006088 <prvHeapInit+0xb4>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2200      	movs	r2, #0
 800603c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800603e:	4b12      	ldr	r3, [pc, #72]	; (8006088 <prvHeapInit+0xb4>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2200      	movs	r2, #0
 8006044:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	1ad2      	subs	r2, r2, r3
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006054:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <prvHeapInit+0xb4>)
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	4a0a      	ldr	r2, [pc, #40]	; (800608c <prvHeapInit+0xb8>)
 8006062:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	4a09      	ldr	r2, [pc, #36]	; (8006090 <prvHeapInit+0xbc>)
 800606a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800606c:	4b09      	ldr	r3, [pc, #36]	; (8006094 <prvHeapInit+0xc0>)
 800606e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006072:	601a      	str	r2, [r3, #0]
}
 8006074:	bf00      	nop
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	20000d84 	.word	0x20000d84
 8006084:	20001984 	.word	0x20001984
 8006088:	2000198c 	.word	0x2000198c
 800608c:	20001994 	.word	0x20001994
 8006090:	20001990 	.word	0x20001990
 8006094:	20001998 	.word	0x20001998

08006098 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80060a0:	4b28      	ldr	r3, [pc, #160]	; (8006144 <prvInsertBlockIntoFreeList+0xac>)
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	e002      	b.n	80060ac <prvInsertBlockIntoFreeList+0x14>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d8f7      	bhi.n	80060a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	4413      	add	r3, r2
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d108      	bne.n	80060da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	441a      	add	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	441a      	add	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d118      	bne.n	8006120 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	4b15      	ldr	r3, [pc, #84]	; (8006148 <prvInsertBlockIntoFreeList+0xb0>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d00d      	beq.n	8006116 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685a      	ldr	r2, [r3, #4]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	441a      	add	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	e008      	b.n	8006128 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006116:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <prvInsertBlockIntoFreeList+0xb0>)
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	e003      	b.n	8006128 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	429a      	cmp	r2, r3
 800612e:	d002      	beq.n	8006136 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006136:	bf00      	nop
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	20001984 	.word	0x20001984
 8006148:	2000198c 	.word	0x2000198c

0800614c <__errno>:
 800614c:	4b01      	ldr	r3, [pc, #4]	; (8006154 <__errno+0x8>)
 800614e:	6818      	ldr	r0, [r3, #0]
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	20000010 	.word	0x20000010

08006158 <__libc_init_array>:
 8006158:	b570      	push	{r4, r5, r6, lr}
 800615a:	4e0d      	ldr	r6, [pc, #52]	; (8006190 <__libc_init_array+0x38>)
 800615c:	4c0d      	ldr	r4, [pc, #52]	; (8006194 <__libc_init_array+0x3c>)
 800615e:	1ba4      	subs	r4, r4, r6
 8006160:	10a4      	asrs	r4, r4, #2
 8006162:	2500      	movs	r5, #0
 8006164:	42a5      	cmp	r5, r4
 8006166:	d109      	bne.n	800617c <__libc_init_array+0x24>
 8006168:	4e0b      	ldr	r6, [pc, #44]	; (8006198 <__libc_init_array+0x40>)
 800616a:	4c0c      	ldr	r4, [pc, #48]	; (800619c <__libc_init_array+0x44>)
 800616c:	f000 fc28 	bl	80069c0 <_init>
 8006170:	1ba4      	subs	r4, r4, r6
 8006172:	10a4      	asrs	r4, r4, #2
 8006174:	2500      	movs	r5, #0
 8006176:	42a5      	cmp	r5, r4
 8006178:	d105      	bne.n	8006186 <__libc_init_array+0x2e>
 800617a:	bd70      	pop	{r4, r5, r6, pc}
 800617c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006180:	4798      	blx	r3
 8006182:	3501      	adds	r5, #1
 8006184:	e7ee      	b.n	8006164 <__libc_init_array+0xc>
 8006186:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800618a:	4798      	blx	r3
 800618c:	3501      	adds	r5, #1
 800618e:	e7f2      	b.n	8006176 <__libc_init_array+0x1e>
 8006190:	08006b14 	.word	0x08006b14
 8006194:	08006b14 	.word	0x08006b14
 8006198:	08006b14 	.word	0x08006b14
 800619c:	08006b18 	.word	0x08006b18

080061a0 <memcpy>:
 80061a0:	b510      	push	{r4, lr}
 80061a2:	1e43      	subs	r3, r0, #1
 80061a4:	440a      	add	r2, r1
 80061a6:	4291      	cmp	r1, r2
 80061a8:	d100      	bne.n	80061ac <memcpy+0xc>
 80061aa:	bd10      	pop	{r4, pc}
 80061ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061b4:	e7f7      	b.n	80061a6 <memcpy+0x6>

080061b6 <memset>:
 80061b6:	4402      	add	r2, r0
 80061b8:	4603      	mov	r3, r0
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d100      	bne.n	80061c0 <memset+0xa>
 80061be:	4770      	bx	lr
 80061c0:	f803 1b01 	strb.w	r1, [r3], #1
 80061c4:	e7f9      	b.n	80061ba <memset+0x4>
	...

080061c8 <siprintf>:
 80061c8:	b40e      	push	{r1, r2, r3}
 80061ca:	b500      	push	{lr}
 80061cc:	b09c      	sub	sp, #112	; 0x70
 80061ce:	ab1d      	add	r3, sp, #116	; 0x74
 80061d0:	9002      	str	r0, [sp, #8]
 80061d2:	9006      	str	r0, [sp, #24]
 80061d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061d8:	4809      	ldr	r0, [pc, #36]	; (8006200 <siprintf+0x38>)
 80061da:	9107      	str	r1, [sp, #28]
 80061dc:	9104      	str	r1, [sp, #16]
 80061de:	4909      	ldr	r1, [pc, #36]	; (8006204 <siprintf+0x3c>)
 80061e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80061e4:	9105      	str	r1, [sp, #20]
 80061e6:	6800      	ldr	r0, [r0, #0]
 80061e8:	9301      	str	r3, [sp, #4]
 80061ea:	a902      	add	r1, sp, #8
 80061ec:	f000 f866 	bl	80062bc <_svfiprintf_r>
 80061f0:	9b02      	ldr	r3, [sp, #8]
 80061f2:	2200      	movs	r2, #0
 80061f4:	701a      	strb	r2, [r3, #0]
 80061f6:	b01c      	add	sp, #112	; 0x70
 80061f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80061fc:	b003      	add	sp, #12
 80061fe:	4770      	bx	lr
 8006200:	20000010 	.word	0x20000010
 8006204:	ffff0208 	.word	0xffff0208

08006208 <__ssputs_r>:
 8006208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800620c:	688e      	ldr	r6, [r1, #8]
 800620e:	429e      	cmp	r6, r3
 8006210:	4682      	mov	sl, r0
 8006212:	460c      	mov	r4, r1
 8006214:	4690      	mov	r8, r2
 8006216:	4699      	mov	r9, r3
 8006218:	d837      	bhi.n	800628a <__ssputs_r+0x82>
 800621a:	898a      	ldrh	r2, [r1, #12]
 800621c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006220:	d031      	beq.n	8006286 <__ssputs_r+0x7e>
 8006222:	6825      	ldr	r5, [r4, #0]
 8006224:	6909      	ldr	r1, [r1, #16]
 8006226:	1a6f      	subs	r7, r5, r1
 8006228:	6965      	ldr	r5, [r4, #20]
 800622a:	2302      	movs	r3, #2
 800622c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006230:	fb95 f5f3 	sdiv	r5, r5, r3
 8006234:	f109 0301 	add.w	r3, r9, #1
 8006238:	443b      	add	r3, r7
 800623a:	429d      	cmp	r5, r3
 800623c:	bf38      	it	cc
 800623e:	461d      	movcc	r5, r3
 8006240:	0553      	lsls	r3, r2, #21
 8006242:	d530      	bpl.n	80062a6 <__ssputs_r+0x9e>
 8006244:	4629      	mov	r1, r5
 8006246:	f000 fb21 	bl	800688c <_malloc_r>
 800624a:	4606      	mov	r6, r0
 800624c:	b950      	cbnz	r0, 8006264 <__ssputs_r+0x5c>
 800624e:	230c      	movs	r3, #12
 8006250:	f8ca 3000 	str.w	r3, [sl]
 8006254:	89a3      	ldrh	r3, [r4, #12]
 8006256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800625a:	81a3      	strh	r3, [r4, #12]
 800625c:	f04f 30ff 	mov.w	r0, #4294967295
 8006260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006264:	463a      	mov	r2, r7
 8006266:	6921      	ldr	r1, [r4, #16]
 8006268:	f7ff ff9a 	bl	80061a0 <memcpy>
 800626c:	89a3      	ldrh	r3, [r4, #12]
 800626e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006276:	81a3      	strh	r3, [r4, #12]
 8006278:	6126      	str	r6, [r4, #16]
 800627a:	6165      	str	r5, [r4, #20]
 800627c:	443e      	add	r6, r7
 800627e:	1bed      	subs	r5, r5, r7
 8006280:	6026      	str	r6, [r4, #0]
 8006282:	60a5      	str	r5, [r4, #8]
 8006284:	464e      	mov	r6, r9
 8006286:	454e      	cmp	r6, r9
 8006288:	d900      	bls.n	800628c <__ssputs_r+0x84>
 800628a:	464e      	mov	r6, r9
 800628c:	4632      	mov	r2, r6
 800628e:	4641      	mov	r1, r8
 8006290:	6820      	ldr	r0, [r4, #0]
 8006292:	f000 fa93 	bl	80067bc <memmove>
 8006296:	68a3      	ldr	r3, [r4, #8]
 8006298:	1b9b      	subs	r3, r3, r6
 800629a:	60a3      	str	r3, [r4, #8]
 800629c:	6823      	ldr	r3, [r4, #0]
 800629e:	441e      	add	r6, r3
 80062a0:	6026      	str	r6, [r4, #0]
 80062a2:	2000      	movs	r0, #0
 80062a4:	e7dc      	b.n	8006260 <__ssputs_r+0x58>
 80062a6:	462a      	mov	r2, r5
 80062a8:	f000 fb4a 	bl	8006940 <_realloc_r>
 80062ac:	4606      	mov	r6, r0
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d1e2      	bne.n	8006278 <__ssputs_r+0x70>
 80062b2:	6921      	ldr	r1, [r4, #16]
 80062b4:	4650      	mov	r0, sl
 80062b6:	f000 fa9b 	bl	80067f0 <_free_r>
 80062ba:	e7c8      	b.n	800624e <__ssputs_r+0x46>

080062bc <_svfiprintf_r>:
 80062bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c0:	461d      	mov	r5, r3
 80062c2:	898b      	ldrh	r3, [r1, #12]
 80062c4:	061f      	lsls	r7, r3, #24
 80062c6:	b09d      	sub	sp, #116	; 0x74
 80062c8:	4680      	mov	r8, r0
 80062ca:	460c      	mov	r4, r1
 80062cc:	4616      	mov	r6, r2
 80062ce:	d50f      	bpl.n	80062f0 <_svfiprintf_r+0x34>
 80062d0:	690b      	ldr	r3, [r1, #16]
 80062d2:	b96b      	cbnz	r3, 80062f0 <_svfiprintf_r+0x34>
 80062d4:	2140      	movs	r1, #64	; 0x40
 80062d6:	f000 fad9 	bl	800688c <_malloc_r>
 80062da:	6020      	str	r0, [r4, #0]
 80062dc:	6120      	str	r0, [r4, #16]
 80062de:	b928      	cbnz	r0, 80062ec <_svfiprintf_r+0x30>
 80062e0:	230c      	movs	r3, #12
 80062e2:	f8c8 3000 	str.w	r3, [r8]
 80062e6:	f04f 30ff 	mov.w	r0, #4294967295
 80062ea:	e0c8      	b.n	800647e <_svfiprintf_r+0x1c2>
 80062ec:	2340      	movs	r3, #64	; 0x40
 80062ee:	6163      	str	r3, [r4, #20]
 80062f0:	2300      	movs	r3, #0
 80062f2:	9309      	str	r3, [sp, #36]	; 0x24
 80062f4:	2320      	movs	r3, #32
 80062f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062fa:	2330      	movs	r3, #48	; 0x30
 80062fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006300:	9503      	str	r5, [sp, #12]
 8006302:	f04f 0b01 	mov.w	fp, #1
 8006306:	4637      	mov	r7, r6
 8006308:	463d      	mov	r5, r7
 800630a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800630e:	b10b      	cbz	r3, 8006314 <_svfiprintf_r+0x58>
 8006310:	2b25      	cmp	r3, #37	; 0x25
 8006312:	d13e      	bne.n	8006392 <_svfiprintf_r+0xd6>
 8006314:	ebb7 0a06 	subs.w	sl, r7, r6
 8006318:	d00b      	beq.n	8006332 <_svfiprintf_r+0x76>
 800631a:	4653      	mov	r3, sl
 800631c:	4632      	mov	r2, r6
 800631e:	4621      	mov	r1, r4
 8006320:	4640      	mov	r0, r8
 8006322:	f7ff ff71 	bl	8006208 <__ssputs_r>
 8006326:	3001      	adds	r0, #1
 8006328:	f000 80a4 	beq.w	8006474 <_svfiprintf_r+0x1b8>
 800632c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800632e:	4453      	add	r3, sl
 8006330:	9309      	str	r3, [sp, #36]	; 0x24
 8006332:	783b      	ldrb	r3, [r7, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 809d 	beq.w	8006474 <_svfiprintf_r+0x1b8>
 800633a:	2300      	movs	r3, #0
 800633c:	f04f 32ff 	mov.w	r2, #4294967295
 8006340:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006344:	9304      	str	r3, [sp, #16]
 8006346:	9307      	str	r3, [sp, #28]
 8006348:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800634c:	931a      	str	r3, [sp, #104]	; 0x68
 800634e:	462f      	mov	r7, r5
 8006350:	2205      	movs	r2, #5
 8006352:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006356:	4850      	ldr	r0, [pc, #320]	; (8006498 <_svfiprintf_r+0x1dc>)
 8006358:	f7f9 ff4a 	bl	80001f0 <memchr>
 800635c:	9b04      	ldr	r3, [sp, #16]
 800635e:	b9d0      	cbnz	r0, 8006396 <_svfiprintf_r+0xda>
 8006360:	06d9      	lsls	r1, r3, #27
 8006362:	bf44      	itt	mi
 8006364:	2220      	movmi	r2, #32
 8006366:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800636a:	071a      	lsls	r2, r3, #28
 800636c:	bf44      	itt	mi
 800636e:	222b      	movmi	r2, #43	; 0x2b
 8006370:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006374:	782a      	ldrb	r2, [r5, #0]
 8006376:	2a2a      	cmp	r2, #42	; 0x2a
 8006378:	d015      	beq.n	80063a6 <_svfiprintf_r+0xea>
 800637a:	9a07      	ldr	r2, [sp, #28]
 800637c:	462f      	mov	r7, r5
 800637e:	2000      	movs	r0, #0
 8006380:	250a      	movs	r5, #10
 8006382:	4639      	mov	r1, r7
 8006384:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006388:	3b30      	subs	r3, #48	; 0x30
 800638a:	2b09      	cmp	r3, #9
 800638c:	d94d      	bls.n	800642a <_svfiprintf_r+0x16e>
 800638e:	b1b8      	cbz	r0, 80063c0 <_svfiprintf_r+0x104>
 8006390:	e00f      	b.n	80063b2 <_svfiprintf_r+0xf6>
 8006392:	462f      	mov	r7, r5
 8006394:	e7b8      	b.n	8006308 <_svfiprintf_r+0x4c>
 8006396:	4a40      	ldr	r2, [pc, #256]	; (8006498 <_svfiprintf_r+0x1dc>)
 8006398:	1a80      	subs	r0, r0, r2
 800639a:	fa0b f000 	lsl.w	r0, fp, r0
 800639e:	4318      	orrs	r0, r3
 80063a0:	9004      	str	r0, [sp, #16]
 80063a2:	463d      	mov	r5, r7
 80063a4:	e7d3      	b.n	800634e <_svfiprintf_r+0x92>
 80063a6:	9a03      	ldr	r2, [sp, #12]
 80063a8:	1d11      	adds	r1, r2, #4
 80063aa:	6812      	ldr	r2, [r2, #0]
 80063ac:	9103      	str	r1, [sp, #12]
 80063ae:	2a00      	cmp	r2, #0
 80063b0:	db01      	blt.n	80063b6 <_svfiprintf_r+0xfa>
 80063b2:	9207      	str	r2, [sp, #28]
 80063b4:	e004      	b.n	80063c0 <_svfiprintf_r+0x104>
 80063b6:	4252      	negs	r2, r2
 80063b8:	f043 0302 	orr.w	r3, r3, #2
 80063bc:	9207      	str	r2, [sp, #28]
 80063be:	9304      	str	r3, [sp, #16]
 80063c0:	783b      	ldrb	r3, [r7, #0]
 80063c2:	2b2e      	cmp	r3, #46	; 0x2e
 80063c4:	d10c      	bne.n	80063e0 <_svfiprintf_r+0x124>
 80063c6:	787b      	ldrb	r3, [r7, #1]
 80063c8:	2b2a      	cmp	r3, #42	; 0x2a
 80063ca:	d133      	bne.n	8006434 <_svfiprintf_r+0x178>
 80063cc:	9b03      	ldr	r3, [sp, #12]
 80063ce:	1d1a      	adds	r2, r3, #4
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	9203      	str	r2, [sp, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	bfb8      	it	lt
 80063d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80063dc:	3702      	adds	r7, #2
 80063de:	9305      	str	r3, [sp, #20]
 80063e0:	4d2e      	ldr	r5, [pc, #184]	; (800649c <_svfiprintf_r+0x1e0>)
 80063e2:	7839      	ldrb	r1, [r7, #0]
 80063e4:	2203      	movs	r2, #3
 80063e6:	4628      	mov	r0, r5
 80063e8:	f7f9 ff02 	bl	80001f0 <memchr>
 80063ec:	b138      	cbz	r0, 80063fe <_svfiprintf_r+0x142>
 80063ee:	2340      	movs	r3, #64	; 0x40
 80063f0:	1b40      	subs	r0, r0, r5
 80063f2:	fa03 f000 	lsl.w	r0, r3, r0
 80063f6:	9b04      	ldr	r3, [sp, #16]
 80063f8:	4303      	orrs	r3, r0
 80063fa:	3701      	adds	r7, #1
 80063fc:	9304      	str	r3, [sp, #16]
 80063fe:	7839      	ldrb	r1, [r7, #0]
 8006400:	4827      	ldr	r0, [pc, #156]	; (80064a0 <_svfiprintf_r+0x1e4>)
 8006402:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006406:	2206      	movs	r2, #6
 8006408:	1c7e      	adds	r6, r7, #1
 800640a:	f7f9 fef1 	bl	80001f0 <memchr>
 800640e:	2800      	cmp	r0, #0
 8006410:	d038      	beq.n	8006484 <_svfiprintf_r+0x1c8>
 8006412:	4b24      	ldr	r3, [pc, #144]	; (80064a4 <_svfiprintf_r+0x1e8>)
 8006414:	bb13      	cbnz	r3, 800645c <_svfiprintf_r+0x1a0>
 8006416:	9b03      	ldr	r3, [sp, #12]
 8006418:	3307      	adds	r3, #7
 800641a:	f023 0307 	bic.w	r3, r3, #7
 800641e:	3308      	adds	r3, #8
 8006420:	9303      	str	r3, [sp, #12]
 8006422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006424:	444b      	add	r3, r9
 8006426:	9309      	str	r3, [sp, #36]	; 0x24
 8006428:	e76d      	b.n	8006306 <_svfiprintf_r+0x4a>
 800642a:	fb05 3202 	mla	r2, r5, r2, r3
 800642e:	2001      	movs	r0, #1
 8006430:	460f      	mov	r7, r1
 8006432:	e7a6      	b.n	8006382 <_svfiprintf_r+0xc6>
 8006434:	2300      	movs	r3, #0
 8006436:	3701      	adds	r7, #1
 8006438:	9305      	str	r3, [sp, #20]
 800643a:	4619      	mov	r1, r3
 800643c:	250a      	movs	r5, #10
 800643e:	4638      	mov	r0, r7
 8006440:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006444:	3a30      	subs	r2, #48	; 0x30
 8006446:	2a09      	cmp	r2, #9
 8006448:	d903      	bls.n	8006452 <_svfiprintf_r+0x196>
 800644a:	2b00      	cmp	r3, #0
 800644c:	d0c8      	beq.n	80063e0 <_svfiprintf_r+0x124>
 800644e:	9105      	str	r1, [sp, #20]
 8006450:	e7c6      	b.n	80063e0 <_svfiprintf_r+0x124>
 8006452:	fb05 2101 	mla	r1, r5, r1, r2
 8006456:	2301      	movs	r3, #1
 8006458:	4607      	mov	r7, r0
 800645a:	e7f0      	b.n	800643e <_svfiprintf_r+0x182>
 800645c:	ab03      	add	r3, sp, #12
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	4622      	mov	r2, r4
 8006462:	4b11      	ldr	r3, [pc, #68]	; (80064a8 <_svfiprintf_r+0x1ec>)
 8006464:	a904      	add	r1, sp, #16
 8006466:	4640      	mov	r0, r8
 8006468:	f3af 8000 	nop.w
 800646c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006470:	4681      	mov	r9, r0
 8006472:	d1d6      	bne.n	8006422 <_svfiprintf_r+0x166>
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	065b      	lsls	r3, r3, #25
 8006478:	f53f af35 	bmi.w	80062e6 <_svfiprintf_r+0x2a>
 800647c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800647e:	b01d      	add	sp, #116	; 0x74
 8006480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006484:	ab03      	add	r3, sp, #12
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	4622      	mov	r2, r4
 800648a:	4b07      	ldr	r3, [pc, #28]	; (80064a8 <_svfiprintf_r+0x1ec>)
 800648c:	a904      	add	r1, sp, #16
 800648e:	4640      	mov	r0, r8
 8006490:	f000 f882 	bl	8006598 <_printf_i>
 8006494:	e7ea      	b.n	800646c <_svfiprintf_r+0x1b0>
 8006496:	bf00      	nop
 8006498:	08006ae0 	.word	0x08006ae0
 800649c:	08006ae6 	.word	0x08006ae6
 80064a0:	08006aea 	.word	0x08006aea
 80064a4:	00000000 	.word	0x00000000
 80064a8:	08006209 	.word	0x08006209

080064ac <_printf_common>:
 80064ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064b0:	4691      	mov	r9, r2
 80064b2:	461f      	mov	r7, r3
 80064b4:	688a      	ldr	r2, [r1, #8]
 80064b6:	690b      	ldr	r3, [r1, #16]
 80064b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064bc:	4293      	cmp	r3, r2
 80064be:	bfb8      	it	lt
 80064c0:	4613      	movlt	r3, r2
 80064c2:	f8c9 3000 	str.w	r3, [r9]
 80064c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064ca:	4606      	mov	r6, r0
 80064cc:	460c      	mov	r4, r1
 80064ce:	b112      	cbz	r2, 80064d6 <_printf_common+0x2a>
 80064d0:	3301      	adds	r3, #1
 80064d2:	f8c9 3000 	str.w	r3, [r9]
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	0699      	lsls	r1, r3, #26
 80064da:	bf42      	ittt	mi
 80064dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80064e0:	3302      	addmi	r3, #2
 80064e2:	f8c9 3000 	strmi.w	r3, [r9]
 80064e6:	6825      	ldr	r5, [r4, #0]
 80064e8:	f015 0506 	ands.w	r5, r5, #6
 80064ec:	d107      	bne.n	80064fe <_printf_common+0x52>
 80064ee:	f104 0a19 	add.w	sl, r4, #25
 80064f2:	68e3      	ldr	r3, [r4, #12]
 80064f4:	f8d9 2000 	ldr.w	r2, [r9]
 80064f8:	1a9b      	subs	r3, r3, r2
 80064fa:	42ab      	cmp	r3, r5
 80064fc:	dc28      	bgt.n	8006550 <_printf_common+0xa4>
 80064fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006502:	6822      	ldr	r2, [r4, #0]
 8006504:	3300      	adds	r3, #0
 8006506:	bf18      	it	ne
 8006508:	2301      	movne	r3, #1
 800650a:	0692      	lsls	r2, r2, #26
 800650c:	d42d      	bmi.n	800656a <_printf_common+0xbe>
 800650e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006512:	4639      	mov	r1, r7
 8006514:	4630      	mov	r0, r6
 8006516:	47c0      	blx	r8
 8006518:	3001      	adds	r0, #1
 800651a:	d020      	beq.n	800655e <_printf_common+0xb2>
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	68e5      	ldr	r5, [r4, #12]
 8006520:	f8d9 2000 	ldr.w	r2, [r9]
 8006524:	f003 0306 	and.w	r3, r3, #6
 8006528:	2b04      	cmp	r3, #4
 800652a:	bf08      	it	eq
 800652c:	1aad      	subeq	r5, r5, r2
 800652e:	68a3      	ldr	r3, [r4, #8]
 8006530:	6922      	ldr	r2, [r4, #16]
 8006532:	bf0c      	ite	eq
 8006534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006538:	2500      	movne	r5, #0
 800653a:	4293      	cmp	r3, r2
 800653c:	bfc4      	itt	gt
 800653e:	1a9b      	subgt	r3, r3, r2
 8006540:	18ed      	addgt	r5, r5, r3
 8006542:	f04f 0900 	mov.w	r9, #0
 8006546:	341a      	adds	r4, #26
 8006548:	454d      	cmp	r5, r9
 800654a:	d11a      	bne.n	8006582 <_printf_common+0xd6>
 800654c:	2000      	movs	r0, #0
 800654e:	e008      	b.n	8006562 <_printf_common+0xb6>
 8006550:	2301      	movs	r3, #1
 8006552:	4652      	mov	r2, sl
 8006554:	4639      	mov	r1, r7
 8006556:	4630      	mov	r0, r6
 8006558:	47c0      	blx	r8
 800655a:	3001      	adds	r0, #1
 800655c:	d103      	bne.n	8006566 <_printf_common+0xba>
 800655e:	f04f 30ff 	mov.w	r0, #4294967295
 8006562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006566:	3501      	adds	r5, #1
 8006568:	e7c3      	b.n	80064f2 <_printf_common+0x46>
 800656a:	18e1      	adds	r1, r4, r3
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	2030      	movs	r0, #48	; 0x30
 8006570:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006574:	4422      	add	r2, r4
 8006576:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800657a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800657e:	3302      	adds	r3, #2
 8006580:	e7c5      	b.n	800650e <_printf_common+0x62>
 8006582:	2301      	movs	r3, #1
 8006584:	4622      	mov	r2, r4
 8006586:	4639      	mov	r1, r7
 8006588:	4630      	mov	r0, r6
 800658a:	47c0      	blx	r8
 800658c:	3001      	adds	r0, #1
 800658e:	d0e6      	beq.n	800655e <_printf_common+0xb2>
 8006590:	f109 0901 	add.w	r9, r9, #1
 8006594:	e7d8      	b.n	8006548 <_printf_common+0x9c>
	...

08006598 <_printf_i>:
 8006598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800659c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80065a0:	460c      	mov	r4, r1
 80065a2:	7e09      	ldrb	r1, [r1, #24]
 80065a4:	b085      	sub	sp, #20
 80065a6:	296e      	cmp	r1, #110	; 0x6e
 80065a8:	4617      	mov	r7, r2
 80065aa:	4606      	mov	r6, r0
 80065ac:	4698      	mov	r8, r3
 80065ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065b0:	f000 80b3 	beq.w	800671a <_printf_i+0x182>
 80065b4:	d822      	bhi.n	80065fc <_printf_i+0x64>
 80065b6:	2963      	cmp	r1, #99	; 0x63
 80065b8:	d036      	beq.n	8006628 <_printf_i+0x90>
 80065ba:	d80a      	bhi.n	80065d2 <_printf_i+0x3a>
 80065bc:	2900      	cmp	r1, #0
 80065be:	f000 80b9 	beq.w	8006734 <_printf_i+0x19c>
 80065c2:	2958      	cmp	r1, #88	; 0x58
 80065c4:	f000 8083 	beq.w	80066ce <_printf_i+0x136>
 80065c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80065d0:	e032      	b.n	8006638 <_printf_i+0xa0>
 80065d2:	2964      	cmp	r1, #100	; 0x64
 80065d4:	d001      	beq.n	80065da <_printf_i+0x42>
 80065d6:	2969      	cmp	r1, #105	; 0x69
 80065d8:	d1f6      	bne.n	80065c8 <_printf_i+0x30>
 80065da:	6820      	ldr	r0, [r4, #0]
 80065dc:	6813      	ldr	r3, [r2, #0]
 80065de:	0605      	lsls	r5, r0, #24
 80065e0:	f103 0104 	add.w	r1, r3, #4
 80065e4:	d52a      	bpl.n	800663c <_printf_i+0xa4>
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6011      	str	r1, [r2, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	da03      	bge.n	80065f6 <_printf_i+0x5e>
 80065ee:	222d      	movs	r2, #45	; 0x2d
 80065f0:	425b      	negs	r3, r3
 80065f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80065f6:	486f      	ldr	r0, [pc, #444]	; (80067b4 <_printf_i+0x21c>)
 80065f8:	220a      	movs	r2, #10
 80065fa:	e039      	b.n	8006670 <_printf_i+0xd8>
 80065fc:	2973      	cmp	r1, #115	; 0x73
 80065fe:	f000 809d 	beq.w	800673c <_printf_i+0x1a4>
 8006602:	d808      	bhi.n	8006616 <_printf_i+0x7e>
 8006604:	296f      	cmp	r1, #111	; 0x6f
 8006606:	d020      	beq.n	800664a <_printf_i+0xb2>
 8006608:	2970      	cmp	r1, #112	; 0x70
 800660a:	d1dd      	bne.n	80065c8 <_printf_i+0x30>
 800660c:	6823      	ldr	r3, [r4, #0]
 800660e:	f043 0320 	orr.w	r3, r3, #32
 8006612:	6023      	str	r3, [r4, #0]
 8006614:	e003      	b.n	800661e <_printf_i+0x86>
 8006616:	2975      	cmp	r1, #117	; 0x75
 8006618:	d017      	beq.n	800664a <_printf_i+0xb2>
 800661a:	2978      	cmp	r1, #120	; 0x78
 800661c:	d1d4      	bne.n	80065c8 <_printf_i+0x30>
 800661e:	2378      	movs	r3, #120	; 0x78
 8006620:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006624:	4864      	ldr	r0, [pc, #400]	; (80067b8 <_printf_i+0x220>)
 8006626:	e055      	b.n	80066d4 <_printf_i+0x13c>
 8006628:	6813      	ldr	r3, [r2, #0]
 800662a:	1d19      	adds	r1, r3, #4
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6011      	str	r1, [r2, #0]
 8006630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006634:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006638:	2301      	movs	r3, #1
 800663a:	e08c      	b.n	8006756 <_printf_i+0x1be>
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6011      	str	r1, [r2, #0]
 8006640:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006644:	bf18      	it	ne
 8006646:	b21b      	sxthne	r3, r3
 8006648:	e7cf      	b.n	80065ea <_printf_i+0x52>
 800664a:	6813      	ldr	r3, [r2, #0]
 800664c:	6825      	ldr	r5, [r4, #0]
 800664e:	1d18      	adds	r0, r3, #4
 8006650:	6010      	str	r0, [r2, #0]
 8006652:	0628      	lsls	r0, r5, #24
 8006654:	d501      	bpl.n	800665a <_printf_i+0xc2>
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	e002      	b.n	8006660 <_printf_i+0xc8>
 800665a:	0668      	lsls	r0, r5, #25
 800665c:	d5fb      	bpl.n	8006656 <_printf_i+0xbe>
 800665e:	881b      	ldrh	r3, [r3, #0]
 8006660:	4854      	ldr	r0, [pc, #336]	; (80067b4 <_printf_i+0x21c>)
 8006662:	296f      	cmp	r1, #111	; 0x6f
 8006664:	bf14      	ite	ne
 8006666:	220a      	movne	r2, #10
 8006668:	2208      	moveq	r2, #8
 800666a:	2100      	movs	r1, #0
 800666c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006670:	6865      	ldr	r5, [r4, #4]
 8006672:	60a5      	str	r5, [r4, #8]
 8006674:	2d00      	cmp	r5, #0
 8006676:	f2c0 8095 	blt.w	80067a4 <_printf_i+0x20c>
 800667a:	6821      	ldr	r1, [r4, #0]
 800667c:	f021 0104 	bic.w	r1, r1, #4
 8006680:	6021      	str	r1, [r4, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d13d      	bne.n	8006702 <_printf_i+0x16a>
 8006686:	2d00      	cmp	r5, #0
 8006688:	f040 808e 	bne.w	80067a8 <_printf_i+0x210>
 800668c:	4665      	mov	r5, ip
 800668e:	2a08      	cmp	r2, #8
 8006690:	d10b      	bne.n	80066aa <_printf_i+0x112>
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	07db      	lsls	r3, r3, #31
 8006696:	d508      	bpl.n	80066aa <_printf_i+0x112>
 8006698:	6923      	ldr	r3, [r4, #16]
 800669a:	6862      	ldr	r2, [r4, #4]
 800669c:	429a      	cmp	r2, r3
 800669e:	bfde      	ittt	le
 80066a0:	2330      	movle	r3, #48	; 0x30
 80066a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066aa:	ebac 0305 	sub.w	r3, ip, r5
 80066ae:	6123      	str	r3, [r4, #16]
 80066b0:	f8cd 8000 	str.w	r8, [sp]
 80066b4:	463b      	mov	r3, r7
 80066b6:	aa03      	add	r2, sp, #12
 80066b8:	4621      	mov	r1, r4
 80066ba:	4630      	mov	r0, r6
 80066bc:	f7ff fef6 	bl	80064ac <_printf_common>
 80066c0:	3001      	adds	r0, #1
 80066c2:	d14d      	bne.n	8006760 <_printf_i+0x1c8>
 80066c4:	f04f 30ff 	mov.w	r0, #4294967295
 80066c8:	b005      	add	sp, #20
 80066ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066ce:	4839      	ldr	r0, [pc, #228]	; (80067b4 <_printf_i+0x21c>)
 80066d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80066d4:	6813      	ldr	r3, [r2, #0]
 80066d6:	6821      	ldr	r1, [r4, #0]
 80066d8:	1d1d      	adds	r5, r3, #4
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6015      	str	r5, [r2, #0]
 80066de:	060a      	lsls	r2, r1, #24
 80066e0:	d50b      	bpl.n	80066fa <_printf_i+0x162>
 80066e2:	07ca      	lsls	r2, r1, #31
 80066e4:	bf44      	itt	mi
 80066e6:	f041 0120 	orrmi.w	r1, r1, #32
 80066ea:	6021      	strmi	r1, [r4, #0]
 80066ec:	b91b      	cbnz	r3, 80066f6 <_printf_i+0x15e>
 80066ee:	6822      	ldr	r2, [r4, #0]
 80066f0:	f022 0220 	bic.w	r2, r2, #32
 80066f4:	6022      	str	r2, [r4, #0]
 80066f6:	2210      	movs	r2, #16
 80066f8:	e7b7      	b.n	800666a <_printf_i+0xd2>
 80066fa:	064d      	lsls	r5, r1, #25
 80066fc:	bf48      	it	mi
 80066fe:	b29b      	uxthmi	r3, r3
 8006700:	e7ef      	b.n	80066e2 <_printf_i+0x14a>
 8006702:	4665      	mov	r5, ip
 8006704:	fbb3 f1f2 	udiv	r1, r3, r2
 8006708:	fb02 3311 	mls	r3, r2, r1, r3
 800670c:	5cc3      	ldrb	r3, [r0, r3]
 800670e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006712:	460b      	mov	r3, r1
 8006714:	2900      	cmp	r1, #0
 8006716:	d1f5      	bne.n	8006704 <_printf_i+0x16c>
 8006718:	e7b9      	b.n	800668e <_printf_i+0xf6>
 800671a:	6813      	ldr	r3, [r2, #0]
 800671c:	6825      	ldr	r5, [r4, #0]
 800671e:	6961      	ldr	r1, [r4, #20]
 8006720:	1d18      	adds	r0, r3, #4
 8006722:	6010      	str	r0, [r2, #0]
 8006724:	0628      	lsls	r0, r5, #24
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	d501      	bpl.n	800672e <_printf_i+0x196>
 800672a:	6019      	str	r1, [r3, #0]
 800672c:	e002      	b.n	8006734 <_printf_i+0x19c>
 800672e:	066a      	lsls	r2, r5, #25
 8006730:	d5fb      	bpl.n	800672a <_printf_i+0x192>
 8006732:	8019      	strh	r1, [r3, #0]
 8006734:	2300      	movs	r3, #0
 8006736:	6123      	str	r3, [r4, #16]
 8006738:	4665      	mov	r5, ip
 800673a:	e7b9      	b.n	80066b0 <_printf_i+0x118>
 800673c:	6813      	ldr	r3, [r2, #0]
 800673e:	1d19      	adds	r1, r3, #4
 8006740:	6011      	str	r1, [r2, #0]
 8006742:	681d      	ldr	r5, [r3, #0]
 8006744:	6862      	ldr	r2, [r4, #4]
 8006746:	2100      	movs	r1, #0
 8006748:	4628      	mov	r0, r5
 800674a:	f7f9 fd51 	bl	80001f0 <memchr>
 800674e:	b108      	cbz	r0, 8006754 <_printf_i+0x1bc>
 8006750:	1b40      	subs	r0, r0, r5
 8006752:	6060      	str	r0, [r4, #4]
 8006754:	6863      	ldr	r3, [r4, #4]
 8006756:	6123      	str	r3, [r4, #16]
 8006758:	2300      	movs	r3, #0
 800675a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800675e:	e7a7      	b.n	80066b0 <_printf_i+0x118>
 8006760:	6923      	ldr	r3, [r4, #16]
 8006762:	462a      	mov	r2, r5
 8006764:	4639      	mov	r1, r7
 8006766:	4630      	mov	r0, r6
 8006768:	47c0      	blx	r8
 800676a:	3001      	adds	r0, #1
 800676c:	d0aa      	beq.n	80066c4 <_printf_i+0x12c>
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	079b      	lsls	r3, r3, #30
 8006772:	d413      	bmi.n	800679c <_printf_i+0x204>
 8006774:	68e0      	ldr	r0, [r4, #12]
 8006776:	9b03      	ldr	r3, [sp, #12]
 8006778:	4298      	cmp	r0, r3
 800677a:	bfb8      	it	lt
 800677c:	4618      	movlt	r0, r3
 800677e:	e7a3      	b.n	80066c8 <_printf_i+0x130>
 8006780:	2301      	movs	r3, #1
 8006782:	464a      	mov	r2, r9
 8006784:	4639      	mov	r1, r7
 8006786:	4630      	mov	r0, r6
 8006788:	47c0      	blx	r8
 800678a:	3001      	adds	r0, #1
 800678c:	d09a      	beq.n	80066c4 <_printf_i+0x12c>
 800678e:	3501      	adds	r5, #1
 8006790:	68e3      	ldr	r3, [r4, #12]
 8006792:	9a03      	ldr	r2, [sp, #12]
 8006794:	1a9b      	subs	r3, r3, r2
 8006796:	42ab      	cmp	r3, r5
 8006798:	dcf2      	bgt.n	8006780 <_printf_i+0x1e8>
 800679a:	e7eb      	b.n	8006774 <_printf_i+0x1dc>
 800679c:	2500      	movs	r5, #0
 800679e:	f104 0919 	add.w	r9, r4, #25
 80067a2:	e7f5      	b.n	8006790 <_printf_i+0x1f8>
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1ac      	bne.n	8006702 <_printf_i+0x16a>
 80067a8:	7803      	ldrb	r3, [r0, #0]
 80067aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067b2:	e76c      	b.n	800668e <_printf_i+0xf6>
 80067b4:	08006af1 	.word	0x08006af1
 80067b8:	08006b02 	.word	0x08006b02

080067bc <memmove>:
 80067bc:	4288      	cmp	r0, r1
 80067be:	b510      	push	{r4, lr}
 80067c0:	eb01 0302 	add.w	r3, r1, r2
 80067c4:	d807      	bhi.n	80067d6 <memmove+0x1a>
 80067c6:	1e42      	subs	r2, r0, #1
 80067c8:	4299      	cmp	r1, r3
 80067ca:	d00a      	beq.n	80067e2 <memmove+0x26>
 80067cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067d0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80067d4:	e7f8      	b.n	80067c8 <memmove+0xc>
 80067d6:	4283      	cmp	r3, r0
 80067d8:	d9f5      	bls.n	80067c6 <memmove+0xa>
 80067da:	1881      	adds	r1, r0, r2
 80067dc:	1ad2      	subs	r2, r2, r3
 80067de:	42d3      	cmn	r3, r2
 80067e0:	d100      	bne.n	80067e4 <memmove+0x28>
 80067e2:	bd10      	pop	{r4, pc}
 80067e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067e8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80067ec:	e7f7      	b.n	80067de <memmove+0x22>
	...

080067f0 <_free_r>:
 80067f0:	b538      	push	{r3, r4, r5, lr}
 80067f2:	4605      	mov	r5, r0
 80067f4:	2900      	cmp	r1, #0
 80067f6:	d045      	beq.n	8006884 <_free_r+0x94>
 80067f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067fc:	1f0c      	subs	r4, r1, #4
 80067fe:	2b00      	cmp	r3, #0
 8006800:	bfb8      	it	lt
 8006802:	18e4      	addlt	r4, r4, r3
 8006804:	f000 f8d2 	bl	80069ac <__malloc_lock>
 8006808:	4a1f      	ldr	r2, [pc, #124]	; (8006888 <_free_r+0x98>)
 800680a:	6813      	ldr	r3, [r2, #0]
 800680c:	4610      	mov	r0, r2
 800680e:	b933      	cbnz	r3, 800681e <_free_r+0x2e>
 8006810:	6063      	str	r3, [r4, #4]
 8006812:	6014      	str	r4, [r2, #0]
 8006814:	4628      	mov	r0, r5
 8006816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800681a:	f000 b8c8 	b.w	80069ae <__malloc_unlock>
 800681e:	42a3      	cmp	r3, r4
 8006820:	d90c      	bls.n	800683c <_free_r+0x4c>
 8006822:	6821      	ldr	r1, [r4, #0]
 8006824:	1862      	adds	r2, r4, r1
 8006826:	4293      	cmp	r3, r2
 8006828:	bf04      	itt	eq
 800682a:	681a      	ldreq	r2, [r3, #0]
 800682c:	685b      	ldreq	r3, [r3, #4]
 800682e:	6063      	str	r3, [r4, #4]
 8006830:	bf04      	itt	eq
 8006832:	1852      	addeq	r2, r2, r1
 8006834:	6022      	streq	r2, [r4, #0]
 8006836:	6004      	str	r4, [r0, #0]
 8006838:	e7ec      	b.n	8006814 <_free_r+0x24>
 800683a:	4613      	mov	r3, r2
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	b10a      	cbz	r2, 8006844 <_free_r+0x54>
 8006840:	42a2      	cmp	r2, r4
 8006842:	d9fa      	bls.n	800683a <_free_r+0x4a>
 8006844:	6819      	ldr	r1, [r3, #0]
 8006846:	1858      	adds	r0, r3, r1
 8006848:	42a0      	cmp	r0, r4
 800684a:	d10b      	bne.n	8006864 <_free_r+0x74>
 800684c:	6820      	ldr	r0, [r4, #0]
 800684e:	4401      	add	r1, r0
 8006850:	1858      	adds	r0, r3, r1
 8006852:	4282      	cmp	r2, r0
 8006854:	6019      	str	r1, [r3, #0]
 8006856:	d1dd      	bne.n	8006814 <_free_r+0x24>
 8006858:	6810      	ldr	r0, [r2, #0]
 800685a:	6852      	ldr	r2, [r2, #4]
 800685c:	605a      	str	r2, [r3, #4]
 800685e:	4401      	add	r1, r0
 8006860:	6019      	str	r1, [r3, #0]
 8006862:	e7d7      	b.n	8006814 <_free_r+0x24>
 8006864:	d902      	bls.n	800686c <_free_r+0x7c>
 8006866:	230c      	movs	r3, #12
 8006868:	602b      	str	r3, [r5, #0]
 800686a:	e7d3      	b.n	8006814 <_free_r+0x24>
 800686c:	6820      	ldr	r0, [r4, #0]
 800686e:	1821      	adds	r1, r4, r0
 8006870:	428a      	cmp	r2, r1
 8006872:	bf04      	itt	eq
 8006874:	6811      	ldreq	r1, [r2, #0]
 8006876:	6852      	ldreq	r2, [r2, #4]
 8006878:	6062      	str	r2, [r4, #4]
 800687a:	bf04      	itt	eq
 800687c:	1809      	addeq	r1, r1, r0
 800687e:	6021      	streq	r1, [r4, #0]
 8006880:	605c      	str	r4, [r3, #4]
 8006882:	e7c7      	b.n	8006814 <_free_r+0x24>
 8006884:	bd38      	pop	{r3, r4, r5, pc}
 8006886:	bf00      	nop
 8006888:	2000199c 	.word	0x2000199c

0800688c <_malloc_r>:
 800688c:	b570      	push	{r4, r5, r6, lr}
 800688e:	1ccd      	adds	r5, r1, #3
 8006890:	f025 0503 	bic.w	r5, r5, #3
 8006894:	3508      	adds	r5, #8
 8006896:	2d0c      	cmp	r5, #12
 8006898:	bf38      	it	cc
 800689a:	250c      	movcc	r5, #12
 800689c:	2d00      	cmp	r5, #0
 800689e:	4606      	mov	r6, r0
 80068a0:	db01      	blt.n	80068a6 <_malloc_r+0x1a>
 80068a2:	42a9      	cmp	r1, r5
 80068a4:	d903      	bls.n	80068ae <_malloc_r+0x22>
 80068a6:	230c      	movs	r3, #12
 80068a8:	6033      	str	r3, [r6, #0]
 80068aa:	2000      	movs	r0, #0
 80068ac:	bd70      	pop	{r4, r5, r6, pc}
 80068ae:	f000 f87d 	bl	80069ac <__malloc_lock>
 80068b2:	4a21      	ldr	r2, [pc, #132]	; (8006938 <_malloc_r+0xac>)
 80068b4:	6814      	ldr	r4, [r2, #0]
 80068b6:	4621      	mov	r1, r4
 80068b8:	b991      	cbnz	r1, 80068e0 <_malloc_r+0x54>
 80068ba:	4c20      	ldr	r4, [pc, #128]	; (800693c <_malloc_r+0xb0>)
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	b91b      	cbnz	r3, 80068c8 <_malloc_r+0x3c>
 80068c0:	4630      	mov	r0, r6
 80068c2:	f000 f863 	bl	800698c <_sbrk_r>
 80068c6:	6020      	str	r0, [r4, #0]
 80068c8:	4629      	mov	r1, r5
 80068ca:	4630      	mov	r0, r6
 80068cc:	f000 f85e 	bl	800698c <_sbrk_r>
 80068d0:	1c43      	adds	r3, r0, #1
 80068d2:	d124      	bne.n	800691e <_malloc_r+0x92>
 80068d4:	230c      	movs	r3, #12
 80068d6:	6033      	str	r3, [r6, #0]
 80068d8:	4630      	mov	r0, r6
 80068da:	f000 f868 	bl	80069ae <__malloc_unlock>
 80068de:	e7e4      	b.n	80068aa <_malloc_r+0x1e>
 80068e0:	680b      	ldr	r3, [r1, #0]
 80068e2:	1b5b      	subs	r3, r3, r5
 80068e4:	d418      	bmi.n	8006918 <_malloc_r+0x8c>
 80068e6:	2b0b      	cmp	r3, #11
 80068e8:	d90f      	bls.n	800690a <_malloc_r+0x7e>
 80068ea:	600b      	str	r3, [r1, #0]
 80068ec:	50cd      	str	r5, [r1, r3]
 80068ee:	18cc      	adds	r4, r1, r3
 80068f0:	4630      	mov	r0, r6
 80068f2:	f000 f85c 	bl	80069ae <__malloc_unlock>
 80068f6:	f104 000b 	add.w	r0, r4, #11
 80068fa:	1d23      	adds	r3, r4, #4
 80068fc:	f020 0007 	bic.w	r0, r0, #7
 8006900:	1ac3      	subs	r3, r0, r3
 8006902:	d0d3      	beq.n	80068ac <_malloc_r+0x20>
 8006904:	425a      	negs	r2, r3
 8006906:	50e2      	str	r2, [r4, r3]
 8006908:	e7d0      	b.n	80068ac <_malloc_r+0x20>
 800690a:	428c      	cmp	r4, r1
 800690c:	684b      	ldr	r3, [r1, #4]
 800690e:	bf16      	itet	ne
 8006910:	6063      	strne	r3, [r4, #4]
 8006912:	6013      	streq	r3, [r2, #0]
 8006914:	460c      	movne	r4, r1
 8006916:	e7eb      	b.n	80068f0 <_malloc_r+0x64>
 8006918:	460c      	mov	r4, r1
 800691a:	6849      	ldr	r1, [r1, #4]
 800691c:	e7cc      	b.n	80068b8 <_malloc_r+0x2c>
 800691e:	1cc4      	adds	r4, r0, #3
 8006920:	f024 0403 	bic.w	r4, r4, #3
 8006924:	42a0      	cmp	r0, r4
 8006926:	d005      	beq.n	8006934 <_malloc_r+0xa8>
 8006928:	1a21      	subs	r1, r4, r0
 800692a:	4630      	mov	r0, r6
 800692c:	f000 f82e 	bl	800698c <_sbrk_r>
 8006930:	3001      	adds	r0, #1
 8006932:	d0cf      	beq.n	80068d4 <_malloc_r+0x48>
 8006934:	6025      	str	r5, [r4, #0]
 8006936:	e7db      	b.n	80068f0 <_malloc_r+0x64>
 8006938:	2000199c 	.word	0x2000199c
 800693c:	200019a0 	.word	0x200019a0

08006940 <_realloc_r>:
 8006940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006942:	4607      	mov	r7, r0
 8006944:	4614      	mov	r4, r2
 8006946:	460e      	mov	r6, r1
 8006948:	b921      	cbnz	r1, 8006954 <_realloc_r+0x14>
 800694a:	4611      	mov	r1, r2
 800694c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006950:	f7ff bf9c 	b.w	800688c <_malloc_r>
 8006954:	b922      	cbnz	r2, 8006960 <_realloc_r+0x20>
 8006956:	f7ff ff4b 	bl	80067f0 <_free_r>
 800695a:	4625      	mov	r5, r4
 800695c:	4628      	mov	r0, r5
 800695e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006960:	f000 f826 	bl	80069b0 <_malloc_usable_size_r>
 8006964:	42a0      	cmp	r0, r4
 8006966:	d20f      	bcs.n	8006988 <_realloc_r+0x48>
 8006968:	4621      	mov	r1, r4
 800696a:	4638      	mov	r0, r7
 800696c:	f7ff ff8e 	bl	800688c <_malloc_r>
 8006970:	4605      	mov	r5, r0
 8006972:	2800      	cmp	r0, #0
 8006974:	d0f2      	beq.n	800695c <_realloc_r+0x1c>
 8006976:	4631      	mov	r1, r6
 8006978:	4622      	mov	r2, r4
 800697a:	f7ff fc11 	bl	80061a0 <memcpy>
 800697e:	4631      	mov	r1, r6
 8006980:	4638      	mov	r0, r7
 8006982:	f7ff ff35 	bl	80067f0 <_free_r>
 8006986:	e7e9      	b.n	800695c <_realloc_r+0x1c>
 8006988:	4635      	mov	r5, r6
 800698a:	e7e7      	b.n	800695c <_realloc_r+0x1c>

0800698c <_sbrk_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	4c06      	ldr	r4, [pc, #24]	; (80069a8 <_sbrk_r+0x1c>)
 8006990:	2300      	movs	r3, #0
 8006992:	4605      	mov	r5, r0
 8006994:	4608      	mov	r0, r1
 8006996:	6023      	str	r3, [r4, #0]
 8006998:	f7f9 ff20 	bl	80007dc <_sbrk>
 800699c:	1c43      	adds	r3, r0, #1
 800699e:	d102      	bne.n	80069a6 <_sbrk_r+0x1a>
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	b103      	cbz	r3, 80069a6 <_sbrk_r+0x1a>
 80069a4:	602b      	str	r3, [r5, #0]
 80069a6:	bd38      	pop	{r3, r4, r5, pc}
 80069a8:	20001ac4 	.word	0x20001ac4

080069ac <__malloc_lock>:
 80069ac:	4770      	bx	lr

080069ae <__malloc_unlock>:
 80069ae:	4770      	bx	lr

080069b0 <_malloc_usable_size_r>:
 80069b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069b4:	1f18      	subs	r0, r3, #4
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	bfbc      	itt	lt
 80069ba:	580b      	ldrlt	r3, [r1, r0]
 80069bc:	18c0      	addlt	r0, r0, r3
 80069be:	4770      	bx	lr

080069c0 <_init>:
 80069c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c2:	bf00      	nop
 80069c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069c6:	bc08      	pop	{r3}
 80069c8:	469e      	mov	lr, r3
 80069ca:	4770      	bx	lr

080069cc <_fini>:
 80069cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ce:	bf00      	nop
 80069d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069d2:	bc08      	pop	{r3}
 80069d4:	469e      	mov	lr, r3
 80069d6:	4770      	bx	lr
