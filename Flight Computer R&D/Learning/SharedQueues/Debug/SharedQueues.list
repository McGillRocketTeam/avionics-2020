
SharedQueues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cc4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08005e64  08005e64  00015e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f5c  08005f5c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005f5c  08005f5c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f5c  08005f5c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f5c  08005f5c  00015f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f60  08005f60  00015f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a44  20000010  08005f74  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a54  08005f74  00021a54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018fe9  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002dcd  00000000  00000000  00039029  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001350  00000000  00000000  0003bdf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001238  00000000  00000000  0003d148  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000380b  00000000  00000000  0003e380  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010e50  00000000  00000000  00041b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3da9  00000000  00000000  000529db  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00126784  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005144  00000000  00000000  00126800  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e4c 	.word	0x08005e4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08005e4c 	.word	0x08005e4c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f4:	f000 fade 	bl	80007b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f8:	f000 f832 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fc:	f000 f8be 	bl	800037c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000200:	f000 f88c 	bl	800031c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000204:	f003 f820 	bl	8003248 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8000208:	4a0d      	ldr	r2, [pc, #52]	; (8000240 <main+0x50>)
 800020a:	2102      	movs	r1, #2
 800020c:	2010      	movs	r0, #16
 800020e:	f003 f95b 	bl	80034c8 <osMessageQueueNew>
 8000212:	4602      	mov	r2, r0
 8000214:	4b0b      	ldr	r3, [pc, #44]	; (8000244 <main+0x54>)
 8000216:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of queue01 */
  queue01Handle = osThreadNew(ManageQueue01, NULL, &queue01_attributes);
 8000218:	4a0b      	ldr	r2, [pc, #44]	; (8000248 <main+0x58>)
 800021a:	2100      	movs	r1, #0
 800021c:	480b      	ldr	r0, [pc, #44]	; (800024c <main+0x5c>)
 800021e:	f003 f87b 	bl	8003318 <osThreadNew>
 8000222:	4602      	mov	r2, r0
 8000224:	4b0a      	ldr	r3, [pc, #40]	; (8000250 <main+0x60>)
 8000226:	601a      	str	r2, [r3, #0]

  /* creation of queue02 */
  queue02Handle = osThreadNew(ManageQueue02, NULL, &queue02_attributes);
 8000228:	4a0a      	ldr	r2, [pc, #40]	; (8000254 <main+0x64>)
 800022a:	2100      	movs	r1, #0
 800022c:	480a      	ldr	r0, [pc, #40]	; (8000258 <main+0x68>)
 800022e:	f003 f873 	bl	8003318 <osThreadNew>
 8000232:	4602      	mov	r2, r0
 8000234:	4b09      	ldr	r3, [pc, #36]	; (800025c <main+0x6c>)
 8000236:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000238:	f003 f83a 	bl	80032b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800023c:	e7fe      	b.n	800023c <main+0x4c>
 800023e:	bf00      	nop
 8000240:	08005f0c 	.word	0x08005f0c
 8000244:	20001938 	.word	0x20001938
 8000248:	08005ec4 	.word	0x08005ec4
 800024c:	0800044d 	.word	0x0800044d
 8000250:	20001934 	.word	0x20001934
 8000254:	08005ee8 	.word	0x08005ee8
 8000258:	080004c5 	.word	0x080004c5
 800025c:	200019c0 	.word	0x200019c0

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b0a6      	sub	sp, #152	; 0x98
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800026a:	2228      	movs	r2, #40	; 0x28
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f005 fde3 	bl	8005e3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000274:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	60da      	str	r2, [r3, #12]
 8000282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2258      	movs	r2, #88	; 0x58
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f005 fdd5 	bl	8005e3a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000290:	2302      	movs	r3, #2
 8000292:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000294:	2301      	movs	r3, #1
 8000296:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000298:	2310      	movs	r3, #16
 800029a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029e:	2302      	movs	r3, #2
 80002a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 fd32 	bl	8000d28 <HAL_RCC_OscConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ca:	f000 f951 	bl	8000570 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ce:	230f      	movs	r3, #15
 80002d0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d2:	2302      	movs	r3, #2
 80002d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002e8:	2102      	movs	r1, #2
 80002ea:	4618      	mov	r0, r3
 80002ec:	f001 fc32 	bl	8001b54 <HAL_RCC_ClockConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002f6:	f000 f93b 	bl	8000570 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002fa:	2302      	movs	r3, #2
 80002fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002fe:	2300      	movs	r3, #0
 8000300:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	4618      	mov	r0, r3
 8000306:	f001 fe8d 	bl	8002024 <HAL_RCCEx_PeriphCLKConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000310:	f000 f92e 	bl	8000570 <Error_Handler>
  }
}
 8000314:	bf00      	nop
 8000316:	3798      	adds	r7, #152	; 0x98
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000320:	4b14      	ldr	r3, [pc, #80]	; (8000374 <MX_USART2_UART_Init+0x58>)
 8000322:	4a15      	ldr	r2, [pc, #84]	; (8000378 <MX_USART2_UART_Init+0x5c>)
 8000324:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000326:	4b13      	ldr	r3, [pc, #76]	; (8000374 <MX_USART2_UART_Init+0x58>)
 8000328:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800032c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800032e:	4b11      	ldr	r3, [pc, #68]	; (8000374 <MX_USART2_UART_Init+0x58>)
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000334:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <MX_USART2_UART_Init+0x58>)
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800033a:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <MX_USART2_UART_Init+0x58>)
 800033c:	2200      	movs	r2, #0
 800033e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000340:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <MX_USART2_UART_Init+0x58>)
 8000342:	220c      	movs	r2, #12
 8000344:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000346:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <MX_USART2_UART_Init+0x58>)
 8000348:	2200      	movs	r2, #0
 800034a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800034c:	4b09      	ldr	r3, [pc, #36]	; (8000374 <MX_USART2_UART_Init+0x58>)
 800034e:	2200      	movs	r2, #0
 8000350:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000352:	4b08      	ldr	r3, [pc, #32]	; (8000374 <MX_USART2_UART_Init+0x58>)
 8000354:	2200      	movs	r2, #0
 8000356:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <MX_USART2_UART_Init+0x58>)
 800035a:	2200      	movs	r2, #0
 800035c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800035e:	4805      	ldr	r0, [pc, #20]	; (8000374 <MX_USART2_UART_Init+0x58>)
 8000360:	f002 fb54 	bl	8002a0c <HAL_UART_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800036a:	f000 f901 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	2000193c 	.word	0x2000193c
 8000378:	40004400 	.word	0x40004400

0800037c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b08a      	sub	sp, #40	; 0x28
 8000380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000382:	f107 0314 	add.w	r3, r7, #20
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
 8000390:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000392:	4b2b      	ldr	r3, [pc, #172]	; (8000440 <MX_GPIO_Init+0xc4>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a2a      	ldr	r2, [pc, #168]	; (8000440 <MX_GPIO_Init+0xc4>)
 8000398:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800039c:	6153      	str	r3, [r2, #20]
 800039e:	4b28      	ldr	r3, [pc, #160]	; (8000440 <MX_GPIO_Init+0xc4>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003a6:	613b      	str	r3, [r7, #16]
 80003a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003aa:	4b25      	ldr	r3, [pc, #148]	; (8000440 <MX_GPIO_Init+0xc4>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	4a24      	ldr	r2, [pc, #144]	; (8000440 <MX_GPIO_Init+0xc4>)
 80003b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003b4:	6153      	str	r3, [r2, #20]
 80003b6:	4b22      	ldr	r3, [pc, #136]	; (8000440 <MX_GPIO_Init+0xc4>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c2:	4b1f      	ldr	r3, [pc, #124]	; (8000440 <MX_GPIO_Init+0xc4>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a1e      	ldr	r2, [pc, #120]	; (8000440 <MX_GPIO_Init+0xc4>)
 80003c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003cc:	6153      	str	r3, [r2, #20]
 80003ce:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <MX_GPIO_Init+0xc4>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003d6:	60bb      	str	r3, [r7, #8]
 80003d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003da:	4b19      	ldr	r3, [pc, #100]	; (8000440 <MX_GPIO_Init+0xc4>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	4a18      	ldr	r2, [pc, #96]	; (8000440 <MX_GPIO_Init+0xc4>)
 80003e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003e4:	6153      	str	r3, [r2, #20]
 80003e6:	4b16      	ldr	r3, [pc, #88]	; (8000440 <MX_GPIO_Init+0xc4>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2120      	movs	r1, #32
 80003f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003fa:	f000 fc7d 	bl	8000cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000404:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <MX_GPIO_Init+0xc8>)
 8000406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000408:	2300      	movs	r3, #0
 800040a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	4619      	mov	r1, r3
 8000412:	480d      	ldr	r0, [pc, #52]	; (8000448 <MX_GPIO_Init+0xcc>)
 8000414:	f000 fae6 	bl	80009e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000418:	2320      	movs	r3, #32
 800041a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041c:	2301      	movs	r3, #1
 800041e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000420:	2300      	movs	r3, #0
 8000422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000424:	2300      	movs	r3, #0
 8000426:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000428:	f107 0314 	add.w	r3, r7, #20
 800042c:	4619      	mov	r1, r3
 800042e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000432:	f000 fad7 	bl	80009e4 <HAL_GPIO_Init>

}
 8000436:	bf00      	nop
 8000438:	3728      	adds	r7, #40	; 0x28
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40021000 	.word	0x40021000
 8000444:	10210000 	.word	0x10210000
 8000448:	48000800 	.word	0x48000800

0800044c <ManageQueue01>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_ManageQueue01 */
void ManageQueue01(void *argument)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 8000452:	af00      	add	r7, sp, #0
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	char msg[1000];

	sprintf(msg, "Start send\n");
 8000458:	f107 0308 	add.w	r3, r7, #8
 800045c:	4a16      	ldr	r2, [pc, #88]	; (80004b8 <ManageQueue01+0x6c>)
 800045e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000460:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000464:	f107 0308 	add.w	r3, r7, #8
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff feb9 	bl	80001e0 <strlen>
 800046e:	4603      	mov	r3, r0
 8000470:	b29a      	uxth	r2, r3
 8000472:	f107 0108 	add.w	r1, r7, #8
 8000476:	f04f 33ff 	mov.w	r3, #4294967295
 800047a:	4810      	ldr	r0, [pc, #64]	; (80004bc <ManageQueue01+0x70>)
 800047c:	f002 fb14 	bl	8002aa8 <HAL_UART_Transmit>
	for (;;) {
		osDelay(500);
 8000480:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000484:	f002 fff2 	bl	800346c <osDelay>
		sprintf(msg, "Here\n");
 8000488:	f107 0308 	add.w	r3, r7, #8
 800048c:	4a0c      	ldr	r2, [pc, #48]	; (80004c0 <ManageQueue01+0x74>)
 800048e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000492:	6018      	str	r0, [r3, #0]
 8000494:	3304      	adds	r3, #4
 8000496:	8019      	strh	r1, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000498:	f107 0308 	add.w	r3, r7, #8
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff fe9f 	bl	80001e0 <strlen>
 80004a2:	4603      	mov	r3, r0
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	f107 0108 	add.w	r1, r7, #8
 80004aa:	f04f 33ff 	mov.w	r3, #4294967295
 80004ae:	4803      	ldr	r0, [pc, #12]	; (80004bc <ManageQueue01+0x70>)
 80004b0:	f002 fafa 	bl	8002aa8 <HAL_UART_Transmit>
		osDelay(500);
 80004b4:	e7e4      	b.n	8000480 <ManageQueue01+0x34>
 80004b6:	bf00      	nop
 80004b8:	08005e80 	.word	0x08005e80
 80004bc:	2000193c 	.word	0x2000193c
 80004c0:	08005e8c 	.word	0x08005e8c

080004c4 <ManageQueue02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ManageQueue02 */
void ManageQueue02(void *argument)
{
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	f5ad 7d7d 	sub.w	sp, sp, #1012	; 0x3f4
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN ManageQueue02 */
	/* Infinite loop */
	char msg[1000];

	sprintf(msg, "Start receive\n");
 80004d0:	f107 0308 	add.w	r3, r7, #8
 80004d4:	4a1a      	ldr	r2, [pc, #104]	; (8000540 <ManageQueue02+0x7c>)
 80004d6:	461c      	mov	r4, r3
 80004d8:	4613      	mov	r3, r2
 80004da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004dc:	c407      	stmia	r4!, {r0, r1, r2}
 80004de:	8023      	strh	r3, [r4, #0]
 80004e0:	3402      	adds	r4, #2
 80004e2:	0c1b      	lsrs	r3, r3, #16
 80004e4:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80004e6:	f107 0308 	add.w	r3, r7, #8
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff fe78 	bl	80001e0 <strlen>
 80004f0:	4603      	mov	r3, r0
 80004f2:	b29a      	uxth	r2, r3
 80004f4:	f107 0108 	add.w	r1, r7, #8
 80004f8:	f04f 33ff 	mov.w	r3, #4294967295
 80004fc:	4811      	ldr	r0, [pc, #68]	; (8000544 <ManageQueue02+0x80>)
 80004fe:	f002 fad3 	bl	8002aa8 <HAL_UART_Transmit>
	for (;;) {
		osDelay(500);
 8000502:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000506:	f002 ffb1 	bl	800346c <osDelay>
		sprintf(msg, "There\n");
 800050a:	f107 0308 	add.w	r3, r7, #8
 800050e:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <ManageQueue02+0x84>)
 8000510:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000514:	6018      	str	r0, [r3, #0]
 8000516:	3304      	adds	r3, #4
 8000518:	8019      	strh	r1, [r3, #0]
 800051a:	3302      	adds	r3, #2
 800051c:	0c0a      	lsrs	r2, r1, #16
 800051e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000520:	f107 0308 	add.w	r3, r7, #8
 8000524:	4618      	mov	r0, r3
 8000526:	f7ff fe5b 	bl	80001e0 <strlen>
 800052a:	4603      	mov	r3, r0
 800052c:	b29a      	uxth	r2, r3
 800052e:	f107 0108 	add.w	r1, r7, #8
 8000532:	f04f 33ff 	mov.w	r3, #4294967295
 8000536:	4803      	ldr	r0, [pc, #12]	; (8000544 <ManageQueue02+0x80>)
 8000538:	f002 fab6 	bl	8002aa8 <HAL_UART_Transmit>
		osDelay(500);
 800053c:	e7e1      	b.n	8000502 <ManageQueue02+0x3e>
 800053e:	bf00      	nop
 8000540:	08005e94 	.word	0x08005e94
 8000544:	2000193c 	.word	0x2000193c
 8000548:	08005ea4 	.word	0x08005ea4

0800054c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a04      	ldr	r2, [pc, #16]	; (800056c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d101      	bne.n	8000562 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800055e:	f000 f93f 	bl	80007e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40001000 	.word	0x40001000

08000570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000574:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000576:	e7fe      	b.n	8000576 <Error_Handler+0x6>

08000578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057e:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <HAL_MspInit+0x4c>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	4a10      	ldr	r2, [pc, #64]	; (80005c4 <HAL_MspInit+0x4c>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6193      	str	r3, [r2, #24]
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <HAL_MspInit+0x4c>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000596:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <HAL_MspInit+0x4c>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	4a0a      	ldr	r2, [pc, #40]	; (80005c4 <HAL_MspInit+0x4c>)
 800059c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a0:	61d3      	str	r3, [r2, #28]
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <HAL_MspInit+0x4c>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	210f      	movs	r1, #15
 80005b2:	f06f 0001 	mvn.w	r0, #1
 80005b6:	f000 f9eb 	bl	8000990 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000

080005c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a17      	ldr	r2, [pc, #92]	; (8000644 <HAL_UART_MspInit+0x7c>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d128      	bne.n	800063c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005ea:	4b17      	ldr	r3, [pc, #92]	; (8000648 <HAL_UART_MspInit+0x80>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	4a16      	ldr	r2, [pc, #88]	; (8000648 <HAL_UART_MspInit+0x80>)
 80005f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f4:	61d3      	str	r3, [r2, #28]
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <HAL_UART_MspInit+0x80>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <HAL_UART_MspInit+0x80>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a10      	ldr	r2, [pc, #64]	; (8000648 <HAL_UART_MspInit+0x80>)
 8000608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060c:	6153      	str	r3, [r2, #20]
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <HAL_UART_MspInit+0x80>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800061a:	230c      	movs	r3, #12
 800061c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061e:	2302      	movs	r3, #2
 8000620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800062a:	2307      	movs	r3, #7
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000638:	f000 f9d4 	bl	80009e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800063c:	bf00      	nop
 800063e:	3728      	adds	r7, #40	; 0x28
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40004400 	.word	0x40004400
 8000648:	40021000 	.word	0x40021000

0800064c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08c      	sub	sp, #48	; 0x30
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800065c:	2200      	movs	r2, #0
 800065e:	6879      	ldr	r1, [r7, #4]
 8000660:	2036      	movs	r0, #54	; 0x36
 8000662:	f000 f995 	bl	8000990 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000666:	2036      	movs	r0, #54	; 0x36
 8000668:	f000 f9ae 	bl	80009c8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <HAL_InitTick+0xa0>)
 800066e:	69db      	ldr	r3, [r3, #28]
 8000670:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <HAL_InitTick+0xa0>)
 8000672:	f043 0310 	orr.w	r3, r3, #16
 8000676:	61d3      	str	r3, [r2, #28]
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <HAL_InitTick+0xa0>)
 800067a:	69db      	ldr	r3, [r3, #28]
 800067c:	f003 0310 	and.w	r3, r3, #16
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000684:	f107 0210 	add.w	r2, r7, #16
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	4611      	mov	r1, r2
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fc96 	bl	8001fc0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000694:	f001 fc50 	bl	8001f38 <HAL_RCC_GetPCLK1Freq>
 8000698:	4603      	mov	r3, r0
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800069e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006a0:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <HAL_InitTick+0xa4>)
 80006a2:	fba2 2303 	umull	r2, r3, r2, r3
 80006a6:	0c9b      	lsrs	r3, r3, #18
 80006a8:	3b01      	subs	r3, #1
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <HAL_InitTick+0xa8>)
 80006ae:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <HAL_InitTick+0xac>)
 80006b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <HAL_InitTick+0xa8>)
 80006b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006b8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80006ba:	4a0e      	ldr	r2, [pc, #56]	; (80006f4 <HAL_InitTick+0xa8>)
 80006bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006be:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <HAL_InitTick+0xa8>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <HAL_InitTick+0xa8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80006cc:	4809      	ldr	r0, [pc, #36]	; (80006f4 <HAL_InitTick+0xa8>)
 80006ce:	f001 fec7 	bl	8002460 <HAL_TIM_Base_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d104      	bne.n	80006e2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80006d8:	4806      	ldr	r0, [pc, #24]	; (80006f4 <HAL_InitTick+0xa8>)
 80006da:	f001 ff23 	bl	8002524 <HAL_TIM_Base_Start_IT>
 80006de:	4603      	mov	r3, r0
 80006e0:	e000      	b.n	80006e4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3730      	adds	r7, #48	; 0x30
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40021000 	.word	0x40021000
 80006f0:	431bde83 	.word	0x431bde83
 80006f4:	200019c4 	.word	0x200019c4
 80006f8:	40001000 	.word	0x40001000

080006fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <NMI_Handler+0x4>

08000702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <HardFault_Handler+0x4>

08000708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <MemManage_Handler+0x4>

0800070e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000712:	e7fe      	b.n	8000712 <BusFault_Handler+0x4>

08000714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <UsageFault_Handler+0x4>

0800071a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800072c:	4802      	ldr	r0, [pc, #8]	; (8000738 <TIM6_DAC_IRQHandler+0x10>)
 800072e:	f001 ff69 	bl	8002604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200019c4 	.word	0x200019c4

0800073c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <SystemInit+0x20>)
 8000742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000746:	4a05      	ldr	r2, [pc, #20]	; (800075c <SystemInit+0x20>)
 8000748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800074c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000798 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000764:	480d      	ldr	r0, [pc, #52]	; (800079c <LoopForever+0x6>)
  ldr r1, =_edata
 8000766:	490e      	ldr	r1, [pc, #56]	; (80007a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000768:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <LoopForever+0xe>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800076c:	e002      	b.n	8000774 <LoopCopyDataInit>

0800076e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000772:	3304      	adds	r3, #4

08000774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000778:	d3f9      	bcc.n	800076e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077a:	4a0b      	ldr	r2, [pc, #44]	; (80007a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800077c:	4c0b      	ldr	r4, [pc, #44]	; (80007ac <LoopForever+0x16>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000780:	e001      	b.n	8000786 <LoopFillZerobss>

08000782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000784:	3204      	adds	r2, #4

08000786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000788:	d3fb      	bcc.n	8000782 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800078a:	f7ff ffd7 	bl	800073c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800078e:	f005 fb25 	bl	8005ddc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000792:	f7ff fd2d 	bl	80001f0 <main>

08000796 <LoopForever>:

LoopForever:
    b LoopForever
 8000796:	e7fe      	b.n	8000796 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000798:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800079c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007a4:	08005f64 	.word	0x08005f64
  ldr r2, =_sbss
 80007a8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007ac:	20001a54 	.word	0x20001a54

080007b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007b0:	e7fe      	b.n	80007b0 <ADC1_2_IRQHandler>
	...

080007b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <HAL_Init+0x28>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a07      	ldr	r2, [pc, #28]	; (80007dc <HAL_Init+0x28>)
 80007be:	f043 0310 	orr.w	r3, r3, #16
 80007c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f000 f8d8 	bl	800097a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff ff3e 	bl	800064c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d0:	f7ff fed2 	bl	8000578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40022000 	.word	0x40022000

080007e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_IncTick+0x20>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_IncTick+0x24>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4413      	add	r3, r2
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <HAL_IncTick+0x24>)
 80007f2:	6013      	str	r3, [r2, #0]
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	20000008 	.word	0x20000008
 8000804:	20001a10 	.word	0x20001a10

08000808 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  return uwTick;  
 800080c:	4b03      	ldr	r3, [pc, #12]	; (800081c <HAL_GetTick+0x14>)
 800080e:	681b      	ldr	r3, [r3, #0]
}
 8000810:	4618      	mov	r0, r3
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	20001a10 	.word	0x20001a10

08000820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <__NVIC_SetPriorityGrouping+0x44>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800083c:	4013      	ands	r3, r2
 800083e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800084c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000852:	4a04      	ldr	r2, [pc, #16]	; (8000864 <__NVIC_SetPriorityGrouping+0x44>)
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	60d3      	str	r3, [r2, #12]
}
 8000858:	bf00      	nop
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <__NVIC_GetPriorityGrouping+0x18>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	0a1b      	lsrs	r3, r3, #8
 8000872:	f003 0307 	and.w	r3, r3, #7
}
 8000876:	4618      	mov	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	2b00      	cmp	r3, #0
 8000894:	db0b      	blt.n	80008ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	f003 021f 	and.w	r2, r3, #31
 800089c:	4907      	ldr	r1, [pc, #28]	; (80008bc <__NVIC_EnableIRQ+0x38>)
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	095b      	lsrs	r3, r3, #5
 80008a4:	2001      	movs	r0, #1
 80008a6:	fa00 f202 	lsl.w	r2, r0, r2
 80008aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000e100 	.word	0xe000e100

080008c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	db0a      	blt.n	80008ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	490c      	ldr	r1, [pc, #48]	; (800090c <__NVIC_SetPriority+0x4c>)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	0112      	lsls	r2, r2, #4
 80008e0:	b2d2      	uxtb	r2, r2
 80008e2:	440b      	add	r3, r1
 80008e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e8:	e00a      	b.n	8000900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4908      	ldr	r1, [pc, #32]	; (8000910 <__NVIC_SetPriority+0x50>)
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	f003 030f 	and.w	r3, r3, #15
 80008f6:	3b04      	subs	r3, #4
 80008f8:	0112      	lsls	r2, r2, #4
 80008fa:	b2d2      	uxtb	r2, r2
 80008fc:	440b      	add	r3, r1
 80008fe:	761a      	strb	r2, [r3, #24]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	e000e100 	.word	0xe000e100
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000914:	b480      	push	{r7}
 8000916:	b089      	sub	sp, #36	; 0x24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	f1c3 0307 	rsb	r3, r3, #7
 800092e:	2b04      	cmp	r3, #4
 8000930:	bf28      	it	cs
 8000932:	2304      	movcs	r3, #4
 8000934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3304      	adds	r3, #4
 800093a:	2b06      	cmp	r3, #6
 800093c:	d902      	bls.n	8000944 <NVIC_EncodePriority+0x30>
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3b03      	subs	r3, #3
 8000942:	e000      	b.n	8000946 <NVIC_EncodePriority+0x32>
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	f04f 32ff 	mov.w	r2, #4294967295
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43da      	mvns	r2, r3
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	401a      	ands	r2, r3
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800095c:	f04f 31ff 	mov.w	r1, #4294967295
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	43d9      	mvns	r1, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	4313      	orrs	r3, r2
         );
}
 800096e:	4618      	mov	r0, r3
 8000970:	3724      	adds	r7, #36	; 0x24
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff ff4c 	bl	8000820 <__NVIC_SetPriorityGrouping>
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
 800099c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009a2:	f7ff ff61 	bl	8000868 <__NVIC_GetPriorityGrouping>
 80009a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	68b9      	ldr	r1, [r7, #8]
 80009ac:	6978      	ldr	r0, [r7, #20]
 80009ae:	f7ff ffb1 	bl	8000914 <NVIC_EncodePriority>
 80009b2:	4602      	mov	r2, r0
 80009b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b8:	4611      	mov	r1, r2
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ff80 	bl	80008c0 <__NVIC_SetPriority>
}
 80009c0:	bf00      	nop
 80009c2:	3718      	adds	r7, #24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ff54 	bl	8000884 <__NVIC_EnableIRQ>
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b087      	sub	sp, #28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009f2:	e160      	b.n	8000cb6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	2101      	movs	r1, #1
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000a00:	4013      	ands	r3, r2
 8000a02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f000 8152 	beq.w	8000cb0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d00b      	beq.n	8000a2c <HAL_GPIO_Init+0x48>
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d007      	beq.n	8000a2c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a20:	2b11      	cmp	r3, #17
 8000a22:	d003      	beq.n	8000a2c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	2b12      	cmp	r3, #18
 8000a2a:	d130      	bne.n	8000a8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	2203      	movs	r2, #3
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4013      	ands	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	68da      	ldr	r2, [r3, #12]
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a62:	2201      	movs	r2, #1
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	091b      	lsrs	r3, r3, #4
 8000a78:	f003 0201 	and.w	r2, r3, #1
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	68db      	ldr	r3, [r3, #12]
 8000a92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	2203      	movs	r2, #3
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	689a      	ldr	r2, [r3, #8]
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	d003      	beq.n	8000ace <HAL_GPIO_Init+0xea>
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	2b12      	cmp	r3, #18
 8000acc:	d123      	bne.n	8000b16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	08da      	lsrs	r2, r3, #3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3208      	adds	r2, #8
 8000ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ada:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	220f      	movs	r2, #15
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43db      	mvns	r3, r3
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	691a      	ldr	r2, [r3, #16]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	f003 0307 	and.w	r3, r3, #7
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	08da      	lsrs	r2, r3, #3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3208      	adds	r2, #8
 8000b10:	6939      	ldr	r1, [r7, #16]
 8000b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	2203      	movs	r2, #3
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f003 0203 	and.w	r2, r3, #3
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f000 80ac 	beq.w	8000cb0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b58:	4b5e      	ldr	r3, [pc, #376]	; (8000cd4 <HAL_GPIO_Init+0x2f0>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	4a5d      	ldr	r2, [pc, #372]	; (8000cd4 <HAL_GPIO_Init+0x2f0>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	6193      	str	r3, [r2, #24]
 8000b64:	4b5b      	ldr	r3, [pc, #364]	; (8000cd4 <HAL_GPIO_Init+0x2f0>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b70:	4a59      	ldr	r2, [pc, #356]	; (8000cd8 <HAL_GPIO_Init+0x2f4>)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	089b      	lsrs	r3, r3, #2
 8000b76:	3302      	adds	r3, #2
 8000b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	f003 0303 	and.w	r3, r3, #3
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	220f      	movs	r2, #15
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b9a:	d025      	beq.n	8000be8 <HAL_GPIO_Init+0x204>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a4f      	ldr	r2, [pc, #316]	; (8000cdc <HAL_GPIO_Init+0x2f8>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d01f      	beq.n	8000be4 <HAL_GPIO_Init+0x200>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a4e      	ldr	r2, [pc, #312]	; (8000ce0 <HAL_GPIO_Init+0x2fc>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d019      	beq.n	8000be0 <HAL_GPIO_Init+0x1fc>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a4d      	ldr	r2, [pc, #308]	; (8000ce4 <HAL_GPIO_Init+0x300>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d013      	beq.n	8000bdc <HAL_GPIO_Init+0x1f8>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a4c      	ldr	r2, [pc, #304]	; (8000ce8 <HAL_GPIO_Init+0x304>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d00d      	beq.n	8000bd8 <HAL_GPIO_Init+0x1f4>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a4b      	ldr	r2, [pc, #300]	; (8000cec <HAL_GPIO_Init+0x308>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d007      	beq.n	8000bd4 <HAL_GPIO_Init+0x1f0>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a4a      	ldr	r2, [pc, #296]	; (8000cf0 <HAL_GPIO_Init+0x30c>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d101      	bne.n	8000bd0 <HAL_GPIO_Init+0x1ec>
 8000bcc:	2306      	movs	r3, #6
 8000bce:	e00c      	b.n	8000bea <HAL_GPIO_Init+0x206>
 8000bd0:	2307      	movs	r3, #7
 8000bd2:	e00a      	b.n	8000bea <HAL_GPIO_Init+0x206>
 8000bd4:	2305      	movs	r3, #5
 8000bd6:	e008      	b.n	8000bea <HAL_GPIO_Init+0x206>
 8000bd8:	2304      	movs	r3, #4
 8000bda:	e006      	b.n	8000bea <HAL_GPIO_Init+0x206>
 8000bdc:	2303      	movs	r3, #3
 8000bde:	e004      	b.n	8000bea <HAL_GPIO_Init+0x206>
 8000be0:	2302      	movs	r3, #2
 8000be2:	e002      	b.n	8000bea <HAL_GPIO_Init+0x206>
 8000be4:	2301      	movs	r3, #1
 8000be6:	e000      	b.n	8000bea <HAL_GPIO_Init+0x206>
 8000be8:	2300      	movs	r3, #0
 8000bea:	697a      	ldr	r2, [r7, #20]
 8000bec:	f002 0203 	and.w	r2, r2, #3
 8000bf0:	0092      	lsls	r2, r2, #2
 8000bf2:	4093      	lsls	r3, r2
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bfa:	4937      	ldr	r1, [pc, #220]	; (8000cd8 <HAL_GPIO_Init+0x2f4>)
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	089b      	lsrs	r3, r3, #2
 8000c00:	3302      	adds	r3, #2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c08:	4b3a      	ldr	r3, [pc, #232]	; (8000cf4 <HAL_GPIO_Init+0x310>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	43db      	mvns	r3, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d003      	beq.n	8000c2c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c2c:	4a31      	ldr	r2, [pc, #196]	; (8000cf4 <HAL_GPIO_Init+0x310>)
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c32:	4b30      	ldr	r3, [pc, #192]	; (8000cf4 <HAL_GPIO_Init+0x310>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d003      	beq.n	8000c56 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c56:	4a27      	ldr	r2, [pc, #156]	; (8000cf4 <HAL_GPIO_Init+0x310>)
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c5c:	4b25      	ldr	r3, [pc, #148]	; (8000cf4 <HAL_GPIO_Init+0x310>)
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	43db      	mvns	r3, r3
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d003      	beq.n	8000c80 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c80:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <HAL_GPIO_Init+0x310>)
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c86:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <HAL_GPIO_Init+0x310>)
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4013      	ands	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000caa:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <HAL_GPIO_Init+0x310>)
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	f47f ae97 	bne.w	80009f4 <HAL_GPIO_Init+0x10>
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	371c      	adds	r7, #28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40010000 	.word	0x40010000
 8000cdc:	48000400 	.word	0x48000400
 8000ce0:	48000800 	.word	0x48000800
 8000ce4:	48000c00 	.word	0x48000c00
 8000ce8:	48001000 	.word	0x48001000
 8000cec:	48001400 	.word	0x48001400
 8000cf0:	48001800 	.word	0x48001800
 8000cf4:	40010400 	.word	0x40010400

08000cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	460b      	mov	r3, r1
 8000d02:	807b      	strh	r3, [r7, #2]
 8000d04:	4613      	mov	r3, r2
 8000d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d08:	787b      	ldrb	r3, [r7, #1]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d003      	beq.n	8000d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d0e:	887a      	ldrh	r2, [r7, #2]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d14:	e002      	b.n	8000d1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d16:	887a      	ldrh	r2, [r7, #2]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d102      	bne.n	8000d42 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	f000 bf01 	b.w	8001b44 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f000 8160 	beq.w	8001012 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d52:	4bae      	ldr	r3, [pc, #696]	; (800100c <HAL_RCC_OscConfig+0x2e4>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 030c 	and.w	r3, r3, #12
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	d00c      	beq.n	8000d78 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d5e:	4bab      	ldr	r3, [pc, #684]	; (800100c <HAL_RCC_OscConfig+0x2e4>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 030c 	and.w	r3, r3, #12
 8000d66:	2b08      	cmp	r3, #8
 8000d68:	d159      	bne.n	8000e1e <HAL_RCC_OscConfig+0xf6>
 8000d6a:	4ba8      	ldr	r3, [pc, #672]	; (800100c <HAL_RCC_OscConfig+0x2e4>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d76:	d152      	bne.n	8000e1e <HAL_RCC_OscConfig+0xf6>
 8000d78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d7c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d80:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000d84:	fa93 f3a3 	rbit	r3, r3
 8000d88:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d8c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d90:	fab3 f383 	clz	r3, r3
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d102      	bne.n	8000daa <HAL_RCC_OscConfig+0x82>
 8000da4:	4b99      	ldr	r3, [pc, #612]	; (800100c <HAL_RCC_OscConfig+0x2e4>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	e015      	b.n	8000dd6 <HAL_RCC_OscConfig+0xae>
 8000daa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dae:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000db6:	fa93 f3a3 	rbit	r3, r3
 8000dba:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000dbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dc2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000dc6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000dca:	fa93 f3a3 	rbit	r3, r3
 8000dce:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000dd2:	4b8e      	ldr	r3, [pc, #568]	; (800100c <HAL_RCC_OscConfig+0x2e4>)
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dda:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000dde:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000de2:	fa92 f2a2 	rbit	r2, r2
 8000de6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000dea:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	f042 0220 	orr.w	r2, r2, #32
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	f002 021f 	and.w	r2, r2, #31
 8000dfe:	2101      	movs	r1, #1
 8000e00:	fa01 f202 	lsl.w	r2, r1, r2
 8000e04:	4013      	ands	r3, r2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 8102 	beq.w	8001010 <HAL_RCC_OscConfig+0x2e8>
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f040 80fc 	bne.w	8001010 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	f000 be93 	b.w	8001b44 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e28:	d106      	bne.n	8000e38 <HAL_RCC_OscConfig+0x110>
 8000e2a:	4b78      	ldr	r3, [pc, #480]	; (800100c <HAL_RCC_OscConfig+0x2e4>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a77      	ldr	r2, [pc, #476]	; (800100c <HAL_RCC_OscConfig+0x2e4>)
 8000e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	e030      	b.n	8000e9a <HAL_RCC_OscConfig+0x172>
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d10c      	bne.n	8000e5c <HAL_RCC_OscConfig+0x134>
 8000e42:	4b72      	ldr	r3, [pc, #456]	; (800100c <HAL_RCC_OscConfig+0x2e4>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a71      	ldr	r2, [pc, #452]	; (800100c <HAL_RCC_OscConfig+0x2e4>)
 8000e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	4b6f      	ldr	r3, [pc, #444]	; (800100c <HAL_RCC_OscConfig+0x2e4>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a6e      	ldr	r2, [pc, #440]	; (800100c <HAL_RCC_OscConfig+0x2e4>)
 8000e54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	e01e      	b.n	8000e9a <HAL_RCC_OscConfig+0x172>
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e66:	d10c      	bne.n	8000e82 <HAL_RCC_OscConfig+0x15a>
 8000e68:	4b68      	ldr	r3, [pc, #416]	; (800100c <HAL_RCC_OscConfig+0x2e4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a67      	ldr	r2, [pc, #412]	; (800100c <HAL_RCC_OscConfig+0x2e4>)
 8000e6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e72:	6013      	str	r3, [r2, #0]
 8000e74:	4b65      	ldr	r3, [pc, #404]	; (800100c <HAL_RCC_OscConfig+0x2e4>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a64      	ldr	r2, [pc, #400]	; (800100c <HAL_RCC_OscConfig+0x2e4>)
 8000e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	e00b      	b.n	8000e9a <HAL_RCC_OscConfig+0x172>
 8000e82:	4b62      	ldr	r3, [pc, #392]	; (800100c <HAL_RCC_OscConfig+0x2e4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a61      	ldr	r2, [pc, #388]	; (800100c <HAL_RCC_OscConfig+0x2e4>)
 8000e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	4b5f      	ldr	r3, [pc, #380]	; (800100c <HAL_RCC_OscConfig+0x2e4>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a5e      	ldr	r2, [pc, #376]	; (800100c <HAL_RCC_OscConfig+0x2e4>)
 8000e94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e98:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d059      	beq.n	8000f58 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea4:	f7ff fcb0 	bl	8000808 <HAL_GetTick>
 8000ea8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eac:	e00a      	b.n	8000ec4 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eae:	f7ff fcab 	bl	8000808 <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b64      	cmp	r3, #100	; 0x64
 8000ebc:	d902      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	f000 be40 	b.w	8001b44 <HAL_RCC_OscConfig+0xe1c>
 8000ec4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ecc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000ed0:	fa93 f3a3 	rbit	r3, r3
 8000ed4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000ed8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000edc:	fab3 f383 	clz	r3, r3
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	095b      	lsrs	r3, r3, #5
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d102      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x1ce>
 8000ef0:	4b46      	ldr	r3, [pc, #280]	; (800100c <HAL_RCC_OscConfig+0x2e4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	e015      	b.n	8000f22 <HAL_RCC_OscConfig+0x1fa>
 8000ef6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000efa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000f02:	fa93 f3a3 	rbit	r3, r3
 8000f06:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000f0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f0e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f12:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000f16:	fa93 f3a3 	rbit	r3, r3
 8000f1a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f1e:	4b3b      	ldr	r3, [pc, #236]	; (800100c <HAL_RCC_OscConfig+0x2e4>)
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f26:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000f2a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000f2e:	fa92 f2a2 	rbit	r2, r2
 8000f32:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000f36:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f3a:	fab2 f282 	clz	r2, r2
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	f042 0220 	orr.w	r2, r2, #32
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	f002 021f 	and.w	r2, r2, #31
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f50:	4013      	ands	r3, r2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0ab      	beq.n	8000eae <HAL_RCC_OscConfig+0x186>
 8000f56:	e05c      	b.n	8001012 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f58:	f7ff fc56 	bl	8000808 <HAL_GetTick>
 8000f5c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f60:	e00a      	b.n	8000f78 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f62:	f7ff fc51 	bl	8000808 <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b64      	cmp	r3, #100	; 0x64
 8000f70:	d902      	bls.n	8000f78 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	f000 bde6 	b.w	8001b44 <HAL_RCC_OscConfig+0xe1c>
 8000f78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f7c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f80:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000f84:	fa93 f3a3 	rbit	r3, r3
 8000f88:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000f8c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f90:	fab3 f383 	clz	r3, r3
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	095b      	lsrs	r3, r3, #5
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d102      	bne.n	8000faa <HAL_RCC_OscConfig+0x282>
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <HAL_RCC_OscConfig+0x2e4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	e015      	b.n	8000fd6 <HAL_RCC_OscConfig+0x2ae>
 8000faa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fae:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000fb6:	fa93 f3a3 	rbit	r3, r3
 8000fba:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000fbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000fc6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000fca:	fa93 f3a3 	rbit	r3, r3
 8000fce:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <HAL_RCC_OscConfig+0x2e4>)
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fda:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000fde:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000fe2:	fa92 f2a2 	rbit	r2, r2
 8000fe6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000fea:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000fee:	fab2 f282 	clz	r2, r2
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	f042 0220 	orr.w	r2, r2, #32
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	f002 021f 	and.w	r2, r2, #31
 8000ffe:	2101      	movs	r1, #1
 8001000:	fa01 f202 	lsl.w	r2, r1, r2
 8001004:	4013      	ands	r3, r2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1ab      	bne.n	8000f62 <HAL_RCC_OscConfig+0x23a>
 800100a:	e002      	b.n	8001012 <HAL_RCC_OscConfig+0x2ea>
 800100c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 8170 	beq.w	8001302 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001022:	4bd0      	ldr	r3, [pc, #832]	; (8001364 <HAL_RCC_OscConfig+0x63c>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 030c 	and.w	r3, r3, #12
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00c      	beq.n	8001048 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800102e:	4bcd      	ldr	r3, [pc, #820]	; (8001364 <HAL_RCC_OscConfig+0x63c>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 030c 	and.w	r3, r3, #12
 8001036:	2b08      	cmp	r3, #8
 8001038:	d16d      	bne.n	8001116 <HAL_RCC_OscConfig+0x3ee>
 800103a:	4bca      	ldr	r3, [pc, #808]	; (8001364 <HAL_RCC_OscConfig+0x63c>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001046:	d166      	bne.n	8001116 <HAL_RCC_OscConfig+0x3ee>
 8001048:	2302      	movs	r3, #2
 800104a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001052:	fa93 f3a3 	rbit	r3, r3
 8001056:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800105a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105e:	fab3 f383 	clz	r3, r3
 8001062:	b2db      	uxtb	r3, r3
 8001064:	095b      	lsrs	r3, r3, #5
 8001066:	b2db      	uxtb	r3, r3
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b01      	cmp	r3, #1
 8001070:	d102      	bne.n	8001078 <HAL_RCC_OscConfig+0x350>
 8001072:	4bbc      	ldr	r3, [pc, #752]	; (8001364 <HAL_RCC_OscConfig+0x63c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	e013      	b.n	80010a0 <HAL_RCC_OscConfig+0x378>
 8001078:	2302      	movs	r3, #2
 800107a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001082:	fa93 f3a3 	rbit	r3, r3
 8001086:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800108a:	2302      	movs	r3, #2
 800108c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001090:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001094:	fa93 f3a3 	rbit	r3, r3
 8001098:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800109c:	4bb1      	ldr	r3, [pc, #708]	; (8001364 <HAL_RCC_OscConfig+0x63c>)
 800109e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a0:	2202      	movs	r2, #2
 80010a2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80010a6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80010aa:	fa92 f2a2 	rbit	r2, r2
 80010ae:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80010b2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80010b6:	fab2 f282 	clz	r2, r2
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	f042 0220 	orr.w	r2, r2, #32
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	f002 021f 	and.w	r2, r2, #31
 80010c6:	2101      	movs	r1, #1
 80010c8:	fa01 f202 	lsl.w	r2, r1, r2
 80010cc:	4013      	ands	r3, r2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d007      	beq.n	80010e2 <HAL_RCC_OscConfig+0x3ba>
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d002      	beq.n	80010e2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	f000 bd31 	b.w	8001b44 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e2:	4ba0      	ldr	r3, [pc, #640]	; (8001364 <HAL_RCC_OscConfig+0x63c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	21f8      	movs	r1, #248	; 0xf8
 80010f2:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f6:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80010fa:	fa91 f1a1 	rbit	r1, r1
 80010fe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001102:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001106:	fab1 f181 	clz	r1, r1
 800110a:	b2c9      	uxtb	r1, r1
 800110c:	408b      	lsls	r3, r1
 800110e:	4995      	ldr	r1, [pc, #596]	; (8001364 <HAL_RCC_OscConfig+0x63c>)
 8001110:	4313      	orrs	r3, r2
 8001112:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001114:	e0f5      	b.n	8001302 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 8085 	beq.w	800122c <HAL_RCC_OscConfig+0x504>
 8001122:	2301      	movs	r3, #1
 8001124:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001128:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800112c:	fa93 f3a3 	rbit	r3, r3
 8001130:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001134:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001138:	fab3 f383 	clz	r3, r3
 800113c:	b2db      	uxtb	r3, r3
 800113e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001142:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	461a      	mov	r2, r3
 800114a:	2301      	movs	r3, #1
 800114c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114e:	f7ff fb5b 	bl	8000808 <HAL_GetTick>
 8001152:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001156:	e00a      	b.n	800116e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001158:	f7ff fb56 	bl	8000808 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d902      	bls.n	800116e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	f000 bceb 	b.w	8001b44 <HAL_RCC_OscConfig+0xe1c>
 800116e:	2302      	movs	r3, #2
 8001170:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001174:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001178:	fa93 f3a3 	rbit	r3, r3
 800117c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001180:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001184:	fab3 f383 	clz	r3, r3
 8001188:	b2db      	uxtb	r3, r3
 800118a:	095b      	lsrs	r3, r3, #5
 800118c:	b2db      	uxtb	r3, r3
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b01      	cmp	r3, #1
 8001196:	d102      	bne.n	800119e <HAL_RCC_OscConfig+0x476>
 8001198:	4b72      	ldr	r3, [pc, #456]	; (8001364 <HAL_RCC_OscConfig+0x63c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	e013      	b.n	80011c6 <HAL_RCC_OscConfig+0x49e>
 800119e:	2302      	movs	r3, #2
 80011a0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80011a8:	fa93 f3a3 	rbit	r3, r3
 80011ac:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80011b0:	2302      	movs	r3, #2
 80011b2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011b6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80011ba:	fa93 f3a3 	rbit	r3, r3
 80011be:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011c2:	4b68      	ldr	r3, [pc, #416]	; (8001364 <HAL_RCC_OscConfig+0x63c>)
 80011c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c6:	2202      	movs	r2, #2
 80011c8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80011cc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80011d0:	fa92 f2a2 	rbit	r2, r2
 80011d4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80011d8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011dc:	fab2 f282 	clz	r2, r2
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	f042 0220 	orr.w	r2, r2, #32
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	f002 021f 	and.w	r2, r2, #31
 80011ec:	2101      	movs	r1, #1
 80011ee:	fa01 f202 	lsl.w	r2, r1, r2
 80011f2:	4013      	ands	r3, r2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0af      	beq.n	8001158 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f8:	4b5a      	ldr	r3, [pc, #360]	; (8001364 <HAL_RCC_OscConfig+0x63c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	21f8      	movs	r1, #248	; 0xf8
 8001208:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001210:	fa91 f1a1 	rbit	r1, r1
 8001214:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001218:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800121c:	fab1 f181 	clz	r1, r1
 8001220:	b2c9      	uxtb	r1, r1
 8001222:	408b      	lsls	r3, r1
 8001224:	494f      	ldr	r1, [pc, #316]	; (8001364 <HAL_RCC_OscConfig+0x63c>)
 8001226:	4313      	orrs	r3, r2
 8001228:	600b      	str	r3, [r1, #0]
 800122a:	e06a      	b.n	8001302 <HAL_RCC_OscConfig+0x5da>
 800122c:	2301      	movs	r3, #1
 800122e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001232:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001236:	fa93 f3a3 	rbit	r3, r3
 800123a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800123e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001242:	fab3 f383 	clz	r3, r3
 8001246:	b2db      	uxtb	r3, r3
 8001248:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800124c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	461a      	mov	r2, r3
 8001254:	2300      	movs	r3, #0
 8001256:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001258:	f7ff fad6 	bl	8000808 <HAL_GetTick>
 800125c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001260:	e00a      	b.n	8001278 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001262:	f7ff fad1 	bl	8000808 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d902      	bls.n	8001278 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	f000 bc66 	b.w	8001b44 <HAL_RCC_OscConfig+0xe1c>
 8001278:	2302      	movs	r3, #2
 800127a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001282:	fa93 f3a3 	rbit	r3, r3
 8001286:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800128a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128e:	fab3 f383 	clz	r3, r3
 8001292:	b2db      	uxtb	r3, r3
 8001294:	095b      	lsrs	r3, r3, #5
 8001296:	b2db      	uxtb	r3, r3
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d102      	bne.n	80012a8 <HAL_RCC_OscConfig+0x580>
 80012a2:	4b30      	ldr	r3, [pc, #192]	; (8001364 <HAL_RCC_OscConfig+0x63c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	e013      	b.n	80012d0 <HAL_RCC_OscConfig+0x5a8>
 80012a8:	2302      	movs	r3, #2
 80012aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012b2:	fa93 f3a3 	rbit	r3, r3
 80012b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80012ba:	2302      	movs	r3, #2
 80012bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012c4:	fa93 f3a3 	rbit	r3, r3
 80012c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012cc:	4b25      	ldr	r3, [pc, #148]	; (8001364 <HAL_RCC_OscConfig+0x63c>)
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	2202      	movs	r2, #2
 80012d2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80012d6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80012da:	fa92 f2a2 	rbit	r2, r2
 80012de:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80012e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012e6:	fab2 f282 	clz	r2, r2
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	f042 0220 	orr.w	r2, r2, #32
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	f002 021f 	and.w	r2, r2, #31
 80012f6:	2101      	movs	r1, #1
 80012f8:	fa01 f202 	lsl.w	r2, r1, r2
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1af      	bne.n	8001262 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80da 	beq.w	80014c6 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d069      	beq.n	80013f0 <HAL_RCC_OscConfig+0x6c8>
 800131c:	2301      	movs	r3, #1
 800131e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001326:	fa93 f3a3 	rbit	r3, r3
 800132a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800132e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001332:	fab3 f383 	clz	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	461a      	mov	r2, r3
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <HAL_RCC_OscConfig+0x640>)
 800133c:	4413      	add	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	461a      	mov	r2, r3
 8001342:	2301      	movs	r3, #1
 8001344:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001346:	f7ff fa5f 	bl	8000808 <HAL_GetTick>
 800134a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134e:	e00d      	b.n	800136c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001350:	f7ff fa5a 	bl	8000808 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d905      	bls.n	800136c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e3ef      	b.n	8001b44 <HAL_RCC_OscConfig+0xe1c>
 8001364:	40021000 	.word	0x40021000
 8001368:	10908120 	.word	0x10908120
 800136c:	2302      	movs	r3, #2
 800136e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001376:	fa93 f2a3 	rbit	r2, r3
 800137a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001384:	2202      	movs	r2, #2
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	fa93 f2a3 	rbit	r2, r3
 8001392:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800139c:	2202      	movs	r2, #2
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	fa93 f2a3 	rbit	r2, r3
 80013aa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80013ae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b0:	4ba4      	ldr	r3, [pc, #656]	; (8001644 <HAL_RCC_OscConfig+0x91c>)
 80013b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013b4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80013b8:	2102      	movs	r1, #2
 80013ba:	6019      	str	r1, [r3, #0]
 80013bc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	fa93 f1a3 	rbit	r1, r3
 80013c6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80013ca:	6019      	str	r1, [r3, #0]
  return result;
 80013cc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	fab3 f383 	clz	r3, r3
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f003 031f 	and.w	r3, r3, #31
 80013e2:	2101      	movs	r1, #1
 80013e4:	fa01 f303 	lsl.w	r3, r1, r3
 80013e8:	4013      	ands	r3, r2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0b0      	beq.n	8001350 <HAL_RCC_OscConfig+0x628>
 80013ee:	e06a      	b.n	80014c6 <HAL_RCC_OscConfig+0x79e>
 80013f0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80013f4:	2201      	movs	r2, #1
 80013f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	fa93 f2a3 	rbit	r2, r3
 8001402:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001406:	601a      	str	r2, [r3, #0]
  return result;
 8001408:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800140c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800140e:	fab3 f383 	clz	r3, r3
 8001412:	b2db      	uxtb	r3, r3
 8001414:	461a      	mov	r2, r3
 8001416:	4b8c      	ldr	r3, [pc, #560]	; (8001648 <HAL_RCC_OscConfig+0x920>)
 8001418:	4413      	add	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	461a      	mov	r2, r3
 800141e:	2300      	movs	r3, #0
 8001420:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001422:	f7ff f9f1 	bl	8000808 <HAL_GetTick>
 8001426:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142a:	e009      	b.n	8001440 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800142c:	f7ff f9ec 	bl	8000808 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e381      	b.n	8001b44 <HAL_RCC_OscConfig+0xe1c>
 8001440:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001444:	2202      	movs	r2, #2
 8001446:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001448:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	fa93 f2a3 	rbit	r2, r3
 8001452:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800145c:	2202      	movs	r2, #2
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	fa93 f2a3 	rbit	r2, r3
 800146a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001474:	2202      	movs	r2, #2
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	fa93 f2a3 	rbit	r2, r3
 8001482:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001486:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001488:	4b6e      	ldr	r3, [pc, #440]	; (8001644 <HAL_RCC_OscConfig+0x91c>)
 800148a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800148c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001490:	2102      	movs	r1, #2
 8001492:	6019      	str	r1, [r3, #0]
 8001494:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	fa93 f1a3 	rbit	r1, r3
 800149e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80014a2:	6019      	str	r1, [r3, #0]
  return result;
 80014a4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	fab3 f383 	clz	r3, r3
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	f003 031f 	and.w	r3, r3, #31
 80014ba:	2101      	movs	r1, #1
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	4013      	ands	r3, r2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1b2      	bne.n	800142c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 8157 	beq.w	8001784 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014dc:	4b59      	ldr	r3, [pc, #356]	; (8001644 <HAL_RCC_OscConfig+0x91c>)
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d112      	bne.n	800150e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014e8:	4b56      	ldr	r3, [pc, #344]	; (8001644 <HAL_RCC_OscConfig+0x91c>)
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	4a55      	ldr	r2, [pc, #340]	; (8001644 <HAL_RCC_OscConfig+0x91c>)
 80014ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f2:	61d3      	str	r3, [r2, #28]
 80014f4:	4b53      	ldr	r3, [pc, #332]	; (8001644 <HAL_RCC_OscConfig+0x91c>)
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001508:	2301      	movs	r3, #1
 800150a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150e:	4b4f      	ldr	r3, [pc, #316]	; (800164c <HAL_RCC_OscConfig+0x924>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001516:	2b00      	cmp	r3, #0
 8001518:	d11a      	bne.n	8001550 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800151a:	4b4c      	ldr	r3, [pc, #304]	; (800164c <HAL_RCC_OscConfig+0x924>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a4b      	ldr	r2, [pc, #300]	; (800164c <HAL_RCC_OscConfig+0x924>)
 8001520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001524:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001526:	f7ff f96f 	bl	8000808 <HAL_GetTick>
 800152a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152e:	e009      	b.n	8001544 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001530:	f7ff f96a 	bl	8000808 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b64      	cmp	r3, #100	; 0x64
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e2ff      	b.n	8001b44 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001544:	4b41      	ldr	r3, [pc, #260]	; (800164c <HAL_RCC_OscConfig+0x924>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0ef      	beq.n	8001530 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d106      	bne.n	8001568 <HAL_RCC_OscConfig+0x840>
 800155a:	4b3a      	ldr	r3, [pc, #232]	; (8001644 <HAL_RCC_OscConfig+0x91c>)
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	4a39      	ldr	r2, [pc, #228]	; (8001644 <HAL_RCC_OscConfig+0x91c>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6213      	str	r3, [r2, #32]
 8001566:	e02f      	b.n	80015c8 <HAL_RCC_OscConfig+0x8a0>
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10c      	bne.n	800158c <HAL_RCC_OscConfig+0x864>
 8001572:	4b34      	ldr	r3, [pc, #208]	; (8001644 <HAL_RCC_OscConfig+0x91c>)
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	4a33      	ldr	r2, [pc, #204]	; (8001644 <HAL_RCC_OscConfig+0x91c>)
 8001578:	f023 0301 	bic.w	r3, r3, #1
 800157c:	6213      	str	r3, [r2, #32]
 800157e:	4b31      	ldr	r3, [pc, #196]	; (8001644 <HAL_RCC_OscConfig+0x91c>)
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	4a30      	ldr	r2, [pc, #192]	; (8001644 <HAL_RCC_OscConfig+0x91c>)
 8001584:	f023 0304 	bic.w	r3, r3, #4
 8001588:	6213      	str	r3, [r2, #32]
 800158a:	e01d      	b.n	80015c8 <HAL_RCC_OscConfig+0x8a0>
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2b05      	cmp	r3, #5
 8001594:	d10c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x888>
 8001596:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <HAL_RCC_OscConfig+0x91c>)
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	4a2a      	ldr	r2, [pc, #168]	; (8001644 <HAL_RCC_OscConfig+0x91c>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6213      	str	r3, [r2, #32]
 80015a2:	4b28      	ldr	r3, [pc, #160]	; (8001644 <HAL_RCC_OscConfig+0x91c>)
 80015a4:	6a1b      	ldr	r3, [r3, #32]
 80015a6:	4a27      	ldr	r2, [pc, #156]	; (8001644 <HAL_RCC_OscConfig+0x91c>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6213      	str	r3, [r2, #32]
 80015ae:	e00b      	b.n	80015c8 <HAL_RCC_OscConfig+0x8a0>
 80015b0:	4b24      	ldr	r3, [pc, #144]	; (8001644 <HAL_RCC_OscConfig+0x91c>)
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	4a23      	ldr	r2, [pc, #140]	; (8001644 <HAL_RCC_OscConfig+0x91c>)
 80015b6:	f023 0301 	bic.w	r3, r3, #1
 80015ba:	6213      	str	r3, [r2, #32]
 80015bc:	4b21      	ldr	r3, [pc, #132]	; (8001644 <HAL_RCC_OscConfig+0x91c>)
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	4a20      	ldr	r2, [pc, #128]	; (8001644 <HAL_RCC_OscConfig+0x91c>)
 80015c2:	f023 0304 	bic.w	r3, r3, #4
 80015c6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d06a      	beq.n	80016a8 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d2:	f7ff f919 	bl	8000808 <HAL_GetTick>
 80015d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015da:	e00b      	b.n	80015f4 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015dc:	f7ff f914 	bl	8000808 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e2a7      	b.n	8001b44 <HAL_RCC_OscConfig+0xe1c>
 80015f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015f8:	2202      	movs	r2, #2
 80015fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	fa93 f2a3 	rbit	r2, r3
 8001606:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001610:	2202      	movs	r2, #2
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	fa93 f2a3 	rbit	r2, r3
 800161e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001622:	601a      	str	r2, [r3, #0]
  return result;
 8001624:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001628:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162a:	fab3 f383 	clz	r3, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	095b      	lsrs	r3, r3, #5
 8001632:	b2db      	uxtb	r3, r3
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d108      	bne.n	8001650 <HAL_RCC_OscConfig+0x928>
 800163e:	4b01      	ldr	r3, [pc, #4]	; (8001644 <HAL_RCC_OscConfig+0x91c>)
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	e013      	b.n	800166c <HAL_RCC_OscConfig+0x944>
 8001644:	40021000 	.word	0x40021000
 8001648:	10908120 	.word	0x10908120
 800164c:	40007000 	.word	0x40007000
 8001650:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001654:	2202      	movs	r2, #2
 8001656:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001658:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	fa93 f2a3 	rbit	r2, r3
 8001662:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	4bc0      	ldr	r3, [pc, #768]	; (800196c <HAL_RCC_OscConfig+0xc44>)
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001670:	2102      	movs	r1, #2
 8001672:	6011      	str	r1, [r2, #0]
 8001674:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	fa92 f1a2 	rbit	r1, r2
 800167e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001682:	6011      	str	r1, [r2, #0]
  return result;
 8001684:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001688:	6812      	ldr	r2, [r2, #0]
 800168a:	fab2 f282 	clz	r2, r2
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	f002 021f 	and.w	r2, r2, #31
 800169a:	2101      	movs	r1, #1
 800169c:	fa01 f202 	lsl.w	r2, r1, r2
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d09a      	beq.n	80015dc <HAL_RCC_OscConfig+0x8b4>
 80016a6:	e063      	b.n	8001770 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a8:	f7ff f8ae 	bl	8000808 <HAL_GetTick>
 80016ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b0:	e00b      	b.n	80016ca <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b2:	f7ff f8a9 	bl	8000808 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e23c      	b.n	8001b44 <HAL_RCC_OscConfig+0xe1c>
 80016ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016ce:	2202      	movs	r2, #2
 80016d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	fa93 f2a3 	rbit	r2, r3
 80016dc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016e6:	2202      	movs	r2, #2
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	fa93 f2a3 	rbit	r2, r3
 80016f4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016f8:	601a      	str	r2, [r3, #0]
  return result;
 80016fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001700:	fab3 f383 	clz	r3, r3
 8001704:	b2db      	uxtb	r3, r3
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	b2db      	uxtb	r3, r3
 800170a:	f043 0302 	orr.w	r3, r3, #2
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d102      	bne.n	800171a <HAL_RCC_OscConfig+0x9f2>
 8001714:	4b95      	ldr	r3, [pc, #596]	; (800196c <HAL_RCC_OscConfig+0xc44>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	e00d      	b.n	8001736 <HAL_RCC_OscConfig+0xa0e>
 800171a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800171e:	2202      	movs	r2, #2
 8001720:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001722:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	fa93 f2a3 	rbit	r2, r3
 800172c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	4b8e      	ldr	r3, [pc, #568]	; (800196c <HAL_RCC_OscConfig+0xc44>)
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800173a:	2102      	movs	r1, #2
 800173c:	6011      	str	r1, [r2, #0]
 800173e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	fa92 f1a2 	rbit	r1, r2
 8001748:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800174c:	6011      	str	r1, [r2, #0]
  return result;
 800174e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	fab2 f282 	clz	r2, r2
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	f002 021f 	and.w	r2, r2, #31
 8001764:	2101      	movs	r1, #1
 8001766:	fa01 f202 	lsl.w	r2, r1, r2
 800176a:	4013      	ands	r3, r2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1a0      	bne.n	80016b2 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001770:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001774:	2b01      	cmp	r3, #1
 8001776:	d105      	bne.n	8001784 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001778:	4b7c      	ldr	r3, [pc, #496]	; (800196c <HAL_RCC_OscConfig+0xc44>)
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	4a7b      	ldr	r2, [pc, #492]	; (800196c <HAL_RCC_OscConfig+0xc44>)
 800177e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001782:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 81d9 	beq.w	8001b42 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001790:	4b76      	ldr	r3, [pc, #472]	; (800196c <HAL_RCC_OscConfig+0xc44>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 030c 	and.w	r3, r3, #12
 8001798:	2b08      	cmp	r3, #8
 800179a:	f000 81a6 	beq.w	8001aea <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	f040 811e 	bne.w	80019e6 <HAL_RCC_OscConfig+0xcbe>
 80017aa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	fa93 f2a3 	rbit	r2, r3
 80017be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017c2:	601a      	str	r2, [r3, #0]
  return result;
 80017c4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017c8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ca:	fab3 f383 	clz	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	461a      	mov	r2, r3
 80017dc:	2300      	movs	r3, #0
 80017de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff f812 	bl	8000808 <HAL_GetTick>
 80017e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e8:	e009      	b.n	80017fe <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ea:	f7ff f80d 	bl	8000808 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e1a2      	b.n	8001b44 <HAL_RCC_OscConfig+0xe1c>
 80017fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001802:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001806:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001808:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	fa93 f2a3 	rbit	r2, r3
 8001812:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001816:	601a      	str	r2, [r3, #0]
  return result;
 8001818:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800181c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800181e:	fab3 f383 	clz	r3, r3
 8001822:	b2db      	uxtb	r3, r3
 8001824:	095b      	lsrs	r3, r3, #5
 8001826:	b2db      	uxtb	r3, r3
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b01      	cmp	r3, #1
 8001830:	d102      	bne.n	8001838 <HAL_RCC_OscConfig+0xb10>
 8001832:	4b4e      	ldr	r3, [pc, #312]	; (800196c <HAL_RCC_OscConfig+0xc44>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	e01b      	b.n	8001870 <HAL_RCC_OscConfig+0xb48>
 8001838:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800183c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001840:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001842:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	fa93 f2a3 	rbit	r2, r3
 800184c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001856:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	fa93 f2a3 	rbit	r2, r3
 8001866:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	4b3f      	ldr	r3, [pc, #252]	; (800196c <HAL_RCC_OscConfig+0xc44>)
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001874:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001878:	6011      	str	r1, [r2, #0]
 800187a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	fa92 f1a2 	rbit	r1, r2
 8001884:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001888:	6011      	str	r1, [r2, #0]
  return result;
 800188a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	fab2 f282 	clz	r2, r2
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	f042 0220 	orr.w	r2, r2, #32
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	f002 021f 	and.w	r2, r2, #31
 80018a0:	2101      	movs	r1, #1
 80018a2:	fa01 f202 	lsl.w	r2, r1, r2
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d19e      	bne.n	80017ea <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ac:	4b2f      	ldr	r3, [pc, #188]	; (800196c <HAL_RCC_OscConfig+0xc44>)
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	f023 020f 	bic.w	r2, r3, #15
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	492c      	ldr	r1, [pc, #176]	; (800196c <HAL_RCC_OscConfig+0xc44>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	62cb      	str	r3, [r1, #44]	; 0x2c
 80018c0:	4b2a      	ldr	r3, [pc, #168]	; (800196c <HAL_RCC_OscConfig+0xc44>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6a19      	ldr	r1, [r3, #32]
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	430b      	orrs	r3, r1
 80018d6:	4925      	ldr	r1, [pc, #148]	; (800196c <HAL_RCC_OscConfig+0xc44>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	604b      	str	r3, [r1, #4]
 80018dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	fa93 f2a3 	rbit	r2, r3
 80018f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018f4:	601a      	str	r2, [r3, #0]
  return result;
 80018f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018fa:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018fc:	fab3 f383 	clz	r3, r3
 8001900:	b2db      	uxtb	r3, r3
 8001902:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001906:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	461a      	mov	r2, r3
 800190e:	2301      	movs	r3, #1
 8001910:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001912:	f7fe ff79 	bl	8000808 <HAL_GetTick>
 8001916:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800191a:	e009      	b.n	8001930 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800191c:	f7fe ff74 	bl	8000808 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e109      	b.n	8001b44 <HAL_RCC_OscConfig+0xe1c>
 8001930:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001934:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001938:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	fa93 f2a3 	rbit	r2, r3
 8001944:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001948:	601a      	str	r2, [r3, #0]
  return result;
 800194a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800194e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001950:	fab3 f383 	clz	r3, r3
 8001954:	b2db      	uxtb	r3, r3
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	b2db      	uxtb	r3, r3
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b01      	cmp	r3, #1
 8001962:	d105      	bne.n	8001970 <HAL_RCC_OscConfig+0xc48>
 8001964:	4b01      	ldr	r3, [pc, #4]	; (800196c <HAL_RCC_OscConfig+0xc44>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	e01e      	b.n	80019a8 <HAL_RCC_OscConfig+0xc80>
 800196a:	bf00      	nop
 800196c:	40021000 	.word	0x40021000
 8001970:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001974:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	fa93 f2a3 	rbit	r2, r3
 8001984:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800198e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	fa93 f2a3 	rbit	r2, r3
 800199e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	4b6a      	ldr	r3, [pc, #424]	; (8001b50 <HAL_RCC_OscConfig+0xe28>)
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80019ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019b0:	6011      	str	r1, [r2, #0]
 80019b2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	fa92 f1a2 	rbit	r1, r2
 80019bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019c0:	6011      	str	r1, [r2, #0]
  return result;
 80019c2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	fab2 f282 	clz	r2, r2
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	f042 0220 	orr.w	r2, r2, #32
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	f002 021f 	and.w	r2, r2, #31
 80019d8:	2101      	movs	r1, #1
 80019da:	fa01 f202 	lsl.w	r2, r1, r2
 80019de:	4013      	ands	r3, r2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d09b      	beq.n	800191c <HAL_RCC_OscConfig+0xbf4>
 80019e4:	e0ad      	b.n	8001b42 <HAL_RCC_OscConfig+0xe1a>
 80019e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	fa93 f2a3 	rbit	r2, r3
 80019fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019fe:	601a      	str	r2, [r3, #0]
  return result;
 8001a00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a04:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a06:	fab3 f383 	clz	r3, r3
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	461a      	mov	r2, r3
 8001a18:	2300      	movs	r3, #0
 8001a1a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7fe fef4 	bl	8000808 <HAL_GetTick>
 8001a20:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a24:	e009      	b.n	8001a3a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a26:	f7fe feef 	bl	8000808 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e084      	b.n	8001b44 <HAL_RCC_OscConfig+0xe1c>
 8001a3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	fa93 f2a3 	rbit	r2, r3
 8001a4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a52:	601a      	str	r2, [r3, #0]
  return result;
 8001a54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a5a:	fab3 f383 	clz	r3, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	095b      	lsrs	r3, r3, #5
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d102      	bne.n	8001a74 <HAL_RCC_OscConfig+0xd4c>
 8001a6e:	4b38      	ldr	r3, [pc, #224]	; (8001b50 <HAL_RCC_OscConfig+0xe28>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	e01b      	b.n	8001aac <HAL_RCC_OscConfig+0xd84>
 8001a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	fa93 f2a3 	rbit	r2, r3
 8001a88:	f107 0320 	add.w	r3, r7, #32
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	f107 031c 	add.w	r3, r7, #28
 8001a92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	f107 031c 	add.w	r3, r7, #28
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	fa93 f2a3 	rbit	r2, r3
 8001aa2:	f107 0318 	add.w	r3, r7, #24
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <HAL_RCC_OscConfig+0xe28>)
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	f107 0214 	add.w	r2, r7, #20
 8001ab0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ab4:	6011      	str	r1, [r2, #0]
 8001ab6:	f107 0214 	add.w	r2, r7, #20
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	fa92 f1a2 	rbit	r1, r2
 8001ac0:	f107 0210 	add.w	r2, r7, #16
 8001ac4:	6011      	str	r1, [r2, #0]
  return result;
 8001ac6:	f107 0210 	add.w	r2, r7, #16
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	fab2 f282 	clz	r2, r2
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	f042 0220 	orr.w	r2, r2, #32
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	f002 021f 	and.w	r2, r2, #31
 8001adc:	2101      	movs	r1, #1
 8001ade:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d19e      	bne.n	8001a26 <HAL_RCC_OscConfig+0xcfe>
 8001ae8:	e02b      	b.n	8001b42 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d101      	bne.n	8001af8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e025      	b.n	8001b44 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001af8:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <HAL_RCC_OscConfig+0xe28>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001b00:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <HAL_RCC_OscConfig+0xe28>)
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b08:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b0c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d111      	bne.n	8001b3e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b1a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d108      	bne.n	8001b3e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001b2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b30:	f003 020f 	and.w	r2, r3, #15
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d001      	beq.n	8001b42 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000

08001b54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b09e      	sub	sp, #120	; 0x78
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e162      	b.n	8001e32 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b6c:	4b90      	ldr	r3, [pc, #576]	; (8001db0 <HAL_RCC_ClockConfig+0x25c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d910      	bls.n	8001b9c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7a:	4b8d      	ldr	r3, [pc, #564]	; (8001db0 <HAL_RCC_ClockConfig+0x25c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 0207 	bic.w	r2, r3, #7
 8001b82:	498b      	ldr	r1, [pc, #556]	; (8001db0 <HAL_RCC_ClockConfig+0x25c>)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8a:	4b89      	ldr	r3, [pc, #548]	; (8001db0 <HAL_RCC_ClockConfig+0x25c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e14a      	b.n	8001e32 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d008      	beq.n	8001bba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba8:	4b82      	ldr	r3, [pc, #520]	; (8001db4 <HAL_RCC_ClockConfig+0x260>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	497f      	ldr	r1, [pc, #508]	; (8001db4 <HAL_RCC_ClockConfig+0x260>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 80dc 	beq.w	8001d80 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d13c      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xf6>
 8001bd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bd4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bd8:	fa93 f3a3 	rbit	r3, r3
 8001bdc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be0:	fab3 f383 	clz	r3, r3
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	095b      	lsrs	r3, r3, #5
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d102      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xa6>
 8001bf4:	4b6f      	ldr	r3, [pc, #444]	; (8001db4 <HAL_RCC_ClockConfig+0x260>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	e00f      	b.n	8001c1a <HAL_RCC_ClockConfig+0xc6>
 8001bfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bfe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	667b      	str	r3, [r7, #100]	; 0x64
 8001c08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c0c:	663b      	str	r3, [r7, #96]	; 0x60
 8001c0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c10:	fa93 f3a3 	rbit	r3, r3
 8001c14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c16:	4b67      	ldr	r3, [pc, #412]	; (8001db4 <HAL_RCC_ClockConfig+0x260>)
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c1e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001c20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c22:	fa92 f2a2 	rbit	r2, r2
 8001c26:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001c28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c2a:	fab2 f282 	clz	r2, r2
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	f042 0220 	orr.w	r2, r2, #32
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	f002 021f 	and.w	r2, r2, #31
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c40:	4013      	ands	r3, r2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d17b      	bne.n	8001d3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e0f3      	b.n	8001e32 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d13c      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x178>
 8001c52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c5a:	fa93 f3a3 	rbit	r3, r3
 8001c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	095b      	lsrs	r3, r3, #5
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d102      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x128>
 8001c76:	4b4f      	ldr	r3, [pc, #316]	; (8001db4 <HAL_RCC_ClockConfig+0x260>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	e00f      	b.n	8001c9c <HAL_RCC_ClockConfig+0x148>
 8001c7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c80:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c84:	fa93 f3a3 	rbit	r3, r3
 8001c88:	647b      	str	r3, [r7, #68]	; 0x44
 8001c8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c8e:	643b      	str	r3, [r7, #64]	; 0x40
 8001c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c92:	fa93 f3a3 	rbit	r3, r3
 8001c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c98:	4b46      	ldr	r3, [pc, #280]	; (8001db4 <HAL_RCC_ClockConfig+0x260>)
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ca0:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ca2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ca4:	fa92 f2a2 	rbit	r2, r2
 8001ca8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001caa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cac:	fab2 f282 	clz	r2, r2
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	f042 0220 	orr.w	r2, r2, #32
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	f002 021f 	and.w	r2, r2, #31
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d13a      	bne.n	8001d3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0b2      	b.n	8001e32 <HAL_RCC_ClockConfig+0x2de>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd2:	fa93 f3a3 	rbit	r3, r3
 8001cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	095b      	lsrs	r3, r3, #5
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d102      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0x1a0>
 8001cee:	4b31      	ldr	r3, [pc, #196]	; (8001db4 <HAL_RCC_ClockConfig+0x260>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	e00d      	b.n	8001d10 <HAL_RCC_ClockConfig+0x1bc>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfa:	fa93 f3a3 	rbit	r3, r3
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8001d00:	2302      	movs	r3, #2
 8001d02:	623b      	str	r3, [r7, #32]
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	fa93 f3a3 	rbit	r3, r3
 8001d0a:	61fb      	str	r3, [r7, #28]
 8001d0c:	4b29      	ldr	r3, [pc, #164]	; (8001db4 <HAL_RCC_ClockConfig+0x260>)
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	2202      	movs	r2, #2
 8001d12:	61ba      	str	r2, [r7, #24]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	fa92 f2a2 	rbit	r2, r2
 8001d1a:	617a      	str	r2, [r7, #20]
  return result;
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	fab2 f282 	clz	r2, r2
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	f042 0220 	orr.w	r2, r2, #32
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	f002 021f 	and.w	r2, r2, #31
 8001d2e:	2101      	movs	r1, #1
 8001d30:	fa01 f202 	lsl.w	r2, r1, r2
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e079      	b.n	8001e32 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d3e:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <HAL_RCC_ClockConfig+0x260>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f023 0203 	bic.w	r2, r3, #3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	491a      	ldr	r1, [pc, #104]	; (8001db4 <HAL_RCC_ClockConfig+0x260>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d50:	f7fe fd5a 	bl	8000808 <HAL_GetTick>
 8001d54:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	e00a      	b.n	8001d6e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d58:	f7fe fd56 	bl	8000808 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e061      	b.n	8001e32 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <HAL_RCC_ClockConfig+0x260>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 020c 	and.w	r2, r3, #12
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d1eb      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_RCC_ClockConfig+0x25c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d214      	bcs.n	8001db8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <HAL_RCC_ClockConfig+0x25c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 0207 	bic.w	r2, r3, #7
 8001d96:	4906      	ldr	r1, [pc, #24]	; (8001db0 <HAL_RCC_ClockConfig+0x25c>)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9e:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <HAL_RCC_ClockConfig+0x25c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e040      	b.n	8001e32 <HAL_RCC_ClockConfig+0x2de>
 8001db0:	40022000 	.word	0x40022000
 8001db4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <HAL_RCC_ClockConfig+0x2e8>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	491a      	ldr	r1, [pc, #104]	; (8001e3c <HAL_RCC_ClockConfig+0x2e8>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d009      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001de2:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <HAL_RCC_ClockConfig+0x2e8>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4912      	ldr	r1, [pc, #72]	; (8001e3c <HAL_RCC_ClockConfig+0x2e8>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001df6:	f000 f829 	bl	8001e4c <HAL_RCC_GetSysClockFreq>
 8001dfa:	4601      	mov	r1, r0
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <HAL_RCC_ClockConfig+0x2e8>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e04:	22f0      	movs	r2, #240	; 0xf0
 8001e06:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	fa92 f2a2 	rbit	r2, r2
 8001e0e:	60fa      	str	r2, [r7, #12]
  return result;
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	fab2 f282 	clz	r2, r2
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	40d3      	lsrs	r3, r2
 8001e1a:	4a09      	ldr	r2, [pc, #36]	; (8001e40 <HAL_RCC_ClockConfig+0x2ec>)
 8001e1c:	5cd3      	ldrb	r3, [r2, r3]
 8001e1e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e22:	4a08      	ldr	r2, [pc, #32]	; (8001e44 <HAL_RCC_ClockConfig+0x2f0>)
 8001e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <HAL_RCC_ClockConfig+0x2f4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe fc0e 	bl	800064c <HAL_InitTick>
  
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3778      	adds	r7, #120	; 0x78
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	08005f24 	.word	0x08005f24
 8001e44:	20000000 	.word	0x20000000
 8001e48:	20000004 	.word	0x20000004

08001e4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b08b      	sub	sp, #44	; 0x2c
 8001e50:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	2300      	movs	r3, #0
 8001e58:	61bb      	str	r3, [r7, #24]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001e66:	4b2a      	ldr	r3, [pc, #168]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d002      	beq.n	8001e7c <HAL_RCC_GetSysClockFreq+0x30>
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d003      	beq.n	8001e82 <HAL_RCC_GetSysClockFreq+0x36>
 8001e7a:	e03f      	b.n	8001efc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e7c:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e7e:	623b      	str	r3, [r7, #32]
      break;
 8001e80:	e03f      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e88:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001e8c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	fa92 f2a2 	rbit	r2, r2
 8001e94:	607a      	str	r2, [r7, #4]
  return result;
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	fab2 f282 	clz	r2, r2
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	40d3      	lsrs	r3, r2
 8001ea0:	4a1d      	ldr	r2, [pc, #116]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001ea2:	5cd3      	ldrb	r3, [r2, r3]
 8001ea4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001ea6:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	220f      	movs	r2, #15
 8001eb0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	fa92 f2a2 	rbit	r2, r2
 8001eb8:	60fa      	str	r2, [r7, #12]
  return result;
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	fab2 f282 	clz	r2, r2
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	40d3      	lsrs	r3, r2
 8001ec4:	4a15      	ldr	r2, [pc, #84]	; (8001f1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ec6:	5cd3      	ldrb	r3, [r2, r3]
 8001ec8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ed4:	4a0f      	ldr	r2, [pc, #60]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee4:	e007      	b.n	8001ef6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ee6:	4a0b      	ldr	r2, [pc, #44]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	fb02 f303 	mul.w	r3, r2, r3
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	623b      	str	r3, [r7, #32]
      break;
 8001efa:	e002      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001efe:	623b      	str	r3, [r7, #32]
      break;
 8001f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f02:	6a3b      	ldr	r3, [r7, #32]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	372c      	adds	r7, #44	; 0x2c
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40021000 	.word	0x40021000
 8001f14:	007a1200 	.word	0x007a1200
 8001f18:	08005f3c 	.word	0x08005f3c
 8001f1c:	08005f4c 	.word	0x08005f4c

08001f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f24:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f26:	681b      	ldr	r3, [r3, #0]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000000 	.word	0x20000000

08001f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001f3e:	f7ff ffef 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 8001f42:	4601      	mov	r1, r0
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f4c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f50:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	fa92 f2a2 	rbit	r2, r2
 8001f58:	603a      	str	r2, [r7, #0]
  return result;
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	fab2 f282 	clz	r2, r2
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	40d3      	lsrs	r3, r2
 8001f64:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001f66:	5cd3      	ldrb	r3, [r2, r3]
 8001f68:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40021000 	.word	0x40021000
 8001f78:	08005f34 	.word	0x08005f34

08001f7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001f82:	f7ff ffcd 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 8001f86:	4601      	mov	r1, r0
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001f90:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001f94:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	fa92 f2a2 	rbit	r2, r2
 8001f9c:	603a      	str	r2, [r7, #0]
  return result;
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	fab2 f282 	clz	r2, r2
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	40d3      	lsrs	r3, r2
 8001fa8:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <HAL_RCC_GetPCLK2Freq+0x40>)
 8001faa:	5cd3      	ldrb	r3, [r2, r3]
 8001fac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	08005f34 	.word	0x08005f34

08001fc0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	220f      	movs	r2, #15
 8001fce:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <HAL_RCC_GetClockConfig+0x5c>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0203 	and.w	r2, r3, #3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <HAL_RCC_GetClockConfig+0x5c>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <HAL_RCC_GetClockConfig+0x5c>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <HAL_RCC_GetClockConfig+0x5c>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	08db      	lsrs	r3, r3, #3
 8001ffa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002002:	4b07      	ldr	r3, [pc, #28]	; (8002020 <HAL_RCC_GetClockConfig+0x60>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0207 	and.w	r2, r3, #7
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	601a      	str	r2, [r3, #0]
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
 8002020:	40022000 	.word	0x40022000

08002024 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b092      	sub	sp, #72	; 0x48
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002034:	2300      	movs	r3, #0
 8002036:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 80d4 	beq.w	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002048:	4b4e      	ldr	r3, [pc, #312]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10e      	bne.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002054:	4b4b      	ldr	r3, [pc, #300]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	4a4a      	ldr	r2, [pc, #296]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800205a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205e:	61d3      	str	r3, [r2, #28]
 8002060:	4b48      	ldr	r3, [pc, #288]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800206c:	2301      	movs	r3, #1
 800206e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002072:	4b45      	ldr	r3, [pc, #276]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207a:	2b00      	cmp	r3, #0
 800207c:	d118      	bne.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800207e:	4b42      	ldr	r3, [pc, #264]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a41      	ldr	r2, [pc, #260]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002088:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800208a:	f7fe fbbd 	bl	8000808 <HAL_GetTick>
 800208e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002090:	e008      	b.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002092:	f7fe fbb9 	bl	8000808 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b64      	cmp	r3, #100	; 0x64
 800209e:	d901      	bls.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e1d6      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a4:	4b38      	ldr	r3, [pc, #224]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020b0:	4b34      	ldr	r3, [pc, #208]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 8084 	beq.w	80021ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d07c      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020d0:	4b2c      	ldr	r3, [pc, #176]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020ea:	fab3 f383 	clz	r3, r3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b26      	ldr	r3, [pc, #152]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	461a      	mov	r2, r3
 80020fa:	2301      	movs	r3, #1
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002102:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002106:	fa93 f3a3 	rbit	r3, r3
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800210c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	461a      	mov	r2, r3
 8002116:	4b1d      	ldr	r3, [pc, #116]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	461a      	mov	r2, r3
 800211e:	2300      	movs	r3, #0
 8002120:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002122:	4a18      	ldr	r2, [pc, #96]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002126:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d04b      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002132:	f7fe fb69 	bl	8000808 <HAL_GetTick>
 8002136:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002138:	e00a      	b.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213a:	f7fe fb65 	bl	8000808 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f241 3288 	movw	r2, #5000	; 0x1388
 8002148:	4293      	cmp	r3, r2
 800214a:	d901      	bls.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e180      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002150:	2302      	movs	r3, #2
 8002152:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002156:	fa93 f3a3 	rbit	r3, r3
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
 800215c:	2302      	movs	r3, #2
 800215e:	623b      	str	r3, [r7, #32]
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	fa93 f3a3 	rbit	r3, r3
 8002166:	61fb      	str	r3, [r7, #28]
  return result;
 8002168:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	095b      	lsrs	r3, r3, #5
 8002172:	b2db      	uxtb	r3, r3
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d108      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800217e:	4b01      	ldr	r3, [pc, #4]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	e00d      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002184:	40021000 	.word	0x40021000
 8002188:	40007000 	.word	0x40007000
 800218c:	10908100 	.word	0x10908100
 8002190:	2302      	movs	r3, #2
 8002192:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	fa93 f3a3 	rbit	r3, r3
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	4ba0      	ldr	r3, [pc, #640]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	2202      	movs	r2, #2
 80021a2:	613a      	str	r2, [r7, #16]
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	fa92 f2a2 	rbit	r2, r2
 80021aa:	60fa      	str	r2, [r7, #12]
  return result;
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	fab2 f282 	clz	r2, r2
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	f002 021f 	and.w	r2, r2, #31
 80021be:	2101      	movs	r1, #1
 80021c0:	fa01 f202 	lsl.w	r2, r1, r2
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0b7      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80021ca:	4b95      	ldr	r3, [pc, #596]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4992      	ldr	r1, [pc, #584]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d105      	bne.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e4:	4b8e      	ldr	r3, [pc, #568]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	4a8d      	ldr	r2, [pc, #564]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d008      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021fc:	4b88      	ldr	r3, [pc, #544]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	f023 0203 	bic.w	r2, r3, #3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	4985      	ldr	r1, [pc, #532]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800220a:	4313      	orrs	r3, r2
 800220c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d008      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800221a:	4b81      	ldr	r3, [pc, #516]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	497e      	ldr	r1, [pc, #504]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002228:	4313      	orrs	r3, r2
 800222a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002238:	4b79      	ldr	r3, [pc, #484]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	4976      	ldr	r1, [pc, #472]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002246:	4313      	orrs	r3, r2
 8002248:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	2b00      	cmp	r3, #0
 8002254:	d008      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002256:	4b72      	ldr	r3, [pc, #456]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f023 0210 	bic.w	r2, r3, #16
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	496f      	ldr	r1, [pc, #444]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002264:	4313      	orrs	r3, r2
 8002266:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d008      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002274:	4b6a      	ldr	r3, [pc, #424]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002280:	4967      	ldr	r1, [pc, #412]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002282:	4313      	orrs	r3, r2
 8002284:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d008      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002292:	4b63      	ldr	r3, [pc, #396]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f023 0220 	bic.w	r2, r3, #32
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	4960      	ldr	r1, [pc, #384]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d008      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022b0:	4b5b      	ldr	r3, [pc, #364]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	4958      	ldr	r1, [pc, #352]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d008      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022ce:	4b54      	ldr	r3, [pc, #336]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	4951      	ldr	r1, [pc, #324]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d008      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022ec:	4b4c      	ldr	r3, [pc, #304]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	4949      	ldr	r1, [pc, #292]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002306:	2b00      	cmp	r3, #0
 8002308:	d008      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800230a:	4b45      	ldr	r3, [pc, #276]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4942      	ldr	r1, [pc, #264]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002318:	4313      	orrs	r3, r2
 800231a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002324:	2b00      	cmp	r3, #0
 8002326:	d008      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002328:	4b3d      	ldr	r3, [pc, #244]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002334:	493a      	ldr	r1, [pc, #232]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002336:	4313      	orrs	r3, r2
 8002338:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d008      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002346:	4b36      	ldr	r3, [pc, #216]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	4933      	ldr	r1, [pc, #204]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002354:	4313      	orrs	r3, r2
 8002356:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002364:	4b2e      	ldr	r3, [pc, #184]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002370:	492b      	ldr	r1, [pc, #172]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d008      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002382:	4b27      	ldr	r3, [pc, #156]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	4924      	ldr	r1, [pc, #144]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002390:	4313      	orrs	r3, r2
 8002392:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d008      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80023a0:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ac:	491c      	ldr	r1, [pc, #112]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d008      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80023be:	4b18      	ldr	r3, [pc, #96]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ca:	4915      	ldr	r1, [pc, #84]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80023dc:	4b10      	ldr	r3, [pc, #64]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e8:	490d      	ldr	r1, [pc, #52]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002406:	4906      	ldr	r1, [pc, #24]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002408:	4313      	orrs	r3, r2
 800240a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00c      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002418:	4b01      	ldr	r3, [pc, #4]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	e002      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
 8002424:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242c:	490b      	ldr	r1, [pc, #44]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800242e:	4313      	orrs	r3, r2
 8002430:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d008      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800243e:	4b07      	ldr	r3, [pc, #28]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244a:	4904      	ldr	r1, [pc, #16]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800244c:	4313      	orrs	r3, r2
 800244e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3748      	adds	r7, #72	; 0x48
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40021000 	.word	0x40021000

08002460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e049      	b.n	8002506 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f841 	bl	800250e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3304      	adds	r3, #4
 800249c:	4619      	mov	r1, r3
 800249e:	4610      	mov	r0, r2
 80024a0:	f000 f9f8 	bl	8002894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b01      	cmp	r3, #1
 8002536:	d001      	beq.n	800253c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e04f      	b.n	80025dc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a23      	ldr	r2, [pc, #140]	; (80025e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d01d      	beq.n	800259a <HAL_TIM_Base_Start_IT+0x76>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002566:	d018      	beq.n	800259a <HAL_TIM_Base_Start_IT+0x76>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a1f      	ldr	r2, [pc, #124]	; (80025ec <HAL_TIM_Base_Start_IT+0xc8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d013      	beq.n	800259a <HAL_TIM_Base_Start_IT+0x76>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a1e      	ldr	r2, [pc, #120]	; (80025f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d00e      	beq.n	800259a <HAL_TIM_Base_Start_IT+0x76>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a1c      	ldr	r2, [pc, #112]	; (80025f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d009      	beq.n	800259a <HAL_TIM_Base_Start_IT+0x76>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a1b      	ldr	r2, [pc, #108]	; (80025f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d004      	beq.n	800259a <HAL_TIM_Base_Start_IT+0x76>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a19      	ldr	r2, [pc, #100]	; (80025fc <HAL_TIM_Base_Start_IT+0xd8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d115      	bne.n	80025c6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	4b17      	ldr	r3, [pc, #92]	; (8002600 <HAL_TIM_Base_Start_IT+0xdc>)
 80025a2:	4013      	ands	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b06      	cmp	r3, #6
 80025aa:	d015      	beq.n	80025d8 <HAL_TIM_Base_Start_IT+0xb4>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b2:	d011      	beq.n	80025d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025c4:	e008      	b.n	80025d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0201 	orr.w	r2, r2, #1
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	e000      	b.n	80025da <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	40012c00 	.word	0x40012c00
 80025ec:	40000400 	.word	0x40000400
 80025f0:	40000800 	.word	0x40000800
 80025f4:	40013400 	.word	0x40013400
 80025f8:	40014000 	.word	0x40014000
 80025fc:	40015000 	.word	0x40015000
 8002600:	00010007 	.word	0x00010007

08002604 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b02      	cmp	r3, #2
 8002618:	d122      	bne.n	8002660 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b02      	cmp	r3, #2
 8002626:	d11b      	bne.n	8002660 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0202 	mvn.w	r2, #2
 8002630:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f905 	bl	8002856 <HAL_TIM_IC_CaptureCallback>
 800264c:	e005      	b.n	800265a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f8f7 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f908 	bl	800286a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b04      	cmp	r3, #4
 800266c:	d122      	bne.n	80026b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b04      	cmp	r3, #4
 800267a:	d11b      	bne.n	80026b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0204 	mvn.w	r2, #4
 8002684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2202      	movs	r2, #2
 800268a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f8db 	bl	8002856 <HAL_TIM_IC_CaptureCallback>
 80026a0:	e005      	b.n	80026ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f8cd 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f8de 	bl	800286a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d122      	bne.n	8002708 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d11b      	bne.n	8002708 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0208 	mvn.w	r2, #8
 80026d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2204      	movs	r2, #4
 80026de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f8b1 	bl	8002856 <HAL_TIM_IC_CaptureCallback>
 80026f4:	e005      	b.n	8002702 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f8a3 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f8b4 	bl	800286a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	2b10      	cmp	r3, #16
 8002714:	d122      	bne.n	800275c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b10      	cmp	r3, #16
 8002722:	d11b      	bne.n	800275c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f06f 0210 	mvn.w	r2, #16
 800272c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2208      	movs	r2, #8
 8002732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f887 	bl	8002856 <HAL_TIM_IC_CaptureCallback>
 8002748:	e005      	b.n	8002756 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f879 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f88a 	bl	800286a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b01      	cmp	r3, #1
 8002768:	d10e      	bne.n	8002788 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b01      	cmp	r3, #1
 8002776:	d107      	bne.n	8002788 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0201 	mvn.w	r2, #1
 8002780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7fd fee2 	bl	800054c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002792:	2b80      	cmp	r3, #128	; 0x80
 8002794:	d10e      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a0:	2b80      	cmp	r3, #128	; 0x80
 80027a2:	d107      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f918 	bl	80029e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027c2:	d10e      	bne.n	80027e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ce:	2b80      	cmp	r3, #128	; 0x80
 80027d0:	d107      	bne.n	80027e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80027da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f90b 	bl	80029f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ec:	2b40      	cmp	r3, #64	; 0x40
 80027ee:	d10e      	bne.n	800280e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fa:	2b40      	cmp	r3, #64	; 0x40
 80027fc:	d107      	bne.n	800280e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f838 	bl	800287e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b20      	cmp	r3, #32
 800281a:	d10e      	bne.n	800283a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f003 0320 	and.w	r3, r3, #32
 8002826:	2b20      	cmp	r3, #32
 8002828:	d107      	bne.n	800283a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f06f 0220 	mvn.w	r2, #32
 8002832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f8cb 	bl	80029d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a42      	ldr	r2, [pc, #264]	; (80029b0 <TIM_Base_SetConfig+0x11c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d013      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b2:	d00f      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a3f      	ldr	r2, [pc, #252]	; (80029b4 <TIM_Base_SetConfig+0x120>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00b      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a3e      	ldr	r2, [pc, #248]	; (80029b8 <TIM_Base_SetConfig+0x124>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d007      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a3d      	ldr	r2, [pc, #244]	; (80029bc <TIM_Base_SetConfig+0x128>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d003      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a3c      	ldr	r2, [pc, #240]	; (80029c0 <TIM_Base_SetConfig+0x12c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d108      	bne.n	80028e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a31      	ldr	r2, [pc, #196]	; (80029b0 <TIM_Base_SetConfig+0x11c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d01f      	beq.n	800292e <TIM_Base_SetConfig+0x9a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f4:	d01b      	beq.n	800292e <TIM_Base_SetConfig+0x9a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a2e      	ldr	r2, [pc, #184]	; (80029b4 <TIM_Base_SetConfig+0x120>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d017      	beq.n	800292e <TIM_Base_SetConfig+0x9a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a2d      	ldr	r2, [pc, #180]	; (80029b8 <TIM_Base_SetConfig+0x124>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <TIM_Base_SetConfig+0x9a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a2c      	ldr	r2, [pc, #176]	; (80029bc <TIM_Base_SetConfig+0x128>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00f      	beq.n	800292e <TIM_Base_SetConfig+0x9a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a2c      	ldr	r2, [pc, #176]	; (80029c4 <TIM_Base_SetConfig+0x130>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00b      	beq.n	800292e <TIM_Base_SetConfig+0x9a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a2b      	ldr	r2, [pc, #172]	; (80029c8 <TIM_Base_SetConfig+0x134>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d007      	beq.n	800292e <TIM_Base_SetConfig+0x9a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a2a      	ldr	r2, [pc, #168]	; (80029cc <TIM_Base_SetConfig+0x138>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d003      	beq.n	800292e <TIM_Base_SetConfig+0x9a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a25      	ldr	r2, [pc, #148]	; (80029c0 <TIM_Base_SetConfig+0x12c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d108      	bne.n	8002940 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	4313      	orrs	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a12      	ldr	r2, [pc, #72]	; (80029b0 <TIM_Base_SetConfig+0x11c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d013      	beq.n	8002994 <TIM_Base_SetConfig+0x100>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a13      	ldr	r2, [pc, #76]	; (80029bc <TIM_Base_SetConfig+0x128>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d00f      	beq.n	8002994 <TIM_Base_SetConfig+0x100>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a13      	ldr	r2, [pc, #76]	; (80029c4 <TIM_Base_SetConfig+0x130>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d00b      	beq.n	8002994 <TIM_Base_SetConfig+0x100>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <TIM_Base_SetConfig+0x134>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d007      	beq.n	8002994 <TIM_Base_SetConfig+0x100>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a11      	ldr	r2, [pc, #68]	; (80029cc <TIM_Base_SetConfig+0x138>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d003      	beq.n	8002994 <TIM_Base_SetConfig+0x100>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a0c      	ldr	r2, [pc, #48]	; (80029c0 <TIM_Base_SetConfig+0x12c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d103      	bne.n	800299c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	615a      	str	r2, [r3, #20]
}
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40012c00 	.word	0x40012c00
 80029b4:	40000400 	.word	0x40000400
 80029b8:	40000800 	.word	0x40000800
 80029bc:	40013400 	.word	0x40013400
 80029c0:	40015000 	.word	0x40015000
 80029c4:	40014000 	.word	0x40014000
 80029c8:	40014400 	.word	0x40014400
 80029cc:	40014800 	.word	0x40014800

080029d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e040      	b.n	8002aa0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fd fdca 	bl	80005c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2224      	movs	r2, #36	; 0x24
 8002a38:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0201 	bic.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f8c0 	bl	8002bd0 <UART_SetConfig>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e022      	b.n	8002aa0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fa88 	bl	8002f78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0201 	orr.w	r2, r2, #1
 8002a96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 fb0f 	bl	80030bc <UART_CheckIdleState>
 8002a9e:	4603      	mov	r3, r0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002abc:	2b20      	cmp	r3, #32
 8002abe:	f040 8082 	bne.w	8002bc6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_UART_Transmit+0x26>
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e07a      	b.n	8002bc8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_UART_Transmit+0x38>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e073      	b.n	8002bc8 <HAL_UART_Transmit+0x120>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2221      	movs	r2, #33	; 0x21
 8002af4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002af6:	f7fd fe87 	bl	8000808 <HAL_GetTick>
 8002afa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	88fa      	ldrh	r2, [r7, #6]
 8002b00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	88fa      	ldrh	r2, [r7, #6]
 8002b08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b14:	d108      	bne.n	8002b28 <HAL_UART_Transmit+0x80>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d104      	bne.n	8002b28 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	61bb      	str	r3, [r7, #24]
 8002b26:	e003      	b.n	8002b30 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002b38:	e02d      	b.n	8002b96 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2200      	movs	r2, #0
 8002b42:	2180      	movs	r1, #128	; 0x80
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 fb02 	bl	800314e <UART_WaitOnFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e039      	b.n	8002bc8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10b      	bne.n	8002b72 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	881a      	ldrh	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b66:	b292      	uxth	r2, r2
 8002b68:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	61bb      	str	r3, [r7, #24]
 8002b70:	e008      	b.n	8002b84 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	781a      	ldrb	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	b292      	uxth	r2, r2
 8002b7c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	3301      	adds	r3, #1
 8002b82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1cb      	bne.n	8002b3a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2140      	movs	r1, #64	; 0x40
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 face 	bl	800314e <UART_WaitOnFlagUntilTimeout>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e005      	b.n	8002bc8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e000      	b.n	8002bc8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002bc6:	2302      	movs	r3, #2
  }
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3720      	adds	r7, #32
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	4baa      	ldr	r3, [pc, #680]	; (8002ea4 <UART_SetConfig+0x2d4>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	6979      	ldr	r1, [r7, #20]
 8002c04:	430b      	orrs	r3, r1
 8002c06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a98      	ldr	r2, [pc, #608]	; (8002ea8 <UART_SetConfig+0x2d8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d121      	bne.n	8002c90 <UART_SetConfig+0xc0>
 8002c4c:	4b97      	ldr	r3, [pc, #604]	; (8002eac <UART_SetConfig+0x2dc>)
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d817      	bhi.n	8002c88 <UART_SetConfig+0xb8>
 8002c58:	a201      	add	r2, pc, #4	; (adr r2, 8002c60 <UART_SetConfig+0x90>)
 8002c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5e:	bf00      	nop
 8002c60:	08002c71 	.word	0x08002c71
 8002c64:	08002c7d 	.word	0x08002c7d
 8002c68:	08002c83 	.word	0x08002c83
 8002c6c:	08002c77 	.word	0x08002c77
 8002c70:	2301      	movs	r3, #1
 8002c72:	77fb      	strb	r3, [r7, #31]
 8002c74:	e0b2      	b.n	8002ddc <UART_SetConfig+0x20c>
 8002c76:	2302      	movs	r3, #2
 8002c78:	77fb      	strb	r3, [r7, #31]
 8002c7a:	e0af      	b.n	8002ddc <UART_SetConfig+0x20c>
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	77fb      	strb	r3, [r7, #31]
 8002c80:	e0ac      	b.n	8002ddc <UART_SetConfig+0x20c>
 8002c82:	2308      	movs	r3, #8
 8002c84:	77fb      	strb	r3, [r7, #31]
 8002c86:	e0a9      	b.n	8002ddc <UART_SetConfig+0x20c>
 8002c88:	2310      	movs	r3, #16
 8002c8a:	77fb      	strb	r3, [r7, #31]
 8002c8c:	bf00      	nop
 8002c8e:	e0a5      	b.n	8002ddc <UART_SetConfig+0x20c>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a86      	ldr	r2, [pc, #536]	; (8002eb0 <UART_SetConfig+0x2e0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d123      	bne.n	8002ce2 <UART_SetConfig+0x112>
 8002c9a:	4b84      	ldr	r3, [pc, #528]	; (8002eac <UART_SetConfig+0x2dc>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca6:	d012      	beq.n	8002cce <UART_SetConfig+0xfe>
 8002ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cac:	d802      	bhi.n	8002cb4 <UART_SetConfig+0xe4>
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d007      	beq.n	8002cc2 <UART_SetConfig+0xf2>
 8002cb2:	e012      	b.n	8002cda <UART_SetConfig+0x10a>
 8002cb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cb8:	d00c      	beq.n	8002cd4 <UART_SetConfig+0x104>
 8002cba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cbe:	d003      	beq.n	8002cc8 <UART_SetConfig+0xf8>
 8002cc0:	e00b      	b.n	8002cda <UART_SetConfig+0x10a>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	77fb      	strb	r3, [r7, #31]
 8002cc6:	e089      	b.n	8002ddc <UART_SetConfig+0x20c>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	77fb      	strb	r3, [r7, #31]
 8002ccc:	e086      	b.n	8002ddc <UART_SetConfig+0x20c>
 8002cce:	2304      	movs	r3, #4
 8002cd0:	77fb      	strb	r3, [r7, #31]
 8002cd2:	e083      	b.n	8002ddc <UART_SetConfig+0x20c>
 8002cd4:	2308      	movs	r3, #8
 8002cd6:	77fb      	strb	r3, [r7, #31]
 8002cd8:	e080      	b.n	8002ddc <UART_SetConfig+0x20c>
 8002cda:	2310      	movs	r3, #16
 8002cdc:	77fb      	strb	r3, [r7, #31]
 8002cde:	bf00      	nop
 8002ce0:	e07c      	b.n	8002ddc <UART_SetConfig+0x20c>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a73      	ldr	r2, [pc, #460]	; (8002eb4 <UART_SetConfig+0x2e4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d123      	bne.n	8002d34 <UART_SetConfig+0x164>
 8002cec:	4b6f      	ldr	r3, [pc, #444]	; (8002eac <UART_SetConfig+0x2dc>)
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002cf4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cf8:	d012      	beq.n	8002d20 <UART_SetConfig+0x150>
 8002cfa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cfe:	d802      	bhi.n	8002d06 <UART_SetConfig+0x136>
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d007      	beq.n	8002d14 <UART_SetConfig+0x144>
 8002d04:	e012      	b.n	8002d2c <UART_SetConfig+0x15c>
 8002d06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d0a:	d00c      	beq.n	8002d26 <UART_SetConfig+0x156>
 8002d0c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d10:	d003      	beq.n	8002d1a <UART_SetConfig+0x14a>
 8002d12:	e00b      	b.n	8002d2c <UART_SetConfig+0x15c>
 8002d14:	2300      	movs	r3, #0
 8002d16:	77fb      	strb	r3, [r7, #31]
 8002d18:	e060      	b.n	8002ddc <UART_SetConfig+0x20c>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	77fb      	strb	r3, [r7, #31]
 8002d1e:	e05d      	b.n	8002ddc <UART_SetConfig+0x20c>
 8002d20:	2304      	movs	r3, #4
 8002d22:	77fb      	strb	r3, [r7, #31]
 8002d24:	e05a      	b.n	8002ddc <UART_SetConfig+0x20c>
 8002d26:	2308      	movs	r3, #8
 8002d28:	77fb      	strb	r3, [r7, #31]
 8002d2a:	e057      	b.n	8002ddc <UART_SetConfig+0x20c>
 8002d2c:	2310      	movs	r3, #16
 8002d2e:	77fb      	strb	r3, [r7, #31]
 8002d30:	bf00      	nop
 8002d32:	e053      	b.n	8002ddc <UART_SetConfig+0x20c>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a5f      	ldr	r2, [pc, #380]	; (8002eb8 <UART_SetConfig+0x2e8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d123      	bne.n	8002d86 <UART_SetConfig+0x1b6>
 8002d3e:	4b5b      	ldr	r3, [pc, #364]	; (8002eac <UART_SetConfig+0x2dc>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d4a:	d012      	beq.n	8002d72 <UART_SetConfig+0x1a2>
 8002d4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d50:	d802      	bhi.n	8002d58 <UART_SetConfig+0x188>
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d007      	beq.n	8002d66 <UART_SetConfig+0x196>
 8002d56:	e012      	b.n	8002d7e <UART_SetConfig+0x1ae>
 8002d58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d5c:	d00c      	beq.n	8002d78 <UART_SetConfig+0x1a8>
 8002d5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d62:	d003      	beq.n	8002d6c <UART_SetConfig+0x19c>
 8002d64:	e00b      	b.n	8002d7e <UART_SetConfig+0x1ae>
 8002d66:	2300      	movs	r3, #0
 8002d68:	77fb      	strb	r3, [r7, #31]
 8002d6a:	e037      	b.n	8002ddc <UART_SetConfig+0x20c>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	77fb      	strb	r3, [r7, #31]
 8002d70:	e034      	b.n	8002ddc <UART_SetConfig+0x20c>
 8002d72:	2304      	movs	r3, #4
 8002d74:	77fb      	strb	r3, [r7, #31]
 8002d76:	e031      	b.n	8002ddc <UART_SetConfig+0x20c>
 8002d78:	2308      	movs	r3, #8
 8002d7a:	77fb      	strb	r3, [r7, #31]
 8002d7c:	e02e      	b.n	8002ddc <UART_SetConfig+0x20c>
 8002d7e:	2310      	movs	r3, #16
 8002d80:	77fb      	strb	r3, [r7, #31]
 8002d82:	bf00      	nop
 8002d84:	e02a      	b.n	8002ddc <UART_SetConfig+0x20c>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a4c      	ldr	r2, [pc, #304]	; (8002ebc <UART_SetConfig+0x2ec>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d123      	bne.n	8002dd8 <UART_SetConfig+0x208>
 8002d90:	4b46      	ldr	r3, [pc, #280]	; (8002eac <UART_SetConfig+0x2dc>)
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002d98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d9c:	d012      	beq.n	8002dc4 <UART_SetConfig+0x1f4>
 8002d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002da2:	d802      	bhi.n	8002daa <UART_SetConfig+0x1da>
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d007      	beq.n	8002db8 <UART_SetConfig+0x1e8>
 8002da8:	e012      	b.n	8002dd0 <UART_SetConfig+0x200>
 8002daa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dae:	d00c      	beq.n	8002dca <UART_SetConfig+0x1fa>
 8002db0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002db4:	d003      	beq.n	8002dbe <UART_SetConfig+0x1ee>
 8002db6:	e00b      	b.n	8002dd0 <UART_SetConfig+0x200>
 8002db8:	2300      	movs	r3, #0
 8002dba:	77fb      	strb	r3, [r7, #31]
 8002dbc:	e00e      	b.n	8002ddc <UART_SetConfig+0x20c>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	77fb      	strb	r3, [r7, #31]
 8002dc2:	e00b      	b.n	8002ddc <UART_SetConfig+0x20c>
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	77fb      	strb	r3, [r7, #31]
 8002dc8:	e008      	b.n	8002ddc <UART_SetConfig+0x20c>
 8002dca:	2308      	movs	r3, #8
 8002dcc:	77fb      	strb	r3, [r7, #31]
 8002dce:	e005      	b.n	8002ddc <UART_SetConfig+0x20c>
 8002dd0:	2310      	movs	r3, #16
 8002dd2:	77fb      	strb	r3, [r7, #31]
 8002dd4:	bf00      	nop
 8002dd6:	e001      	b.n	8002ddc <UART_SetConfig+0x20c>
 8002dd8:	2310      	movs	r3, #16
 8002dda:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de4:	d16e      	bne.n	8002ec4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002de6:	7ffb      	ldrb	r3, [r7, #31]
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d828      	bhi.n	8002e3e <UART_SetConfig+0x26e>
 8002dec:	a201      	add	r2, pc, #4	; (adr r2, 8002df4 <UART_SetConfig+0x224>)
 8002dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df2:	bf00      	nop
 8002df4:	08002e19 	.word	0x08002e19
 8002df8:	08002e21 	.word	0x08002e21
 8002dfc:	08002e29 	.word	0x08002e29
 8002e00:	08002e3f 	.word	0x08002e3f
 8002e04:	08002e2f 	.word	0x08002e2f
 8002e08:	08002e3f 	.word	0x08002e3f
 8002e0c:	08002e3f 	.word	0x08002e3f
 8002e10:	08002e3f 	.word	0x08002e3f
 8002e14:	08002e37 	.word	0x08002e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e18:	f7ff f88e 	bl	8001f38 <HAL_RCC_GetPCLK1Freq>
 8002e1c:	61b8      	str	r0, [r7, #24]
        break;
 8002e1e:	e013      	b.n	8002e48 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e20:	f7ff f8ac 	bl	8001f7c <HAL_RCC_GetPCLK2Freq>
 8002e24:	61b8      	str	r0, [r7, #24]
        break;
 8002e26:	e00f      	b.n	8002e48 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e28:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <UART_SetConfig+0x2f0>)
 8002e2a:	61bb      	str	r3, [r7, #24]
        break;
 8002e2c:	e00c      	b.n	8002e48 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e2e:	f7ff f80d 	bl	8001e4c <HAL_RCC_GetSysClockFreq>
 8002e32:	61b8      	str	r0, [r7, #24]
        break;
 8002e34:	e008      	b.n	8002e48 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e3a:	61bb      	str	r3, [r7, #24]
        break;
 8002e3c:	e004      	b.n	8002e48 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	77bb      	strb	r3, [r7, #30]
        break;
 8002e46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 8086 	beq.w	8002f5c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	005a      	lsls	r2, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	085b      	lsrs	r3, r3, #1
 8002e5a:	441a      	add	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	2b0f      	cmp	r3, #15
 8002e6c:	d916      	bls.n	8002e9c <UART_SetConfig+0x2cc>
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e74:	d212      	bcs.n	8002e9c <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	f023 030f 	bic.w	r3, r3, #15
 8002e7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	085b      	lsrs	r3, r3, #1
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	89fb      	ldrh	r3, [r7, #14]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	89fa      	ldrh	r2, [r7, #14]
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	e05f      	b.n	8002f5c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	77bb      	strb	r3, [r7, #30]
 8002ea0:	e05c      	b.n	8002f5c <UART_SetConfig+0x38c>
 8002ea2:	bf00      	nop
 8002ea4:	efff69f3 	.word	0xefff69f3
 8002ea8:	40013800 	.word	0x40013800
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	40004400 	.word	0x40004400
 8002eb4:	40004800 	.word	0x40004800
 8002eb8:	40004c00 	.word	0x40004c00
 8002ebc:	40005000 	.word	0x40005000
 8002ec0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ec4:	7ffb      	ldrb	r3, [r7, #31]
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d827      	bhi.n	8002f1a <UART_SetConfig+0x34a>
 8002eca:	a201      	add	r2, pc, #4	; (adr r2, 8002ed0 <UART_SetConfig+0x300>)
 8002ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed0:	08002ef5 	.word	0x08002ef5
 8002ed4:	08002efd 	.word	0x08002efd
 8002ed8:	08002f05 	.word	0x08002f05
 8002edc:	08002f1b 	.word	0x08002f1b
 8002ee0:	08002f0b 	.word	0x08002f0b
 8002ee4:	08002f1b 	.word	0x08002f1b
 8002ee8:	08002f1b 	.word	0x08002f1b
 8002eec:	08002f1b 	.word	0x08002f1b
 8002ef0:	08002f13 	.word	0x08002f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ef4:	f7ff f820 	bl	8001f38 <HAL_RCC_GetPCLK1Freq>
 8002ef8:	61b8      	str	r0, [r7, #24]
        break;
 8002efa:	e013      	b.n	8002f24 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002efc:	f7ff f83e 	bl	8001f7c <HAL_RCC_GetPCLK2Freq>
 8002f00:	61b8      	str	r0, [r7, #24]
        break;
 8002f02:	e00f      	b.n	8002f24 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f04:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <UART_SetConfig+0x3a4>)
 8002f06:	61bb      	str	r3, [r7, #24]
        break;
 8002f08:	e00c      	b.n	8002f24 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f0a:	f7fe ff9f 	bl	8001e4c <HAL_RCC_GetSysClockFreq>
 8002f0e:	61b8      	str	r0, [r7, #24]
        break;
 8002f10:	e008      	b.n	8002f24 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f16:	61bb      	str	r3, [r7, #24]
        break;
 8002f18:	e004      	b.n	8002f24 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	77bb      	strb	r3, [r7, #30]
        break;
 8002f22:	bf00      	nop
    }

    if (pclk != 0U)
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d018      	beq.n	8002f5c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	085a      	lsrs	r2, r3, #1
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	441a      	add	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	2b0f      	cmp	r3, #15
 8002f44:	d908      	bls.n	8002f58 <UART_SetConfig+0x388>
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4c:	d204      	bcs.n	8002f58 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	60da      	str	r2, [r3, #12]
 8002f56:	e001      	b.n	8002f5c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f68:	7fbb      	ldrb	r3, [r7, #30]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3720      	adds	r7, #32
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	007a1200 	.word	0x007a1200

08002f78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00a      	beq.n	8002fa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00a      	beq.n	8002fc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01a      	beq.n	800308e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003076:	d10a      	bne.n	800308e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	605a      	str	r2, [r3, #4]
  }
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030cc:	f7fd fb9c 	bl	8000808 <HAL_GetTick>
 80030d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d10e      	bne.n	80030fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f82d 	bl	800314e <UART_WaitOnFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e023      	b.n	8003146 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b04      	cmp	r3, #4
 800310a:	d10e      	bne.n	800312a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800310c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f817 	bl	800314e <UART_WaitOnFlagUntilTimeout>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e00d      	b.n	8003146 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2220      	movs	r2, #32
 800312e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2220      	movs	r2, #32
 8003134:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	603b      	str	r3, [r7, #0]
 800315a:	4613      	mov	r3, r2
 800315c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800315e:	e05e      	b.n	800321e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003166:	d05a      	beq.n	800321e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003168:	f7fd fb4e 	bl	8000808 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	429a      	cmp	r2, r3
 8003176:	d302      	bcc.n	800317e <UART_WaitOnFlagUntilTimeout+0x30>
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d11b      	bne.n	80031b6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800318c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0201 	bic.w	r2, r2, #1
 800319c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2220      	movs	r2, #32
 80031a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2220      	movs	r2, #32
 80031a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e043      	b.n	800323e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d02c      	beq.n	800321e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031d2:	d124      	bne.n	800321e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031ec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0201 	bic.w	r2, r2, #1
 80031fc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2220      	movs	r2, #32
 8003208:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2220      	movs	r2, #32
 800320e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e00f      	b.n	800323e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	4013      	ands	r3, r2
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	429a      	cmp	r2, r3
 800322c:	bf0c      	ite	eq
 800322e:	2301      	moveq	r3, #1
 8003230:	2300      	movne	r3, #0
 8003232:	b2db      	uxtb	r3, r3
 8003234:	461a      	mov	r2, r3
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	429a      	cmp	r2, r3
 800323a:	d091      	beq.n	8003160 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800324e:	f3ef 8305 	mrs	r3, IPSR
 8003252:	60bb      	str	r3, [r7, #8]
  return(result);
 8003254:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10f      	bne.n	800327a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800325a:	f3ef 8310 	mrs	r3, PRIMASK
 800325e:	607b      	str	r3, [r7, #4]
  return(result);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <osKernelInitialize+0x32>
 8003266:	4b11      	ldr	r3, [pc, #68]	; (80032ac <osKernelInitialize+0x64>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b02      	cmp	r3, #2
 800326c:	d109      	bne.n	8003282 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800326e:	f3ef 8311 	mrs	r3, BASEPRI
 8003272:	603b      	str	r3, [r7, #0]
  return(result);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800327a:	f06f 0305 	mvn.w	r3, #5
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	e00c      	b.n	800329c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003282:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <osKernelInitialize+0x64>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d105      	bne.n	8003296 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800328a:	4b08      	ldr	r3, [pc, #32]	; (80032ac <osKernelInitialize+0x64>)
 800328c:	2201      	movs	r2, #1
 800328e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	e002      	b.n	800329c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003296:	f04f 33ff 	mov.w	r3, #4294967295
 800329a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800329c:	68fb      	ldr	r3, [r7, #12]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	2000002c 	.word	0x2000002c

080032b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032b6:	f3ef 8305 	mrs	r3, IPSR
 80032ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80032bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10f      	bne.n	80032e2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032c2:	f3ef 8310 	mrs	r3, PRIMASK
 80032c6:	607b      	str	r3, [r7, #4]
  return(result);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <osKernelStart+0x32>
 80032ce:	4b11      	ldr	r3, [pc, #68]	; (8003314 <osKernelStart+0x64>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d109      	bne.n	80032ea <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032d6:	f3ef 8311 	mrs	r3, BASEPRI
 80032da:	603b      	str	r3, [r7, #0]
  return(result);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <osKernelStart+0x3a>
    stat = osErrorISR;
 80032e2:	f06f 0305 	mvn.w	r3, #5
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	e00e      	b.n	8003308 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80032ea:	4b0a      	ldr	r3, [pc, #40]	; (8003314 <osKernelStart+0x64>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d107      	bne.n	8003302 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80032f2:	4b08      	ldr	r3, [pc, #32]	; (8003314 <osKernelStart+0x64>)
 80032f4:	2202      	movs	r2, #2
 80032f6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80032f8:	f001 f92c 	bl	8004554 <vTaskStartScheduler>
      stat = osOK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	e002      	b.n	8003308 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003302:	f04f 33ff 	mov.w	r3, #4294967295
 8003306:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003308:	68fb      	ldr	r3, [r7, #12]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	2000002c 	.word	0x2000002c

08003318 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003318:	b580      	push	{r7, lr}
 800331a:	b092      	sub	sp, #72	; 0x48
 800331c:	af04      	add	r7, sp, #16
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003328:	f3ef 8305 	mrs	r3, IPSR
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003330:	2b00      	cmp	r3, #0
 8003332:	f040 8094 	bne.w	800345e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003336:	f3ef 8310 	mrs	r3, PRIMASK
 800333a:	623b      	str	r3, [r7, #32]
  return(result);
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	2b00      	cmp	r3, #0
 8003340:	f040 808d 	bne.w	800345e <osThreadNew+0x146>
 8003344:	4b48      	ldr	r3, [pc, #288]	; (8003468 <osThreadNew+0x150>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b02      	cmp	r3, #2
 800334a:	d106      	bne.n	800335a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800334c:	f3ef 8311 	mrs	r3, BASEPRI
 8003350:	61fb      	str	r3, [r7, #28]
  return(result);
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	2b00      	cmp	r3, #0
 8003356:	f040 8082 	bne.w	800345e <osThreadNew+0x146>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d07e      	beq.n	800345e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003360:	2380      	movs	r3, #128	; 0x80
 8003362:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003364:	2318      	movs	r3, #24
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003368:	2300      	movs	r3, #0
 800336a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800336c:	f107 031b 	add.w	r3, r7, #27
 8003370:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003372:	f04f 33ff 	mov.w	r3, #4294967295
 8003376:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d045      	beq.n	800340a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <osThreadNew+0x74>
        name = attr->name;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <osThreadNew+0x9a>
 80033a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a2:	2b38      	cmp	r3, #56	; 0x38
 80033a4:	d805      	bhi.n	80033b2 <osThreadNew+0x9a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <osThreadNew+0x9e>
        return (NULL);
 80033b2:	2300      	movs	r3, #0
 80033b4:	e054      	b.n	8003460 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	089b      	lsrs	r3, r3, #2
 80033c4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00e      	beq.n	80033ec <osThreadNew+0xd4>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	2b5b      	cmp	r3, #91	; 0x5b
 80033d4:	d90a      	bls.n	80033ec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d006      	beq.n	80033ec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <osThreadNew+0xd4>
        mem = 1;
 80033e6:	2301      	movs	r3, #1
 80033e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ea:	e010      	b.n	800340e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10c      	bne.n	800340e <osThreadNew+0xf6>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d108      	bne.n	800340e <osThreadNew+0xf6>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d104      	bne.n	800340e <osThreadNew+0xf6>
          mem = 0;
 8003404:	2300      	movs	r3, #0
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28
 8003408:	e001      	b.n	800340e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800340a:	2300      	movs	r3, #0
 800340c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003410:	2b01      	cmp	r3, #1
 8003412:	d110      	bne.n	8003436 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800341c:	9202      	str	r2, [sp, #8]
 800341e:	9301      	str	r3, [sp, #4]
 8003420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003428:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 feca 	bl	80041c4 <xTaskCreateStatic>
 8003430:	4603      	mov	r3, r0
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	e013      	b.n	800345e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	2b00      	cmp	r3, #0
 800343a:	d110      	bne.n	800345e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800343c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343e:	b29a      	uxth	r2, r3
 8003440:	f107 0314 	add.w	r3, r7, #20
 8003444:	9301      	str	r3, [sp, #4]
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 ff11 	bl	8004276 <xTaskCreate>
 8003454:	4603      	mov	r3, r0
 8003456:	2b01      	cmp	r3, #1
 8003458:	d001      	beq.n	800345e <osThreadNew+0x146>
          hTask = NULL;
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800345e:	697b      	ldr	r3, [r7, #20]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3738      	adds	r7, #56	; 0x38
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	2000002c 	.word	0x2000002c

0800346c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003474:	f3ef 8305 	mrs	r3, IPSR
 8003478:	613b      	str	r3, [r7, #16]
  return(result);
 800347a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10f      	bne.n	80034a0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003480:	f3ef 8310 	mrs	r3, PRIMASK
 8003484:	60fb      	str	r3, [r7, #12]
  return(result);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d109      	bne.n	80034a0 <osDelay+0x34>
 800348c:	4b0d      	ldr	r3, [pc, #52]	; (80034c4 <osDelay+0x58>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d109      	bne.n	80034a8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003494:	f3ef 8311 	mrs	r3, BASEPRI
 8003498:	60bb      	str	r3, [r7, #8]
  return(result);
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <osDelay+0x3c>
    stat = osErrorISR;
 80034a0:	f06f 0305 	mvn.w	r3, #5
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	e007      	b.n	80034b8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f001 f81a 	bl	80044ec <vTaskDelay>
    }
  }

  return (stat);
 80034b8:	697b      	ldr	r3, [r7, #20]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	2000002c 	.word	0x2000002c

080034c8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08c      	sub	sp, #48	; 0x30
 80034cc:	af02      	add	r7, sp, #8
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034d8:	f3ef 8305 	mrs	r3, IPSR
 80034dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80034de:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d170      	bne.n	80035c6 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e4:	f3ef 8310 	mrs	r3, PRIMASK
 80034e8:	617b      	str	r3, [r7, #20]
  return(result);
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d16a      	bne.n	80035c6 <osMessageQueueNew+0xfe>
 80034f0:	4b37      	ldr	r3, [pc, #220]	; (80035d0 <osMessageQueueNew+0x108>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d105      	bne.n	8003504 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034f8:	f3ef 8311 	mrs	r3, BASEPRI
 80034fc:	613b      	str	r3, [r7, #16]
  return(result);
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d160      	bne.n	80035c6 <osMessageQueueNew+0xfe>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d05d      	beq.n	80035c6 <osMessageQueueNew+0xfe>
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d05a      	beq.n	80035c6 <osMessageQueueNew+0xfe>
    mem = -1;
 8003510:	f04f 33ff 	mov.w	r3, #4294967295
 8003514:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d029      	beq.n	8003570 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d012      	beq.n	800354a <osMessageQueueNew+0x82>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	2b4f      	cmp	r3, #79	; 0x4f
 800352a:	d90e      	bls.n	800354a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	68b9      	ldr	r1, [r7, #8]
 800353c:	fb01 f303 	mul.w	r3, r1, r3
 8003540:	429a      	cmp	r2, r3
 8003542:	d302      	bcc.n	800354a <osMessageQueueNew+0x82>
        mem = 1;
 8003544:	2301      	movs	r3, #1
 8003546:	623b      	str	r3, [r7, #32]
 8003548:	e014      	b.n	8003574 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d110      	bne.n	8003574 <osMessageQueueNew+0xac>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10c      	bne.n	8003574 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800355e:	2b00      	cmp	r3, #0
 8003560:	d108      	bne.n	8003574 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d104      	bne.n	8003574 <osMessageQueueNew+0xac>
          mem = 0;
 800356a:	2300      	movs	r3, #0
 800356c:	623b      	str	r3, [r7, #32]
 800356e:	e001      	b.n	8003574 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003570:	2300      	movs	r3, #0
 8003572:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d10c      	bne.n	8003594 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691a      	ldr	r2, [r3, #16]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6899      	ldr	r1, [r3, #8]
 8003582:	2300      	movs	r3, #0
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	460b      	mov	r3, r1
 8003588:	68b9      	ldr	r1, [r7, #8]
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 f972 	bl	8003874 <xQueueGenericCreateStatic>
 8003590:	6278      	str	r0, [r7, #36]	; 0x24
 8003592:	e008      	b.n	80035a6 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d105      	bne.n	80035a6 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800359a:	2200      	movs	r2, #0
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f9da 	bl	8003958 <xQueueGenericCreate>
 80035a4:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00c      	beq.n	80035c6 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <osMessageQueueNew+0xf2>
        name = attr->name;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	61fb      	str	r3, [r7, #28]
 80035b8:	e001      	b.n	80035be <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80035be:	69f9      	ldr	r1, [r7, #28]
 80035c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035c2:	f000 fda3 	bl	800410c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3728      	adds	r7, #40	; 0x28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	2000002c 	.word	0x2000002c

080035d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4a07      	ldr	r2, [pc, #28]	; (8003600 <vApplicationGetIdleTaskMemory+0x2c>)
 80035e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	4a06      	ldr	r2, [pc, #24]	; (8003604 <vApplicationGetIdleTaskMemory+0x30>)
 80035ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2280      	movs	r2, #128	; 0x80
 80035f0:	601a      	str	r2, [r3, #0]
}
 80035f2:	bf00      	nop
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000030 	.word	0x20000030
 8003604:	2000008c 	.word	0x2000008c

08003608 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4a07      	ldr	r2, [pc, #28]	; (8003634 <vApplicationGetTimerTaskMemory+0x2c>)
 8003618:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	4a06      	ldr	r2, [pc, #24]	; (8003638 <vApplicationGetTimerTaskMemory+0x30>)
 800361e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003626:	601a      	str	r2, [r3, #0]
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	2000028c 	.word	0x2000028c
 8003638:	200002e8 	.word	0x200002e8

0800363c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f103 0208 	add.w	r2, r3, #8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f04f 32ff 	mov.w	r2, #4294967295
 8003654:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f103 0208 	add.w	r2, r3, #8
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f103 0208 	add.w	r2, r3, #8
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003696:	b480      	push	{r7}
 8003698:	b085      	sub	sp, #20
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	601a      	str	r2, [r3, #0]
}
 80036d2:	bf00      	nop
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036de:	b480      	push	{r7}
 80036e0:	b085      	sub	sp, #20
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f4:	d103      	bne.n	80036fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	e00c      	b.n	8003718 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3308      	adds	r3, #8
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	e002      	b.n	800370c <vListInsert+0x2e>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	429a      	cmp	r2, r3
 8003716:	d2f6      	bcs.n	8003706 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	601a      	str	r2, [r3, #0]
}
 8003744:	bf00      	nop
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6892      	ldr	r2, [r2, #8]
 8003766:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6852      	ldr	r2, [r2, #4]
 8003770:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	429a      	cmp	r2, r3
 800377a:	d103      	bne.n	8003784 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	1e5a      	subs	r2, r3, #1
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d109      	bne.n	80037cc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f3bf 8f6f 	isb	sy
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	e7fe      	b.n	80037ca <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80037cc:	f002 f816 	bl	80057fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d8:	68f9      	ldr	r1, [r7, #12]
 80037da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037dc:	fb01 f303 	mul.w	r3, r1, r3
 80037e0:	441a      	add	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fc:	3b01      	subs	r3, #1
 80037fe:	68f9      	ldr	r1, [r7, #12]
 8003800:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003802:	fb01 f303 	mul.w	r3, r1, r3
 8003806:	441a      	add	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	22ff      	movs	r2, #255	; 0xff
 8003810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	22ff      	movs	r2, #255	; 0xff
 8003818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d114      	bne.n	800384c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d01a      	beq.n	8003860 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	3310      	adds	r3, #16
 800382e:	4618      	mov	r0, r3
 8003830:	f001 f916 	bl	8004a60 <xTaskRemoveFromEventList>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d012      	beq.n	8003860 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800383a:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <xQueueGenericReset+0xcc>)
 800383c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	e009      	b.n	8003860 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	3310      	adds	r3, #16
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff fef3 	bl	800363c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	3324      	adds	r3, #36	; 0x24
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff feee 	bl	800363c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003860:	f001 fffa 	bl	8005858 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003864:	2301      	movs	r3, #1
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	e000ed04 	.word	0xe000ed04

08003874 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08e      	sub	sp, #56	; 0x38
 8003878:	af02      	add	r7, sp, #8
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d109      	bne.n	800389c <xQueueGenericCreateStatic+0x28>
 8003888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	62bb      	str	r3, [r7, #40]	; 0x28
 800389a:	e7fe      	b.n	800389a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d109      	bne.n	80038b6 <xQueueGenericCreateStatic+0x42>
 80038a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a6:	f383 8811 	msr	BASEPRI, r3
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
 80038b4:	e7fe      	b.n	80038b4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <xQueueGenericCreateStatic+0x4e>
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <xQueueGenericCreateStatic+0x52>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <xQueueGenericCreateStatic+0x54>
 80038c6:	2300      	movs	r3, #0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d109      	bne.n	80038e0 <xQueueGenericCreateStatic+0x6c>
 80038cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d0:	f383 8811 	msr	BASEPRI, r3
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	623b      	str	r3, [r7, #32]
 80038de:	e7fe      	b.n	80038de <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d102      	bne.n	80038ec <xQueueGenericCreateStatic+0x78>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <xQueueGenericCreateStatic+0x7c>
 80038ec:	2301      	movs	r3, #1
 80038ee:	e000      	b.n	80038f2 <xQueueGenericCreateStatic+0x7e>
 80038f0:	2300      	movs	r3, #0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <xQueueGenericCreateStatic+0x96>
 80038f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fa:	f383 8811 	msr	BASEPRI, r3
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	61fb      	str	r3, [r7, #28]
 8003908:	e7fe      	b.n	8003908 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800390a:	2350      	movs	r3, #80	; 0x50
 800390c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2b50      	cmp	r3, #80	; 0x50
 8003912:	d009      	beq.n	8003928 <xQueueGenericCreateStatic+0xb4>
 8003914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	61bb      	str	r3, [r7, #24]
 8003926:	e7fe      	b.n	8003926 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00d      	beq.n	800394e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800393a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	4613      	mov	r3, r2
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	68b9      	ldr	r1, [r7, #8]
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f842 	bl	80039d2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800394e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003950:	4618      	mov	r0, r3
 8003952:	3730      	adds	r7, #48	; 0x30
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08a      	sub	sp, #40	; 0x28
 800395c:	af02      	add	r7, sp, #8
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	4613      	mov	r3, r2
 8003964:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d109      	bne.n	8003980 <xQueueGenericCreate+0x28>
 800396c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003970:	f383 8811 	msr	BASEPRI, r3
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	e7fe      	b.n	800397e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d102      	bne.n	800398c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	e004      	b.n	8003996 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	fb02 f303 	mul.w	r3, r2, r3
 8003994:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	3350      	adds	r3, #80	; 0x50
 800399a:	4618      	mov	r0, r3
 800399c:	f002 f848 	bl	8005a30 <pvPortMalloc>
 80039a0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00f      	beq.n	80039c8 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	3350      	adds	r3, #80	; 0x50
 80039ac:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039b6:	79fa      	ldrb	r2, [r7, #7]
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	4613      	mov	r3, r2
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	68b9      	ldr	r1, [r7, #8]
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f805 	bl	80039d2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80039c8:	69bb      	ldr	r3, [r7, #24]
	}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3720      	adds	r7, #32
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d103      	bne.n	80039ee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	e002      	b.n	80039f4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a00:	2101      	movs	r1, #1
 8003a02:	69b8      	ldr	r0, [r7, #24]
 8003a04:	f7ff fece 	bl	80037a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a10:	bf00      	nop
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08e      	sub	sp, #56	; 0x38
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a26:	2300      	movs	r3, #0
 8003a28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d109      	bne.n	8003a48 <xQueueGenericSend+0x30>
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a46:	e7fe      	b.n	8003a46 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d103      	bne.n	8003a56 <xQueueGenericSend+0x3e>
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <xQueueGenericSend+0x42>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <xQueueGenericSend+0x44>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d109      	bne.n	8003a74 <xQueueGenericSend+0x5c>
 8003a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a64:	f383 8811 	msr	BASEPRI, r3
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
 8003a72:	e7fe      	b.n	8003a72 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d103      	bne.n	8003a82 <xQueueGenericSend+0x6a>
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d101      	bne.n	8003a86 <xQueueGenericSend+0x6e>
 8003a82:	2301      	movs	r3, #1
 8003a84:	e000      	b.n	8003a88 <xQueueGenericSend+0x70>
 8003a86:	2300      	movs	r3, #0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d109      	bne.n	8003aa0 <xQueueGenericSend+0x88>
 8003a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	623b      	str	r3, [r7, #32]
 8003a9e:	e7fe      	b.n	8003a9e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003aa0:	f001 f99a 	bl	8004dd8 <xTaskGetSchedulerState>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d102      	bne.n	8003ab0 <xQueueGenericSend+0x98>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <xQueueGenericSend+0x9c>
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e000      	b.n	8003ab6 <xQueueGenericSend+0x9e>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d109      	bne.n	8003ace <xQueueGenericSend+0xb6>
 8003aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	61fb      	str	r3, [r7, #28]
 8003acc:	e7fe      	b.n	8003acc <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ace:	f001 fe95 	bl	80057fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d302      	bcc.n	8003ae4 <xQueueGenericSend+0xcc>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d129      	bne.n	8003b38 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	68b9      	ldr	r1, [r7, #8]
 8003ae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aea:	f000 f9ff 	bl	8003eec <prvCopyDataToQueue>
 8003aee:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d010      	beq.n	8003b1a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afa:	3324      	adds	r3, #36	; 0x24
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 ffaf 	bl	8004a60 <xTaskRemoveFromEventList>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d013      	beq.n	8003b30 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b08:	4b3f      	ldr	r3, [pc, #252]	; (8003c08 <xQueueGenericSend+0x1f0>)
 8003b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	e00a      	b.n	8003b30 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d007      	beq.n	8003b30 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b20:	4b39      	ldr	r3, [pc, #228]	; (8003c08 <xQueueGenericSend+0x1f0>)
 8003b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	f3bf 8f4f 	dsb	sy
 8003b2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b30:	f001 fe92 	bl	8005858 <vPortExitCritical>
				return pdPASS;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e063      	b.n	8003c00 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d103      	bne.n	8003b46 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b3e:	f001 fe8b 	bl	8005858 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	e05c      	b.n	8003c00 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d106      	bne.n	8003b5a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b4c:	f107 0314 	add.w	r3, r7, #20
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 ffe7 	bl	8004b24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b56:	2301      	movs	r3, #1
 8003b58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b5a:	f001 fe7d 	bl	8005858 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b5e:	f000 fd5d 	bl	800461c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b62:	f001 fe4b 	bl	80057fc <vPortEnterCritical>
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b6c:	b25b      	sxtb	r3, r3
 8003b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b72:	d103      	bne.n	8003b7c <xQueueGenericSend+0x164>
 8003b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b82:	b25b      	sxtb	r3, r3
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b88:	d103      	bne.n	8003b92 <xQueueGenericSend+0x17a>
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b92:	f001 fe61 	bl	8005858 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b96:	1d3a      	adds	r2, r7, #4
 8003b98:	f107 0314 	add.w	r3, r7, #20
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 ffd6 	bl	8004b50 <xTaskCheckForTimeOut>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d124      	bne.n	8003bf4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003baa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bac:	f000 fa96 	bl	80040dc <prvIsQueueFull>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d018      	beq.n	8003be8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb8:	3310      	adds	r3, #16
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 ff00 	bl	80049c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003bc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bc6:	f000 fa21 	bl	800400c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003bca:	f000 fd35 	bl	8004638 <xTaskResumeAll>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f47f af7c 	bne.w	8003ace <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003bd6:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <xQueueGenericSend+0x1f0>)
 8003bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	e772      	b.n	8003ace <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003be8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bea:	f000 fa0f 	bl	800400c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bee:	f000 fd23 	bl	8004638 <xTaskResumeAll>
 8003bf2:	e76c      	b.n	8003ace <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003bf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bf6:	f000 fa09 	bl	800400c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bfa:	f000 fd1d 	bl	8004638 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003bfe:	2300      	movs	r3, #0
		}
	}
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3738      	adds	r7, #56	; 0x38
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	e000ed04 	.word	0xe000ed04

08003c0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08e      	sub	sp, #56	; 0x38
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d109      	bne.n	8003c38 <xQueueGenericSendFromISR+0x2c>
 8003c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
 8003c36:	e7fe      	b.n	8003c36 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d103      	bne.n	8003c46 <xQueueGenericSendFromISR+0x3a>
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <xQueueGenericSendFromISR+0x3e>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <xQueueGenericSendFromISR+0x40>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d109      	bne.n	8003c64 <xQueueGenericSendFromISR+0x58>
 8003c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c54:	f383 8811 	msr	BASEPRI, r3
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	623b      	str	r3, [r7, #32]
 8003c62:	e7fe      	b.n	8003c62 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d103      	bne.n	8003c72 <xQueueGenericSendFromISR+0x66>
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <xQueueGenericSendFromISR+0x6a>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <xQueueGenericSendFromISR+0x6c>
 8003c76:	2300      	movs	r3, #0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d109      	bne.n	8003c90 <xQueueGenericSendFromISR+0x84>
 8003c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c80:	f383 8811 	msr	BASEPRI, r3
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	61fb      	str	r3, [r7, #28]
 8003c8e:	e7fe      	b.n	8003c8e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c90:	f001 fe90 	bl	80059b4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c94:	f3ef 8211 	mrs	r2, BASEPRI
 8003c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	61ba      	str	r2, [r7, #24]
 8003caa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003cac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003cae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d302      	bcc.n	8003cc2 <xQueueGenericSendFromISR+0xb6>
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d12c      	bne.n	8003d1c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	68b9      	ldr	r1, [r7, #8]
 8003cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cd2:	f000 f90b 	bl	8003eec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003cd6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cde:	d112      	bne.n	8003d06 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d016      	beq.n	8003d16 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cea:	3324      	adds	r3, #36	; 0x24
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 feb7 	bl	8004a60 <xTaskRemoveFromEventList>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00e      	beq.n	8003d16 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00b      	beq.n	8003d16 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	e007      	b.n	8003d16 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	b25a      	sxtb	r2, r3
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d16:	2301      	movs	r3, #1
 8003d18:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003d1a:	e001      	b.n	8003d20 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d22:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3738      	adds	r7, #56	; 0x38
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08c      	sub	sp, #48	; 0x30
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d40:	2300      	movs	r3, #0
 8003d42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d109      	bne.n	8003d62 <xQueueReceive+0x2e>
	__asm volatile
 8003d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	623b      	str	r3, [r7, #32]
 8003d60:	e7fe      	b.n	8003d60 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d103      	bne.n	8003d70 <xQueueReceive+0x3c>
 8003d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <xQueueReceive+0x40>
 8003d70:	2301      	movs	r3, #1
 8003d72:	e000      	b.n	8003d76 <xQueueReceive+0x42>
 8003d74:	2300      	movs	r3, #0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d109      	bne.n	8003d8e <xQueueReceive+0x5a>
 8003d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7e:	f383 8811 	msr	BASEPRI, r3
 8003d82:	f3bf 8f6f 	isb	sy
 8003d86:	f3bf 8f4f 	dsb	sy
 8003d8a:	61fb      	str	r3, [r7, #28]
 8003d8c:	e7fe      	b.n	8003d8c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d8e:	f001 f823 	bl	8004dd8 <xTaskGetSchedulerState>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d102      	bne.n	8003d9e <xQueueReceive+0x6a>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <xQueueReceive+0x6e>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <xQueueReceive+0x70>
 8003da2:	2300      	movs	r3, #0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d109      	bne.n	8003dbc <xQueueReceive+0x88>
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	61bb      	str	r3, [r7, #24]
 8003dba:	e7fe      	b.n	8003dba <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dbc:	f001 fd1e 	bl	80057fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d01f      	beq.n	8003e0c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003dcc:	68b9      	ldr	r1, [r7, #8]
 8003dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dd0:	f000 f8f6 	bl	8003fc0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	1e5a      	subs	r2, r3, #1
 8003dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dda:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00f      	beq.n	8003e04 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	3310      	adds	r3, #16
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fe39 	bl	8004a60 <xTaskRemoveFromEventList>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003df4:	4b3c      	ldr	r3, [pc, #240]	; (8003ee8 <xQueueReceive+0x1b4>)
 8003df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e04:	f001 fd28 	bl	8005858 <vPortExitCritical>
				return pdPASS;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e069      	b.n	8003ee0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d103      	bne.n	8003e1a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e12:	f001 fd21 	bl	8005858 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e16:	2300      	movs	r3, #0
 8003e18:	e062      	b.n	8003ee0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d106      	bne.n	8003e2e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e20:	f107 0310 	add.w	r3, r7, #16
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 fe7d 	bl	8004b24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e2e:	f001 fd13 	bl	8005858 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e32:	f000 fbf3 	bl	800461c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e36:	f001 fce1 	bl	80057fc <vPortEnterCritical>
 8003e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e40:	b25b      	sxtb	r3, r3
 8003e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e46:	d103      	bne.n	8003e50 <xQueueReceive+0x11c>
 8003e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e56:	b25b      	sxtb	r3, r3
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5c:	d103      	bne.n	8003e66 <xQueueReceive+0x132>
 8003e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e66:	f001 fcf7 	bl	8005858 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e6a:	1d3a      	adds	r2, r7, #4
 8003e6c:	f107 0310 	add.w	r3, r7, #16
 8003e70:	4611      	mov	r1, r2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fe6c 	bl	8004b50 <xTaskCheckForTimeOut>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d123      	bne.n	8003ec6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e80:	f000 f916 	bl	80040b0 <prvIsQueueEmpty>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d017      	beq.n	8003eba <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8c:	3324      	adds	r3, #36	; 0x24
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	4611      	mov	r1, r2
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fd96 	bl	80049c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e9a:	f000 f8b7 	bl	800400c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e9e:	f000 fbcb 	bl	8004638 <xTaskResumeAll>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d189      	bne.n	8003dbc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003ea8:	4b0f      	ldr	r3, [pc, #60]	; (8003ee8 <xQueueReceive+0x1b4>)
 8003eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	e780      	b.n	8003dbc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ebc:	f000 f8a6 	bl	800400c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ec0:	f000 fbba 	bl	8004638 <xTaskResumeAll>
 8003ec4:	e77a      	b.n	8003dbc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ec8:	f000 f8a0 	bl	800400c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ecc:	f000 fbb4 	bl	8004638 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ed2:	f000 f8ed 	bl	80040b0 <prvIsQueueEmpty>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f43f af6f 	beq.w	8003dbc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ede:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3730      	adds	r7, #48	; 0x30
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	e000ed04 	.word	0xe000ed04

08003eec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10d      	bne.n	8003f26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d14d      	bne.n	8003fae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 ff7c 	bl	8004e14 <xTaskPriorityDisinherit>
 8003f1c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	605a      	str	r2, [r3, #4]
 8003f24:	e043      	b.n	8003fae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d119      	bne.n	8003f60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6898      	ldr	r0, [r3, #8]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	461a      	mov	r2, r3
 8003f36:	68b9      	ldr	r1, [r7, #8]
 8003f38:	f001 ff74 	bl	8005e24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	441a      	add	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d32b      	bcc.n	8003fae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	609a      	str	r2, [r3, #8]
 8003f5e:	e026      	b.n	8003fae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	68d8      	ldr	r0, [r3, #12]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	461a      	mov	r2, r3
 8003f6a:	68b9      	ldr	r1, [r7, #8]
 8003f6c:	f001 ff5a 	bl	8005e24 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	68da      	ldr	r2, [r3, #12]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	425b      	negs	r3, r3
 8003f7a:	441a      	add	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d207      	bcs.n	8003f9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	425b      	negs	r3, r3
 8003f96:	441a      	add	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d105      	bne.n	8003fae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003fb6:	697b      	ldr	r3, [r7, #20]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d018      	beq.n	8004004 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	441a      	add	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d303      	bcc.n	8003ff4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68d9      	ldr	r1, [r3, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	6838      	ldr	r0, [r7, #0]
 8004000:	f001 ff10 	bl	8005e24 <memcpy>
	}
}
 8004004:	bf00      	nop
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004014:	f001 fbf2 	bl	80057fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800401e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004020:	e011      	b.n	8004046 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	2b00      	cmp	r3, #0
 8004028:	d012      	beq.n	8004050 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3324      	adds	r3, #36	; 0x24
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fd16 	bl	8004a60 <xTaskRemoveFromEventList>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800403a:	f000 fde9 	bl	8004c10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	3b01      	subs	r3, #1
 8004042:	b2db      	uxtb	r3, r3
 8004044:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800404a:	2b00      	cmp	r3, #0
 800404c:	dce9      	bgt.n	8004022 <prvUnlockQueue+0x16>
 800404e:	e000      	b.n	8004052 <prvUnlockQueue+0x46>
					break;
 8004050:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	22ff      	movs	r2, #255	; 0xff
 8004056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800405a:	f001 fbfd 	bl	8005858 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800405e:	f001 fbcd 	bl	80057fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004068:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800406a:	e011      	b.n	8004090 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d012      	beq.n	800409a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3310      	adds	r3, #16
 8004078:	4618      	mov	r0, r3
 800407a:	f000 fcf1 	bl	8004a60 <xTaskRemoveFromEventList>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004084:	f000 fdc4 	bl	8004c10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004088:	7bbb      	ldrb	r3, [r7, #14]
 800408a:	3b01      	subs	r3, #1
 800408c:	b2db      	uxtb	r3, r3
 800408e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004090:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004094:	2b00      	cmp	r3, #0
 8004096:	dce9      	bgt.n	800406c <prvUnlockQueue+0x60>
 8004098:	e000      	b.n	800409c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800409a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	22ff      	movs	r2, #255	; 0xff
 80040a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80040a4:	f001 fbd8 	bl	8005858 <vPortExitCritical>
}
 80040a8:	bf00      	nop
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040b8:	f001 fba0 	bl	80057fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d102      	bne.n	80040ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80040c4:	2301      	movs	r3, #1
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	e001      	b.n	80040ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80040ca:	2300      	movs	r3, #0
 80040cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040ce:	f001 fbc3 	bl	8005858 <vPortExitCritical>

	return xReturn;
 80040d2:	68fb      	ldr	r3, [r7, #12]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040e4:	f001 fb8a 	bl	80057fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d102      	bne.n	80040fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80040f4:	2301      	movs	r3, #1
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	e001      	b.n	80040fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040fe:	f001 fbab 	bl	8005858 <vPortExitCritical>

	return xReturn;
 8004102:	68fb      	ldr	r3, [r7, #12]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	e014      	b.n	8004146 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800411c:	4a0e      	ldr	r2, [pc, #56]	; (8004158 <vQueueAddToRegistry+0x4c>)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10b      	bne.n	8004140 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004128:	490b      	ldr	r1, [pc, #44]	; (8004158 <vQueueAddToRegistry+0x4c>)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004132:	4a09      	ldr	r2, [pc, #36]	; (8004158 <vQueueAddToRegistry+0x4c>)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	4413      	add	r3, r2
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800413e:	e005      	b.n	800414c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	3301      	adds	r3, #1
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2b07      	cmp	r3, #7
 800414a:	d9e7      	bls.n	800411c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800414c:	bf00      	nop
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	20001a14 	.word	0x20001a14

0800415c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800416c:	f001 fb46 	bl	80057fc <vPortEnterCritical>
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004176:	b25b      	sxtb	r3, r3
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417c:	d103      	bne.n	8004186 <vQueueWaitForMessageRestricted+0x2a>
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800418c:	b25b      	sxtb	r3, r3
 800418e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004192:	d103      	bne.n	800419c <vQueueWaitForMessageRestricted+0x40>
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800419c:	f001 fb5c 	bl	8005858 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d106      	bne.n	80041b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	3324      	adds	r3, #36	; 0x24
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	68b9      	ldr	r1, [r7, #8]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 fc2b 	bl	8004a0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80041b6:	6978      	ldr	r0, [r7, #20]
 80041b8:	f7ff ff28 	bl	800400c <prvUnlockQueue>
	}
 80041bc:	bf00      	nop
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08e      	sub	sp, #56	; 0x38
 80041c8:	af04      	add	r7, sp, #16
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80041d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d109      	bne.n	80041ec <xTaskCreateStatic+0x28>
 80041d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	623b      	str	r3, [r7, #32]
 80041ea:	e7fe      	b.n	80041ea <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80041ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <xTaskCreateStatic+0x42>
 80041f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	61fb      	str	r3, [r7, #28]
 8004204:	e7fe      	b.n	8004204 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004206:	235c      	movs	r3, #92	; 0x5c
 8004208:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	2b5c      	cmp	r3, #92	; 0x5c
 800420e:	d009      	beq.n	8004224 <xTaskCreateStatic+0x60>
 8004210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	61bb      	str	r3, [r7, #24]
 8004222:	e7fe      	b.n	8004222 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004226:	2b00      	cmp	r3, #0
 8004228:	d01e      	beq.n	8004268 <xTaskCreateStatic+0xa4>
 800422a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800422c:	2b00      	cmp	r3, #0
 800422e:	d01b      	beq.n	8004268 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004238:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	2202      	movs	r2, #2
 800423e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004242:	2300      	movs	r3, #0
 8004244:	9303      	str	r3, [sp, #12]
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	9302      	str	r3, [sp, #8]
 800424a:	f107 0314 	add.w	r3, r7, #20
 800424e:	9301      	str	r3, [sp, #4]
 8004250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	68b9      	ldr	r1, [r7, #8]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f850 	bl	8004300 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004260:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004262:	f000 f8d3 	bl	800440c <prvAddNewTaskToReadyList>
 8004266:	e001      	b.n	800426c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800426c:	697b      	ldr	r3, [r7, #20]
	}
 800426e:	4618      	mov	r0, r3
 8004270:	3728      	adds	r7, #40	; 0x28
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004276:	b580      	push	{r7, lr}
 8004278:	b08c      	sub	sp, #48	; 0x30
 800427a:	af04      	add	r7, sp, #16
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	603b      	str	r3, [r7, #0]
 8004282:	4613      	mov	r3, r2
 8004284:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004286:	88fb      	ldrh	r3, [r7, #6]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4618      	mov	r0, r3
 800428c:	f001 fbd0 	bl	8005a30 <pvPortMalloc>
 8004290:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00e      	beq.n	80042b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004298:	205c      	movs	r0, #92	; 0x5c
 800429a:	f001 fbc9 	bl	8005a30 <pvPortMalloc>
 800429e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30
 80042ac:	e005      	b.n	80042ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80042ae:	6978      	ldr	r0, [r7, #20]
 80042b0:	f001 fc80 	bl	8005bb4 <vPortFree>
 80042b4:	e001      	b.n	80042ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d017      	beq.n	80042f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80042c8:	88fa      	ldrh	r2, [r7, #6]
 80042ca:	2300      	movs	r3, #0
 80042cc:	9303      	str	r3, [sp, #12]
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	9302      	str	r3, [sp, #8]
 80042d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	68b9      	ldr	r1, [r7, #8]
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 f80e 	bl	8004300 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042e4:	69f8      	ldr	r0, [r7, #28]
 80042e6:	f000 f891 	bl	800440c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80042ea:	2301      	movs	r3, #1
 80042ec:	61bb      	str	r3, [r7, #24]
 80042ee:	e002      	b.n	80042f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042f0:	f04f 33ff 	mov.w	r3, #4294967295
 80042f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80042f6:	69bb      	ldr	r3, [r7, #24]
	}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3720      	adds	r7, #32
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b088      	sub	sp, #32
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800430e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004310:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	461a      	mov	r2, r3
 8004318:	21a5      	movs	r1, #165	; 0xa5
 800431a:	f001 fd8e 	bl	8005e3a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004328:	3b01      	subs	r3, #1
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	f023 0307 	bic.w	r3, r3, #7
 8004336:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	2b00      	cmp	r3, #0
 8004340:	d009      	beq.n	8004356 <prvInitialiseNewTask+0x56>
 8004342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	e7fe      	b.n	8004354 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004356:	2300      	movs	r3, #0
 8004358:	61fb      	str	r3, [r7, #28]
 800435a:	e012      	b.n	8004382 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	4413      	add	r3, r2
 8004362:	7819      	ldrb	r1, [r3, #0]
 8004364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	4413      	add	r3, r2
 800436a:	3334      	adds	r3, #52	; 0x34
 800436c:	460a      	mov	r2, r1
 800436e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	4413      	add	r3, r2
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d006      	beq.n	800438a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	3301      	adds	r3, #1
 8004380:	61fb      	str	r3, [r7, #28]
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	2b0f      	cmp	r3, #15
 8004386:	d9e9      	bls.n	800435c <prvInitialiseNewTask+0x5c>
 8004388:	e000      	b.n	800438c <prvInitialiseNewTask+0x8c>
		{
			break;
 800438a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800438c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	2b37      	cmp	r3, #55	; 0x37
 8004398:	d901      	bls.n	800439e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800439a:	2337      	movs	r3, #55	; 0x37
 800439c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043a2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043a8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80043aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ac:	2200      	movs	r2, #0
 80043ae:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80043b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b2:	3304      	adds	r3, #4
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff f961 	bl	800367c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80043ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043bc:	3318      	adds	r3, #24
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff f95c 	bl	800367c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80043d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80043d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043d8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80043da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043dc:	2200      	movs	r2, #0
 80043de:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	68f9      	ldr	r1, [r7, #12]
 80043ec:	69b8      	ldr	r0, [r7, #24]
 80043ee:	f001 f8db 	bl	80055a8 <pxPortInitialiseStack>
 80043f2:	4602      	mov	r2, r0
 80043f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80043f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004402:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004404:	bf00      	nop
 8004406:	3720      	adds	r7, #32
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004414:	f001 f9f2 	bl	80057fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004418:	4b2d      	ldr	r3, [pc, #180]	; (80044d0 <prvAddNewTaskToReadyList+0xc4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3301      	adds	r3, #1
 800441e:	4a2c      	ldr	r2, [pc, #176]	; (80044d0 <prvAddNewTaskToReadyList+0xc4>)
 8004420:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004422:	4b2c      	ldr	r3, [pc, #176]	; (80044d4 <prvAddNewTaskToReadyList+0xc8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d109      	bne.n	800443e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800442a:	4a2a      	ldr	r2, [pc, #168]	; (80044d4 <prvAddNewTaskToReadyList+0xc8>)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004430:	4b27      	ldr	r3, [pc, #156]	; (80044d0 <prvAddNewTaskToReadyList+0xc4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d110      	bne.n	800445a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004438:	f000 fc0e 	bl	8004c58 <prvInitialiseTaskLists>
 800443c:	e00d      	b.n	800445a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800443e:	4b26      	ldr	r3, [pc, #152]	; (80044d8 <prvAddNewTaskToReadyList+0xcc>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d109      	bne.n	800445a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004446:	4b23      	ldr	r3, [pc, #140]	; (80044d4 <prvAddNewTaskToReadyList+0xc8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	429a      	cmp	r2, r3
 8004452:	d802      	bhi.n	800445a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004454:	4a1f      	ldr	r2, [pc, #124]	; (80044d4 <prvAddNewTaskToReadyList+0xc8>)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800445a:	4b20      	ldr	r3, [pc, #128]	; (80044dc <prvAddNewTaskToReadyList+0xd0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3301      	adds	r3, #1
 8004460:	4a1e      	ldr	r2, [pc, #120]	; (80044dc <prvAddNewTaskToReadyList+0xd0>)
 8004462:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004464:	4b1d      	ldr	r3, [pc, #116]	; (80044dc <prvAddNewTaskToReadyList+0xd0>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004470:	4b1b      	ldr	r3, [pc, #108]	; (80044e0 <prvAddNewTaskToReadyList+0xd4>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d903      	bls.n	8004480 <prvAddNewTaskToReadyList+0x74>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	4a18      	ldr	r2, [pc, #96]	; (80044e0 <prvAddNewTaskToReadyList+0xd4>)
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004484:	4613      	mov	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4a15      	ldr	r2, [pc, #84]	; (80044e4 <prvAddNewTaskToReadyList+0xd8>)
 800448e:	441a      	add	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3304      	adds	r3, #4
 8004494:	4619      	mov	r1, r3
 8004496:	4610      	mov	r0, r2
 8004498:	f7ff f8fd 	bl	8003696 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800449c:	f001 f9dc 	bl	8005858 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80044a0:	4b0d      	ldr	r3, [pc, #52]	; (80044d8 <prvAddNewTaskToReadyList+0xcc>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00e      	beq.n	80044c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80044a8:	4b0a      	ldr	r3, [pc, #40]	; (80044d4 <prvAddNewTaskToReadyList+0xc8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d207      	bcs.n	80044c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80044b6:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <prvAddNewTaskToReadyList+0xdc>)
 80044b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000bbc 	.word	0x20000bbc
 80044d4:	200006e8 	.word	0x200006e8
 80044d8:	20000bc8 	.word	0x20000bc8
 80044dc:	20000bd8 	.word	0x20000bd8
 80044e0:	20000bc4 	.word	0x20000bc4
 80044e4:	200006ec 	.word	0x200006ec
 80044e8:	e000ed04 	.word	0xe000ed04

080044ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d016      	beq.n	800452c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80044fe:	4b13      	ldr	r3, [pc, #76]	; (800454c <vTaskDelay+0x60>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <vTaskDelay+0x2e>
 8004506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	60bb      	str	r3, [r7, #8]
 8004518:	e7fe      	b.n	8004518 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800451a:	f000 f87f 	bl	800461c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800451e:	2100      	movs	r1, #0
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 fce3 	bl	8004eec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004526:	f000 f887 	bl	8004638 <xTaskResumeAll>
 800452a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d107      	bne.n	8004542 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004532:	4b07      	ldr	r3, [pc, #28]	; (8004550 <vTaskDelay+0x64>)
 8004534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004542:	bf00      	nop
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000be4 	.word	0x20000be4
 8004550:	e000ed04 	.word	0xe000ed04

08004554 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b08a      	sub	sp, #40	; 0x28
 8004558:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800455a:	2300      	movs	r3, #0
 800455c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800455e:	2300      	movs	r3, #0
 8004560:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004562:	463a      	mov	r2, r7
 8004564:	1d39      	adds	r1, r7, #4
 8004566:	f107 0308 	add.w	r3, r7, #8
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff f832 	bl	80035d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004570:	6839      	ldr	r1, [r7, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	9202      	str	r2, [sp, #8]
 8004578:	9301      	str	r3, [sp, #4]
 800457a:	2300      	movs	r3, #0
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	2300      	movs	r3, #0
 8004580:	460a      	mov	r2, r1
 8004582:	4920      	ldr	r1, [pc, #128]	; (8004604 <vTaskStartScheduler+0xb0>)
 8004584:	4820      	ldr	r0, [pc, #128]	; (8004608 <vTaskStartScheduler+0xb4>)
 8004586:	f7ff fe1d 	bl	80041c4 <xTaskCreateStatic>
 800458a:	4602      	mov	r2, r0
 800458c:	4b1f      	ldr	r3, [pc, #124]	; (800460c <vTaskStartScheduler+0xb8>)
 800458e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004590:	4b1e      	ldr	r3, [pc, #120]	; (800460c <vTaskStartScheduler+0xb8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d002      	beq.n	800459e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004598:	2301      	movs	r3, #1
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	e001      	b.n	80045a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800459e:	2300      	movs	r3, #0
 80045a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d102      	bne.n	80045ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80045a8:	f000 fcf4 	bl	8004f94 <xTimerCreateTimerTask>
 80045ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d115      	bne.n	80045e0 <vTaskStartScheduler+0x8c>
 80045b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80045c6:	4b12      	ldr	r3, [pc, #72]	; (8004610 <vTaskStartScheduler+0xbc>)
 80045c8:	f04f 32ff 	mov.w	r2, #4294967295
 80045cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80045ce:	4b11      	ldr	r3, [pc, #68]	; (8004614 <vTaskStartScheduler+0xc0>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80045d4:	4b10      	ldr	r3, [pc, #64]	; (8004618 <vTaskStartScheduler+0xc4>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80045da:	f001 f871 	bl	80056c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80045de:	e00d      	b.n	80045fc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e6:	d109      	bne.n	80045fc <vTaskStartScheduler+0xa8>
 80045e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	e7fe      	b.n	80045fa <vTaskStartScheduler+0xa6>
}
 80045fc:	bf00      	nop
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	08005eac 	.word	0x08005eac
 8004608:	08004c29 	.word	0x08004c29
 800460c:	20000be0 	.word	0x20000be0
 8004610:	20000bdc 	.word	0x20000bdc
 8004614:	20000bc8 	.word	0x20000bc8
 8004618:	20000bc0 	.word	0x20000bc0

0800461c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004620:	4b04      	ldr	r3, [pc, #16]	; (8004634 <vTaskSuspendAll+0x18>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3301      	adds	r3, #1
 8004626:	4a03      	ldr	r2, [pc, #12]	; (8004634 <vTaskSuspendAll+0x18>)
 8004628:	6013      	str	r3, [r2, #0]
}
 800462a:	bf00      	nop
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	20000be4 	.word	0x20000be4

08004638 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800463e:	2300      	movs	r3, #0
 8004640:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004642:	2300      	movs	r3, #0
 8004644:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004646:	4b41      	ldr	r3, [pc, #260]	; (800474c <xTaskResumeAll+0x114>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d109      	bne.n	8004662 <xTaskResumeAll+0x2a>
 800464e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	e7fe      	b.n	8004660 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004662:	f001 f8cb 	bl	80057fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004666:	4b39      	ldr	r3, [pc, #228]	; (800474c <xTaskResumeAll+0x114>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3b01      	subs	r3, #1
 800466c:	4a37      	ldr	r2, [pc, #220]	; (800474c <xTaskResumeAll+0x114>)
 800466e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004670:	4b36      	ldr	r3, [pc, #216]	; (800474c <xTaskResumeAll+0x114>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d162      	bne.n	800473e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004678:	4b35      	ldr	r3, [pc, #212]	; (8004750 <xTaskResumeAll+0x118>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d05e      	beq.n	800473e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004680:	e02f      	b.n	80046e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004682:	4b34      	ldr	r3, [pc, #208]	; (8004754 <xTaskResumeAll+0x11c>)
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	3318      	adds	r3, #24
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff f85e 	bl	8003750 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	3304      	adds	r3, #4
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff f859 	bl	8003750 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a2:	4b2d      	ldr	r3, [pc, #180]	; (8004758 <xTaskResumeAll+0x120>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d903      	bls.n	80046b2 <xTaskResumeAll+0x7a>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	4a2a      	ldr	r2, [pc, #168]	; (8004758 <xTaskResumeAll+0x120>)
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b6:	4613      	mov	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4a27      	ldr	r2, [pc, #156]	; (800475c <xTaskResumeAll+0x124>)
 80046c0:	441a      	add	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	3304      	adds	r3, #4
 80046c6:	4619      	mov	r1, r3
 80046c8:	4610      	mov	r0, r2
 80046ca:	f7fe ffe4 	bl	8003696 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d2:	4b23      	ldr	r3, [pc, #140]	; (8004760 <xTaskResumeAll+0x128>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	429a      	cmp	r2, r3
 80046da:	d302      	bcc.n	80046e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80046dc:	4b21      	ldr	r3, [pc, #132]	; (8004764 <xTaskResumeAll+0x12c>)
 80046de:	2201      	movs	r2, #1
 80046e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046e2:	4b1c      	ldr	r3, [pc, #112]	; (8004754 <xTaskResumeAll+0x11c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1cb      	bne.n	8004682 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80046f0:	f000 fb4c 	bl	8004d8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80046f4:	4b1c      	ldr	r3, [pc, #112]	; (8004768 <xTaskResumeAll+0x130>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d010      	beq.n	8004722 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004700:	f000 f846 	bl	8004790 <xTaskIncrementTick>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800470a:	4b16      	ldr	r3, [pc, #88]	; (8004764 <xTaskResumeAll+0x12c>)
 800470c:	2201      	movs	r2, #1
 800470e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3b01      	subs	r3, #1
 8004714:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1f1      	bne.n	8004700 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800471c:	4b12      	ldr	r3, [pc, #72]	; (8004768 <xTaskResumeAll+0x130>)
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004722:	4b10      	ldr	r3, [pc, #64]	; (8004764 <xTaskResumeAll+0x12c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d009      	beq.n	800473e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800472a:	2301      	movs	r3, #1
 800472c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800472e:	4b0f      	ldr	r3, [pc, #60]	; (800476c <xTaskResumeAll+0x134>)
 8004730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800473e:	f001 f88b 	bl	8005858 <vPortExitCritical>

	return xAlreadyYielded;
 8004742:	68bb      	ldr	r3, [r7, #8]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20000be4 	.word	0x20000be4
 8004750:	20000bbc 	.word	0x20000bbc
 8004754:	20000b7c 	.word	0x20000b7c
 8004758:	20000bc4 	.word	0x20000bc4
 800475c:	200006ec 	.word	0x200006ec
 8004760:	200006e8 	.word	0x200006e8
 8004764:	20000bd0 	.word	0x20000bd0
 8004768:	20000bcc 	.word	0x20000bcc
 800476c:	e000ed04 	.word	0xe000ed04

08004770 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004776:	4b05      	ldr	r3, [pc, #20]	; (800478c <xTaskGetTickCount+0x1c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800477c:	687b      	ldr	r3, [r7, #4]
}
 800477e:	4618      	mov	r0, r3
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	20000bc0 	.word	0x20000bc0

08004790 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800479a:	4b51      	ldr	r3, [pc, #324]	; (80048e0 <xTaskIncrementTick+0x150>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f040 808d 	bne.w	80048be <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047a4:	4b4f      	ldr	r3, [pc, #316]	; (80048e4 <xTaskIncrementTick+0x154>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3301      	adds	r3, #1
 80047aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047ac:	4a4d      	ldr	r2, [pc, #308]	; (80048e4 <xTaskIncrementTick+0x154>)
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d11f      	bne.n	80047f8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80047b8:	4b4b      	ldr	r3, [pc, #300]	; (80048e8 <xTaskIncrementTick+0x158>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d009      	beq.n	80047d6 <xTaskIncrementTick+0x46>
 80047c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	603b      	str	r3, [r7, #0]
 80047d4:	e7fe      	b.n	80047d4 <xTaskIncrementTick+0x44>
 80047d6:	4b44      	ldr	r3, [pc, #272]	; (80048e8 <xTaskIncrementTick+0x158>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	4b43      	ldr	r3, [pc, #268]	; (80048ec <xTaskIncrementTick+0x15c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a41      	ldr	r2, [pc, #260]	; (80048e8 <xTaskIncrementTick+0x158>)
 80047e2:	6013      	str	r3, [r2, #0]
 80047e4:	4a41      	ldr	r2, [pc, #260]	; (80048ec <xTaskIncrementTick+0x15c>)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	4b41      	ldr	r3, [pc, #260]	; (80048f0 <xTaskIncrementTick+0x160>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3301      	adds	r3, #1
 80047f0:	4a3f      	ldr	r2, [pc, #252]	; (80048f0 <xTaskIncrementTick+0x160>)
 80047f2:	6013      	str	r3, [r2, #0]
 80047f4:	f000 faca 	bl	8004d8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80047f8:	4b3e      	ldr	r3, [pc, #248]	; (80048f4 <xTaskIncrementTick+0x164>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d34e      	bcc.n	80048a0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004802:	4b39      	ldr	r3, [pc, #228]	; (80048e8 <xTaskIncrementTick+0x158>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <xTaskIncrementTick+0x80>
 800480c:	2301      	movs	r3, #1
 800480e:	e000      	b.n	8004812 <xTaskIncrementTick+0x82>
 8004810:	2300      	movs	r3, #0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d004      	beq.n	8004820 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004816:	4b37      	ldr	r3, [pc, #220]	; (80048f4 <xTaskIncrementTick+0x164>)
 8004818:	f04f 32ff 	mov.w	r2, #4294967295
 800481c:	601a      	str	r2, [r3, #0]
					break;
 800481e:	e03f      	b.n	80048a0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004820:	4b31      	ldr	r3, [pc, #196]	; (80048e8 <xTaskIncrementTick+0x158>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	429a      	cmp	r2, r3
 8004836:	d203      	bcs.n	8004840 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004838:	4a2e      	ldr	r2, [pc, #184]	; (80048f4 <xTaskIncrementTick+0x164>)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6013      	str	r3, [r2, #0]
						break;
 800483e:	e02f      	b.n	80048a0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	3304      	adds	r3, #4
 8004844:	4618      	mov	r0, r3
 8004846:	f7fe ff83 	bl	8003750 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484e:	2b00      	cmp	r3, #0
 8004850:	d004      	beq.n	800485c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	3318      	adds	r3, #24
 8004856:	4618      	mov	r0, r3
 8004858:	f7fe ff7a 	bl	8003750 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004860:	4b25      	ldr	r3, [pc, #148]	; (80048f8 <xTaskIncrementTick+0x168>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	429a      	cmp	r2, r3
 8004866:	d903      	bls.n	8004870 <xTaskIncrementTick+0xe0>
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	4a22      	ldr	r2, [pc, #136]	; (80048f8 <xTaskIncrementTick+0x168>)
 800486e:	6013      	str	r3, [r2, #0]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004874:	4613      	mov	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4a1f      	ldr	r2, [pc, #124]	; (80048fc <xTaskIncrementTick+0x16c>)
 800487e:	441a      	add	r2, r3
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	3304      	adds	r3, #4
 8004884:	4619      	mov	r1, r3
 8004886:	4610      	mov	r0, r2
 8004888:	f7fe ff05 	bl	8003696 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004890:	4b1b      	ldr	r3, [pc, #108]	; (8004900 <xTaskIncrementTick+0x170>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004896:	429a      	cmp	r2, r3
 8004898:	d3b3      	bcc.n	8004802 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800489a:	2301      	movs	r3, #1
 800489c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800489e:	e7b0      	b.n	8004802 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048a0:	4b17      	ldr	r3, [pc, #92]	; (8004900 <xTaskIncrementTick+0x170>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a6:	4915      	ldr	r1, [pc, #84]	; (80048fc <xTaskIncrementTick+0x16c>)
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d907      	bls.n	80048c8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80048b8:	2301      	movs	r3, #1
 80048ba:	617b      	str	r3, [r7, #20]
 80048bc:	e004      	b.n	80048c8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80048be:	4b11      	ldr	r3, [pc, #68]	; (8004904 <xTaskIncrementTick+0x174>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3301      	adds	r3, #1
 80048c4:	4a0f      	ldr	r2, [pc, #60]	; (8004904 <xTaskIncrementTick+0x174>)
 80048c6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80048c8:	4b0f      	ldr	r3, [pc, #60]	; (8004908 <xTaskIncrementTick+0x178>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80048d0:	2301      	movs	r3, #1
 80048d2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80048d4:	697b      	ldr	r3, [r7, #20]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20000be4 	.word	0x20000be4
 80048e4:	20000bc0 	.word	0x20000bc0
 80048e8:	20000b74 	.word	0x20000b74
 80048ec:	20000b78 	.word	0x20000b78
 80048f0:	20000bd4 	.word	0x20000bd4
 80048f4:	20000bdc 	.word	0x20000bdc
 80048f8:	20000bc4 	.word	0x20000bc4
 80048fc:	200006ec 	.word	0x200006ec
 8004900:	200006e8 	.word	0x200006e8
 8004904:	20000bcc 	.word	0x20000bcc
 8004908:	20000bd0 	.word	0x20000bd0

0800490c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004912:	4b27      	ldr	r3, [pc, #156]	; (80049b0 <vTaskSwitchContext+0xa4>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800491a:	4b26      	ldr	r3, [pc, #152]	; (80049b4 <vTaskSwitchContext+0xa8>)
 800491c:	2201      	movs	r2, #1
 800491e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004920:	e040      	b.n	80049a4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004922:	4b24      	ldr	r3, [pc, #144]	; (80049b4 <vTaskSwitchContext+0xa8>)
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004928:	4b23      	ldr	r3, [pc, #140]	; (80049b8 <vTaskSwitchContext+0xac>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	e00f      	b.n	8004950 <vTaskSwitchContext+0x44>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d109      	bne.n	800494a <vTaskSwitchContext+0x3e>
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	607b      	str	r3, [r7, #4]
 8004948:	e7fe      	b.n	8004948 <vTaskSwitchContext+0x3c>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3b01      	subs	r3, #1
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	491a      	ldr	r1, [pc, #104]	; (80049bc <vTaskSwitchContext+0xb0>)
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	440b      	add	r3, r1
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0e5      	beq.n	8004930 <vTaskSwitchContext+0x24>
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4a13      	ldr	r2, [pc, #76]	; (80049bc <vTaskSwitchContext+0xb0>)
 8004970:	4413      	add	r3, r2
 8004972:	60bb      	str	r3, [r7, #8]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	605a      	str	r2, [r3, #4]
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	3308      	adds	r3, #8
 8004986:	429a      	cmp	r2, r3
 8004988:	d104      	bne.n	8004994 <vTaskSwitchContext+0x88>
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	605a      	str	r2, [r3, #4]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	4a09      	ldr	r2, [pc, #36]	; (80049c0 <vTaskSwitchContext+0xb4>)
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	4a06      	ldr	r2, [pc, #24]	; (80049b8 <vTaskSwitchContext+0xac>)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6013      	str	r3, [r2, #0]
}
 80049a4:	bf00      	nop
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	20000be4 	.word	0x20000be4
 80049b4:	20000bd0 	.word	0x20000bd0
 80049b8:	20000bc4 	.word	0x20000bc4
 80049bc:	200006ec 	.word	0x200006ec
 80049c0:	200006e8 	.word	0x200006e8

080049c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d109      	bne.n	80049e8 <vTaskPlaceOnEventList+0x24>
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	e7fe      	b.n	80049e6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049e8:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <vTaskPlaceOnEventList+0x44>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3318      	adds	r3, #24
 80049ee:	4619      	mov	r1, r3
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7fe fe74 	bl	80036de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80049f6:	2101      	movs	r1, #1
 80049f8:	6838      	ldr	r0, [r7, #0]
 80049fa:	f000 fa77 	bl	8004eec <prvAddCurrentTaskToDelayedList>
}
 80049fe:	bf00      	nop
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	200006e8 	.word	0x200006e8

08004a0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d109      	bne.n	8004a32 <vTaskPlaceOnEventListRestricted+0x26>
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	e7fe      	b.n	8004a30 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a32:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <vTaskPlaceOnEventListRestricted+0x50>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	3318      	adds	r3, #24
 8004a38:	4619      	mov	r1, r3
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f7fe fe2b 	bl	8003696 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004a46:	f04f 33ff 	mov.w	r3, #4294967295
 8004a4a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004a4c:	6879      	ldr	r1, [r7, #4]
 8004a4e:	68b8      	ldr	r0, [r7, #8]
 8004a50:	f000 fa4c 	bl	8004eec <prvAddCurrentTaskToDelayedList>
	}
 8004a54:	bf00      	nop
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	200006e8 	.word	0x200006e8

08004a60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d109      	bne.n	8004a8a <xTaskRemoveFromEventList+0x2a>
 8004a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	e7fe      	b.n	8004a88 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	3318      	adds	r3, #24
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fe fe5e 	bl	8003750 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a94:	4b1d      	ldr	r3, [pc, #116]	; (8004b0c <xTaskRemoveFromEventList+0xac>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d11d      	bne.n	8004ad8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7fe fe55 	bl	8003750 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aaa:	4b19      	ldr	r3, [pc, #100]	; (8004b10 <xTaskRemoveFromEventList+0xb0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d903      	bls.n	8004aba <xTaskRemoveFromEventList+0x5a>
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab6:	4a16      	ldr	r2, [pc, #88]	; (8004b10 <xTaskRemoveFromEventList+0xb0>)
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4a13      	ldr	r2, [pc, #76]	; (8004b14 <xTaskRemoveFromEventList+0xb4>)
 8004ac8:	441a      	add	r2, r3
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	3304      	adds	r3, #4
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	f7fe fde0 	bl	8003696 <vListInsertEnd>
 8004ad6:	e005      	b.n	8004ae4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	3318      	adds	r3, #24
 8004adc:	4619      	mov	r1, r3
 8004ade:	480e      	ldr	r0, [pc, #56]	; (8004b18 <xTaskRemoveFromEventList+0xb8>)
 8004ae0:	f7fe fdd9 	bl	8003696 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae8:	4b0c      	ldr	r3, [pc, #48]	; (8004b1c <xTaskRemoveFromEventList+0xbc>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d905      	bls.n	8004afe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004af2:	2301      	movs	r3, #1
 8004af4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004af6:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <xTaskRemoveFromEventList+0xc0>)
 8004af8:	2201      	movs	r2, #1
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	e001      	b.n	8004b02 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004afe:	2300      	movs	r3, #0
 8004b00:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004b02:	697b      	ldr	r3, [r7, #20]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	20000be4 	.word	0x20000be4
 8004b10:	20000bc4 	.word	0x20000bc4
 8004b14:	200006ec 	.word	0x200006ec
 8004b18:	20000b7c 	.word	0x20000b7c
 8004b1c:	200006e8 	.word	0x200006e8
 8004b20:	20000bd0 	.word	0x20000bd0

08004b24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b2c:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <vTaskInternalSetTimeOutState+0x24>)
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <vTaskInternalSetTimeOutState+0x28>)
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	605a      	str	r2, [r3, #4]
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	20000bd4 	.word	0x20000bd4
 8004b4c:	20000bc0 	.word	0x20000bc0

08004b50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b088      	sub	sp, #32
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d109      	bne.n	8004b74 <xTaskCheckForTimeOut+0x24>
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	613b      	str	r3, [r7, #16]
 8004b72:	e7fe      	b.n	8004b72 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d109      	bne.n	8004b8e <xTaskCheckForTimeOut+0x3e>
 8004b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	e7fe      	b.n	8004b8c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004b8e:	f000 fe35 	bl	80057fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b92:	4b1d      	ldr	r3, [pc, #116]	; (8004c08 <xTaskCheckForTimeOut+0xb8>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004baa:	d102      	bne.n	8004bb2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004bac:	2300      	movs	r3, #0
 8004bae:	61fb      	str	r3, [r7, #28]
 8004bb0:	e023      	b.n	8004bfa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	4b15      	ldr	r3, [pc, #84]	; (8004c0c <xTaskCheckForTimeOut+0xbc>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d007      	beq.n	8004bce <xTaskCheckForTimeOut+0x7e>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d302      	bcc.n	8004bce <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	61fb      	str	r3, [r7, #28]
 8004bcc:	e015      	b.n	8004bfa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d20b      	bcs.n	8004bf0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	1ad2      	subs	r2, r2, r3
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7ff ff9d 	bl	8004b24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004bea:	2300      	movs	r3, #0
 8004bec:	61fb      	str	r3, [r7, #28]
 8004bee:	e004      	b.n	8004bfa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004bfa:	f000 fe2d 	bl	8005858 <vPortExitCritical>

	return xReturn;
 8004bfe:	69fb      	ldr	r3, [r7, #28]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3720      	adds	r7, #32
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	20000bc0 	.word	0x20000bc0
 8004c0c:	20000bd4 	.word	0x20000bd4

08004c10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004c14:	4b03      	ldr	r3, [pc, #12]	; (8004c24 <vTaskMissedYield+0x14>)
 8004c16:	2201      	movs	r2, #1
 8004c18:	601a      	str	r2, [r3, #0]
}
 8004c1a:	bf00      	nop
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	20000bd0 	.word	0x20000bd0

08004c28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c30:	f000 f852 	bl	8004cd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c34:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <prvIdleTask+0x28>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d9f9      	bls.n	8004c30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c3c:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <prvIdleTask+0x2c>)
 8004c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c4c:	e7f0      	b.n	8004c30 <prvIdleTask+0x8>
 8004c4e:	bf00      	nop
 8004c50:	200006ec 	.word	0x200006ec
 8004c54:	e000ed04 	.word	0xe000ed04

08004c58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c5e:	2300      	movs	r3, #0
 8004c60:	607b      	str	r3, [r7, #4]
 8004c62:	e00c      	b.n	8004c7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4a12      	ldr	r2, [pc, #72]	; (8004cb8 <prvInitialiseTaskLists+0x60>)
 8004c70:	4413      	add	r3, r2
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fe fce2 	bl	800363c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	607b      	str	r3, [r7, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b37      	cmp	r3, #55	; 0x37
 8004c82:	d9ef      	bls.n	8004c64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c84:	480d      	ldr	r0, [pc, #52]	; (8004cbc <prvInitialiseTaskLists+0x64>)
 8004c86:	f7fe fcd9 	bl	800363c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c8a:	480d      	ldr	r0, [pc, #52]	; (8004cc0 <prvInitialiseTaskLists+0x68>)
 8004c8c:	f7fe fcd6 	bl	800363c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c90:	480c      	ldr	r0, [pc, #48]	; (8004cc4 <prvInitialiseTaskLists+0x6c>)
 8004c92:	f7fe fcd3 	bl	800363c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c96:	480c      	ldr	r0, [pc, #48]	; (8004cc8 <prvInitialiseTaskLists+0x70>)
 8004c98:	f7fe fcd0 	bl	800363c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c9c:	480b      	ldr	r0, [pc, #44]	; (8004ccc <prvInitialiseTaskLists+0x74>)
 8004c9e:	f7fe fccd 	bl	800363c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ca2:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <prvInitialiseTaskLists+0x78>)
 8004ca4:	4a05      	ldr	r2, [pc, #20]	; (8004cbc <prvInitialiseTaskLists+0x64>)
 8004ca6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ca8:	4b0a      	ldr	r3, [pc, #40]	; (8004cd4 <prvInitialiseTaskLists+0x7c>)
 8004caa:	4a05      	ldr	r2, [pc, #20]	; (8004cc0 <prvInitialiseTaskLists+0x68>)
 8004cac:	601a      	str	r2, [r3, #0]
}
 8004cae:	bf00      	nop
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	200006ec 	.word	0x200006ec
 8004cbc:	20000b4c 	.word	0x20000b4c
 8004cc0:	20000b60 	.word	0x20000b60
 8004cc4:	20000b7c 	.word	0x20000b7c
 8004cc8:	20000b90 	.word	0x20000b90
 8004ccc:	20000ba8 	.word	0x20000ba8
 8004cd0:	20000b74 	.word	0x20000b74
 8004cd4:	20000b78 	.word	0x20000b78

08004cd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cde:	e019      	b.n	8004d14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ce0:	f000 fd8c 	bl	80057fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004ce4:	4b0f      	ldr	r3, [pc, #60]	; (8004d24 <prvCheckTasksWaitingTermination+0x4c>)
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3304      	adds	r3, #4
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fe fd2d 	bl	8003750 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004cf6:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <prvCheckTasksWaitingTermination+0x50>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	4a0a      	ldr	r2, [pc, #40]	; (8004d28 <prvCheckTasksWaitingTermination+0x50>)
 8004cfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d00:	4b0a      	ldr	r3, [pc, #40]	; (8004d2c <prvCheckTasksWaitingTermination+0x54>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3b01      	subs	r3, #1
 8004d06:	4a09      	ldr	r2, [pc, #36]	; (8004d2c <prvCheckTasksWaitingTermination+0x54>)
 8004d08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d0a:	f000 fda5 	bl	8005858 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f80e 	bl	8004d30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d14:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <prvCheckTasksWaitingTermination+0x54>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1e1      	bne.n	8004ce0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d1c:	bf00      	nop
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	20000b90 	.word	0x20000b90
 8004d28:	20000bbc 	.word	0x20000bbc
 8004d2c:	20000ba4 	.word	0x20000ba4

08004d30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d108      	bne.n	8004d54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 ff34 	bl	8005bb4 <vPortFree>
				vPortFree( pxTCB );
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 ff31 	bl	8005bb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d52:	e017      	b.n	8004d84 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d103      	bne.n	8004d66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 ff28 	bl	8005bb4 <vPortFree>
	}
 8004d64:	e00e      	b.n	8004d84 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d009      	beq.n	8004d84 <prvDeleteTCB+0x54>
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	e7fe      	b.n	8004d82 <prvDeleteTCB+0x52>
	}
 8004d84:	bf00      	nop
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d92:	4b0f      	ldr	r3, [pc, #60]	; (8004dd0 <prvResetNextTaskUnblockTime+0x44>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <prvResetNextTaskUnblockTime+0x14>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e000      	b.n	8004da2 <prvResetNextTaskUnblockTime+0x16>
 8004da0:	2300      	movs	r3, #0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d004      	beq.n	8004db0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004da6:	4b0b      	ldr	r3, [pc, #44]	; (8004dd4 <prvResetNextTaskUnblockTime+0x48>)
 8004da8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004dae:	e008      	b.n	8004dc2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004db0:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <prvResetNextTaskUnblockTime+0x44>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	4a05      	ldr	r2, [pc, #20]	; (8004dd4 <prvResetNextTaskUnblockTime+0x48>)
 8004dc0:	6013      	str	r3, [r2, #0]
}
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	20000b74 	.word	0x20000b74
 8004dd4:	20000bdc 	.word	0x20000bdc

08004dd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004dde:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <xTaskGetSchedulerState+0x34>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d102      	bne.n	8004dec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004de6:	2301      	movs	r3, #1
 8004de8:	607b      	str	r3, [r7, #4]
 8004dea:	e008      	b.n	8004dfe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dec:	4b08      	ldr	r3, [pc, #32]	; (8004e10 <xTaskGetSchedulerState+0x38>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d102      	bne.n	8004dfa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004df4:	2302      	movs	r3, #2
 8004df6:	607b      	str	r3, [r7, #4]
 8004df8:	e001      	b.n	8004dfe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004dfe:	687b      	ldr	r3, [r7, #4]
	}
 8004e00:	4618      	mov	r0, r3
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	20000bc8 	.word	0x20000bc8
 8004e10:	20000be4 	.word	0x20000be4

08004e14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e20:	2300      	movs	r3, #0
 8004e22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d054      	beq.n	8004ed4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e2a:	4b2d      	ldr	r3, [pc, #180]	; (8004ee0 <xTaskPriorityDisinherit+0xcc>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d009      	beq.n	8004e48 <xTaskPriorityDisinherit+0x34>
 8004e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	e7fe      	b.n	8004e46 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d109      	bne.n	8004e64 <xTaskPriorityDisinherit+0x50>
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	60bb      	str	r3, [r7, #8]
 8004e62:	e7fe      	b.n	8004e62 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e68:	1e5a      	subs	r2, r3, #1
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d02c      	beq.n	8004ed4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d128      	bne.n	8004ed4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	3304      	adds	r3, #4
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fe fc62 	bl	8003750 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea4:	4b0f      	ldr	r3, [pc, #60]	; (8004ee4 <xTaskPriorityDisinherit+0xd0>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d903      	bls.n	8004eb4 <xTaskPriorityDisinherit+0xa0>
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	4a0c      	ldr	r2, [pc, #48]	; (8004ee4 <xTaskPriorityDisinherit+0xd0>)
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb8:	4613      	mov	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4a09      	ldr	r2, [pc, #36]	; (8004ee8 <xTaskPriorityDisinherit+0xd4>)
 8004ec2:	441a      	add	r2, r3
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4610      	mov	r0, r2
 8004ecc:	f7fe fbe3 	bl	8003696 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ed4:	697b      	ldr	r3, [r7, #20]
	}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	200006e8 	.word	0x200006e8
 8004ee4:	20000bc4 	.word	0x20000bc4
 8004ee8:	200006ec 	.word	0x200006ec

08004eec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ef6:	4b21      	ldr	r3, [pc, #132]	; (8004f7c <prvAddCurrentTaskToDelayedList+0x90>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004efc:	4b20      	ldr	r3, [pc, #128]	; (8004f80 <prvAddCurrentTaskToDelayedList+0x94>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3304      	adds	r3, #4
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fe fc24 	bl	8003750 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0e:	d10a      	bne.n	8004f26 <prvAddCurrentTaskToDelayedList+0x3a>
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d007      	beq.n	8004f26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f16:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4819      	ldr	r0, [pc, #100]	; (8004f84 <prvAddCurrentTaskToDelayedList+0x98>)
 8004f20:	f7fe fbb9 	bl	8003696 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f24:	e026      	b.n	8004f74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f2e:	4b14      	ldr	r3, [pc, #80]	; (8004f80 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d209      	bcs.n	8004f52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f3e:	4b12      	ldr	r3, [pc, #72]	; (8004f88 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	4b0f      	ldr	r3, [pc, #60]	; (8004f80 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	3304      	adds	r3, #4
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	f7fe fbc7 	bl	80036de <vListInsert>
}
 8004f50:	e010      	b.n	8004f74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f52:	4b0e      	ldr	r3, [pc, #56]	; (8004f8c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	f7fe fbbd 	bl	80036de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f64:	4b0a      	ldr	r3, [pc, #40]	; (8004f90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d202      	bcs.n	8004f74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004f6e:	4a08      	ldr	r2, [pc, #32]	; (8004f90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	6013      	str	r3, [r2, #0]
}
 8004f74:	bf00      	nop
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	20000bc0 	.word	0x20000bc0
 8004f80:	200006e8 	.word	0x200006e8
 8004f84:	20000ba8 	.word	0x20000ba8
 8004f88:	20000b78 	.word	0x20000b78
 8004f8c:	20000b74 	.word	0x20000b74
 8004f90:	20000bdc 	.word	0x20000bdc

08004f94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08a      	sub	sp, #40	; 0x28
 8004f98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004f9e:	f000 fac3 	bl	8005528 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004fa2:	4b1c      	ldr	r3, [pc, #112]	; (8005014 <xTimerCreateTimerTask+0x80>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d021      	beq.n	8004fee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004fb2:	1d3a      	adds	r2, r7, #4
 8004fb4:	f107 0108 	add.w	r1, r7, #8
 8004fb8:	f107 030c 	add.w	r3, r7, #12
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fe fb23 	bl	8003608 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	9202      	str	r2, [sp, #8]
 8004fca:	9301      	str	r3, [sp, #4]
 8004fcc:	2302      	movs	r3, #2
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	460a      	mov	r2, r1
 8004fd4:	4910      	ldr	r1, [pc, #64]	; (8005018 <xTimerCreateTimerTask+0x84>)
 8004fd6:	4811      	ldr	r0, [pc, #68]	; (800501c <xTimerCreateTimerTask+0x88>)
 8004fd8:	f7ff f8f4 	bl	80041c4 <xTaskCreateStatic>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	4b10      	ldr	r3, [pc, #64]	; (8005020 <xTimerCreateTimerTask+0x8c>)
 8004fe0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004fe2:	4b0f      	ldr	r3, [pc, #60]	; (8005020 <xTimerCreateTimerTask+0x8c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004fea:	2301      	movs	r3, #1
 8004fec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d109      	bne.n	8005008 <xTimerCreateTimerTask+0x74>
 8004ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	613b      	str	r3, [r7, #16]
 8005006:	e7fe      	b.n	8005006 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005008:	697b      	ldr	r3, [r7, #20]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	20000c18 	.word	0x20000c18
 8005018:	08005eb4 	.word	0x08005eb4
 800501c:	0800513d 	.word	0x0800513d
 8005020:	20000c1c 	.word	0x20000c1c

08005024 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b08a      	sub	sp, #40	; 0x28
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
 8005030:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005032:	2300      	movs	r3, #0
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d109      	bne.n	8005050 <xTimerGenericCommand+0x2c>
 800503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	623b      	str	r3, [r7, #32]
 800504e:	e7fe      	b.n	800504e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005050:	4b19      	ldr	r3, [pc, #100]	; (80050b8 <xTimerGenericCommand+0x94>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d02a      	beq.n	80050ae <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2b05      	cmp	r3, #5
 8005068:	dc18      	bgt.n	800509c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800506a:	f7ff feb5 	bl	8004dd8 <xTaskGetSchedulerState>
 800506e:	4603      	mov	r3, r0
 8005070:	2b02      	cmp	r3, #2
 8005072:	d109      	bne.n	8005088 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005074:	4b10      	ldr	r3, [pc, #64]	; (80050b8 <xTimerGenericCommand+0x94>)
 8005076:	6818      	ldr	r0, [r3, #0]
 8005078:	f107 0110 	add.w	r1, r7, #16
 800507c:	2300      	movs	r3, #0
 800507e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005080:	f7fe fcca 	bl	8003a18 <xQueueGenericSend>
 8005084:	6278      	str	r0, [r7, #36]	; 0x24
 8005086:	e012      	b.n	80050ae <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005088:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <xTimerGenericCommand+0x94>)
 800508a:	6818      	ldr	r0, [r3, #0]
 800508c:	f107 0110 	add.w	r1, r7, #16
 8005090:	2300      	movs	r3, #0
 8005092:	2200      	movs	r2, #0
 8005094:	f7fe fcc0 	bl	8003a18 <xQueueGenericSend>
 8005098:	6278      	str	r0, [r7, #36]	; 0x24
 800509a:	e008      	b.n	80050ae <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800509c:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <xTimerGenericCommand+0x94>)
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	f107 0110 	add.w	r1, r7, #16
 80050a4:	2300      	movs	r3, #0
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	f7fe fdb0 	bl	8003c0c <xQueueGenericSendFromISR>
 80050ac:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3728      	adds	r7, #40	; 0x28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	20000c18 	.word	0x20000c18

080050bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b088      	sub	sp, #32
 80050c0:	af02      	add	r7, sp, #8
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050c6:	4b1c      	ldr	r3, [pc, #112]	; (8005138 <prvProcessExpiredTimer+0x7c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	3304      	adds	r3, #4
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7fe fb3b 	bl	8003750 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d121      	bne.n	8005126 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	699a      	ldr	r2, [r3, #24]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	18d1      	adds	r1, r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	6978      	ldr	r0, [r7, #20]
 80050f0:	f000 f8c8 	bl	8005284 <prvInsertTimerInActiveList>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d015      	beq.n	8005126 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80050fa:	2300      	movs	r3, #0
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	2300      	movs	r3, #0
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	2100      	movs	r1, #0
 8005104:	6978      	ldr	r0, [r7, #20]
 8005106:	f7ff ff8d 	bl	8005024 <xTimerGenericCommand>
 800510a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d109      	bne.n	8005126 <prvProcessExpiredTimer+0x6a>
 8005112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	e7fe      	b.n	8005124 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	6978      	ldr	r0, [r7, #20]
 800512c:	4798      	blx	r3
}
 800512e:	bf00      	nop
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	20000c10 	.word	0x20000c10

0800513c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005144:	f107 0308 	add.w	r3, r7, #8
 8005148:	4618      	mov	r0, r3
 800514a:	f000 f857 	bl	80051fc <prvGetNextExpireTime>
 800514e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	4619      	mov	r1, r3
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 f803 	bl	8005160 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800515a:	f000 f8d5 	bl	8005308 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800515e:	e7f1      	b.n	8005144 <prvTimerTask+0x8>

08005160 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800516a:	f7ff fa57 	bl	800461c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800516e:	f107 0308 	add.w	r3, r7, #8
 8005172:	4618      	mov	r0, r3
 8005174:	f000 f866 	bl	8005244 <prvSampleTimeNow>
 8005178:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d130      	bne.n	80051e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10a      	bne.n	800519c <prvProcessTimerOrBlockTask+0x3c>
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	429a      	cmp	r2, r3
 800518c:	d806      	bhi.n	800519c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800518e:	f7ff fa53 	bl	8004638 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005192:	68f9      	ldr	r1, [r7, #12]
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7ff ff91 	bl	80050bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800519a:	e024      	b.n	80051e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d008      	beq.n	80051b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80051a2:	4b13      	ldr	r3, [pc, #76]	; (80051f0 <prvProcessTimerOrBlockTask+0x90>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	bf0c      	ite	eq
 80051ac:	2301      	moveq	r3, #1
 80051ae:	2300      	movne	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80051b4:	4b0f      	ldr	r3, [pc, #60]	; (80051f4 <prvProcessTimerOrBlockTask+0x94>)
 80051b6:	6818      	ldr	r0, [r3, #0]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	4619      	mov	r1, r3
 80051c2:	f7fe ffcb 	bl	800415c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80051c6:	f7ff fa37 	bl	8004638 <xTaskResumeAll>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10a      	bne.n	80051e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80051d0:	4b09      	ldr	r3, [pc, #36]	; (80051f8 <prvProcessTimerOrBlockTask+0x98>)
 80051d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	f3bf 8f6f 	isb	sy
}
 80051e0:	e001      	b.n	80051e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80051e2:	f7ff fa29 	bl	8004638 <xTaskResumeAll>
}
 80051e6:	bf00      	nop
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	20000c14 	.word	0x20000c14
 80051f4:	20000c18 	.word	0x20000c18
 80051f8:	e000ed04 	.word	0xe000ed04

080051fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005204:	4b0e      	ldr	r3, [pc, #56]	; (8005240 <prvGetNextExpireTime+0x44>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	bf0c      	ite	eq
 800520e:	2301      	moveq	r3, #1
 8005210:	2300      	movne	r3, #0
 8005212:	b2db      	uxtb	r3, r3
 8005214:	461a      	mov	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d105      	bne.n	800522e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005222:	4b07      	ldr	r3, [pc, #28]	; (8005240 <prvGetNextExpireTime+0x44>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	e001      	b.n	8005232 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005232:	68fb      	ldr	r3, [r7, #12]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	20000c10 	.word	0x20000c10

08005244 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800524c:	f7ff fa90 	bl	8004770 <xTaskGetTickCount>
 8005250:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005252:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <prvSampleTimeNow+0x3c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	429a      	cmp	r2, r3
 800525a:	d205      	bcs.n	8005268 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800525c:	f000 f904 	bl	8005468 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	e002      	b.n	800526e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800526e:	4a04      	ldr	r2, [pc, #16]	; (8005280 <prvSampleTimeNow+0x3c>)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005274:	68fb      	ldr	r3, [r7, #12]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	20000c20 	.word	0x20000c20

08005284 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d812      	bhi.n	80052d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	1ad2      	subs	r2, r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d302      	bcc.n	80052be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80052b8:	2301      	movs	r3, #1
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	e01b      	b.n	80052f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80052be:	4b10      	ldr	r3, [pc, #64]	; (8005300 <prvInsertTimerInActiveList+0x7c>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3304      	adds	r3, #4
 80052c6:	4619      	mov	r1, r3
 80052c8:	4610      	mov	r0, r2
 80052ca:	f7fe fa08 	bl	80036de <vListInsert>
 80052ce:	e012      	b.n	80052f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d206      	bcs.n	80052e6 <prvInsertTimerInActiveList+0x62>
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d302      	bcc.n	80052e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80052e0:	2301      	movs	r3, #1
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	e007      	b.n	80052f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052e6:	4b07      	ldr	r3, [pc, #28]	; (8005304 <prvInsertTimerInActiveList+0x80>)
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	3304      	adds	r3, #4
 80052ee:	4619      	mov	r1, r3
 80052f0:	4610      	mov	r0, r2
 80052f2:	f7fe f9f4 	bl	80036de <vListInsert>
		}
	}

	return xProcessTimerNow;
 80052f6:	697b      	ldr	r3, [r7, #20]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3718      	adds	r7, #24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	20000c14 	.word	0x20000c14
 8005304:	20000c10 	.word	0x20000c10

08005308 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b08e      	sub	sp, #56	; 0x38
 800530c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800530e:	e099      	b.n	8005444 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	da17      	bge.n	8005346 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005316:	1d3b      	adds	r3, r7, #4
 8005318:	3304      	adds	r3, #4
 800531a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800531c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531e:	2b00      	cmp	r3, #0
 8005320:	d109      	bne.n	8005336 <prvProcessReceivedCommands+0x2e>
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	61fb      	str	r3, [r7, #28]
 8005334:	e7fe      	b.n	8005334 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800533c:	6850      	ldr	r0, [r2, #4]
 800533e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005340:	6892      	ldr	r2, [r2, #8]
 8005342:	4611      	mov	r1, r2
 8005344:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	db7a      	blt.n	8005442 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535a:	3304      	adds	r3, #4
 800535c:	4618      	mov	r0, r3
 800535e:	f7fe f9f7 	bl	8003750 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005362:	463b      	mov	r3, r7
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff ff6d 	bl	8005244 <prvSampleTimeNow>
 800536a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b09      	cmp	r3, #9
 8005370:	d868      	bhi.n	8005444 <prvProcessReceivedCommands+0x13c>
 8005372:	a201      	add	r2, pc, #4	; (adr r2, 8005378 <prvProcessReceivedCommands+0x70>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	080053a1 	.word	0x080053a1
 800537c:	080053a1 	.word	0x080053a1
 8005380:	080053a1 	.word	0x080053a1
 8005384:	08005445 	.word	0x08005445
 8005388:	080053fb 	.word	0x080053fb
 800538c:	08005431 	.word	0x08005431
 8005390:	080053a1 	.word	0x080053a1
 8005394:	080053a1 	.word	0x080053a1
 8005398:	08005445 	.word	0x08005445
 800539c:	080053fb 	.word	0x080053fb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	18d1      	adds	r1, r2, r3
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053ae:	f7ff ff69 	bl	8005284 <prvInsertTimerInActiveList>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d045      	beq.n	8005444 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053be:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80053c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d13d      	bne.n	8005444 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	441a      	add	r2, r3
 80053d0:	2300      	movs	r3, #0
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	2300      	movs	r3, #0
 80053d6:	2100      	movs	r1, #0
 80053d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053da:	f7ff fe23 	bl	8005024 <xTimerGenericCommand>
 80053de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d12e      	bne.n	8005444 <prvProcessReceivedCommands+0x13c>
 80053e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	61bb      	str	r3, [r7, #24]
 80053f8:	e7fe      	b.n	80053f8 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d109      	bne.n	800541c <prvProcessReceivedCommands+0x114>
 8005408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	e7fe      	b.n	800541a <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800541c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541e:	699a      	ldr	r2, [r3, #24]
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	18d1      	adds	r1, r2, r3
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800542a:	f7ff ff2b 	bl	8005284 <prvInsertTimerInActiveList>
					break;
 800542e:	e009      	b.n	8005444 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005436:	2b00      	cmp	r3, #0
 8005438:	d104      	bne.n	8005444 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800543a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800543c:	f000 fbba 	bl	8005bb4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005440:	e000      	b.n	8005444 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005442:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005444:	4b07      	ldr	r3, [pc, #28]	; (8005464 <prvProcessReceivedCommands+0x15c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	1d39      	adds	r1, r7, #4
 800544a:	2200      	movs	r2, #0
 800544c:	4618      	mov	r0, r3
 800544e:	f7fe fc71 	bl	8003d34 <xQueueReceive>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	f47f af5b 	bne.w	8005310 <prvProcessReceivedCommands+0x8>
	}
}
 800545a:	bf00      	nop
 800545c:	3730      	adds	r7, #48	; 0x30
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20000c18 	.word	0x20000c18

08005468 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b088      	sub	sp, #32
 800546c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800546e:	e044      	b.n	80054fa <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005470:	4b2b      	ldr	r3, [pc, #172]	; (8005520 <prvSwitchTimerLists+0xb8>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800547a:	4b29      	ldr	r3, [pc, #164]	; (8005520 <prvSwitchTimerLists+0xb8>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	3304      	adds	r3, #4
 8005488:	4618      	mov	r0, r3
 800548a:	f7fe f961 	bl	8003750 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d12d      	bne.n	80054fa <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	4413      	add	r3, r2
 80054a6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d90e      	bls.n	80054ce <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054bc:	4b18      	ldr	r3, [pc, #96]	; (8005520 <prvSwitchTimerLists+0xb8>)
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3304      	adds	r3, #4
 80054c4:	4619      	mov	r1, r3
 80054c6:	4610      	mov	r0, r2
 80054c8:	f7fe f909 	bl	80036de <vListInsert>
 80054cc:	e015      	b.n	80054fa <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054ce:	2300      	movs	r3, #0
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	2300      	movs	r3, #0
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	2100      	movs	r1, #0
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f7ff fda3 	bl	8005024 <xTimerGenericCommand>
 80054de:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d109      	bne.n	80054fa <prvSwitchTimerLists+0x92>
 80054e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	603b      	str	r3, [r7, #0]
 80054f8:	e7fe      	b.n	80054f8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054fa:	4b09      	ldr	r3, [pc, #36]	; (8005520 <prvSwitchTimerLists+0xb8>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1b5      	bne.n	8005470 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005504:	4b06      	ldr	r3, [pc, #24]	; (8005520 <prvSwitchTimerLists+0xb8>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800550a:	4b06      	ldr	r3, [pc, #24]	; (8005524 <prvSwitchTimerLists+0xbc>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a04      	ldr	r2, [pc, #16]	; (8005520 <prvSwitchTimerLists+0xb8>)
 8005510:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005512:	4a04      	ldr	r2, [pc, #16]	; (8005524 <prvSwitchTimerLists+0xbc>)
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	6013      	str	r3, [r2, #0]
}
 8005518:	bf00      	nop
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	20000c10 	.word	0x20000c10
 8005524:	20000c14 	.word	0x20000c14

08005528 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800552e:	f000 f965 	bl	80057fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005532:	4b15      	ldr	r3, [pc, #84]	; (8005588 <prvCheckForValidListAndQueue+0x60>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d120      	bne.n	800557c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800553a:	4814      	ldr	r0, [pc, #80]	; (800558c <prvCheckForValidListAndQueue+0x64>)
 800553c:	f7fe f87e 	bl	800363c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005540:	4813      	ldr	r0, [pc, #76]	; (8005590 <prvCheckForValidListAndQueue+0x68>)
 8005542:	f7fe f87b 	bl	800363c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005546:	4b13      	ldr	r3, [pc, #76]	; (8005594 <prvCheckForValidListAndQueue+0x6c>)
 8005548:	4a10      	ldr	r2, [pc, #64]	; (800558c <prvCheckForValidListAndQueue+0x64>)
 800554a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800554c:	4b12      	ldr	r3, [pc, #72]	; (8005598 <prvCheckForValidListAndQueue+0x70>)
 800554e:	4a10      	ldr	r2, [pc, #64]	; (8005590 <prvCheckForValidListAndQueue+0x68>)
 8005550:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005552:	2300      	movs	r3, #0
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	4b11      	ldr	r3, [pc, #68]	; (800559c <prvCheckForValidListAndQueue+0x74>)
 8005558:	4a11      	ldr	r2, [pc, #68]	; (80055a0 <prvCheckForValidListAndQueue+0x78>)
 800555a:	2110      	movs	r1, #16
 800555c:	200a      	movs	r0, #10
 800555e:	f7fe f989 	bl	8003874 <xQueueGenericCreateStatic>
 8005562:	4602      	mov	r2, r0
 8005564:	4b08      	ldr	r3, [pc, #32]	; (8005588 <prvCheckForValidListAndQueue+0x60>)
 8005566:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005568:	4b07      	ldr	r3, [pc, #28]	; (8005588 <prvCheckForValidListAndQueue+0x60>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d005      	beq.n	800557c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005570:	4b05      	ldr	r3, [pc, #20]	; (8005588 <prvCheckForValidListAndQueue+0x60>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	490b      	ldr	r1, [pc, #44]	; (80055a4 <prvCheckForValidListAndQueue+0x7c>)
 8005576:	4618      	mov	r0, r3
 8005578:	f7fe fdc8 	bl	800410c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800557c:	f000 f96c 	bl	8005858 <vPortExitCritical>
}
 8005580:	bf00      	nop
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	20000c18 	.word	0x20000c18
 800558c:	20000be8 	.word	0x20000be8
 8005590:	20000bfc 	.word	0x20000bfc
 8005594:	20000c10 	.word	0x20000c10
 8005598:	20000c14 	.word	0x20000c14
 800559c:	20000cc4 	.word	0x20000cc4
 80055a0:	20000c24 	.word	0x20000c24
 80055a4:	08005ebc 	.word	0x08005ebc

080055a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	3b04      	subs	r3, #4
 80055b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	3b04      	subs	r3, #4
 80055c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f023 0201 	bic.w	r2, r3, #1
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3b04      	subs	r3, #4
 80055d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80055d8:	4a0c      	ldr	r2, [pc, #48]	; (800560c <pxPortInitialiseStack+0x64>)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	3b14      	subs	r3, #20
 80055e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3b04      	subs	r3, #4
 80055ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f06f 0202 	mvn.w	r2, #2
 80055f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	3b20      	subs	r3, #32
 80055fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80055fe:	68fb      	ldr	r3, [r7, #12]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	08005611 	.word	0x08005611

08005610 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800561a:	4b11      	ldr	r3, [pc, #68]	; (8005660 <prvTaskExitError+0x50>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005622:	d009      	beq.n	8005638 <prvTaskExitError+0x28>
 8005624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	e7fe      	b.n	8005636 <prvTaskExitError+0x26>
 8005638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563c:	f383 8811 	msr	BASEPRI, r3
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800564a:	bf00      	nop
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0fc      	beq.n	800564c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005652:	bf00      	nop
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	2000000c 	.word	0x2000000c
	...

08005670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005670:	4b07      	ldr	r3, [pc, #28]	; (8005690 <pxCurrentTCBConst2>)
 8005672:	6819      	ldr	r1, [r3, #0]
 8005674:	6808      	ldr	r0, [r1, #0]
 8005676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567a:	f380 8809 	msr	PSP, r0
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f04f 0000 	mov.w	r0, #0
 8005686:	f380 8811 	msr	BASEPRI, r0
 800568a:	4770      	bx	lr
 800568c:	f3af 8000 	nop.w

08005690 <pxCurrentTCBConst2>:
 8005690:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop

08005698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005698:	4808      	ldr	r0, [pc, #32]	; (80056bc <prvPortStartFirstTask+0x24>)
 800569a:	6800      	ldr	r0, [r0, #0]
 800569c:	6800      	ldr	r0, [r0, #0]
 800569e:	f380 8808 	msr	MSP, r0
 80056a2:	f04f 0000 	mov.w	r0, #0
 80056a6:	f380 8814 	msr	CONTROL, r0
 80056aa:	b662      	cpsie	i
 80056ac:	b661      	cpsie	f
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	df00      	svc	0
 80056b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80056ba:	bf00      	nop
 80056bc:	e000ed08 	.word	0xe000ed08

080056c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80056c6:	4b44      	ldr	r3, [pc, #272]	; (80057d8 <xPortStartScheduler+0x118>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a44      	ldr	r2, [pc, #272]	; (80057dc <xPortStartScheduler+0x11c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d109      	bne.n	80056e4 <xPortStartScheduler+0x24>
 80056d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	613b      	str	r3, [r7, #16]
 80056e2:	e7fe      	b.n	80056e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80056e4:	4b3c      	ldr	r3, [pc, #240]	; (80057d8 <xPortStartScheduler+0x118>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a3d      	ldr	r2, [pc, #244]	; (80057e0 <xPortStartScheduler+0x120>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d109      	bne.n	8005702 <xPortStartScheduler+0x42>
 80056ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	e7fe      	b.n	8005700 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005702:	4b38      	ldr	r3, [pc, #224]	; (80057e4 <xPortStartScheduler+0x124>)
 8005704:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	b2db      	uxtb	r3, r3
 800570c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	22ff      	movs	r2, #255	; 0xff
 8005712:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	b2db      	uxtb	r3, r3
 800571a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800571c:	78fb      	ldrb	r3, [r7, #3]
 800571e:	b2db      	uxtb	r3, r3
 8005720:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005724:	b2da      	uxtb	r2, r3
 8005726:	4b30      	ldr	r3, [pc, #192]	; (80057e8 <xPortStartScheduler+0x128>)
 8005728:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800572a:	4b30      	ldr	r3, [pc, #192]	; (80057ec <xPortStartScheduler+0x12c>)
 800572c:	2207      	movs	r2, #7
 800572e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005730:	e009      	b.n	8005746 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005732:	4b2e      	ldr	r3, [pc, #184]	; (80057ec <xPortStartScheduler+0x12c>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	3b01      	subs	r3, #1
 8005738:	4a2c      	ldr	r2, [pc, #176]	; (80057ec <xPortStartScheduler+0x12c>)
 800573a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800573c:	78fb      	ldrb	r3, [r7, #3]
 800573e:	b2db      	uxtb	r3, r3
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	b2db      	uxtb	r3, r3
 8005744:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005746:	78fb      	ldrb	r3, [r7, #3]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800574e:	2b80      	cmp	r3, #128	; 0x80
 8005750:	d0ef      	beq.n	8005732 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005752:	4b26      	ldr	r3, [pc, #152]	; (80057ec <xPortStartScheduler+0x12c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f1c3 0307 	rsb	r3, r3, #7
 800575a:	2b04      	cmp	r3, #4
 800575c:	d009      	beq.n	8005772 <xPortStartScheduler+0xb2>
 800575e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	60bb      	str	r3, [r7, #8]
 8005770:	e7fe      	b.n	8005770 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005772:	4b1e      	ldr	r3, [pc, #120]	; (80057ec <xPortStartScheduler+0x12c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	021b      	lsls	r3, r3, #8
 8005778:	4a1c      	ldr	r2, [pc, #112]	; (80057ec <xPortStartScheduler+0x12c>)
 800577a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800577c:	4b1b      	ldr	r3, [pc, #108]	; (80057ec <xPortStartScheduler+0x12c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005784:	4a19      	ldr	r2, [pc, #100]	; (80057ec <xPortStartScheduler+0x12c>)
 8005786:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	b2da      	uxtb	r2, r3
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005790:	4b17      	ldr	r3, [pc, #92]	; (80057f0 <xPortStartScheduler+0x130>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a16      	ldr	r2, [pc, #88]	; (80057f0 <xPortStartScheduler+0x130>)
 8005796:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800579a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800579c:	4b14      	ldr	r3, [pc, #80]	; (80057f0 <xPortStartScheduler+0x130>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a13      	ldr	r2, [pc, #76]	; (80057f0 <xPortStartScheduler+0x130>)
 80057a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80057a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80057a8:	f000 f8d6 	bl	8005958 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80057ac:	4b11      	ldr	r3, [pc, #68]	; (80057f4 <xPortStartScheduler+0x134>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80057b2:	f000 f8f5 	bl	80059a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80057b6:	4b10      	ldr	r3, [pc, #64]	; (80057f8 <xPortStartScheduler+0x138>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a0f      	ldr	r2, [pc, #60]	; (80057f8 <xPortStartScheduler+0x138>)
 80057bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80057c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80057c2:	f7ff ff69 	bl	8005698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80057c6:	f7ff f8a1 	bl	800490c <vTaskSwitchContext>
	prvTaskExitError();
 80057ca:	f7ff ff21 	bl	8005610 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	e000ed00 	.word	0xe000ed00
 80057dc:	410fc271 	.word	0x410fc271
 80057e0:	410fc270 	.word	0x410fc270
 80057e4:	e000e400 	.word	0xe000e400
 80057e8:	20000d14 	.word	0x20000d14
 80057ec:	20000d18 	.word	0x20000d18
 80057f0:	e000ed20 	.word	0xe000ed20
 80057f4:	2000000c 	.word	0x2000000c
 80057f8:	e000ef34 	.word	0xe000ef34

080057fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005814:	4b0e      	ldr	r3, [pc, #56]	; (8005850 <vPortEnterCritical+0x54>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3301      	adds	r3, #1
 800581a:	4a0d      	ldr	r2, [pc, #52]	; (8005850 <vPortEnterCritical+0x54>)
 800581c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800581e:	4b0c      	ldr	r3, [pc, #48]	; (8005850 <vPortEnterCritical+0x54>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d10e      	bne.n	8005844 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005826:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <vPortEnterCritical+0x58>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d009      	beq.n	8005844 <vPortEnterCritical+0x48>
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	603b      	str	r3, [r7, #0]
 8005842:	e7fe      	b.n	8005842 <vPortEnterCritical+0x46>
	}
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	2000000c 	.word	0x2000000c
 8005854:	e000ed04 	.word	0xe000ed04

08005858 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800585e:	4b11      	ldr	r3, [pc, #68]	; (80058a4 <vPortExitCritical+0x4c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d109      	bne.n	800587a <vPortExitCritical+0x22>
 8005866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	607b      	str	r3, [r7, #4]
 8005878:	e7fe      	b.n	8005878 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800587a:	4b0a      	ldr	r3, [pc, #40]	; (80058a4 <vPortExitCritical+0x4c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3b01      	subs	r3, #1
 8005880:	4a08      	ldr	r2, [pc, #32]	; (80058a4 <vPortExitCritical+0x4c>)
 8005882:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005884:	4b07      	ldr	r3, [pc, #28]	; (80058a4 <vPortExitCritical+0x4c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d104      	bne.n	8005896 <vPortExitCritical+0x3e>
 800588c:	2300      	movs	r3, #0
 800588e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	2000000c 	.word	0x2000000c
	...

080058b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80058b0:	f3ef 8009 	mrs	r0, PSP
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	4b15      	ldr	r3, [pc, #84]	; (8005910 <pxCurrentTCBConst>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	f01e 0f10 	tst.w	lr, #16
 80058c0:	bf08      	it	eq
 80058c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80058c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ca:	6010      	str	r0, [r2, #0]
 80058cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80058d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80058d4:	f380 8811 	msr	BASEPRI, r0
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	f7ff f814 	bl	800490c <vTaskSwitchContext>
 80058e4:	f04f 0000 	mov.w	r0, #0
 80058e8:	f380 8811 	msr	BASEPRI, r0
 80058ec:	bc09      	pop	{r0, r3}
 80058ee:	6819      	ldr	r1, [r3, #0]
 80058f0:	6808      	ldr	r0, [r1, #0]
 80058f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f6:	f01e 0f10 	tst.w	lr, #16
 80058fa:	bf08      	it	eq
 80058fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005900:	f380 8809 	msr	PSP, r0
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	f3af 8000 	nop.w

08005910 <pxCurrentTCBConst>:
 8005910:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005914:	bf00      	nop
 8005916:	bf00      	nop

08005918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005930:	f7fe ff2e 	bl	8004790 <xTaskIncrementTick>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800593a:	4b06      	ldr	r3, [pc, #24]	; (8005954 <SysTick_Handler+0x3c>)
 800593c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	2300      	movs	r3, #0
 8005944:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800594c:	bf00      	nop
 800594e:	3708      	adds	r7, #8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	e000ed04 	.word	0xe000ed04

08005958 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800595c:	4b0b      	ldr	r3, [pc, #44]	; (800598c <vPortSetupTimerInterrupt+0x34>)
 800595e:	2200      	movs	r2, #0
 8005960:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005962:	4b0b      	ldr	r3, [pc, #44]	; (8005990 <vPortSetupTimerInterrupt+0x38>)
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005968:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <vPortSetupTimerInterrupt+0x3c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a0a      	ldr	r2, [pc, #40]	; (8005998 <vPortSetupTimerInterrupt+0x40>)
 800596e:	fba2 2303 	umull	r2, r3, r2, r3
 8005972:	099b      	lsrs	r3, r3, #6
 8005974:	4a09      	ldr	r2, [pc, #36]	; (800599c <vPortSetupTimerInterrupt+0x44>)
 8005976:	3b01      	subs	r3, #1
 8005978:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800597a:	4b04      	ldr	r3, [pc, #16]	; (800598c <vPortSetupTimerInterrupt+0x34>)
 800597c:	2207      	movs	r2, #7
 800597e:	601a      	str	r2, [r3, #0]
}
 8005980:	bf00      	nop
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	e000e010 	.word	0xe000e010
 8005990:	e000e018 	.word	0xe000e018
 8005994:	20000000 	.word	0x20000000
 8005998:	10624dd3 	.word	0x10624dd3
 800599c:	e000e014 	.word	0xe000e014

080059a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80059a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80059b0 <vPortEnableVFP+0x10>
 80059a4:	6801      	ldr	r1, [r0, #0]
 80059a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80059aa:	6001      	str	r1, [r0, #0]
 80059ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80059ae:	bf00      	nop
 80059b0:	e000ed88 	.word	0xe000ed88

080059b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80059ba:	f3ef 8305 	mrs	r3, IPSR
 80059be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2b0f      	cmp	r3, #15
 80059c4:	d913      	bls.n	80059ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80059c6:	4a16      	ldr	r2, [pc, #88]	; (8005a20 <vPortValidateInterruptPriority+0x6c>)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80059d0:	4b14      	ldr	r3, [pc, #80]	; (8005a24 <vPortValidateInterruptPriority+0x70>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	7afa      	ldrb	r2, [r7, #11]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d209      	bcs.n	80059ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80059da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	607b      	str	r3, [r7, #4]
 80059ec:	e7fe      	b.n	80059ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80059ee:	4b0e      	ldr	r3, [pc, #56]	; (8005a28 <vPortValidateInterruptPriority+0x74>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059f6:	4b0d      	ldr	r3, [pc, #52]	; (8005a2c <vPortValidateInterruptPriority+0x78>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d909      	bls.n	8005a12 <vPortValidateInterruptPriority+0x5e>
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	603b      	str	r3, [r7, #0]
 8005a10:	e7fe      	b.n	8005a10 <vPortValidateInterruptPriority+0x5c>
	}
 8005a12:	bf00      	nop
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	e000e3f0 	.word	0xe000e3f0
 8005a24:	20000d14 	.word	0x20000d14
 8005a28:	e000ed0c 	.word	0xe000ed0c
 8005a2c:	20000d18 	.word	0x20000d18

08005a30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08a      	sub	sp, #40	; 0x28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a3c:	f7fe fdee 	bl	800461c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a40:	4b57      	ldr	r3, [pc, #348]	; (8005ba0 <pvPortMalloc+0x170>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a48:	f000 f90c 	bl	8005c64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a4c:	4b55      	ldr	r3, [pc, #340]	; (8005ba4 <pvPortMalloc+0x174>)
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4013      	ands	r3, r2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f040 808c 	bne.w	8005b72 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d01c      	beq.n	8005a9a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005a60:	2208      	movs	r2, #8
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4413      	add	r3, r2
 8005a66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f003 0307 	and.w	r3, r3, #7
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d013      	beq.n	8005a9a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f023 0307 	bic.w	r3, r3, #7
 8005a78:	3308      	adds	r3, #8
 8005a7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f003 0307 	and.w	r3, r3, #7
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d009      	beq.n	8005a9a <pvPortMalloc+0x6a>
 8005a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	e7fe      	b.n	8005a98 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d068      	beq.n	8005b72 <pvPortMalloc+0x142>
 8005aa0:	4b41      	ldr	r3, [pc, #260]	; (8005ba8 <pvPortMalloc+0x178>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d863      	bhi.n	8005b72 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005aaa:	4b40      	ldr	r3, [pc, #256]	; (8005bac <pvPortMalloc+0x17c>)
 8005aac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005aae:	4b3f      	ldr	r3, [pc, #252]	; (8005bac <pvPortMalloc+0x17c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ab4:	e004      	b.n	8005ac0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d903      	bls.n	8005ad2 <pvPortMalloc+0xa2>
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1f1      	bne.n	8005ab6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ad2:	4b33      	ldr	r3, [pc, #204]	; (8005ba0 <pvPortMalloc+0x170>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d04a      	beq.n	8005b72 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2208      	movs	r2, #8
 8005ae2:	4413      	add	r3, r2
 8005ae4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	1ad2      	subs	r2, r2, r3
 8005af6:	2308      	movs	r3, #8
 8005af8:	005b      	lsls	r3, r3, #1
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d91e      	bls.n	8005b3c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4413      	add	r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d009      	beq.n	8005b24 <pvPortMalloc+0xf4>
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	613b      	str	r3, [r7, #16]
 8005b22:	e7fe      	b.n	8005b22 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	1ad2      	subs	r2, r2, r3
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b36:	69b8      	ldr	r0, [r7, #24]
 8005b38:	f000 f8f6 	bl	8005d28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ba8 <pvPortMalloc+0x178>)
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	4a18      	ldr	r2, [pc, #96]	; (8005ba8 <pvPortMalloc+0x178>)
 8005b48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b4a:	4b17      	ldr	r3, [pc, #92]	; (8005ba8 <pvPortMalloc+0x178>)
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	4b18      	ldr	r3, [pc, #96]	; (8005bb0 <pvPortMalloc+0x180>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d203      	bcs.n	8005b5e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b56:	4b14      	ldr	r3, [pc, #80]	; (8005ba8 <pvPortMalloc+0x178>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a15      	ldr	r2, [pc, #84]	; (8005bb0 <pvPortMalloc+0x180>)
 8005b5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	4b10      	ldr	r3, [pc, #64]	; (8005ba4 <pvPortMalloc+0x174>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	431a      	orrs	r2, r3
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b72:	f7fe fd61 	bl	8004638 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	f003 0307 	and.w	r3, r3, #7
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d009      	beq.n	8005b94 <pvPortMalloc+0x164>
 8005b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	e7fe      	b.n	8005b92 <pvPortMalloc+0x162>
	return pvReturn;
 8005b94:	69fb      	ldr	r3, [r7, #28]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3728      	adds	r7, #40	; 0x28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	20001924 	.word	0x20001924
 8005ba4:	20001930 	.word	0x20001930
 8005ba8:	20001928 	.word	0x20001928
 8005bac:	2000191c 	.word	0x2000191c
 8005bb0:	2000192c 	.word	0x2000192c

08005bb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d046      	beq.n	8005c54 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005bc6:	2308      	movs	r3, #8
 8005bc8:	425b      	negs	r3, r3
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4413      	add	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	4b20      	ldr	r3, [pc, #128]	; (8005c5c <vPortFree+0xa8>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d109      	bne.n	8005bf6 <vPortFree+0x42>
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	e7fe      	b.n	8005bf4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d009      	beq.n	8005c12 <vPortFree+0x5e>
 8005bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	60bb      	str	r3, [r7, #8]
 8005c10:	e7fe      	b.n	8005c10 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	4b11      	ldr	r3, [pc, #68]	; (8005c5c <vPortFree+0xa8>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d019      	beq.n	8005c54 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d115      	bne.n	8005c54 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	4b0b      	ldr	r3, [pc, #44]	; (8005c5c <vPortFree+0xa8>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	43db      	mvns	r3, r3
 8005c32:	401a      	ands	r2, r3
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c38:	f7fe fcf0 	bl	800461c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	4b07      	ldr	r3, [pc, #28]	; (8005c60 <vPortFree+0xac>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4413      	add	r3, r2
 8005c46:	4a06      	ldr	r2, [pc, #24]	; (8005c60 <vPortFree+0xac>)
 8005c48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c4a:	6938      	ldr	r0, [r7, #16]
 8005c4c:	f000 f86c 	bl	8005d28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005c50:	f7fe fcf2 	bl	8004638 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c54:	bf00      	nop
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	20001930 	.word	0x20001930
 8005c60:	20001928 	.word	0x20001928

08005c64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005c6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c70:	4b27      	ldr	r3, [pc, #156]	; (8005d10 <prvHeapInit+0xac>)
 8005c72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f003 0307 	and.w	r3, r3, #7
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00c      	beq.n	8005c98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3307      	adds	r3, #7
 8005c82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 0307 	bic.w	r3, r3, #7
 8005c8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	4a1f      	ldr	r2, [pc, #124]	; (8005d10 <prvHeapInit+0xac>)
 8005c94:	4413      	add	r3, r2
 8005c96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c9c:	4a1d      	ldr	r2, [pc, #116]	; (8005d14 <prvHeapInit+0xb0>)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ca2:	4b1c      	ldr	r3, [pc, #112]	; (8005d14 <prvHeapInit+0xb0>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	4413      	add	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005cb0:	2208      	movs	r2, #8
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	1a9b      	subs	r3, r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0307 	bic.w	r3, r3, #7
 8005cbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4a15      	ldr	r2, [pc, #84]	; (8005d18 <prvHeapInit+0xb4>)
 8005cc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005cc6:	4b14      	ldr	r3, [pc, #80]	; (8005d18 <prvHeapInit+0xb4>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005cce:	4b12      	ldr	r3, [pc, #72]	; (8005d18 <prvHeapInit+0xb4>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	1ad2      	subs	r2, r2, r3
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ce4:	4b0c      	ldr	r3, [pc, #48]	; (8005d18 <prvHeapInit+0xb4>)
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	4a0a      	ldr	r2, [pc, #40]	; (8005d1c <prvHeapInit+0xb8>)
 8005cf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	4a09      	ldr	r2, [pc, #36]	; (8005d20 <prvHeapInit+0xbc>)
 8005cfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cfc:	4b09      	ldr	r3, [pc, #36]	; (8005d24 <prvHeapInit+0xc0>)
 8005cfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d02:	601a      	str	r2, [r3, #0]
}
 8005d04:	bf00      	nop
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	20000d1c 	.word	0x20000d1c
 8005d14:	2000191c 	.word	0x2000191c
 8005d18:	20001924 	.word	0x20001924
 8005d1c:	2000192c 	.word	0x2000192c
 8005d20:	20001928 	.word	0x20001928
 8005d24:	20001930 	.word	0x20001930

08005d28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d30:	4b28      	ldr	r3, [pc, #160]	; (8005dd4 <prvInsertBlockIntoFreeList+0xac>)
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	e002      	b.n	8005d3c <prvInsertBlockIntoFreeList+0x14>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d8f7      	bhi.n	8005d36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	4413      	add	r3, r2
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d108      	bne.n	8005d6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	441a      	add	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	441a      	add	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d118      	bne.n	8005db0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	4b15      	ldr	r3, [pc, #84]	; (8005dd8 <prvInsertBlockIntoFreeList+0xb0>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d00d      	beq.n	8005da6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	441a      	add	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	e008      	b.n	8005db8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005da6:	4b0c      	ldr	r3, [pc, #48]	; (8005dd8 <prvInsertBlockIntoFreeList+0xb0>)
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	e003      	b.n	8005db8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d002      	beq.n	8005dc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dc6:	bf00      	nop
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	2000191c 	.word	0x2000191c
 8005dd8:	20001924 	.word	0x20001924

08005ddc <__libc_init_array>:
 8005ddc:	b570      	push	{r4, r5, r6, lr}
 8005dde:	4e0d      	ldr	r6, [pc, #52]	; (8005e14 <__libc_init_array+0x38>)
 8005de0:	4c0d      	ldr	r4, [pc, #52]	; (8005e18 <__libc_init_array+0x3c>)
 8005de2:	1ba4      	subs	r4, r4, r6
 8005de4:	10a4      	asrs	r4, r4, #2
 8005de6:	2500      	movs	r5, #0
 8005de8:	42a5      	cmp	r5, r4
 8005dea:	d109      	bne.n	8005e00 <__libc_init_array+0x24>
 8005dec:	4e0b      	ldr	r6, [pc, #44]	; (8005e1c <__libc_init_array+0x40>)
 8005dee:	4c0c      	ldr	r4, [pc, #48]	; (8005e20 <__libc_init_array+0x44>)
 8005df0:	f000 f82c 	bl	8005e4c <_init>
 8005df4:	1ba4      	subs	r4, r4, r6
 8005df6:	10a4      	asrs	r4, r4, #2
 8005df8:	2500      	movs	r5, #0
 8005dfa:	42a5      	cmp	r5, r4
 8005dfc:	d105      	bne.n	8005e0a <__libc_init_array+0x2e>
 8005dfe:	bd70      	pop	{r4, r5, r6, pc}
 8005e00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e04:	4798      	blx	r3
 8005e06:	3501      	adds	r5, #1
 8005e08:	e7ee      	b.n	8005de8 <__libc_init_array+0xc>
 8005e0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e0e:	4798      	blx	r3
 8005e10:	3501      	adds	r5, #1
 8005e12:	e7f2      	b.n	8005dfa <__libc_init_array+0x1e>
 8005e14:	08005f5c 	.word	0x08005f5c
 8005e18:	08005f5c 	.word	0x08005f5c
 8005e1c:	08005f5c 	.word	0x08005f5c
 8005e20:	08005f60 	.word	0x08005f60

08005e24 <memcpy>:
 8005e24:	b510      	push	{r4, lr}
 8005e26:	1e43      	subs	r3, r0, #1
 8005e28:	440a      	add	r2, r1
 8005e2a:	4291      	cmp	r1, r2
 8005e2c:	d100      	bne.n	8005e30 <memcpy+0xc>
 8005e2e:	bd10      	pop	{r4, pc}
 8005e30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e38:	e7f7      	b.n	8005e2a <memcpy+0x6>

08005e3a <memset>:
 8005e3a:	4402      	add	r2, r0
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d100      	bne.n	8005e44 <memset+0xa>
 8005e42:	4770      	bx	lr
 8005e44:	f803 1b01 	strb.w	r1, [r3], #1
 8005e48:	e7f9      	b.n	8005e3e <memset+0x4>
	...

08005e4c <_init>:
 8005e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4e:	bf00      	nop
 8005e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e52:	bc08      	pop	{r3}
 8005e54:	469e      	mov	lr, r3
 8005e56:	4770      	bx	lr

08005e58 <_fini>:
 8005e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5a:	bf00      	nop
 8005e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e5e:	bc08      	pop	{r3}
 8005e60:	469e      	mov	lr, r3
 8005e62:	4770      	bx	lr
