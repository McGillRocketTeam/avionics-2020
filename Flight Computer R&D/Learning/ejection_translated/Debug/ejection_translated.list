
ejection_translated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004570  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08004710  08004710  00014710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004854  08004854  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08004854  08004854  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004854  08004854  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004854  08004854  00014854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004858  08004858  00014858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800485c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000088  080048e4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  080048e4  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a80  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000178c  00000000  00000000  00028b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000740  00000000  00000000  0002a2c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a8  00000000  00000000  0002aa08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002043a  00000000  00000000  0002b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006f9e  00000000  00000000  0004b4ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c145e  00000000  00000000  00052488  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001138e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002418  00000000  00000000  00113964  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080046f8 	.word	0x080046f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	080046f8 	.word	0x080046f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ac0:	f000 fd00 	bl	80014c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ac4:	f000 f809 	bl	8000ada <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ac8:	f000 f896 	bl	8000bf8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000acc:	f000 f864 	bl	8000b98 <MX_USART2_UART_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		setup();
 8000ad0:	f000 f932 	bl	8000d38 <setup>
		loop();
 8000ad4:	f000 f9e0 	bl	8000e98 <loop>
	{
 8000ad8:	e7fa      	b.n	8000ad0 <main+0x14>

08000ada <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b0a6      	sub	sp, #152	; 0x98
 8000ade:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ae4:	2228      	movs	r2, #40	; 0x28
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f002 ff19 	bl	8003920 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2258      	movs	r2, #88	; 0x58
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f002 ff0b 	bl	8003920 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b12:	2310      	movs	r3, #16
 8000b14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b26:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 ffd3 	bl	8001ae4 <HAL_RCC_OscConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0x6e>
	{
		Error_Handler();
 8000b44:	f000 fb4a 	bl	80011dc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b48:	230f      	movs	r3, #15
 8000b4a:	65fb      	str	r3, [r7, #92]	; 0x5c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b58:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b5e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b62:	2102      	movs	r1, #2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f001 fed3 	bl	8002910 <HAL_RCC_ClockConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000b70:	f000 fb34 	bl	80011dc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f002 f8fc 	bl	8002d7c <HAL_RCCEx_PeriphCLKConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0xb4>
	{
		Error_Handler();
 8000b8a:	f000 fb27 	bl	80011dc <Error_Handler>
	}
}
 8000b8e:	bf00      	nop
 8000b90:	3798      	adds	r7, #152	; 0x98
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000b9e:	4a15      	ldr	r2, [pc, #84]	; (8000bf4 <MX_USART2_UART_Init+0x5c>)
 8000ba0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000ba4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000ba8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bdc:	f002 faec 	bl	80031b8 <HAL_UART_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8000be6:	f000 faf9 	bl	80011dc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000118 	.word	0x20000118
 8000bf4:	40004400 	.word	0x40004400

08000bf8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0e:	4b3b      	ldr	r3, [pc, #236]	; (8000cfc <MX_GPIO_Init+0x104>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	4a3a      	ldr	r2, [pc, #232]	; (8000cfc <MX_GPIO_Init+0x104>)
 8000c14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c18:	6153      	str	r3, [r2, #20]
 8000c1a:	4b38      	ldr	r3, [pc, #224]	; (8000cfc <MX_GPIO_Init+0x104>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000c26:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <MX_GPIO_Init+0x104>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	4a34      	ldr	r2, [pc, #208]	; (8000cfc <MX_GPIO_Init+0x104>)
 8000c2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c30:	6153      	str	r3, [r2, #20]
 8000c32:	4b32      	ldr	r3, [pc, #200]	; (8000cfc <MX_GPIO_Init+0x104>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <MX_GPIO_Init+0x104>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	4a2e      	ldr	r2, [pc, #184]	; (8000cfc <MX_GPIO_Init+0x104>)
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c48:	6153      	str	r3, [r2, #20]
 8000c4a:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <MX_GPIO_Init+0x104>)
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c56:	4b29      	ldr	r3, [pc, #164]	; (8000cfc <MX_GPIO_Init+0x104>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	4a28      	ldr	r2, [pc, #160]	; (8000cfc <MX_GPIO_Init+0x104>)
 8000c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c60:	6153      	str	r3, [r2, #20]
 8000c62:	4b26      	ldr	r3, [pc, #152]	; (8000cfc <MX_GPIO_Init+0x104>)
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, buzzer_Pin|LED_Pin|main1_Pin|main2_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	21f0      	movs	r1, #240	; 0xf0
 8000c72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c76:	f000 ff1d 	bl	8001ab4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, drogue1_Pin|drogue2_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2130      	movs	r1, #48	; 0x30
 8000c7e:	4820      	ldr	r0, [pc, #128]	; (8000d00 <MX_GPIO_Init+0x108>)
 8000c80:	f000 ff18 	bl	8001ab4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000c84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c88:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <MX_GPIO_Init+0x10c>)
 8000c8c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4819      	ldr	r0, [pc, #100]	; (8000d00 <MX_GPIO_Init+0x108>)
 8000c9a:	f000 fd81 	bl	80017a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : buzzer_Pin LED_Pin main1_Pin main2_Pin */
	GPIO_InitStruct.Pin = buzzer_Pin|LED_Pin|main1_Pin|main2_Pin;
 8000c9e:	23f0      	movs	r3, #240	; 0xf0
 8000ca0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb8:	f000 fd72 	bl	80017a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : drogue1_Pin drogue2_Pin */
	GPIO_InitStruct.Pin = drogue1_Pin|drogue2_Pin;
 8000cbc:	2330      	movs	r3, #48	; 0x30
 8000cbe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480b      	ldr	r0, [pc, #44]	; (8000d00 <MX_GPIO_Init+0x108>)
 8000cd4:	f000 fd64 	bl	80017a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : in22_Pin in21_Pin in12_Pin in11_Pin */
	GPIO_InitStruct.Pin = in22_Pin|in21_Pin|in12_Pin|in11_Pin;
 8000cd8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000cdc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf0:	f000 fd56 	bl	80017a0 <HAL_GPIO_Init>

}
 8000cf4:	bf00      	nop
 8000cf6:	3728      	adds	r7, #40	; 0x28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	48000800 	.word	0x48000800
 8000d04:	10210000 	.word	0x10210000

08000d08 <begin>:

/* USER CODE BEGIN 4 */
///These are empty functions
///Original ones can be obtained from external libraries (I do not have access to them at the moment :( )
int begin(void){
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
	return 1;
 8000d0c:	2301      	movs	r3, #1
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <readAltitude>:

float readAltitude(float local_pressure){
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	ed87 0a01 	vstr	s0, [r7, #4]
	return local_pressure;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	ee07 3a90 	vmov	s15, r3
}
 8000d28:	eeb0 0a67 	vmov.f32	s0, s15
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <setup>:

///Empty functions end here
#define false 0
#define true 1

void setup() {
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(drogue1_GPIO_Port, drogue1_Pin, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2110      	movs	r1, #16
 8000d42:	484d      	ldr	r0, [pc, #308]	; (8000e78 <setup+0x140>)
 8000d44:	f000 feb6 	bl	8001ab4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(drogue2_GPIO_Port, drogue2_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2120      	movs	r1, #32
 8000d4c:	484a      	ldr	r0, [pc, #296]	; (8000e78 <setup+0x140>)
 8000d4e:	f000 feb1 	bl	8001ab4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(main1_GPIO_Port, main1_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2140      	movs	r1, #64	; 0x40
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5a:	f000 feab 	bl	8001ab4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(main2_GPIO_Port, main2_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2180      	movs	r1, #128	; 0x80
 8000d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d66:	f000 fea5 	bl	8001ab4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2110      	movs	r1, #16
 8000d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d72:	f000 fe9f 	bl	8001ab4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000d76:	2201      	movs	r2, #1
 8000d78:	2120      	movs	r1, #32
 8000d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7e:	f000 fe99 	bl	8001ab4 <HAL_GPIO_WritePin>

	if (!begin()){
 8000d82:	f7ff ffc1 	bl	8000d08 <begin>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d113      	bne.n	8000db4 <setup+0x7c>
		printf("\r\nCould not find a valid BME280 sensor, check wiring!");
 8000d8c:	483b      	ldr	r0, [pc, #236]	; (8000e7c <setup+0x144>)
 8000d8e:	f002 fdcf 	bl	8003930 <iprintf>
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2110      	movs	r1, #16
 8000d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9a:	f000 fe8b 	bl	8001ab4 <HAL_GPIO_WritePin>

		HAL_Delay(5000);
 8000d9e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000da2:	f000 fbf5 	bl	8001590 <HAL_Delay>
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2110      	movs	r1, #16
 8000daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dae:	f000 fe81 	bl	8001ab4 <HAL_GPIO_WritePin>
		while (1);
 8000db2:	e7fe      	b.n	8000db2 <setup+0x7a>
	} else {
		int i;
		for (i = 0 ; i < 3; i++){
 8000db4:	2300      	movs	r3, #0
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	e014      	b.n	8000de4 <setup+0xac>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2110      	movs	r1, #16
 8000dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc2:	f000 fe77 	bl	8001ab4 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000dc6:	2064      	movs	r0, #100	; 0x64
 8000dc8:	f000 fbe2 	bl	8001590 <HAL_Delay>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2110      	movs	r1, #16
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd4:	f000 fe6e 	bl	8001ab4 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000dd8:	2064      	movs	r0, #100	; 0x64
 8000dda:	f000 fbd9 	bl	8001590 <HAL_Delay>
		for (i = 0 ; i < 3; i++){
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	3301      	adds	r3, #1
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	dde7      	ble.n	8000dba <setup+0x82>
		}
	}

	for (int i = 0; i < 500; i++){
 8000dea:	2300      	movs	r3, #0
 8000dec:	603b      	str	r3, [r7, #0]
 8000dee:	e017      	b.n	8000e20 <setup+0xe8>
		ground_alt += readAltitude(local_pressure/100.0); //takes sea-level pressure and reads alt 500 times
 8000df0:	4b23      	ldr	r3, [pc, #140]	; (8000e80 <setup+0x148>)
 8000df2:	edd3 7a00 	vldr	s15, [r3]
 8000df6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000e84 <setup+0x14c>
 8000dfa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000dfe:	eeb0 0a66 	vmov.f32	s0, s13
 8000e02:	f7ff ff89 	bl	8000d18 <readAltitude>
 8000e06:	eeb0 7a40 	vmov.f32	s14, s0
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <setup+0x150>)
 8000e0c:	edd3 7a00 	vldr	s15, [r3]
 8000e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e14:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <setup+0x150>)
 8000e16:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 500; i++){
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e26:	dbe3      	blt.n	8000df0 <setup+0xb8>
	}
	ground_alt = ground_alt/500.0; //average of alt readings
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <setup+0x150>)
 8000e2a:	ed93 7a00 	vldr	s14, [r3]
 8000e2e:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000e8c <setup+0x154>
 8000e32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <setup+0x150>)
 8000e38:	edc3 7a00 	vstr	s15, [r3]
	a = 2*3.14159*a;
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <setup+0x158>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fb81 	bl	8000548 <__aeabi_f2d>
 8000e46:	a30a      	add	r3, pc, #40	; (adr r3, 8000e70 <setup+0x138>)
 8000e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4c:	f7ff fbd4 	bl	80005f8 <__aeabi_dmul>
 8000e50:	4603      	mov	r3, r0
 8000e52:	460c      	mov	r4, r1
 8000e54:	4618      	mov	r0, r3
 8000e56:	4621      	mov	r1, r4
 8000e58:	f7ff fde0 	bl	8000a1c <__aeabi_d2f>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <setup+0x158>)
 8000e60:	601a      	str	r2, [r3, #0]
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd90      	pop	{r4, r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	f3af 8000 	nop.w
 8000e70:	f01b866e 	.word	0xf01b866e
 8000e74:	401921f9 	.word	0x401921f9
 8000e78:	48000800 	.word	0x48000800
 8000e7c:	08004710 	.word	0x08004710
 8000e80:	20000000 	.word	0x20000000
 8000e84:	42c80000 	.word	0x42c80000
 8000e88:	200000a4 	.word	0x200000a4
 8000e8c:	43fa0000 	.word	0x43fa0000
 8000e90:	20000014 	.word	0x20000014
 8000e94:	00000000 	.word	0x00000000

08000e98 <loop>:

void loop() {
 8000e98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e9c:	b086      	sub	sp, #24
 8000e9e:	af04      	add	r7, sp, #16
	if (main_deployed == false){
 8000ea0:	4bb9      	ldr	r3, [pc, #740]	; (8001188 <loop+0x2f0>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f040 812e 	bne.w	8001106 <loop+0x26e>
		T = (HAL_GetTick() - t_previous_loop)/1000; //millis() = time since program start running T running time of curr loop (s)
 8000eaa:	f000 fb65 	bl	8001578 <HAL_GetTick>
 8000eae:	ee07 0a90 	vmov	s15, r0
 8000eb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000eb6:	4bb5      	ldr	r3, [pc, #724]	; (800118c <loop+0x2f4>)
 8000eb8:	edd3 7a00 	vldr	s15, [r3]
 8000ebc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ec0:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8001190 <loop+0x2f8>
 8000ec4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ec8:	4bb2      	ldr	r3, [pc, #712]	; (8001194 <loop+0x2fc>)
 8000eca:	edc3 7a00 	vstr	s15, [r3]
		t_previous_loop = HAL_GetTick(); //total time
 8000ece:	f000 fb53 	bl	8001578 <HAL_GetTick>
 8000ed2:	ee07 0a90 	vmov	s15, r0
 8000ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eda:	4bac      	ldr	r3, [pc, #688]	; (800118c <loop+0x2f4>)
 8000edc:	edc3 7a00 	vstr	s15, [r3]

		alt_meas = (readAltitude(local_pressure/100) - ground_alt)*3.28084; //Measures AGL altitude in feet
 8000ee0:	4bad      	ldr	r3, [pc, #692]	; (8001198 <loop+0x300>)
 8000ee2:	edd3 7a00 	vldr	s15, [r3]
 8000ee6:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800119c <loop+0x304>
 8000eea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000eee:	eeb0 0a66 	vmov.f32	s0, s13
 8000ef2:	f7ff ff11 	bl	8000d18 <readAltitude>
 8000ef6:	eeb0 7a40 	vmov.f32	s14, s0
 8000efa:	4ba9      	ldr	r3, [pc, #676]	; (80011a0 <loop+0x308>)
 8000efc:	edd3 7a00 	vldr	s15, [r3]
 8000f00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f04:	ee17 0a90 	vmov	r0, s15
 8000f08:	f7ff fb1e 	bl	8000548 <__aeabi_f2d>
 8000f0c:	a39c      	add	r3, pc, #624	; (adr r3, 8001180 <loop+0x2e8>)
 8000f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f12:	f7ff fb71 	bl	80005f8 <__aeabi_dmul>
 8000f16:	4603      	mov	r3, r0
 8000f18:	460c      	mov	r4, r1
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	4621      	mov	r1, r4
 8000f1e:	f7ff fd7d 	bl	8000a1c <__aeabi_d2f>
 8000f22:	4602      	mov	r2, r0
 8000f24:	4b9f      	ldr	r3, [pc, #636]	; (80011a4 <loop+0x30c>)
 8000f26:	601a      	str	r2, [r3, #0]

		// Low-pass filter - rocket at high speeds pressure fluctuates and affects altitude reading, usaully at a high frequency, so low pass filter filters those high freuqency changes out
		//and keeps just the overall, low frequency changes (caused by altitude change)
		alt_filtered = (1 - T * a) * alt_previous[num_meas-1] + a * T * alt_meas;
 8000f28:	4b9a      	ldr	r3, [pc, #616]	; (8001194 <loop+0x2fc>)
 8000f2a:	ed93 7a00 	vldr	s14, [r3]
 8000f2e:	4b9e      	ldr	r3, [pc, #632]	; (80011a8 <loop+0x310>)
 8000f30:	edd3 7a00 	vldr	s15, [r3]
 8000f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f40:	4b9a      	ldr	r3, [pc, #616]	; (80011ac <loop+0x314>)
 8000f42:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000f46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f4a:	4b97      	ldr	r3, [pc, #604]	; (80011a8 <loop+0x310>)
 8000f4c:	edd3 6a00 	vldr	s13, [r3]
 8000f50:	4b90      	ldr	r3, [pc, #576]	; (8001194 <loop+0x2fc>)
 8000f52:	edd3 7a00 	vldr	s15, [r3]
 8000f56:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f5a:	4b92      	ldr	r3, [pc, #584]	; (80011a4 <loop+0x30c>)
 8000f5c:	edd3 7a00 	vldr	s15, [r3]
 8000f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f68:	4b91      	ldr	r3, [pc, #580]	; (80011b0 <loop+0x318>)
 8000f6a:	edc3 7a00 	vstr	s15, [r3]

		// Slide window of 10 measurement history.
		for (int i = 0; i < num_meas-1; i++){
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	e00d      	b.n	8000f90 <loop+0xf8>
			alt_previous[i] = alt_previous[i+1];
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3301      	adds	r3, #1
 8000f78:	4a8c      	ldr	r2, [pc, #560]	; (80011ac <loop+0x314>)
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	498a      	ldr	r1, [pc, #552]	; (80011ac <loop+0x314>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < num_meas-1; i++){
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b08      	cmp	r3, #8
 8000f94:	ddee      	ble.n	8000f74 <loop+0xdc>
		}
		alt_previous[num_meas-1] = alt_filtered;
 8000f96:	4b86      	ldr	r3, [pc, #536]	; (80011b0 <loop+0x318>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a84      	ldr	r2, [pc, #528]	; (80011ac <loop+0x314>)
 8000f9c:	6253      	str	r3, [r2, #36]	; 0x24

		// Launch Detection
		if (alt_filtered > 150 && launched == false){
 8000f9e:	4b84      	ldr	r3, [pc, #528]	; (80011b0 <loop+0x318>)
 8000fa0:	edd3 7a00 	vldr	s15, [r3]
 8000fa4:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80011b4 <loop+0x31c>
 8000fa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb0:	dd06      	ble.n	8000fc0 <loop+0x128>
 8000fb2:	4b81      	ldr	r3, [pc, #516]	; (80011b8 <loop+0x320>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d102      	bne.n	8000fc0 <loop+0x128>
			launched = true;
 8000fba:	4b7f      	ldr	r3, [pc, #508]	; (80011b8 <loop+0x320>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	601a      	str	r2, [r3, #0]
		}

		//Average gradient of 10 past measurements.
		average_gradient = 0;
 8000fc0:	4b7e      	ldr	r3, [pc, #504]	; (80011bc <loop+0x324>)
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < num_meas-1; i++){
 8000fc8:	2300      	movs	r3, #0
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	e019      	b.n	8001002 <loop+0x16a>
			average_gradient += (alt_previous[i+1]- alt_previous[i]);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	4a76      	ldr	r2, [pc, #472]	; (80011ac <loop+0x314>)
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	ed93 7a00 	vldr	s14, [r3]
 8000fdc:	4a73      	ldr	r2, [pc, #460]	; (80011ac <loop+0x314>)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	edd3 7a00 	vldr	s15, [r3]
 8000fe8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fec:	4b73      	ldr	r3, [pc, #460]	; (80011bc <loop+0x324>)
 8000fee:	edd3 7a00 	vldr	s15, [r3]
 8000ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff6:	4b71      	ldr	r3, [pc, #452]	; (80011bc <loop+0x324>)
 8000ff8:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < num_meas-1; i++){
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	3301      	adds	r3, #1
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	2b08      	cmp	r3, #8
 8001006:	dde2      	ble.n	8000fce <loop+0x136>
		}
		if (T>0){
 8001008:	4b62      	ldr	r3, [pc, #392]	; (8001194 <loop+0x2fc>)
 800100a:	edd3 7a00 	vldr	s15, [r3]
 800100e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001016:	dd09      	ble.n	800102c <loop+0x194>
			average_gradient /= (num_meas);
 8001018:	4b68      	ldr	r3, [pc, #416]	; (80011bc <loop+0x324>)
 800101a:	ed93 7a00 	vldr	s14, [r3]
 800101e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001022:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001026:	4b65      	ldr	r3, [pc, #404]	; (80011bc <loop+0x324>)
 8001028:	edc3 7a00 	vstr	s15, [r3]
		}

		// Apogee detection
		if (alt_filtered > threshold_altitude && launched && apogee_reached == false){
 800102c:	4b60      	ldr	r3, [pc, #384]	; (80011b0 <loop+0x318>)
 800102e:	ed93 7a00 	vldr	s14, [r3]
 8001032:	4b63      	ldr	r3, [pc, #396]	; (80011c0 <loop+0x328>)
 8001034:	edd3 7a00 	vldr	s15, [r3]
 8001038:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800103c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001040:	dd2d      	ble.n	800109e <loop+0x206>
 8001042:	4b5d      	ldr	r3, [pc, #372]	; (80011b8 <loop+0x320>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d029      	beq.n	800109e <loop+0x206>
 800104a:	4b5e      	ldr	r3, [pc, #376]	; (80011c4 <loop+0x32c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d125      	bne.n	800109e <loop+0x206>

			if (average_gradient < -2){ //what is the purpose of this -2?
 8001052:	4b5a      	ldr	r3, [pc, #360]	; (80011bc <loop+0x324>)
 8001054:	edd3 7a00 	vldr	s15, [r3]
 8001058:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800105c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001064:	d51b      	bpl.n	800109e <loop+0x206>
				apogee_reached = true;
 8001066:	4b57      	ldr	r3, [pc, #348]	; (80011c4 <loop+0x32c>)
 8001068:	2201      	movs	r2, #1
 800106a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(drogue1_GPIO_Port, drogue1_Pin, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	2110      	movs	r1, #16
 8001070:	4855      	ldr	r0, [pc, #340]	; (80011c8 <loop+0x330>)
 8001072:	f000 fd1f 	bl	8001ab4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(drogue2_GPIO_Port, drogue2_Pin, GPIO_PIN_SET);
 8001076:	2201      	movs	r2, #1
 8001078:	2120      	movs	r1, #32
 800107a:	4853      	ldr	r0, [pc, #332]	; (80011c8 <loop+0x330>)
 800107c:	f000 fd1a 	bl	8001ab4 <HAL_GPIO_WritePin>
				HAL_Delay(drogue_delay);
 8001080:	4b52      	ldr	r3, [pc, #328]	; (80011cc <loop+0x334>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fa83 	bl	8001590 <HAL_Delay>
					time12 = HAL_GetTick();
				}
				 */


				HAL_GPIO_WritePin(drogue1_GPIO_Port, drogue1_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	2110      	movs	r1, #16
 800108e:	484e      	ldr	r0, [pc, #312]	; (80011c8 <loop+0x330>)
 8001090:	f000 fd10 	bl	8001ab4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(drogue2_GPIO_Port, drogue2_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	2120      	movs	r1, #32
 8001098:	484b      	ldr	r0, [pc, #300]	; (80011c8 <loop+0x330>)
 800109a:	f000 fd0b 	bl	8001ab4 <HAL_GPIO_WritePin>
			}
		}

		// Main Deployment detection
		if (apogee_reached && alt_filtered < main_deployment && main_deployed == false){
 800109e:	4b49      	ldr	r3, [pc, #292]	; (80011c4 <loop+0x32c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d043      	beq.n	800112e <loop+0x296>
 80010a6:	4b42      	ldr	r3, [pc, #264]	; (80011b0 <loop+0x318>)
 80010a8:	ed93 7a00 	vldr	s14, [r3]
 80010ac:	4b48      	ldr	r3, [pc, #288]	; (80011d0 <loop+0x338>)
 80010ae:	edd3 7a00 	vldr	s15, [r3]
 80010b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ba:	d538      	bpl.n	800112e <loop+0x296>
 80010bc:	4b32      	ldr	r3, [pc, #200]	; (8001188 <loop+0x2f0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d134      	bne.n	800112e <loop+0x296>
			main_deployed = true;
 80010c4:	4b30      	ldr	r3, [pc, #192]	; (8001188 <loop+0x2f0>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(main1_GPIO_Port, main1_Pin, GPIO_PIN_SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	2140      	movs	r1, #64	; 0x40
 80010ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d2:	f000 fcef 	bl	8001ab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(main2_GPIO_Port, main2_Pin, GPIO_PIN_SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	2180      	movs	r1, #128	; 0x80
 80010da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010de:	f000 fce9 	bl	8001ab4 <HAL_GPIO_WritePin>
			HAL_Delay(main_delay);
 80010e2:	4b3c      	ldr	r3, [pc, #240]	; (80011d4 <loop+0x33c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 fa52 	bl	8001590 <HAL_Delay>
			}if(R22){
				time22 = HAL_GetTick();
			}
			 */

			HAL_GPIO_WritePin(main1_GPIO_Port, main1_Pin, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2140      	movs	r1, #64	; 0x40
 80010f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f4:	f000 fcde 	bl	8001ab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(main2_GPIO_Port, main2_Pin, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2180      	movs	r1, #128	; 0x80
 80010fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001100:	f000 fcd8 	bl	8001ab4 <HAL_GPIO_WritePin>
 8001104:	e013      	b.n	800112e <loop+0x296>


	}
	else{ //Longer buzz to indicate program completion

		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	2110      	movs	r1, #16
 800110a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110e:	f000 fcd1 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001112:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001116:	f000 fa3b 	bl	8001590 <HAL_Delay>
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2110      	movs	r1, #16
 800111e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001122:	f000 fcc7 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001126:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800112a:	f000 fa31 	bl	8001590 <HAL_Delay>

	}
	//Just for debuggging.
	printf("alt_meas = %d,  average_gradient = %d, alt_filtered = %d",alt_meas,average_gradient,alt_filtered);
 800112e:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <loop+0x30c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fa08 	bl	8000548 <__aeabi_f2d>
 8001138:	4680      	mov	r8, r0
 800113a:	4689      	mov	r9, r1
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <loop+0x324>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fa01 	bl	8000548 <__aeabi_f2d>
 8001146:	4604      	mov	r4, r0
 8001148:	460d      	mov	r5, r1
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <loop+0x318>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f9fa 	bl	8000548 <__aeabi_f2d>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800115c:	e9cd 4500 	strd	r4, r5, [sp]
 8001160:	4642      	mov	r2, r8
 8001162:	464b      	mov	r3, r9
 8001164:	481c      	ldr	r0, [pc, #112]	; (80011d8 <loop+0x340>)
 8001166:	f002 fbe3 	bl	8003930 <iprintf>

	HAL_Delay(5);
 800116a:	2005      	movs	r0, #5
 800116c:	f000 fa10 	bl	8001590 <HAL_Delay>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800117a:	bf00      	nop
 800117c:	f3af 8000 	nop.w
 8001180:	0abb44e5 	.word	0x0abb44e5
 8001184:	400a3f29 	.word	0x400a3f29
 8001188:	200000b0 	.word	0x200000b0
 800118c:	200000d4 	.word	0x200000d4
 8001190:	447a0000 	.word	0x447a0000
 8001194:	200000d8 	.word	0x200000d8
 8001198:	20000000 	.word	0x20000000
 800119c:	42c80000 	.word	0x42c80000
 80011a0:	200000a4 	.word	0x200000a4
 80011a4:	200000c8 	.word	0x200000c8
 80011a8:	20000014 	.word	0x20000014
 80011ac:	200000dc 	.word	0x200000dc
 80011b0:	2000019c 	.word	0x2000019c
 80011b4:	43160000 	.word	0x43160000
 80011b8:	200000ac 	.word	0x200000ac
 80011bc:	200001a0 	.word	0x200001a0
 80011c0:	20000004 	.word	0x20000004
 80011c4:	200000a8 	.word	0x200000a8
 80011c8:	48000800 	.word	0x48000800
 80011cc:	2000000c 	.word	0x2000000c
 80011d0:	20000008 	.word	0x20000008
 80011d4:	20000010 	.word	0x20000010
 80011d8:	08004748 	.word	0x08004748

080011dc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e0:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80011e2:	e7fe      	b.n	80011e2 <Error_Handler+0x6>

080011e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <HAL_MspInit+0x44>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <HAL_MspInit+0x44>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6193      	str	r3, [r2, #24]
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <HAL_MspInit+0x44>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <HAL_MspInit+0x44>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	4a08      	ldr	r2, [pc, #32]	; (8001228 <HAL_MspInit+0x44>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120c:	61d3      	str	r3, [r2, #28]
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_MspInit+0x44>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800121a:	2007      	movs	r0, #7
 800121c:	f000 fa8c 	bl	8001738 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40021000 	.word	0x40021000

0800122c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <HAL_UART_MspInit+0x7c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d128      	bne.n	80012a0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <HAL_UART_MspInit+0x80>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	4a16      	ldr	r2, [pc, #88]	; (80012ac <HAL_UART_MspInit+0x80>)
 8001254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001258:	61d3      	str	r3, [r2, #28]
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <HAL_UART_MspInit+0x80>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <HAL_UART_MspInit+0x80>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	4a10      	ldr	r2, [pc, #64]	; (80012ac <HAL_UART_MspInit+0x80>)
 800126c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001270:	6153      	str	r3, [r2, #20]
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <HAL_UART_MspInit+0x80>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800127e:	230c      	movs	r3, #12
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800128e:	2307      	movs	r3, #7
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129c:	f000 fa80 	bl	80017a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40004400 	.word	0x40004400
 80012ac:	40021000 	.word	0x40021000

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <NMI_Handler+0x4>

080012b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <HardFault_Handler+0x4>

080012bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <MemManage_Handler+0x4>

080012c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <BusFault_Handler+0x4>

080012c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <UsageFault_Handler+0x4>

080012ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fc:	f000 f928 	bl	8001550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}

08001304 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	e00a      	b.n	800132c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001316:	f3af 8000 	nop.w
 800131a:	4601      	mov	r1, r0
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	60ba      	str	r2, [r7, #8]
 8001322:	b2ca      	uxtb	r2, r1
 8001324:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	3301      	adds	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	429a      	cmp	r2, r3
 8001332:	dbf0      	blt.n	8001316 <_read+0x12>
	}

return len;
 8001334:	687b      	ldr	r3, [r7, #4]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b086      	sub	sp, #24
 8001342:	af00      	add	r7, sp, #0
 8001344:	60f8      	str	r0, [r7, #12]
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	e009      	b.n	8001364 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	60ba      	str	r2, [r7, #8]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	3301      	adds	r3, #1
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	429a      	cmp	r2, r3
 800136a:	dbf1      	blt.n	8001350 <_write+0x12>
	}
	return len;
 800136c:	687b      	ldr	r3, [r7, #4]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <_close>:

int _close(int file)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
	return -1;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800139e:	605a      	str	r2, [r3, #4]
	return 0;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <_isatty>:

int _isatty(int file)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
	return 1;
 80013b6:	2301      	movs	r3, #1
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
	return 0;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e8:	4a14      	ldr	r2, [pc, #80]	; (800143c <_sbrk+0x5c>)
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <_sbrk+0x60>)
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f4:	4b13      	ldr	r3, [pc, #76]	; (8001444 <_sbrk+0x64>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d102      	bne.n	8001402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <_sbrk+0x64>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	; (8001448 <_sbrk+0x68>)
 8001400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <_sbrk+0x64>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	429a      	cmp	r2, r3
 800140e:	d207      	bcs.n	8001420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001410:	f002 fa5c 	bl	80038cc <__errno>
 8001414:	4602      	mov	r2, r0
 8001416:	230c      	movs	r3, #12
 8001418:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	e009      	b.n	8001434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <_sbrk+0x64>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <_sbrk+0x64>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	4a05      	ldr	r2, [pc, #20]	; (8001444 <_sbrk+0x64>)
 8001430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001432:	68fb      	ldr	r3, [r7, #12]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20010000 	.word	0x20010000
 8001440:	00000400 	.word	0x00000400
 8001444:	200000b4 	.word	0x200000b4
 8001448:	200001b0 	.word	0x200001b0

0800144c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <SystemInit+0x20>)
 8001452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001456:	4a05      	ldr	r2, [pc, #20]	; (800146c <SystemInit+0x20>)
 8001458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800145c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001474:	480d      	ldr	r0, [pc, #52]	; (80014ac <LoopForever+0x6>)
  ldr r1, =_edata
 8001476:	490e      	ldr	r1, [pc, #56]	; (80014b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001478:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <LoopForever+0xe>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800147c:	e002      	b.n	8001484 <LoopCopyDataInit>

0800147e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001482:	3304      	adds	r3, #4

08001484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001488:	d3f9      	bcc.n	800147e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148a:	4a0b      	ldr	r2, [pc, #44]	; (80014b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800148c:	4c0b      	ldr	r4, [pc, #44]	; (80014bc <LoopForever+0x16>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001490:	e001      	b.n	8001496 <LoopFillZerobss>

08001492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001494:	3204      	adds	r2, #4

08001496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001498:	d3fb      	bcc.n	8001492 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800149a:	f7ff ffd7 	bl	800144c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800149e:	f002 fa1b 	bl	80038d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014a2:	f7ff fb0b 	bl	8000abc <main>

080014a6 <LoopForever>:

LoopForever:
    b LoopForever
 80014a6:	e7fe      	b.n	80014a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80014b4:	0800485c 	.word	0x0800485c
  ldr r2, =_sbss
 80014b8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80014bc:	200001ac 	.word	0x200001ac

080014c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014c0:	e7fe      	b.n	80014c0 <ADC1_2_IRQHandler>
	...

080014c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <HAL_Init+0x28>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a07      	ldr	r2, [pc, #28]	; (80014ec <HAL_Init+0x28>)
 80014ce:	f043 0310 	orr.w	r3, r3, #16
 80014d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d4:	2003      	movs	r0, #3
 80014d6:	f000 f92f 	bl	8001738 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014da:	2000      	movs	r0, #0
 80014dc:	f000 f808 	bl	80014f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e0:	f7ff fe80 	bl	80011e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40022000 	.word	0x40022000

080014f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_InitTick+0x54>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_InitTick+0x58>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001506:	fbb3 f3f1 	udiv	r3, r3, r1
 800150a:	fbb2 f3f3 	udiv	r3, r2, r3
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f939 	bl	8001786 <HAL_SYSTICK_Config>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e00e      	b.n	800153c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b0f      	cmp	r3, #15
 8001522:	d80a      	bhi.n	800153a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001524:	2200      	movs	r2, #0
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	f000 f90f 	bl	800174e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001530:	4a06      	ldr	r2, [pc, #24]	; (800154c <HAL_InitTick+0x5c>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e000      	b.n	800153c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000018 	.word	0x20000018
 8001548:	20000020 	.word	0x20000020
 800154c:	2000001c 	.word	0x2000001c

08001550 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_IncTick+0x20>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	461a      	mov	r2, r3
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_IncTick+0x24>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4413      	add	r3, r2
 8001560:	4a04      	ldr	r2, [pc, #16]	; (8001574 <HAL_IncTick+0x24>)
 8001562:	6013      	str	r3, [r2, #0]
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	20000020 	.word	0x20000020
 8001574:	200001a4 	.word	0x200001a4

08001578 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return uwTick;  
 800157c:	4b03      	ldr	r3, [pc, #12]	; (800158c <HAL_GetTick+0x14>)
 800157e:	681b      	ldr	r3, [r3, #0]
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	200001a4 	.word	0x200001a4

08001590 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001598:	f7ff ffee 	bl	8001578 <HAL_GetTick>
 800159c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a8:	d005      	beq.n	80015b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_Delay+0x40>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4413      	add	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015b6:	bf00      	nop
 80015b8:	f7ff ffde 	bl	8001578 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d8f7      	bhi.n	80015b8 <HAL_Delay+0x28>
  {
  }
}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000020 	.word	0x20000020

080015d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <__NVIC_SetPriorityGrouping+0x44>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015f0:	4013      	ands	r3, r2
 80015f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001606:	4a04      	ldr	r2, [pc, #16]	; (8001618 <__NVIC_SetPriorityGrouping+0x44>)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	60d3      	str	r3, [r2, #12]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <__NVIC_GetPriorityGrouping+0x18>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	0a1b      	lsrs	r3, r3, #8
 8001626:	f003 0307 	and.w	r3, r3, #7
}
 800162a:	4618      	mov	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	6039      	str	r1, [r7, #0]
 8001642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	2b00      	cmp	r3, #0
 800164a:	db0a      	blt.n	8001662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	490c      	ldr	r1, [pc, #48]	; (8001684 <__NVIC_SetPriority+0x4c>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	0112      	lsls	r2, r2, #4
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	440b      	add	r3, r1
 800165c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001660:	e00a      	b.n	8001678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4908      	ldr	r1, [pc, #32]	; (8001688 <__NVIC_SetPriority+0x50>)
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	3b04      	subs	r3, #4
 8001670:	0112      	lsls	r2, r2, #4
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	440b      	add	r3, r1
 8001676:	761a      	strb	r2, [r3, #24]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000e100 	.word	0xe000e100
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168c:	b480      	push	{r7}
 800168e:	b089      	sub	sp, #36	; 0x24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f1c3 0307 	rsb	r3, r3, #7
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	bf28      	it	cs
 80016aa:	2304      	movcs	r3, #4
 80016ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3304      	adds	r3, #4
 80016b2:	2b06      	cmp	r3, #6
 80016b4:	d902      	bls.n	80016bc <NVIC_EncodePriority+0x30>
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3b03      	subs	r3, #3
 80016ba:	e000      	b.n	80016be <NVIC_EncodePriority+0x32>
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	f04f 32ff 	mov.w	r2, #4294967295
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43da      	mvns	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	401a      	ands	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d4:	f04f 31ff 	mov.w	r1, #4294967295
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	43d9      	mvns	r1, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	4313      	orrs	r3, r2
         );
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3724      	adds	r7, #36	; 0x24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001704:	d301      	bcc.n	800170a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001706:	2301      	movs	r3, #1
 8001708:	e00f      	b.n	800172a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <SysTick_Config+0x40>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001712:	210f      	movs	r1, #15
 8001714:	f04f 30ff 	mov.w	r0, #4294967295
 8001718:	f7ff ff8e 	bl	8001638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <SysTick_Config+0x40>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <SysTick_Config+0x40>)
 8001724:	2207      	movs	r2, #7
 8001726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	e000e010 	.word	0xe000e010

08001738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ff47 	bl	80015d4 <__NVIC_SetPriorityGrouping>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af00      	add	r7, sp, #0
 8001754:	4603      	mov	r3, r0
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001760:	f7ff ff5c 	bl	800161c <__NVIC_GetPriorityGrouping>
 8001764:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	6978      	ldr	r0, [r7, #20]
 800176c:	f7ff ff8e 	bl	800168c <NVIC_EncodePriority>
 8001770:	4602      	mov	r2, r0
 8001772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff5d 	bl	8001638 <__NVIC_SetPriority>
}
 800177e:	bf00      	nop
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ffb0 	bl	80016f4 <SysTick_Config>
 8001794:	4603      	mov	r3, r0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b087      	sub	sp, #28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ae:	e160      	b.n	8001a72 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	2101      	movs	r1, #1
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	fa01 f303 	lsl.w	r3, r1, r3
 80017bc:	4013      	ands	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8152 	beq.w	8001a6c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d00b      	beq.n	80017e8 <HAL_GPIO_Init+0x48>
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d007      	beq.n	80017e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017dc:	2b11      	cmp	r3, #17
 80017de:	d003      	beq.n	80017e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b12      	cmp	r3, #18
 80017e6:	d130      	bne.n	800184a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	2203      	movs	r2, #3
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	68da      	ldr	r2, [r3, #12]
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800181e:	2201      	movs	r2, #1
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4013      	ands	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	091b      	lsrs	r3, r3, #4
 8001834:	f003 0201 	and.w	r2, r3, #1
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	2203      	movs	r2, #3
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d003      	beq.n	800188a <HAL_GPIO_Init+0xea>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b12      	cmp	r3, #18
 8001888:	d123      	bne.n	80018d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	08da      	lsrs	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3208      	adds	r2, #8
 8001892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001896:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	220f      	movs	r2, #15
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	691a      	ldr	r2, [r3, #16]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	08da      	lsrs	r2, r3, #3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3208      	adds	r2, #8
 80018cc:	6939      	ldr	r1, [r7, #16]
 80018ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	2203      	movs	r2, #3
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0203 	and.w	r2, r3, #3
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 80ac 	beq.w	8001a6c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001914:	4b5e      	ldr	r3, [pc, #376]	; (8001a90 <HAL_GPIO_Init+0x2f0>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	4a5d      	ldr	r2, [pc, #372]	; (8001a90 <HAL_GPIO_Init+0x2f0>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6193      	str	r3, [r2, #24]
 8001920:	4b5b      	ldr	r3, [pc, #364]	; (8001a90 <HAL_GPIO_Init+0x2f0>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800192c:	4a59      	ldr	r2, [pc, #356]	; (8001a94 <HAL_GPIO_Init+0x2f4>)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	089b      	lsrs	r3, r3, #2
 8001932:	3302      	adds	r3, #2
 8001934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001938:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	220f      	movs	r2, #15
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001956:	d025      	beq.n	80019a4 <HAL_GPIO_Init+0x204>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a4f      	ldr	r2, [pc, #316]	; (8001a98 <HAL_GPIO_Init+0x2f8>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d01f      	beq.n	80019a0 <HAL_GPIO_Init+0x200>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a4e      	ldr	r2, [pc, #312]	; (8001a9c <HAL_GPIO_Init+0x2fc>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d019      	beq.n	800199c <HAL_GPIO_Init+0x1fc>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a4d      	ldr	r2, [pc, #308]	; (8001aa0 <HAL_GPIO_Init+0x300>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d013      	beq.n	8001998 <HAL_GPIO_Init+0x1f8>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a4c      	ldr	r2, [pc, #304]	; (8001aa4 <HAL_GPIO_Init+0x304>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d00d      	beq.n	8001994 <HAL_GPIO_Init+0x1f4>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a4b      	ldr	r2, [pc, #300]	; (8001aa8 <HAL_GPIO_Init+0x308>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d007      	beq.n	8001990 <HAL_GPIO_Init+0x1f0>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a4a      	ldr	r2, [pc, #296]	; (8001aac <HAL_GPIO_Init+0x30c>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d101      	bne.n	800198c <HAL_GPIO_Init+0x1ec>
 8001988:	2306      	movs	r3, #6
 800198a:	e00c      	b.n	80019a6 <HAL_GPIO_Init+0x206>
 800198c:	2307      	movs	r3, #7
 800198e:	e00a      	b.n	80019a6 <HAL_GPIO_Init+0x206>
 8001990:	2305      	movs	r3, #5
 8001992:	e008      	b.n	80019a6 <HAL_GPIO_Init+0x206>
 8001994:	2304      	movs	r3, #4
 8001996:	e006      	b.n	80019a6 <HAL_GPIO_Init+0x206>
 8001998:	2303      	movs	r3, #3
 800199a:	e004      	b.n	80019a6 <HAL_GPIO_Init+0x206>
 800199c:	2302      	movs	r3, #2
 800199e:	e002      	b.n	80019a6 <HAL_GPIO_Init+0x206>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <HAL_GPIO_Init+0x206>
 80019a4:	2300      	movs	r3, #0
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	f002 0203 	and.w	r2, r2, #3
 80019ac:	0092      	lsls	r2, r2, #2
 80019ae:	4093      	lsls	r3, r2
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019b6:	4937      	ldr	r1, [pc, #220]	; (8001a94 <HAL_GPIO_Init+0x2f4>)
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	089b      	lsrs	r3, r3, #2
 80019bc:	3302      	adds	r3, #2
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c4:	4b3a      	ldr	r3, [pc, #232]	; (8001ab0 <HAL_GPIO_Init+0x310>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019e8:	4a31      	ldr	r2, [pc, #196]	; (8001ab0 <HAL_GPIO_Init+0x310>)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019ee:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <HAL_GPIO_Init+0x310>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a12:	4a27      	ldr	r2, [pc, #156]	; (8001ab0 <HAL_GPIO_Init+0x310>)
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a18:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <HAL_GPIO_Init+0x310>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a3c:	4a1c      	ldr	r2, [pc, #112]	; (8001ab0 <HAL_GPIO_Init+0x310>)
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a42:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <HAL_GPIO_Init+0x310>)
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a66:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <HAL_GPIO_Init+0x310>)
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f47f ae97 	bne.w	80017b0 <HAL_GPIO_Init+0x10>
  }
}
 8001a82:	bf00      	nop
 8001a84:	371c      	adds	r7, #28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40010000 	.word	0x40010000
 8001a98:	48000400 	.word	0x48000400
 8001a9c:	48000800 	.word	0x48000800
 8001aa0:	48000c00 	.word	0x48000c00
 8001aa4:	48001000 	.word	0x48001000
 8001aa8:	48001400 	.word	0x48001400
 8001aac:	48001800 	.word	0x48001800
 8001ab0:	40010400 	.word	0x40010400

08001ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	807b      	strh	r3, [r7, #2]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac4:	787b      	ldrb	r3, [r7, #1]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aca:	887a      	ldrh	r2, [r7, #2]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ad0:	e002      	b.n	8001ad8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ad2:	887a      	ldrh	r2, [r7, #2]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	f000 bf01 	b.w	8002900 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 8160 	beq.w	8001dce <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b0e:	4bae      	ldr	r3, [pc, #696]	; (8001dc8 <HAL_RCC_OscConfig+0x2e4>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d00c      	beq.n	8001b34 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b1a:	4bab      	ldr	r3, [pc, #684]	; (8001dc8 <HAL_RCC_OscConfig+0x2e4>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d159      	bne.n	8001bda <HAL_RCC_OscConfig+0xf6>
 8001b26:	4ba8      	ldr	r3, [pc, #672]	; (8001dc8 <HAL_RCC_OscConfig+0x2e4>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b32:	d152      	bne.n	8001bda <HAL_RCC_OscConfig+0xf6>
 8001b34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b38:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b40:	fa93 f3a3 	rbit	r3, r3
 8001b44:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b48:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4c:	fab3 f383 	clz	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d102      	bne.n	8001b66 <HAL_RCC_OscConfig+0x82>
 8001b60:	4b99      	ldr	r3, [pc, #612]	; (8001dc8 <HAL_RCC_OscConfig+0x2e4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	e015      	b.n	8001b92 <HAL_RCC_OscConfig+0xae>
 8001b66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b6a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001b72:	fa93 f3a3 	rbit	r3, r3
 8001b76:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001b7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b7e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b82:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001b86:	fa93 f3a3 	rbit	r3, r3
 8001b8a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b8e:	4b8e      	ldr	r3, [pc, #568]	; (8001dc8 <HAL_RCC_OscConfig+0x2e4>)
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b96:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001b9a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001b9e:	fa92 f2a2 	rbit	r2, r2
 8001ba2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001ba6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001baa:	fab2 f282 	clz	r2, r2
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	f042 0220 	orr.w	r2, r2, #32
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	f002 021f 	and.w	r2, r2, #31
 8001bba:	2101      	movs	r1, #1
 8001bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 8102 	beq.w	8001dcc <HAL_RCC_OscConfig+0x2e8>
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f040 80fc 	bne.w	8001dcc <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	f000 be93 	b.w	8002900 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be4:	d106      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x110>
 8001be6:	4b78      	ldr	r3, [pc, #480]	; (8001dc8 <HAL_RCC_OscConfig+0x2e4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a77      	ldr	r2, [pc, #476]	; (8001dc8 <HAL_RCC_OscConfig+0x2e4>)
 8001bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e030      	b.n	8001c56 <HAL_RCC_OscConfig+0x172>
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10c      	bne.n	8001c18 <HAL_RCC_OscConfig+0x134>
 8001bfe:	4b72      	ldr	r3, [pc, #456]	; (8001dc8 <HAL_RCC_OscConfig+0x2e4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a71      	ldr	r2, [pc, #452]	; (8001dc8 <HAL_RCC_OscConfig+0x2e4>)
 8001c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	4b6f      	ldr	r3, [pc, #444]	; (8001dc8 <HAL_RCC_OscConfig+0x2e4>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a6e      	ldr	r2, [pc, #440]	; (8001dc8 <HAL_RCC_OscConfig+0x2e4>)
 8001c10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	e01e      	b.n	8001c56 <HAL_RCC_OscConfig+0x172>
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c22:	d10c      	bne.n	8001c3e <HAL_RCC_OscConfig+0x15a>
 8001c24:	4b68      	ldr	r3, [pc, #416]	; (8001dc8 <HAL_RCC_OscConfig+0x2e4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a67      	ldr	r2, [pc, #412]	; (8001dc8 <HAL_RCC_OscConfig+0x2e4>)
 8001c2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	4b65      	ldr	r3, [pc, #404]	; (8001dc8 <HAL_RCC_OscConfig+0x2e4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a64      	ldr	r2, [pc, #400]	; (8001dc8 <HAL_RCC_OscConfig+0x2e4>)
 8001c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	e00b      	b.n	8001c56 <HAL_RCC_OscConfig+0x172>
 8001c3e:	4b62      	ldr	r3, [pc, #392]	; (8001dc8 <HAL_RCC_OscConfig+0x2e4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a61      	ldr	r2, [pc, #388]	; (8001dc8 <HAL_RCC_OscConfig+0x2e4>)
 8001c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b5f      	ldr	r3, [pc, #380]	; (8001dc8 <HAL_RCC_OscConfig+0x2e4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a5e      	ldr	r2, [pc, #376]	; (8001dc8 <HAL_RCC_OscConfig+0x2e4>)
 8001c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c54:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d059      	beq.n	8001d14 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c60:	f7ff fc8a 	bl	8001578 <HAL_GetTick>
 8001c64:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c68:	e00a      	b.n	8001c80 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c6a:	f7ff fc85 	bl	8001578 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	; 0x64
 8001c78:	d902      	bls.n	8001c80 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	f000 be40 	b.w	8002900 <HAL_RCC_OscConfig+0xe1c>
 8001c80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c84:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c88:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001c8c:	fa93 f3a3 	rbit	r3, r3
 8001c90:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001c94:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c98:	fab3 f383 	clz	r3, r3
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d102      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x1ce>
 8001cac:	4b46      	ldr	r3, [pc, #280]	; (8001dc8 <HAL_RCC_OscConfig+0x2e4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	e015      	b.n	8001cde <HAL_RCC_OscConfig+0x1fa>
 8001cb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cb6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001cc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cca:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001cce:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001cd2:	fa93 f3a3 	rbit	r3, r3
 8001cd6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001cda:	4b3b      	ldr	r3, [pc, #236]	; (8001dc8 <HAL_RCC_OscConfig+0x2e4>)
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ce2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001ce6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001cea:	fa92 f2a2 	rbit	r2, r2
 8001cee:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001cf2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001cf6:	fab2 f282 	clz	r2, r2
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	f042 0220 	orr.w	r2, r2, #32
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	f002 021f 	and.w	r2, r2, #31
 8001d06:	2101      	movs	r1, #1
 8001d08:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0ab      	beq.n	8001c6a <HAL_RCC_OscConfig+0x186>
 8001d12:	e05c      	b.n	8001dce <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7ff fc30 	bl	8001578 <HAL_GetTick>
 8001d18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1c:	e00a      	b.n	8001d34 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d1e:	f7ff fc2b 	bl	8001578 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b64      	cmp	r3, #100	; 0x64
 8001d2c:	d902      	bls.n	8001d34 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	f000 bde6 	b.w	8002900 <HAL_RCC_OscConfig+0xe1c>
 8001d34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d38:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001d40:	fa93 f3a3 	rbit	r3, r3
 8001d44:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001d48:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4c:	fab3 f383 	clz	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d102      	bne.n	8001d66 <HAL_RCC_OscConfig+0x282>
 8001d60:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <HAL_RCC_OscConfig+0x2e4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	e015      	b.n	8001d92 <HAL_RCC_OscConfig+0x2ae>
 8001d66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d6a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001d72:	fa93 f3a3 	rbit	r3, r3
 8001d76:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001d7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d7e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d82:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <HAL_RCC_OscConfig+0x2e4>)
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d96:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001d9a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001d9e:	fa92 f2a2 	rbit	r2, r2
 8001da2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001da6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001daa:	fab2 f282 	clz	r2, r2
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	f042 0220 	orr.w	r2, r2, #32
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	f002 021f 	and.w	r2, r2, #31
 8001dba:	2101      	movs	r1, #1
 8001dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1ab      	bne.n	8001d1e <HAL_RCC_OscConfig+0x23a>
 8001dc6:	e002      	b.n	8001dce <HAL_RCC_OscConfig+0x2ea>
 8001dc8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 8170 	beq.w	80020be <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001dde:	4bd0      	ldr	r3, [pc, #832]	; (8002120 <HAL_RCC_OscConfig+0x63c>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00c      	beq.n	8001e04 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001dea:	4bcd      	ldr	r3, [pc, #820]	; (8002120 <HAL_RCC_OscConfig+0x63c>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d16d      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x3ee>
 8001df6:	4bca      	ldr	r3, [pc, #808]	; (8002120 <HAL_RCC_OscConfig+0x63c>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e02:	d166      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x3ee>
 8001e04:	2302      	movs	r3, #2
 8001e06:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001e0e:	fa93 f3a3 	rbit	r3, r3
 8001e12:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001e16:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e1a:	fab3 f383 	clz	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	095b      	lsrs	r3, r3, #5
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d102      	bne.n	8001e34 <HAL_RCC_OscConfig+0x350>
 8001e2e:	4bbc      	ldr	r3, [pc, #752]	; (8002120 <HAL_RCC_OscConfig+0x63c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	e013      	b.n	8001e5c <HAL_RCC_OscConfig+0x378>
 8001e34:	2302      	movs	r3, #2
 8001e36:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001e3e:	fa93 f3a3 	rbit	r3, r3
 8001e42:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001e46:	2302      	movs	r3, #2
 8001e48:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e4c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001e50:	fa93 f3a3 	rbit	r3, r3
 8001e54:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e58:	4bb1      	ldr	r3, [pc, #708]	; (8002120 <HAL_RCC_OscConfig+0x63c>)
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001e62:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001e66:	fa92 f2a2 	rbit	r2, r2
 8001e6a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001e6e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e72:	fab2 f282 	clz	r2, r2
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	f042 0220 	orr.w	r2, r2, #32
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	f002 021f 	and.w	r2, r2, #31
 8001e82:	2101      	movs	r1, #1
 8001e84:	fa01 f202 	lsl.w	r2, r1, r2
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d007      	beq.n	8001e9e <HAL_RCC_OscConfig+0x3ba>
 8001e8e:	1d3b      	adds	r3, r7, #4
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d002      	beq.n	8001e9e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	f000 bd31 	b.w	8002900 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9e:	4ba0      	ldr	r3, [pc, #640]	; (8002120 <HAL_RCC_OscConfig+0x63c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea6:	1d3b      	adds	r3, r7, #4
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	21f8      	movs	r1, #248	; 0xf8
 8001eae:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001eb6:	fa91 f1a1 	rbit	r1, r1
 8001eba:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001ebe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001ec2:	fab1 f181 	clz	r1, r1
 8001ec6:	b2c9      	uxtb	r1, r1
 8001ec8:	408b      	lsls	r3, r1
 8001eca:	4995      	ldr	r1, [pc, #596]	; (8002120 <HAL_RCC_OscConfig+0x63c>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed0:	e0f5      	b.n	80020be <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 8085 	beq.w	8001fe8 <HAL_RCC_OscConfig+0x504>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001ee8:	fa93 f3a3 	rbit	r3, r3
 8001eec:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001ef0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ef4:	fab3 f383 	clz	r3, r3
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001efe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	461a      	mov	r2, r3
 8001f06:	2301      	movs	r3, #1
 8001f08:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0a:	f7ff fb35 	bl	8001578 <HAL_GetTick>
 8001f0e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f12:	e00a      	b.n	8001f2a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f14:	f7ff fb30 	bl	8001578 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d902      	bls.n	8001f2a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	f000 bceb 	b.w	8002900 <HAL_RCC_OscConfig+0xe1c>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001f34:	fa93 f3a3 	rbit	r3, r3
 8001f38:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001f3c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f40:	fab3 f383 	clz	r3, r3
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	095b      	lsrs	r3, r3, #5
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d102      	bne.n	8001f5a <HAL_RCC_OscConfig+0x476>
 8001f54:	4b72      	ldr	r3, [pc, #456]	; (8002120 <HAL_RCC_OscConfig+0x63c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	e013      	b.n	8001f82 <HAL_RCC_OscConfig+0x49e>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f72:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001f76:	fa93 f3a3 	rbit	r3, r3
 8001f7a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f7e:	4b68      	ldr	r3, [pc, #416]	; (8002120 <HAL_RCC_OscConfig+0x63c>)
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	2202      	movs	r2, #2
 8001f84:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001f88:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001f8c:	fa92 f2a2 	rbit	r2, r2
 8001f90:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001f94:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f98:	fab2 f282 	clz	r2, r2
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	f042 0220 	orr.w	r2, r2, #32
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	f002 021f 	and.w	r2, r2, #31
 8001fa8:	2101      	movs	r1, #1
 8001faa:	fa01 f202 	lsl.w	r2, r1, r2
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0af      	beq.n	8001f14 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb4:	4b5a      	ldr	r3, [pc, #360]	; (8002120 <HAL_RCC_OscConfig+0x63c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	21f8      	movs	r1, #248	; 0xf8
 8001fc4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001fcc:	fa91 f1a1 	rbit	r1, r1
 8001fd0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001fd4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001fd8:	fab1 f181 	clz	r1, r1
 8001fdc:	b2c9      	uxtb	r1, r1
 8001fde:	408b      	lsls	r3, r1
 8001fe0:	494f      	ldr	r1, [pc, #316]	; (8002120 <HAL_RCC_OscConfig+0x63c>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]
 8001fe6:	e06a      	b.n	80020be <HAL_RCC_OscConfig+0x5da>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001ffa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002008:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	461a      	mov	r2, r3
 8002010:	2300      	movs	r3, #0
 8002012:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7ff fab0 	bl	8001578 <HAL_GetTick>
 8002018:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800201e:	f7ff faab 	bl	8001578 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d902      	bls.n	8002034 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	f000 bc66 	b.w	8002900 <HAL_RCC_OscConfig+0xe1c>
 8002034:	2302      	movs	r3, #2
 8002036:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002046:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204a:	fab3 f383 	clz	r3, r3
 800204e:	b2db      	uxtb	r3, r3
 8002050:	095b      	lsrs	r3, r3, #5
 8002052:	b2db      	uxtb	r3, r3
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b01      	cmp	r3, #1
 800205c:	d102      	bne.n	8002064 <HAL_RCC_OscConfig+0x580>
 800205e:	4b30      	ldr	r3, [pc, #192]	; (8002120 <HAL_RCC_OscConfig+0x63c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	e013      	b.n	800208c <HAL_RCC_OscConfig+0x5a8>
 8002064:	2302      	movs	r3, #2
 8002066:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002076:	2302      	movs	r3, #2
 8002078:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800207c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002088:	4b25      	ldr	r3, [pc, #148]	; (8002120 <HAL_RCC_OscConfig+0x63c>)
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	2202      	movs	r2, #2
 800208e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002092:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002096:	fa92 f2a2 	rbit	r2, r2
 800209a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800209e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80020a2:	fab2 f282 	clz	r2, r2
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	f042 0220 	orr.w	r2, r2, #32
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	f002 021f 	and.w	r2, r2, #31
 80020b2:	2101      	movs	r1, #1
 80020b4:	fa01 f202 	lsl.w	r2, r1, r2
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1af      	bne.n	800201e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80da 	beq.w	8002282 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d069      	beq.n	80021ac <HAL_RCC_OscConfig+0x6c8>
 80020d8:	2301      	movs	r3, #1
 80020da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80020ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	461a      	mov	r2, r3
 80020f6:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HAL_RCC_OscConfig+0x640>)
 80020f8:	4413      	add	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	461a      	mov	r2, r3
 80020fe:	2301      	movs	r3, #1
 8002100:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002102:	f7ff fa39 	bl	8001578 <HAL_GetTick>
 8002106:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210a:	e00d      	b.n	8002128 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800210c:	f7ff fa34 	bl	8001578 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d905      	bls.n	8002128 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e3ef      	b.n	8002900 <HAL_RCC_OscConfig+0xe1c>
 8002120:	40021000 	.word	0x40021000
 8002124:	10908120 	.word	0x10908120
 8002128:	2302      	movs	r3, #2
 800212a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002132:	fa93 f2a3 	rbit	r2, r3
 8002136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002140:	2202      	movs	r2, #2
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	fa93 f2a3 	rbit	r2, r3
 800214e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002158:	2202      	movs	r2, #2
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	fa93 f2a3 	rbit	r2, r3
 8002166:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800216a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216c:	4ba4      	ldr	r3, [pc, #656]	; (8002400 <HAL_RCC_OscConfig+0x91c>)
 800216e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002170:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002174:	2102      	movs	r1, #2
 8002176:	6019      	str	r1, [r3, #0]
 8002178:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	fa93 f1a3 	rbit	r1, r3
 8002182:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002186:	6019      	str	r1, [r3, #0]
  return result;
 8002188:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	fab3 f383 	clz	r3, r3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f003 031f 	and.w	r3, r3, #31
 800219e:	2101      	movs	r1, #1
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0b0      	beq.n	800210c <HAL_RCC_OscConfig+0x628>
 80021aa:	e06a      	b.n	8002282 <HAL_RCC_OscConfig+0x79e>
 80021ac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80021b0:	2201      	movs	r2, #1
 80021b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	fa93 f2a3 	rbit	r2, r3
 80021be:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80021c2:	601a      	str	r2, [r3, #0]
  return result;
 80021c4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80021c8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ca:	fab3 f383 	clz	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	461a      	mov	r2, r3
 80021d2:	4b8c      	ldr	r3, [pc, #560]	; (8002404 <HAL_RCC_OscConfig+0x920>)
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	461a      	mov	r2, r3
 80021da:	2300      	movs	r3, #0
 80021dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021de:	f7ff f9cb 	bl	8001578 <HAL_GetTick>
 80021e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e6:	e009      	b.n	80021fc <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e8:	f7ff f9c6 	bl	8001578 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e381      	b.n	8002900 <HAL_RCC_OscConfig+0xe1c>
 80021fc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002200:	2202      	movs	r2, #2
 8002202:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002204:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	fa93 f2a3 	rbit	r2, r3
 800220e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002218:	2202      	movs	r2, #2
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	fa93 f2a3 	rbit	r2, r3
 8002226:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002230:	2202      	movs	r2, #2
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	fa93 f2a3 	rbit	r2, r3
 800223e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002242:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002244:	4b6e      	ldr	r3, [pc, #440]	; (8002400 <HAL_RCC_OscConfig+0x91c>)
 8002246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002248:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800224c:	2102      	movs	r1, #2
 800224e:	6019      	str	r1, [r3, #0]
 8002250:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	fa93 f1a3 	rbit	r1, r3
 800225a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800225e:	6019      	str	r1, [r3, #0]
  return result;
 8002260:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	2101      	movs	r1, #1
 8002278:	fa01 f303 	lsl.w	r3, r1, r3
 800227c:	4013      	ands	r3, r2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1b2      	bne.n	80021e8 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 8157 	beq.w	8002540 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002292:	2300      	movs	r3, #0
 8002294:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002298:	4b59      	ldr	r3, [pc, #356]	; (8002400 <HAL_RCC_OscConfig+0x91c>)
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d112      	bne.n	80022ca <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a4:	4b56      	ldr	r3, [pc, #344]	; (8002400 <HAL_RCC_OscConfig+0x91c>)
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	4a55      	ldr	r2, [pc, #340]	; (8002400 <HAL_RCC_OscConfig+0x91c>)
 80022aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ae:	61d3      	str	r3, [r2, #28]
 80022b0:	4b53      	ldr	r3, [pc, #332]	; (8002400 <HAL_RCC_OscConfig+0x91c>)
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	f107 030c 	add.w	r3, r7, #12
 80022c2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80022c4:	2301      	movs	r3, #1
 80022c6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ca:	4b4f      	ldr	r3, [pc, #316]	; (8002408 <HAL_RCC_OscConfig+0x924>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d11a      	bne.n	800230c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d6:	4b4c      	ldr	r3, [pc, #304]	; (8002408 <HAL_RCC_OscConfig+0x924>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a4b      	ldr	r2, [pc, #300]	; (8002408 <HAL_RCC_OscConfig+0x924>)
 80022dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e2:	f7ff f949 	bl	8001578 <HAL_GetTick>
 80022e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ea:	e009      	b.n	8002300 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ec:	f7ff f944 	bl	8001578 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b64      	cmp	r3, #100	; 0x64
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e2ff      	b.n	8002900 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002300:	4b41      	ldr	r3, [pc, #260]	; (8002408 <HAL_RCC_OscConfig+0x924>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0ef      	beq.n	80022ec <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800230c:	1d3b      	adds	r3, r7, #4
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d106      	bne.n	8002324 <HAL_RCC_OscConfig+0x840>
 8002316:	4b3a      	ldr	r3, [pc, #232]	; (8002400 <HAL_RCC_OscConfig+0x91c>)
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	4a39      	ldr	r2, [pc, #228]	; (8002400 <HAL_RCC_OscConfig+0x91c>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6213      	str	r3, [r2, #32]
 8002322:	e02f      	b.n	8002384 <HAL_RCC_OscConfig+0x8a0>
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10c      	bne.n	8002348 <HAL_RCC_OscConfig+0x864>
 800232e:	4b34      	ldr	r3, [pc, #208]	; (8002400 <HAL_RCC_OscConfig+0x91c>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	4a33      	ldr	r2, [pc, #204]	; (8002400 <HAL_RCC_OscConfig+0x91c>)
 8002334:	f023 0301 	bic.w	r3, r3, #1
 8002338:	6213      	str	r3, [r2, #32]
 800233a:	4b31      	ldr	r3, [pc, #196]	; (8002400 <HAL_RCC_OscConfig+0x91c>)
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	4a30      	ldr	r2, [pc, #192]	; (8002400 <HAL_RCC_OscConfig+0x91c>)
 8002340:	f023 0304 	bic.w	r3, r3, #4
 8002344:	6213      	str	r3, [r2, #32]
 8002346:	e01d      	b.n	8002384 <HAL_RCC_OscConfig+0x8a0>
 8002348:	1d3b      	adds	r3, r7, #4
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b05      	cmp	r3, #5
 8002350:	d10c      	bne.n	800236c <HAL_RCC_OscConfig+0x888>
 8002352:	4b2b      	ldr	r3, [pc, #172]	; (8002400 <HAL_RCC_OscConfig+0x91c>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4a2a      	ldr	r2, [pc, #168]	; (8002400 <HAL_RCC_OscConfig+0x91c>)
 8002358:	f043 0304 	orr.w	r3, r3, #4
 800235c:	6213      	str	r3, [r2, #32]
 800235e:	4b28      	ldr	r3, [pc, #160]	; (8002400 <HAL_RCC_OscConfig+0x91c>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	4a27      	ldr	r2, [pc, #156]	; (8002400 <HAL_RCC_OscConfig+0x91c>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6213      	str	r3, [r2, #32]
 800236a:	e00b      	b.n	8002384 <HAL_RCC_OscConfig+0x8a0>
 800236c:	4b24      	ldr	r3, [pc, #144]	; (8002400 <HAL_RCC_OscConfig+0x91c>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	4a23      	ldr	r2, [pc, #140]	; (8002400 <HAL_RCC_OscConfig+0x91c>)
 8002372:	f023 0301 	bic.w	r3, r3, #1
 8002376:	6213      	str	r3, [r2, #32]
 8002378:	4b21      	ldr	r3, [pc, #132]	; (8002400 <HAL_RCC_OscConfig+0x91c>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	4a20      	ldr	r2, [pc, #128]	; (8002400 <HAL_RCC_OscConfig+0x91c>)
 800237e:	f023 0304 	bic.w	r3, r3, #4
 8002382:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d06a      	beq.n	8002464 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238e:	f7ff f8f3 	bl	8001578 <HAL_GetTick>
 8002392:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002396:	e00b      	b.n	80023b0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002398:	f7ff f8ee 	bl	8001578 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e2a7      	b.n	8002900 <HAL_RCC_OscConfig+0xe1c>
 80023b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023b4:	2202      	movs	r2, #2
 80023b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	fa93 f2a3 	rbit	r2, r3
 80023c2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80023cc:	2202      	movs	r2, #2
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	fa93 f2a3 	rbit	r2, r3
 80023da:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80023de:	601a      	str	r2, [r3, #0]
  return result;
 80023e0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80023e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	095b      	lsrs	r3, r3, #5
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	f043 0302 	orr.w	r3, r3, #2
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d108      	bne.n	800240c <HAL_RCC_OscConfig+0x928>
 80023fa:	4b01      	ldr	r3, [pc, #4]	; (8002400 <HAL_RCC_OscConfig+0x91c>)
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	e013      	b.n	8002428 <HAL_RCC_OscConfig+0x944>
 8002400:	40021000 	.word	0x40021000
 8002404:	10908120 	.word	0x10908120
 8002408:	40007000 	.word	0x40007000
 800240c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002410:	2202      	movs	r2, #2
 8002412:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002414:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	fa93 f2a3 	rbit	r2, r3
 800241e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	4bc0      	ldr	r3, [pc, #768]	; (8002728 <HAL_RCC_OscConfig+0xc44>)
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800242c:	2102      	movs	r1, #2
 800242e:	6011      	str	r1, [r2, #0]
 8002430:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	fa92 f1a2 	rbit	r1, r2
 800243a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800243e:	6011      	str	r1, [r2, #0]
  return result;
 8002440:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	fab2 f282 	clz	r2, r2
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	f002 021f 	and.w	r2, r2, #31
 8002456:	2101      	movs	r1, #1
 8002458:	fa01 f202 	lsl.w	r2, r1, r2
 800245c:	4013      	ands	r3, r2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d09a      	beq.n	8002398 <HAL_RCC_OscConfig+0x8b4>
 8002462:	e063      	b.n	800252c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002464:	f7ff f888 	bl	8001578 <HAL_GetTick>
 8002468:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800246c:	e00b      	b.n	8002486 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800246e:	f7ff f883 	bl	8001578 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f241 3288 	movw	r2, #5000	; 0x1388
 800247e:	4293      	cmp	r3, r2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e23c      	b.n	8002900 <HAL_RCC_OscConfig+0xe1c>
 8002486:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800248a:	2202      	movs	r2, #2
 800248c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	fa93 f2a3 	rbit	r2, r3
 8002498:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024a2:	2202      	movs	r2, #2
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	fa93 f2a3 	rbit	r2, r3
 80024b0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80024b4:	601a      	str	r2, [r3, #0]
  return result;
 80024b6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80024ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024bc:	fab3 f383 	clz	r3, r3
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f043 0302 	orr.w	r3, r3, #2
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d102      	bne.n	80024d6 <HAL_RCC_OscConfig+0x9f2>
 80024d0:	4b95      	ldr	r3, [pc, #596]	; (8002728 <HAL_RCC_OscConfig+0xc44>)
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	e00d      	b.n	80024f2 <HAL_RCC_OscConfig+0xa0e>
 80024d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024da:	2202      	movs	r2, #2
 80024dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	fa93 f2a3 	rbit	r2, r3
 80024e8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	4b8e      	ldr	r3, [pc, #568]	; (8002728 <HAL_RCC_OscConfig+0xc44>)
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80024f6:	2102      	movs	r1, #2
 80024f8:	6011      	str	r1, [r2, #0]
 80024fa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	fa92 f1a2 	rbit	r1, r2
 8002504:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002508:	6011      	str	r1, [r2, #0]
  return result;
 800250a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	fab2 f282 	clz	r2, r2
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	f002 021f 	and.w	r2, r2, #31
 8002520:	2101      	movs	r1, #1
 8002522:	fa01 f202 	lsl.w	r2, r1, r2
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1a0      	bne.n	800246e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800252c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002530:	2b01      	cmp	r3, #1
 8002532:	d105      	bne.n	8002540 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002534:	4b7c      	ldr	r3, [pc, #496]	; (8002728 <HAL_RCC_OscConfig+0xc44>)
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	4a7b      	ldr	r2, [pc, #492]	; (8002728 <HAL_RCC_OscConfig+0xc44>)
 800253a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800253e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002540:	1d3b      	adds	r3, r7, #4
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 81d9 	beq.w	80028fe <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800254c:	4b76      	ldr	r3, [pc, #472]	; (8002728 <HAL_RCC_OscConfig+0xc44>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 030c 	and.w	r3, r3, #12
 8002554:	2b08      	cmp	r3, #8
 8002556:	f000 81a6 	beq.w	80028a6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	2b02      	cmp	r3, #2
 8002562:	f040 811e 	bne.w	80027a2 <HAL_RCC_OscConfig+0xcbe>
 8002566:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800256a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800256e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	fa93 f2a3 	rbit	r2, r3
 800257a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800257e:	601a      	str	r2, [r3, #0]
  return result;
 8002580:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002584:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002590:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	461a      	mov	r2, r3
 8002598:	2300      	movs	r3, #0
 800259a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7fe ffec 	bl	8001578 <HAL_GetTick>
 80025a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a4:	e009      	b.n	80025ba <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a6:	f7fe ffe7 	bl	8001578 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e1a2      	b.n	8002900 <HAL_RCC_OscConfig+0xe1c>
 80025ba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80025be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	fa93 f2a3 	rbit	r2, r3
 80025ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80025d2:	601a      	str	r2, [r3, #0]
  return result;
 80025d4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80025d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	095b      	lsrs	r3, r3, #5
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d102      	bne.n	80025f4 <HAL_RCC_OscConfig+0xb10>
 80025ee:	4b4e      	ldr	r3, [pc, #312]	; (8002728 <HAL_RCC_OscConfig+0xc44>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	e01b      	b.n	800262c <HAL_RCC_OscConfig+0xb48>
 80025f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	fa93 f2a3 	rbit	r2, r3
 8002608:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002612:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	fa93 f2a3 	rbit	r2, r3
 8002622:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	4b3f      	ldr	r3, [pc, #252]	; (8002728 <HAL_RCC_OscConfig+0xc44>)
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002630:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002634:	6011      	str	r1, [r2, #0]
 8002636:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	fa92 f1a2 	rbit	r1, r2
 8002640:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002644:	6011      	str	r1, [r2, #0]
  return result;
 8002646:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	fab2 f282 	clz	r2, r2
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	f042 0220 	orr.w	r2, r2, #32
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	f002 021f 	and.w	r2, r2, #31
 800265c:	2101      	movs	r1, #1
 800265e:	fa01 f202 	lsl.w	r2, r1, r2
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d19e      	bne.n	80025a6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002668:	4b2f      	ldr	r3, [pc, #188]	; (8002728 <HAL_RCC_OscConfig+0xc44>)
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	f023 020f 	bic.w	r2, r3, #15
 8002670:	1d3b      	adds	r3, r7, #4
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	492c      	ldr	r1, [pc, #176]	; (8002728 <HAL_RCC_OscConfig+0xc44>)
 8002678:	4313      	orrs	r3, r2
 800267a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800267c:	4b2a      	ldr	r3, [pc, #168]	; (8002728 <HAL_RCC_OscConfig+0xc44>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002684:	1d3b      	adds	r3, r7, #4
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6a19      	ldr	r1, [r3, #32]
 800268a:	1d3b      	adds	r3, r7, #4
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	430b      	orrs	r3, r1
 8002692:	4925      	ldr	r1, [pc, #148]	; (8002728 <HAL_RCC_OscConfig+0xc44>)
 8002694:	4313      	orrs	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
 8002698:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800269c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	fa93 f2a3 	rbit	r2, r3
 80026ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80026b0:	601a      	str	r2, [r3, #0]
  return result;
 80026b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80026b6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b8:	fab3 f383 	clz	r3, r3
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	461a      	mov	r2, r3
 80026ca:	2301      	movs	r3, #1
 80026cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ce:	f7fe ff53 	bl	8001578 <HAL_GetTick>
 80026d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026d6:	e009      	b.n	80026ec <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d8:	f7fe ff4e 	bl	8001578 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e109      	b.n	8002900 <HAL_RCC_OscConfig+0xe1c>
 80026ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	fa93 f2a3 	rbit	r2, r3
 8002700:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002704:	601a      	str	r2, [r3, #0]
  return result;
 8002706:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800270a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800270c:	fab3 f383 	clz	r3, r3
 8002710:	b2db      	uxtb	r3, r3
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b01      	cmp	r3, #1
 800271e:	d105      	bne.n	800272c <HAL_RCC_OscConfig+0xc48>
 8002720:	4b01      	ldr	r3, [pc, #4]	; (8002728 <HAL_RCC_OscConfig+0xc44>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	e01e      	b.n	8002764 <HAL_RCC_OscConfig+0xc80>
 8002726:	bf00      	nop
 8002728:	40021000 	.word	0x40021000
 800272c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002730:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002734:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	fa93 f2a3 	rbit	r2, r3
 8002740:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800274a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	fa93 f2a3 	rbit	r2, r3
 800275a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	4b6a      	ldr	r3, [pc, #424]	; (800290c <HAL_RCC_OscConfig+0xe28>)
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002768:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800276c:	6011      	str	r1, [r2, #0]
 800276e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	fa92 f1a2 	rbit	r1, r2
 8002778:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800277c:	6011      	str	r1, [r2, #0]
  return result;
 800277e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	fab2 f282 	clz	r2, r2
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	f042 0220 	orr.w	r2, r2, #32
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	f002 021f 	and.w	r2, r2, #31
 8002794:	2101      	movs	r1, #1
 8002796:	fa01 f202 	lsl.w	r2, r1, r2
 800279a:	4013      	ands	r3, r2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d09b      	beq.n	80026d8 <HAL_RCC_OscConfig+0xbf4>
 80027a0:	e0ad      	b.n	80028fe <HAL_RCC_OscConfig+0xe1a>
 80027a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	fa93 f2a3 	rbit	r2, r3
 80027b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027ba:	601a      	str	r2, [r3, #0]
  return result;
 80027bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027c0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	461a      	mov	r2, r3
 80027d4:	2300      	movs	r3, #0
 80027d6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7fe fece 	bl	8001578 <HAL_GetTick>
 80027dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e0:	e009      	b.n	80027f6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e2:	f7fe fec9 	bl	8001578 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e084      	b.n	8002900 <HAL_RCC_OscConfig+0xe1c>
 80027f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	fa93 f2a3 	rbit	r2, r3
 800280a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800280e:	601a      	str	r2, [r3, #0]
  return result;
 8002810:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002814:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002816:	fab3 f383 	clz	r3, r3
 800281a:	b2db      	uxtb	r3, r3
 800281c:	095b      	lsrs	r3, r3, #5
 800281e:	b2db      	uxtb	r3, r3
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b01      	cmp	r3, #1
 8002828:	d102      	bne.n	8002830 <HAL_RCC_OscConfig+0xd4c>
 800282a:	4b38      	ldr	r3, [pc, #224]	; (800290c <HAL_RCC_OscConfig+0xe28>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	e01b      	b.n	8002868 <HAL_RCC_OscConfig+0xd84>
 8002830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002834:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002838:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	fa93 f2a3 	rbit	r2, r3
 8002844:	f107 0320 	add.w	r3, r7, #32
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	f107 031c 	add.w	r3, r7, #28
 800284e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	f107 031c 	add.w	r3, r7, #28
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	fa93 f2a3 	rbit	r2, r3
 800285e:	f107 0318 	add.w	r3, r7, #24
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	4b29      	ldr	r3, [pc, #164]	; (800290c <HAL_RCC_OscConfig+0xe28>)
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	f107 0214 	add.w	r2, r7, #20
 800286c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002870:	6011      	str	r1, [r2, #0]
 8002872:	f107 0214 	add.w	r2, r7, #20
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	fa92 f1a2 	rbit	r1, r2
 800287c:	f107 0210 	add.w	r2, r7, #16
 8002880:	6011      	str	r1, [r2, #0]
  return result;
 8002882:	f107 0210 	add.w	r2, r7, #16
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	fab2 f282 	clz	r2, r2
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	f042 0220 	orr.w	r2, r2, #32
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	f002 021f 	and.w	r2, r2, #31
 8002898:	2101      	movs	r1, #1
 800289a:	fa01 f202 	lsl.w	r2, r1, r2
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d19e      	bne.n	80027e2 <HAL_RCC_OscConfig+0xcfe>
 80028a4:	e02b      	b.n	80028fe <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e025      	b.n	8002900 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028b4:	4b15      	ldr	r3, [pc, #84]	; (800290c <HAL_RCC_OscConfig+0xe28>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80028bc:	4b13      	ldr	r3, [pc, #76]	; (800290c <HAL_RCC_OscConfig+0xe28>)
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80028c8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80028cc:	1d3b      	adds	r3, r7, #4
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d111      	bne.n	80028fa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80028d6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80028da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028de:	1d3b      	adds	r3, r7, #4
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d108      	bne.n	80028fa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80028e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028ec:	f003 020f 	and.w	r2, r3, #15
 80028f0:	1d3b      	adds	r3, r7, #4
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d001      	beq.n	80028fe <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40021000 	.word	0x40021000

08002910 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b09e      	sub	sp, #120	; 0x78
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e162      	b.n	8002bee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002928:	4b90      	ldr	r3, [pc, #576]	; (8002b6c <HAL_RCC_ClockConfig+0x25c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d910      	bls.n	8002958 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002936:	4b8d      	ldr	r3, [pc, #564]	; (8002b6c <HAL_RCC_ClockConfig+0x25c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 0207 	bic.w	r2, r3, #7
 800293e:	498b      	ldr	r1, [pc, #556]	; (8002b6c <HAL_RCC_ClockConfig+0x25c>)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002946:	4b89      	ldr	r3, [pc, #548]	; (8002b6c <HAL_RCC_ClockConfig+0x25c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d001      	beq.n	8002958 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e14a      	b.n	8002bee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002964:	4b82      	ldr	r3, [pc, #520]	; (8002b70 <HAL_RCC_ClockConfig+0x260>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	497f      	ldr	r1, [pc, #508]	; (8002b70 <HAL_RCC_ClockConfig+0x260>)
 8002972:	4313      	orrs	r3, r2
 8002974:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 80dc 	beq.w	8002b3c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d13c      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xf6>
 800298c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002990:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002994:	fa93 f3a3 	rbit	r3, r3
 8002998:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800299a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299c:	fab3 f383 	clz	r3, r3
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d102      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xa6>
 80029b0:	4b6f      	ldr	r3, [pc, #444]	; (8002b70 <HAL_RCC_ClockConfig+0x260>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	e00f      	b.n	80029d6 <HAL_RCC_ClockConfig+0xc6>
 80029b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	667b      	str	r3, [r7, #100]	; 0x64
 80029c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029c8:	663b      	str	r3, [r7, #96]	; 0x60
 80029ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029d2:	4b67      	ldr	r3, [pc, #412]	; (8002b70 <HAL_RCC_ClockConfig+0x260>)
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029da:	65ba      	str	r2, [r7, #88]	; 0x58
 80029dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029de:	fa92 f2a2 	rbit	r2, r2
 80029e2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80029e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029e6:	fab2 f282 	clz	r2, r2
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	f042 0220 	orr.w	r2, r2, #32
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	f002 021f 	and.w	r2, r2, #31
 80029f6:	2101      	movs	r1, #1
 80029f8:	fa01 f202 	lsl.w	r2, r1, r2
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d17b      	bne.n	8002afa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e0f3      	b.n	8002bee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d13c      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x178>
 8002a0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d102      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x128>
 8002a32:	4b4f      	ldr	r3, [pc, #316]	; (8002b70 <HAL_RCC_ClockConfig+0x260>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	e00f      	b.n	8002a58 <HAL_RCC_ClockConfig+0x148>
 8002a38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a40:	fa93 f3a3 	rbit	r3, r3
 8002a44:	647b      	str	r3, [r7, #68]	; 0x44
 8002a46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a4a:	643b      	str	r3, [r7, #64]	; 0x40
 8002a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a4e:	fa93 f3a3 	rbit	r3, r3
 8002a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a54:	4b46      	ldr	r3, [pc, #280]	; (8002b70 <HAL_RCC_ClockConfig+0x260>)
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a5c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a60:	fa92 f2a2 	rbit	r2, r2
 8002a64:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002a66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a68:	fab2 f282 	clz	r2, r2
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	f042 0220 	orr.w	r2, r2, #32
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	f002 021f 	and.w	r2, r2, #31
 8002a78:	2101      	movs	r1, #1
 8002a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d13a      	bne.n	8002afa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0b2      	b.n	8002bee <HAL_RCC_ClockConfig+0x2de>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	095b      	lsrs	r3, r3, #5
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d102      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x1a0>
 8002aaa:	4b31      	ldr	r3, [pc, #196]	; (8002b70 <HAL_RCC_ClockConfig+0x260>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	e00d      	b.n	8002acc <HAL_RCC_ClockConfig+0x1bc>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab6:	fa93 f3a3 	rbit	r3, r3
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
 8002abc:	2302      	movs	r3, #2
 8002abe:	623b      	str	r3, [r7, #32]
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	61fb      	str	r3, [r7, #28]
 8002ac8:	4b29      	ldr	r3, [pc, #164]	; (8002b70 <HAL_RCC_ClockConfig+0x260>)
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	2202      	movs	r2, #2
 8002ace:	61ba      	str	r2, [r7, #24]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	fa92 f2a2 	rbit	r2, r2
 8002ad6:	617a      	str	r2, [r7, #20]
  return result;
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	fab2 f282 	clz	r2, r2
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	f042 0220 	orr.w	r2, r2, #32
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	f002 021f 	and.w	r2, r2, #31
 8002aea:	2101      	movs	r1, #1
 8002aec:	fa01 f202 	lsl.w	r2, r1, r2
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e079      	b.n	8002bee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002afa:	4b1d      	ldr	r3, [pc, #116]	; (8002b70 <HAL_RCC_ClockConfig+0x260>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f023 0203 	bic.w	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	491a      	ldr	r1, [pc, #104]	; (8002b70 <HAL_RCC_ClockConfig+0x260>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b0c:	f7fe fd34 	bl	8001578 <HAL_GetTick>
 8002b10:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b12:	e00a      	b.n	8002b2a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b14:	f7fe fd30 	bl	8001578 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e061      	b.n	8002bee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2a:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <HAL_RCC_ClockConfig+0x260>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 020c 	and.w	r2, r3, #12
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d1eb      	bne.n	8002b14 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <HAL_RCC_ClockConfig+0x25c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d214      	bcs.n	8002b74 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4a:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <HAL_RCC_ClockConfig+0x25c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 0207 	bic.w	r2, r3, #7
 8002b52:	4906      	ldr	r1, [pc, #24]	; (8002b6c <HAL_RCC_ClockConfig+0x25c>)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5a:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <HAL_RCC_ClockConfig+0x25c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e040      	b.n	8002bee <HAL_RCC_ClockConfig+0x2de>
 8002b6c:	40022000 	.word	0x40022000
 8002b70:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b80:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	491a      	ldr	r1, [pc, #104]	; (8002bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b9e:	4b16      	ldr	r3, [pc, #88]	; (8002bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4912      	ldr	r1, [pc, #72]	; (8002bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002bb2:	f000 f829 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 8002bb6:	4601      	mov	r1, r0
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bc0:	22f0      	movs	r2, #240	; 0xf0
 8002bc2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	fa92 f2a2 	rbit	r2, r2
 8002bca:	60fa      	str	r2, [r7, #12]
  return result;
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	fab2 f282 	clz	r2, r2
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	40d3      	lsrs	r3, r2
 8002bd6:	4a09      	ldr	r2, [pc, #36]	; (8002bfc <HAL_RCC_ClockConfig+0x2ec>)
 8002bd8:	5cd3      	ldrb	r3, [r2, r3]
 8002bda:	fa21 f303 	lsr.w	r3, r1, r3
 8002bde:	4a08      	ldr	r2, [pc, #32]	; (8002c00 <HAL_RCC_ClockConfig+0x2f0>)
 8002be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002be2:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <HAL_RCC_ClockConfig+0x2f4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe fc82 	bl	80014f0 <HAL_InitTick>
  
  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3778      	adds	r7, #120	; 0x78
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	08004784 	.word	0x08004784
 8002c00:	20000018 	.word	0x20000018
 8002c04:	2000001c 	.word	0x2000001c

08002c08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b08b      	sub	sp, #44	; 0x2c
 8002c0c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61fb      	str	r3, [r7, #28]
 8002c12:	2300      	movs	r3, #0
 8002c14:	61bb      	str	r3, [r7, #24]
 8002c16:	2300      	movs	r3, #0
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002c22:	4b2a      	ldr	r3, [pc, #168]	; (8002ccc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d002      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0x30>
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d003      	beq.n	8002c3e <HAL_RCC_GetSysClockFreq+0x36>
 8002c36:	e03f      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c38:	4b25      	ldr	r3, [pc, #148]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c3a:	623b      	str	r3, [r7, #32]
      break;
 8002c3c:	e03f      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c44:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002c48:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	fa92 f2a2 	rbit	r2, r2
 8002c50:	607a      	str	r2, [r7, #4]
  return result;
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	fab2 f282 	clz	r2, r2
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	40d3      	lsrs	r3, r2
 8002c5c:	4a1d      	ldr	r2, [pc, #116]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c5e:	5cd3      	ldrb	r3, [r2, r3]
 8002c60:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c62:	4b1a      	ldr	r3, [pc, #104]	; (8002ccc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	220f      	movs	r2, #15
 8002c6c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	fa92 f2a2 	rbit	r2, r2
 8002c74:	60fa      	str	r2, [r7, #12]
  return result;
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	fab2 f282 	clz	r2, r2
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	40d3      	lsrs	r3, r2
 8002c80:	4a15      	ldr	r2, [pc, #84]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c82:	5cd3      	ldrb	r3, [r2, r3]
 8002c84:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d008      	beq.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c90:	4a0f      	ldr	r2, [pc, #60]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	fb02 f303 	mul.w	r3, r2, r3
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca0:	e007      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ca2:	4a0b      	ldr	r2, [pc, #44]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	fb02 f303 	mul.w	r3, r2, r3
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	623b      	str	r3, [r7, #32]
      break;
 8002cb6:	e002      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cba:	623b      	str	r3, [r7, #32]
      break;
 8002cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	372c      	adds	r7, #44	; 0x2c
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	007a1200 	.word	0x007a1200
 8002cd4:	0800479c 	.word	0x0800479c
 8002cd8:	080047ac 	.word	0x080047ac

08002cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce0:	4b03      	ldr	r3, [pc, #12]	; (8002cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20000018 	.word	0x20000018

08002cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002cfa:	f7ff ffef 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002cfe:	4601      	mov	r1, r0
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d08:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002d0c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	fa92 f2a2 	rbit	r2, r2
 8002d14:	603a      	str	r2, [r7, #0]
  return result;
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	fab2 f282 	clz	r2, r2
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	40d3      	lsrs	r3, r2
 8002d20:	4a04      	ldr	r2, [pc, #16]	; (8002d34 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002d22:	5cd3      	ldrb	r3, [r2, r3]
 8002d24:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40021000 	.word	0x40021000
 8002d34:	08004794 	.word	0x08004794

08002d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002d3e:	f7ff ffcd 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002d42:	4601      	mov	r1, r0
 8002d44:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002d4c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002d50:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	fa92 f2a2 	rbit	r2, r2
 8002d58:	603a      	str	r2, [r7, #0]
  return result;
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	fab2 f282 	clz	r2, r2
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	40d3      	lsrs	r3, r2
 8002d64:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d66:	5cd3      	ldrb	r3, [r2, r3]
 8002d68:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000
 8002d78:	08004794 	.word	0x08004794

08002d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b092      	sub	sp, #72	; 0x48
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 80d4 	beq.w	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002da0:	4b4e      	ldr	r3, [pc, #312]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10e      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dac:	4b4b      	ldr	r3, [pc, #300]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	4a4a      	ldr	r2, [pc, #296]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db6:	61d3      	str	r3, [r2, #28]
 8002db8:	4b48      	ldr	r3, [pc, #288]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dca:	4b45      	ldr	r3, [pc, #276]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d118      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd6:	4b42      	ldr	r3, [pc, #264]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a41      	ldr	r2, [pc, #260]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002de2:	f7fe fbc9 	bl	8001578 <HAL_GetTick>
 8002de6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de8:	e008      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dea:	f7fe fbc5 	bl	8001578 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b64      	cmp	r3, #100	; 0x64
 8002df6:	d901      	bls.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e1d6      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfc:	4b38      	ldr	r3, [pc, #224]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e08:	4b34      	ldr	r3, [pc, #208]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e10:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 8084 	beq.w	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d07c      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e28:	4b2c      	ldr	r3, [pc, #176]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3a:	fa93 f3a3 	rbit	r3, r3
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4b26      	ldr	r3, [pc, #152]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	461a      	mov	r2, r3
 8002e52:	2301      	movs	r3, #1
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	461a      	mov	r2, r3
 8002e76:	2300      	movs	r3, #0
 8002e78:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e7a:	4a18      	ldr	r2, [pc, #96]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e7e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d04b      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8a:	f7fe fb75 	bl	8001578 <HAL_GetTick>
 8002e8e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e90:	e00a      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e92:	f7fe fb71 	bl	8001578 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e180      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	623b      	str	r3, [r7, #32]
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	fa93 f3a3 	rbit	r3, r3
 8002ebe:	61fb      	str	r3, [r7, #28]
  return result;
 8002ec0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec2:	fab3 f383 	clz	r3, r3
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	095b      	lsrs	r3, r3, #5
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	f043 0302 	orr.w	r3, r3, #2
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d108      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002ed6:	4b01      	ldr	r3, [pc, #4]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	e00d      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40007000 	.word	0x40007000
 8002ee4:	10908100 	.word	0x10908100
 8002ee8:	2302      	movs	r3, #2
 8002eea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	4ba0      	ldr	r3, [pc, #640]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	2202      	movs	r2, #2
 8002efa:	613a      	str	r2, [r7, #16]
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	fa92 f2a2 	rbit	r2, r2
 8002f02:	60fa      	str	r2, [r7, #12]
  return result;
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	fab2 f282 	clz	r2, r2
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	f002 021f 	and.w	r2, r2, #31
 8002f16:	2101      	movs	r1, #1
 8002f18:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0b7      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f22:	4b95      	ldr	r3, [pc, #596]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4992      	ldr	r1, [pc, #584]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d105      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f3c:	4b8e      	ldr	r3, [pc, #568]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	4a8d      	ldr	r2, [pc, #564]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f46:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f54:	4b88      	ldr	r3, [pc, #544]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	f023 0203 	bic.w	r2, r3, #3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	4985      	ldr	r1, [pc, #532]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d008      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f72:	4b81      	ldr	r3, [pc, #516]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	497e      	ldr	r1, [pc, #504]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f90:	4b79      	ldr	r3, [pc, #484]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	4976      	ldr	r1, [pc, #472]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0320 	and.w	r3, r3, #32
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d008      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fae:	4b72      	ldr	r3, [pc, #456]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f023 0210 	bic.w	r2, r3, #16
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	496f      	ldr	r1, [pc, #444]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d008      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002fcc:	4b6a      	ldr	r3, [pc, #424]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd8:	4967      	ldr	r1, [pc, #412]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d008      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fea:	4b63      	ldr	r3, [pc, #396]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f023 0220 	bic.w	r2, r3, #32
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	4960      	ldr	r1, [pc, #384]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d008      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003008:	4b5b      	ldr	r3, [pc, #364]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	4958      	ldr	r1, [pc, #352]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003016:	4313      	orrs	r3, r2
 8003018:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d008      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003026:	4b54      	ldr	r3, [pc, #336]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	4951      	ldr	r1, [pc, #324]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003034:	4313      	orrs	r3, r2
 8003036:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003044:	4b4c      	ldr	r3, [pc, #304]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003048:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	4949      	ldr	r1, [pc, #292]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003052:	4313      	orrs	r3, r2
 8003054:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800305e:	2b00      	cmp	r3, #0
 8003060:	d008      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003062:	4b45      	ldr	r3, [pc, #276]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	4942      	ldr	r1, [pc, #264]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003070:	4313      	orrs	r3, r2
 8003072:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003080:	4b3d      	ldr	r3, [pc, #244]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	493a      	ldr	r1, [pc, #232]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800308e:	4313      	orrs	r3, r2
 8003090:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800309e:	4b36      	ldr	r3, [pc, #216]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030aa:	4933      	ldr	r1, [pc, #204]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d008      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80030bc:	4b2e      	ldr	r3, [pc, #184]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c8:	492b      	ldr	r1, [pc, #172]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d008      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80030da:	4b27      	ldr	r3, [pc, #156]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	4924      	ldr	r1, [pc, #144]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d008      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80030f8:	4b1f      	ldr	r3, [pc, #124]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	491c      	ldr	r1, [pc, #112]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003106:	4313      	orrs	r3, r2
 8003108:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d008      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003116:	4b18      	ldr	r3, [pc, #96]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003122:	4915      	ldr	r1, [pc, #84]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003124:	4313      	orrs	r3, r2
 8003126:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003134:	4b10      	ldr	r3, [pc, #64]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003140:	490d      	ldr	r1, [pc, #52]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003142:	4313      	orrs	r3, r2
 8003144:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d008      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800315e:	4906      	ldr	r1, [pc, #24]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003160:	4313      	orrs	r3, r2
 8003162:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00c      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003170:	4b01      	ldr	r3, [pc, #4]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	e002      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003176:	bf00      	nop
 8003178:	40021000 	.word	0x40021000
 800317c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003184:	490b      	ldr	r1, [pc, #44]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003186:	4313      	orrs	r3, r2
 8003188:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d008      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003196:	4b07      	ldr	r3, [pc, #28]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a2:	4904      	ldr	r1, [pc, #16]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3748      	adds	r7, #72	; 0x48
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40021000 	.word	0x40021000

080031b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e040      	b.n	800324c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fe f826 	bl	800122c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2224      	movs	r2, #36	; 0x24
 80031e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0201 	bic.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f82c 	bl	8003254 <UART_SetConfig>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e022      	b.n	800324c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f9f4 	bl	80035fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003232:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fa7b 	bl	8003740 <UART_CheckIdleState>
 800324a:	4603      	mov	r3, r0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4baa      	ldr	r3, [pc, #680]	; (8003528 <UART_SetConfig+0x2d4>)
 8003280:	4013      	ands	r3, r2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	6979      	ldr	r1, [r7, #20]
 8003288:	430b      	orrs	r3, r1
 800328a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a98      	ldr	r2, [pc, #608]	; (800352c <UART_SetConfig+0x2d8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d121      	bne.n	8003314 <UART_SetConfig+0xc0>
 80032d0:	4b97      	ldr	r3, [pc, #604]	; (8003530 <UART_SetConfig+0x2dc>)
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	f003 0303 	and.w	r3, r3, #3
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d817      	bhi.n	800330c <UART_SetConfig+0xb8>
 80032dc:	a201      	add	r2, pc, #4	; (adr r2, 80032e4 <UART_SetConfig+0x90>)
 80032de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e2:	bf00      	nop
 80032e4:	080032f5 	.word	0x080032f5
 80032e8:	08003301 	.word	0x08003301
 80032ec:	08003307 	.word	0x08003307
 80032f0:	080032fb 	.word	0x080032fb
 80032f4:	2301      	movs	r3, #1
 80032f6:	77fb      	strb	r3, [r7, #31]
 80032f8:	e0b2      	b.n	8003460 <UART_SetConfig+0x20c>
 80032fa:	2302      	movs	r3, #2
 80032fc:	77fb      	strb	r3, [r7, #31]
 80032fe:	e0af      	b.n	8003460 <UART_SetConfig+0x20c>
 8003300:	2304      	movs	r3, #4
 8003302:	77fb      	strb	r3, [r7, #31]
 8003304:	e0ac      	b.n	8003460 <UART_SetConfig+0x20c>
 8003306:	2308      	movs	r3, #8
 8003308:	77fb      	strb	r3, [r7, #31]
 800330a:	e0a9      	b.n	8003460 <UART_SetConfig+0x20c>
 800330c:	2310      	movs	r3, #16
 800330e:	77fb      	strb	r3, [r7, #31]
 8003310:	bf00      	nop
 8003312:	e0a5      	b.n	8003460 <UART_SetConfig+0x20c>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a86      	ldr	r2, [pc, #536]	; (8003534 <UART_SetConfig+0x2e0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d123      	bne.n	8003366 <UART_SetConfig+0x112>
 800331e:	4b84      	ldr	r3, [pc, #528]	; (8003530 <UART_SetConfig+0x2dc>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332a:	d012      	beq.n	8003352 <UART_SetConfig+0xfe>
 800332c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003330:	d802      	bhi.n	8003338 <UART_SetConfig+0xe4>
 8003332:	2b00      	cmp	r3, #0
 8003334:	d007      	beq.n	8003346 <UART_SetConfig+0xf2>
 8003336:	e012      	b.n	800335e <UART_SetConfig+0x10a>
 8003338:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800333c:	d00c      	beq.n	8003358 <UART_SetConfig+0x104>
 800333e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003342:	d003      	beq.n	800334c <UART_SetConfig+0xf8>
 8003344:	e00b      	b.n	800335e <UART_SetConfig+0x10a>
 8003346:	2300      	movs	r3, #0
 8003348:	77fb      	strb	r3, [r7, #31]
 800334a:	e089      	b.n	8003460 <UART_SetConfig+0x20c>
 800334c:	2302      	movs	r3, #2
 800334e:	77fb      	strb	r3, [r7, #31]
 8003350:	e086      	b.n	8003460 <UART_SetConfig+0x20c>
 8003352:	2304      	movs	r3, #4
 8003354:	77fb      	strb	r3, [r7, #31]
 8003356:	e083      	b.n	8003460 <UART_SetConfig+0x20c>
 8003358:	2308      	movs	r3, #8
 800335a:	77fb      	strb	r3, [r7, #31]
 800335c:	e080      	b.n	8003460 <UART_SetConfig+0x20c>
 800335e:	2310      	movs	r3, #16
 8003360:	77fb      	strb	r3, [r7, #31]
 8003362:	bf00      	nop
 8003364:	e07c      	b.n	8003460 <UART_SetConfig+0x20c>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a73      	ldr	r2, [pc, #460]	; (8003538 <UART_SetConfig+0x2e4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d123      	bne.n	80033b8 <UART_SetConfig+0x164>
 8003370:	4b6f      	ldr	r3, [pc, #444]	; (8003530 <UART_SetConfig+0x2dc>)
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003378:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800337c:	d012      	beq.n	80033a4 <UART_SetConfig+0x150>
 800337e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003382:	d802      	bhi.n	800338a <UART_SetConfig+0x136>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d007      	beq.n	8003398 <UART_SetConfig+0x144>
 8003388:	e012      	b.n	80033b0 <UART_SetConfig+0x15c>
 800338a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800338e:	d00c      	beq.n	80033aa <UART_SetConfig+0x156>
 8003390:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003394:	d003      	beq.n	800339e <UART_SetConfig+0x14a>
 8003396:	e00b      	b.n	80033b0 <UART_SetConfig+0x15c>
 8003398:	2300      	movs	r3, #0
 800339a:	77fb      	strb	r3, [r7, #31]
 800339c:	e060      	b.n	8003460 <UART_SetConfig+0x20c>
 800339e:	2302      	movs	r3, #2
 80033a0:	77fb      	strb	r3, [r7, #31]
 80033a2:	e05d      	b.n	8003460 <UART_SetConfig+0x20c>
 80033a4:	2304      	movs	r3, #4
 80033a6:	77fb      	strb	r3, [r7, #31]
 80033a8:	e05a      	b.n	8003460 <UART_SetConfig+0x20c>
 80033aa:	2308      	movs	r3, #8
 80033ac:	77fb      	strb	r3, [r7, #31]
 80033ae:	e057      	b.n	8003460 <UART_SetConfig+0x20c>
 80033b0:	2310      	movs	r3, #16
 80033b2:	77fb      	strb	r3, [r7, #31]
 80033b4:	bf00      	nop
 80033b6:	e053      	b.n	8003460 <UART_SetConfig+0x20c>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a5f      	ldr	r2, [pc, #380]	; (800353c <UART_SetConfig+0x2e8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d123      	bne.n	800340a <UART_SetConfig+0x1b6>
 80033c2:	4b5b      	ldr	r3, [pc, #364]	; (8003530 <UART_SetConfig+0x2dc>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80033ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ce:	d012      	beq.n	80033f6 <UART_SetConfig+0x1a2>
 80033d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033d4:	d802      	bhi.n	80033dc <UART_SetConfig+0x188>
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d007      	beq.n	80033ea <UART_SetConfig+0x196>
 80033da:	e012      	b.n	8003402 <UART_SetConfig+0x1ae>
 80033dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033e0:	d00c      	beq.n	80033fc <UART_SetConfig+0x1a8>
 80033e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033e6:	d003      	beq.n	80033f0 <UART_SetConfig+0x19c>
 80033e8:	e00b      	b.n	8003402 <UART_SetConfig+0x1ae>
 80033ea:	2300      	movs	r3, #0
 80033ec:	77fb      	strb	r3, [r7, #31]
 80033ee:	e037      	b.n	8003460 <UART_SetConfig+0x20c>
 80033f0:	2302      	movs	r3, #2
 80033f2:	77fb      	strb	r3, [r7, #31]
 80033f4:	e034      	b.n	8003460 <UART_SetConfig+0x20c>
 80033f6:	2304      	movs	r3, #4
 80033f8:	77fb      	strb	r3, [r7, #31]
 80033fa:	e031      	b.n	8003460 <UART_SetConfig+0x20c>
 80033fc:	2308      	movs	r3, #8
 80033fe:	77fb      	strb	r3, [r7, #31]
 8003400:	e02e      	b.n	8003460 <UART_SetConfig+0x20c>
 8003402:	2310      	movs	r3, #16
 8003404:	77fb      	strb	r3, [r7, #31]
 8003406:	bf00      	nop
 8003408:	e02a      	b.n	8003460 <UART_SetConfig+0x20c>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a4c      	ldr	r2, [pc, #304]	; (8003540 <UART_SetConfig+0x2ec>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d123      	bne.n	800345c <UART_SetConfig+0x208>
 8003414:	4b46      	ldr	r3, [pc, #280]	; (8003530 <UART_SetConfig+0x2dc>)
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800341c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003420:	d012      	beq.n	8003448 <UART_SetConfig+0x1f4>
 8003422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003426:	d802      	bhi.n	800342e <UART_SetConfig+0x1da>
 8003428:	2b00      	cmp	r3, #0
 800342a:	d007      	beq.n	800343c <UART_SetConfig+0x1e8>
 800342c:	e012      	b.n	8003454 <UART_SetConfig+0x200>
 800342e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003432:	d00c      	beq.n	800344e <UART_SetConfig+0x1fa>
 8003434:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003438:	d003      	beq.n	8003442 <UART_SetConfig+0x1ee>
 800343a:	e00b      	b.n	8003454 <UART_SetConfig+0x200>
 800343c:	2300      	movs	r3, #0
 800343e:	77fb      	strb	r3, [r7, #31]
 8003440:	e00e      	b.n	8003460 <UART_SetConfig+0x20c>
 8003442:	2302      	movs	r3, #2
 8003444:	77fb      	strb	r3, [r7, #31]
 8003446:	e00b      	b.n	8003460 <UART_SetConfig+0x20c>
 8003448:	2304      	movs	r3, #4
 800344a:	77fb      	strb	r3, [r7, #31]
 800344c:	e008      	b.n	8003460 <UART_SetConfig+0x20c>
 800344e:	2308      	movs	r3, #8
 8003450:	77fb      	strb	r3, [r7, #31]
 8003452:	e005      	b.n	8003460 <UART_SetConfig+0x20c>
 8003454:	2310      	movs	r3, #16
 8003456:	77fb      	strb	r3, [r7, #31]
 8003458:	bf00      	nop
 800345a:	e001      	b.n	8003460 <UART_SetConfig+0x20c>
 800345c:	2310      	movs	r3, #16
 800345e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003468:	d16e      	bne.n	8003548 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800346a:	7ffb      	ldrb	r3, [r7, #31]
 800346c:	2b08      	cmp	r3, #8
 800346e:	d828      	bhi.n	80034c2 <UART_SetConfig+0x26e>
 8003470:	a201      	add	r2, pc, #4	; (adr r2, 8003478 <UART_SetConfig+0x224>)
 8003472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003476:	bf00      	nop
 8003478:	0800349d 	.word	0x0800349d
 800347c:	080034a5 	.word	0x080034a5
 8003480:	080034ad 	.word	0x080034ad
 8003484:	080034c3 	.word	0x080034c3
 8003488:	080034b3 	.word	0x080034b3
 800348c:	080034c3 	.word	0x080034c3
 8003490:	080034c3 	.word	0x080034c3
 8003494:	080034c3 	.word	0x080034c3
 8003498:	080034bb 	.word	0x080034bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800349c:	f7ff fc2a 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 80034a0:	61b8      	str	r0, [r7, #24]
        break;
 80034a2:	e013      	b.n	80034cc <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034a4:	f7ff fc48 	bl	8002d38 <HAL_RCC_GetPCLK2Freq>
 80034a8:	61b8      	str	r0, [r7, #24]
        break;
 80034aa:	e00f      	b.n	80034cc <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034ac:	4b25      	ldr	r3, [pc, #148]	; (8003544 <UART_SetConfig+0x2f0>)
 80034ae:	61bb      	str	r3, [r7, #24]
        break;
 80034b0:	e00c      	b.n	80034cc <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034b2:	f7ff fba9 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 80034b6:	61b8      	str	r0, [r7, #24]
        break;
 80034b8:	e008      	b.n	80034cc <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034be:	61bb      	str	r3, [r7, #24]
        break;
 80034c0:	e004      	b.n	80034cc <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	77bb      	strb	r3, [r7, #30]
        break;
 80034ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 8086 	beq.w	80035e0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	005a      	lsls	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	085b      	lsrs	r3, r3, #1
 80034de:	441a      	add	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	2b0f      	cmp	r3, #15
 80034f0:	d916      	bls.n	8003520 <UART_SetConfig+0x2cc>
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f8:	d212      	bcs.n	8003520 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	f023 030f 	bic.w	r3, r3, #15
 8003502:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	085b      	lsrs	r3, r3, #1
 8003508:	b29b      	uxth	r3, r3
 800350a:	f003 0307 	and.w	r3, r3, #7
 800350e:	b29a      	uxth	r2, r3
 8003510:	89fb      	ldrh	r3, [r7, #14]
 8003512:	4313      	orrs	r3, r2
 8003514:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	89fa      	ldrh	r2, [r7, #14]
 800351c:	60da      	str	r2, [r3, #12]
 800351e:	e05f      	b.n	80035e0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	77bb      	strb	r3, [r7, #30]
 8003524:	e05c      	b.n	80035e0 <UART_SetConfig+0x38c>
 8003526:	bf00      	nop
 8003528:	efff69f3 	.word	0xefff69f3
 800352c:	40013800 	.word	0x40013800
 8003530:	40021000 	.word	0x40021000
 8003534:	40004400 	.word	0x40004400
 8003538:	40004800 	.word	0x40004800
 800353c:	40004c00 	.word	0x40004c00
 8003540:	40005000 	.word	0x40005000
 8003544:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8003548:	7ffb      	ldrb	r3, [r7, #31]
 800354a:	2b08      	cmp	r3, #8
 800354c:	d827      	bhi.n	800359e <UART_SetConfig+0x34a>
 800354e:	a201      	add	r2, pc, #4	; (adr r2, 8003554 <UART_SetConfig+0x300>)
 8003550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003554:	08003579 	.word	0x08003579
 8003558:	08003581 	.word	0x08003581
 800355c:	08003589 	.word	0x08003589
 8003560:	0800359f 	.word	0x0800359f
 8003564:	0800358f 	.word	0x0800358f
 8003568:	0800359f 	.word	0x0800359f
 800356c:	0800359f 	.word	0x0800359f
 8003570:	0800359f 	.word	0x0800359f
 8003574:	08003597 	.word	0x08003597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003578:	f7ff fbbc 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 800357c:	61b8      	str	r0, [r7, #24]
        break;
 800357e:	e013      	b.n	80035a8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003580:	f7ff fbda 	bl	8002d38 <HAL_RCC_GetPCLK2Freq>
 8003584:	61b8      	str	r0, [r7, #24]
        break;
 8003586:	e00f      	b.n	80035a8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003588:	4b1b      	ldr	r3, [pc, #108]	; (80035f8 <UART_SetConfig+0x3a4>)
 800358a:	61bb      	str	r3, [r7, #24]
        break;
 800358c:	e00c      	b.n	80035a8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800358e:	f7ff fb3b 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 8003592:	61b8      	str	r0, [r7, #24]
        break;
 8003594:	e008      	b.n	80035a8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800359a:	61bb      	str	r3, [r7, #24]
        break;
 800359c:	e004      	b.n	80035a8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	77bb      	strb	r3, [r7, #30]
        break;
 80035a6:	bf00      	nop
    }

    if (pclk != 0U)
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d018      	beq.n	80035e0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	085a      	lsrs	r2, r3, #1
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	441a      	add	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	2b0f      	cmp	r3, #15
 80035c8:	d908      	bls.n	80035dc <UART_SetConfig+0x388>
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d0:	d204      	bcs.n	80035dc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	60da      	str	r2, [r3, #12]
 80035da:	e001      	b.n	80035e0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80035ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3720      	adds	r7, #32
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	007a1200 	.word	0x007a1200

080035fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00a      	beq.n	800366a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d01a      	beq.n	8003712 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036fa:	d10a      	bne.n	8003712 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	605a      	str	r2, [r3, #4]
  }
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af02      	add	r7, sp, #8
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003750:	f7fd ff12 	bl	8001578 <HAL_GetTick>
 8003754:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	2b08      	cmp	r3, #8
 8003762:	d10e      	bne.n	8003782 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003764:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f82d 	bl	80037d2 <UART_WaitOnFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e023      	b.n	80037ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b04      	cmp	r3, #4
 800378e:	d10e      	bne.n	80037ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003790:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f817 	bl	80037d2 <UART_WaitOnFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e00d      	b.n	80037ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2220      	movs	r2, #32
 80037b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b084      	sub	sp, #16
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	60f8      	str	r0, [r7, #12]
 80037da:	60b9      	str	r1, [r7, #8]
 80037dc:	603b      	str	r3, [r7, #0]
 80037de:	4613      	mov	r3, r2
 80037e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037e2:	e05e      	b.n	80038a2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ea:	d05a      	beq.n	80038a2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ec:	f7fd fec4 	bl	8001578 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d302      	bcc.n	8003802 <UART_WaitOnFlagUntilTimeout+0x30>
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d11b      	bne.n	800383a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003810:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0201 	bic.w	r2, r2, #1
 8003820:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2220      	movs	r2, #32
 8003826:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e043      	b.n	80038c2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d02c      	beq.n	80038a2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003856:	d124      	bne.n	80038a2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003860:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003870:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0201 	bic.w	r2, r2, #1
 8003880:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2220      	movs	r2, #32
 8003886:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2220      	movs	r2, #32
 800388c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2220      	movs	r2, #32
 8003892:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e00f      	b.n	80038c2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69da      	ldr	r2, [r3, #28]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4013      	ands	r3, r2
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	bf0c      	ite	eq
 80038b2:	2301      	moveq	r3, #1
 80038b4:	2300      	movne	r3, #0
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	461a      	mov	r2, r3
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d091      	beq.n	80037e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <__errno>:
 80038cc:	4b01      	ldr	r3, [pc, #4]	; (80038d4 <__errno+0x8>)
 80038ce:	6818      	ldr	r0, [r3, #0]
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	20000024 	.word	0x20000024

080038d8 <__libc_init_array>:
 80038d8:	b570      	push	{r4, r5, r6, lr}
 80038da:	4e0d      	ldr	r6, [pc, #52]	; (8003910 <__libc_init_array+0x38>)
 80038dc:	4c0d      	ldr	r4, [pc, #52]	; (8003914 <__libc_init_array+0x3c>)
 80038de:	1ba4      	subs	r4, r4, r6
 80038e0:	10a4      	asrs	r4, r4, #2
 80038e2:	2500      	movs	r5, #0
 80038e4:	42a5      	cmp	r5, r4
 80038e6:	d109      	bne.n	80038fc <__libc_init_array+0x24>
 80038e8:	4e0b      	ldr	r6, [pc, #44]	; (8003918 <__libc_init_array+0x40>)
 80038ea:	4c0c      	ldr	r4, [pc, #48]	; (800391c <__libc_init_array+0x44>)
 80038ec:	f000 ff04 	bl	80046f8 <_init>
 80038f0:	1ba4      	subs	r4, r4, r6
 80038f2:	10a4      	asrs	r4, r4, #2
 80038f4:	2500      	movs	r5, #0
 80038f6:	42a5      	cmp	r5, r4
 80038f8:	d105      	bne.n	8003906 <__libc_init_array+0x2e>
 80038fa:	bd70      	pop	{r4, r5, r6, pc}
 80038fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003900:	4798      	blx	r3
 8003902:	3501      	adds	r5, #1
 8003904:	e7ee      	b.n	80038e4 <__libc_init_array+0xc>
 8003906:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800390a:	4798      	blx	r3
 800390c:	3501      	adds	r5, #1
 800390e:	e7f2      	b.n	80038f6 <__libc_init_array+0x1e>
 8003910:	08004854 	.word	0x08004854
 8003914:	08004854 	.word	0x08004854
 8003918:	08004854 	.word	0x08004854
 800391c:	08004858 	.word	0x08004858

08003920 <memset>:
 8003920:	4402      	add	r2, r0
 8003922:	4603      	mov	r3, r0
 8003924:	4293      	cmp	r3, r2
 8003926:	d100      	bne.n	800392a <memset+0xa>
 8003928:	4770      	bx	lr
 800392a:	f803 1b01 	strb.w	r1, [r3], #1
 800392e:	e7f9      	b.n	8003924 <memset+0x4>

08003930 <iprintf>:
 8003930:	b40f      	push	{r0, r1, r2, r3}
 8003932:	4b0a      	ldr	r3, [pc, #40]	; (800395c <iprintf+0x2c>)
 8003934:	b513      	push	{r0, r1, r4, lr}
 8003936:	681c      	ldr	r4, [r3, #0]
 8003938:	b124      	cbz	r4, 8003944 <iprintf+0x14>
 800393a:	69a3      	ldr	r3, [r4, #24]
 800393c:	b913      	cbnz	r3, 8003944 <iprintf+0x14>
 800393e:	4620      	mov	r0, r4
 8003940:	f000 f84e 	bl	80039e0 <__sinit>
 8003944:	ab05      	add	r3, sp, #20
 8003946:	9a04      	ldr	r2, [sp, #16]
 8003948:	68a1      	ldr	r1, [r4, #8]
 800394a:	9301      	str	r3, [sp, #4]
 800394c:	4620      	mov	r0, r4
 800394e:	f000 f955 	bl	8003bfc <_vfiprintf_r>
 8003952:	b002      	add	sp, #8
 8003954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003958:	b004      	add	sp, #16
 800395a:	4770      	bx	lr
 800395c:	20000024 	.word	0x20000024

08003960 <std>:
 8003960:	2300      	movs	r3, #0
 8003962:	b510      	push	{r4, lr}
 8003964:	4604      	mov	r4, r0
 8003966:	e9c0 3300 	strd	r3, r3, [r0]
 800396a:	6083      	str	r3, [r0, #8]
 800396c:	8181      	strh	r1, [r0, #12]
 800396e:	6643      	str	r3, [r0, #100]	; 0x64
 8003970:	81c2      	strh	r2, [r0, #14]
 8003972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003976:	6183      	str	r3, [r0, #24]
 8003978:	4619      	mov	r1, r3
 800397a:	2208      	movs	r2, #8
 800397c:	305c      	adds	r0, #92	; 0x5c
 800397e:	f7ff ffcf 	bl	8003920 <memset>
 8003982:	4b05      	ldr	r3, [pc, #20]	; (8003998 <std+0x38>)
 8003984:	6263      	str	r3, [r4, #36]	; 0x24
 8003986:	4b05      	ldr	r3, [pc, #20]	; (800399c <std+0x3c>)
 8003988:	62a3      	str	r3, [r4, #40]	; 0x28
 800398a:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <std+0x40>)
 800398c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800398e:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <std+0x44>)
 8003990:	6224      	str	r4, [r4, #32]
 8003992:	6323      	str	r3, [r4, #48]	; 0x30
 8003994:	bd10      	pop	{r4, pc}
 8003996:	bf00      	nop
 8003998:	08004159 	.word	0x08004159
 800399c:	0800417b 	.word	0x0800417b
 80039a0:	080041b3 	.word	0x080041b3
 80039a4:	080041d7 	.word	0x080041d7

080039a8 <_cleanup_r>:
 80039a8:	4901      	ldr	r1, [pc, #4]	; (80039b0 <_cleanup_r+0x8>)
 80039aa:	f000 b885 	b.w	8003ab8 <_fwalk_reent>
 80039ae:	bf00      	nop
 80039b0:	080044b1 	.word	0x080044b1

080039b4 <__sfmoreglue>:
 80039b4:	b570      	push	{r4, r5, r6, lr}
 80039b6:	1e4a      	subs	r2, r1, #1
 80039b8:	2568      	movs	r5, #104	; 0x68
 80039ba:	4355      	muls	r5, r2
 80039bc:	460e      	mov	r6, r1
 80039be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80039c2:	f000 f897 	bl	8003af4 <_malloc_r>
 80039c6:	4604      	mov	r4, r0
 80039c8:	b140      	cbz	r0, 80039dc <__sfmoreglue+0x28>
 80039ca:	2100      	movs	r1, #0
 80039cc:	e9c0 1600 	strd	r1, r6, [r0]
 80039d0:	300c      	adds	r0, #12
 80039d2:	60a0      	str	r0, [r4, #8]
 80039d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80039d8:	f7ff ffa2 	bl	8003920 <memset>
 80039dc:	4620      	mov	r0, r4
 80039de:	bd70      	pop	{r4, r5, r6, pc}

080039e0 <__sinit>:
 80039e0:	6983      	ldr	r3, [r0, #24]
 80039e2:	b510      	push	{r4, lr}
 80039e4:	4604      	mov	r4, r0
 80039e6:	bb33      	cbnz	r3, 8003a36 <__sinit+0x56>
 80039e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80039ec:	6503      	str	r3, [r0, #80]	; 0x50
 80039ee:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <__sinit+0x58>)
 80039f0:	4a12      	ldr	r2, [pc, #72]	; (8003a3c <__sinit+0x5c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6282      	str	r2, [r0, #40]	; 0x28
 80039f6:	4298      	cmp	r0, r3
 80039f8:	bf04      	itt	eq
 80039fa:	2301      	moveq	r3, #1
 80039fc:	6183      	streq	r3, [r0, #24]
 80039fe:	f000 f81f 	bl	8003a40 <__sfp>
 8003a02:	6060      	str	r0, [r4, #4]
 8003a04:	4620      	mov	r0, r4
 8003a06:	f000 f81b 	bl	8003a40 <__sfp>
 8003a0a:	60a0      	str	r0, [r4, #8]
 8003a0c:	4620      	mov	r0, r4
 8003a0e:	f000 f817 	bl	8003a40 <__sfp>
 8003a12:	2200      	movs	r2, #0
 8003a14:	60e0      	str	r0, [r4, #12]
 8003a16:	2104      	movs	r1, #4
 8003a18:	6860      	ldr	r0, [r4, #4]
 8003a1a:	f7ff ffa1 	bl	8003960 <std>
 8003a1e:	2201      	movs	r2, #1
 8003a20:	2109      	movs	r1, #9
 8003a22:	68a0      	ldr	r0, [r4, #8]
 8003a24:	f7ff ff9c 	bl	8003960 <std>
 8003a28:	2202      	movs	r2, #2
 8003a2a:	2112      	movs	r1, #18
 8003a2c:	68e0      	ldr	r0, [r4, #12]
 8003a2e:	f7ff ff97 	bl	8003960 <std>
 8003a32:	2301      	movs	r3, #1
 8003a34:	61a3      	str	r3, [r4, #24]
 8003a36:	bd10      	pop	{r4, pc}
 8003a38:	080047bc 	.word	0x080047bc
 8003a3c:	080039a9 	.word	0x080039a9

08003a40 <__sfp>:
 8003a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a42:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <__sfp+0x70>)
 8003a44:	681e      	ldr	r6, [r3, #0]
 8003a46:	69b3      	ldr	r3, [r6, #24]
 8003a48:	4607      	mov	r7, r0
 8003a4a:	b913      	cbnz	r3, 8003a52 <__sfp+0x12>
 8003a4c:	4630      	mov	r0, r6
 8003a4e:	f7ff ffc7 	bl	80039e0 <__sinit>
 8003a52:	3648      	adds	r6, #72	; 0x48
 8003a54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	d503      	bpl.n	8003a64 <__sfp+0x24>
 8003a5c:	6833      	ldr	r3, [r6, #0]
 8003a5e:	b133      	cbz	r3, 8003a6e <__sfp+0x2e>
 8003a60:	6836      	ldr	r6, [r6, #0]
 8003a62:	e7f7      	b.n	8003a54 <__sfp+0x14>
 8003a64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a68:	b16d      	cbz	r5, 8003a86 <__sfp+0x46>
 8003a6a:	3468      	adds	r4, #104	; 0x68
 8003a6c:	e7f4      	b.n	8003a58 <__sfp+0x18>
 8003a6e:	2104      	movs	r1, #4
 8003a70:	4638      	mov	r0, r7
 8003a72:	f7ff ff9f 	bl	80039b4 <__sfmoreglue>
 8003a76:	6030      	str	r0, [r6, #0]
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	d1f1      	bne.n	8003a60 <__sfp+0x20>
 8003a7c:	230c      	movs	r3, #12
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	4604      	mov	r4, r0
 8003a82:	4620      	mov	r0, r4
 8003a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a86:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <__sfp+0x74>)
 8003a88:	6665      	str	r5, [r4, #100]	; 0x64
 8003a8a:	e9c4 5500 	strd	r5, r5, [r4]
 8003a8e:	60a5      	str	r5, [r4, #8]
 8003a90:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003a94:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003a98:	2208      	movs	r2, #8
 8003a9a:	4629      	mov	r1, r5
 8003a9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003aa0:	f7ff ff3e 	bl	8003920 <memset>
 8003aa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003aa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003aac:	e7e9      	b.n	8003a82 <__sfp+0x42>
 8003aae:	bf00      	nop
 8003ab0:	080047bc 	.word	0x080047bc
 8003ab4:	ffff0001 	.word	0xffff0001

08003ab8 <_fwalk_reent>:
 8003ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003abc:	4680      	mov	r8, r0
 8003abe:	4689      	mov	r9, r1
 8003ac0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ac4:	2600      	movs	r6, #0
 8003ac6:	b914      	cbnz	r4, 8003ace <_fwalk_reent+0x16>
 8003ac8:	4630      	mov	r0, r6
 8003aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ace:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003ad2:	3f01      	subs	r7, #1
 8003ad4:	d501      	bpl.n	8003ada <_fwalk_reent+0x22>
 8003ad6:	6824      	ldr	r4, [r4, #0]
 8003ad8:	e7f5      	b.n	8003ac6 <_fwalk_reent+0xe>
 8003ada:	89ab      	ldrh	r3, [r5, #12]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d907      	bls.n	8003af0 <_fwalk_reent+0x38>
 8003ae0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	d003      	beq.n	8003af0 <_fwalk_reent+0x38>
 8003ae8:	4629      	mov	r1, r5
 8003aea:	4640      	mov	r0, r8
 8003aec:	47c8      	blx	r9
 8003aee:	4306      	orrs	r6, r0
 8003af0:	3568      	adds	r5, #104	; 0x68
 8003af2:	e7ee      	b.n	8003ad2 <_fwalk_reent+0x1a>

08003af4 <_malloc_r>:
 8003af4:	b570      	push	{r4, r5, r6, lr}
 8003af6:	1ccd      	adds	r5, r1, #3
 8003af8:	f025 0503 	bic.w	r5, r5, #3
 8003afc:	3508      	adds	r5, #8
 8003afe:	2d0c      	cmp	r5, #12
 8003b00:	bf38      	it	cc
 8003b02:	250c      	movcc	r5, #12
 8003b04:	2d00      	cmp	r5, #0
 8003b06:	4606      	mov	r6, r0
 8003b08:	db01      	blt.n	8003b0e <_malloc_r+0x1a>
 8003b0a:	42a9      	cmp	r1, r5
 8003b0c:	d903      	bls.n	8003b16 <_malloc_r+0x22>
 8003b0e:	230c      	movs	r3, #12
 8003b10:	6033      	str	r3, [r6, #0]
 8003b12:	2000      	movs	r0, #0
 8003b14:	bd70      	pop	{r4, r5, r6, pc}
 8003b16:	f000 fd6b 	bl	80045f0 <__malloc_lock>
 8003b1a:	4a21      	ldr	r2, [pc, #132]	; (8003ba0 <_malloc_r+0xac>)
 8003b1c:	6814      	ldr	r4, [r2, #0]
 8003b1e:	4621      	mov	r1, r4
 8003b20:	b991      	cbnz	r1, 8003b48 <_malloc_r+0x54>
 8003b22:	4c20      	ldr	r4, [pc, #128]	; (8003ba4 <_malloc_r+0xb0>)
 8003b24:	6823      	ldr	r3, [r4, #0]
 8003b26:	b91b      	cbnz	r3, 8003b30 <_malloc_r+0x3c>
 8003b28:	4630      	mov	r0, r6
 8003b2a:	f000 fb05 	bl	8004138 <_sbrk_r>
 8003b2e:	6020      	str	r0, [r4, #0]
 8003b30:	4629      	mov	r1, r5
 8003b32:	4630      	mov	r0, r6
 8003b34:	f000 fb00 	bl	8004138 <_sbrk_r>
 8003b38:	1c43      	adds	r3, r0, #1
 8003b3a:	d124      	bne.n	8003b86 <_malloc_r+0x92>
 8003b3c:	230c      	movs	r3, #12
 8003b3e:	6033      	str	r3, [r6, #0]
 8003b40:	4630      	mov	r0, r6
 8003b42:	f000 fd56 	bl	80045f2 <__malloc_unlock>
 8003b46:	e7e4      	b.n	8003b12 <_malloc_r+0x1e>
 8003b48:	680b      	ldr	r3, [r1, #0]
 8003b4a:	1b5b      	subs	r3, r3, r5
 8003b4c:	d418      	bmi.n	8003b80 <_malloc_r+0x8c>
 8003b4e:	2b0b      	cmp	r3, #11
 8003b50:	d90f      	bls.n	8003b72 <_malloc_r+0x7e>
 8003b52:	600b      	str	r3, [r1, #0]
 8003b54:	50cd      	str	r5, [r1, r3]
 8003b56:	18cc      	adds	r4, r1, r3
 8003b58:	4630      	mov	r0, r6
 8003b5a:	f000 fd4a 	bl	80045f2 <__malloc_unlock>
 8003b5e:	f104 000b 	add.w	r0, r4, #11
 8003b62:	1d23      	adds	r3, r4, #4
 8003b64:	f020 0007 	bic.w	r0, r0, #7
 8003b68:	1ac3      	subs	r3, r0, r3
 8003b6a:	d0d3      	beq.n	8003b14 <_malloc_r+0x20>
 8003b6c:	425a      	negs	r2, r3
 8003b6e:	50e2      	str	r2, [r4, r3]
 8003b70:	e7d0      	b.n	8003b14 <_malloc_r+0x20>
 8003b72:	428c      	cmp	r4, r1
 8003b74:	684b      	ldr	r3, [r1, #4]
 8003b76:	bf16      	itet	ne
 8003b78:	6063      	strne	r3, [r4, #4]
 8003b7a:	6013      	streq	r3, [r2, #0]
 8003b7c:	460c      	movne	r4, r1
 8003b7e:	e7eb      	b.n	8003b58 <_malloc_r+0x64>
 8003b80:	460c      	mov	r4, r1
 8003b82:	6849      	ldr	r1, [r1, #4]
 8003b84:	e7cc      	b.n	8003b20 <_malloc_r+0x2c>
 8003b86:	1cc4      	adds	r4, r0, #3
 8003b88:	f024 0403 	bic.w	r4, r4, #3
 8003b8c:	42a0      	cmp	r0, r4
 8003b8e:	d005      	beq.n	8003b9c <_malloc_r+0xa8>
 8003b90:	1a21      	subs	r1, r4, r0
 8003b92:	4630      	mov	r0, r6
 8003b94:	f000 fad0 	bl	8004138 <_sbrk_r>
 8003b98:	3001      	adds	r0, #1
 8003b9a:	d0cf      	beq.n	8003b3c <_malloc_r+0x48>
 8003b9c:	6025      	str	r5, [r4, #0]
 8003b9e:	e7db      	b.n	8003b58 <_malloc_r+0x64>
 8003ba0:	200000b8 	.word	0x200000b8
 8003ba4:	200000bc 	.word	0x200000bc

08003ba8 <__sfputc_r>:
 8003ba8:	6893      	ldr	r3, [r2, #8]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	b410      	push	{r4}
 8003bb0:	6093      	str	r3, [r2, #8]
 8003bb2:	da08      	bge.n	8003bc6 <__sfputc_r+0x1e>
 8003bb4:	6994      	ldr	r4, [r2, #24]
 8003bb6:	42a3      	cmp	r3, r4
 8003bb8:	db01      	blt.n	8003bbe <__sfputc_r+0x16>
 8003bba:	290a      	cmp	r1, #10
 8003bbc:	d103      	bne.n	8003bc6 <__sfputc_r+0x1e>
 8003bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bc2:	f000 bb0d 	b.w	80041e0 <__swbuf_r>
 8003bc6:	6813      	ldr	r3, [r2, #0]
 8003bc8:	1c58      	adds	r0, r3, #1
 8003bca:	6010      	str	r0, [r2, #0]
 8003bcc:	7019      	strb	r1, [r3, #0]
 8003bce:	4608      	mov	r0, r1
 8003bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <__sfputs_r>:
 8003bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd8:	4606      	mov	r6, r0
 8003bda:	460f      	mov	r7, r1
 8003bdc:	4614      	mov	r4, r2
 8003bde:	18d5      	adds	r5, r2, r3
 8003be0:	42ac      	cmp	r4, r5
 8003be2:	d101      	bne.n	8003be8 <__sfputs_r+0x12>
 8003be4:	2000      	movs	r0, #0
 8003be6:	e007      	b.n	8003bf8 <__sfputs_r+0x22>
 8003be8:	463a      	mov	r2, r7
 8003bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bee:	4630      	mov	r0, r6
 8003bf0:	f7ff ffda 	bl	8003ba8 <__sfputc_r>
 8003bf4:	1c43      	adds	r3, r0, #1
 8003bf6:	d1f3      	bne.n	8003be0 <__sfputs_r+0xa>
 8003bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003bfc <_vfiprintf_r>:
 8003bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c00:	460c      	mov	r4, r1
 8003c02:	b09d      	sub	sp, #116	; 0x74
 8003c04:	4617      	mov	r7, r2
 8003c06:	461d      	mov	r5, r3
 8003c08:	4606      	mov	r6, r0
 8003c0a:	b118      	cbz	r0, 8003c14 <_vfiprintf_r+0x18>
 8003c0c:	6983      	ldr	r3, [r0, #24]
 8003c0e:	b90b      	cbnz	r3, 8003c14 <_vfiprintf_r+0x18>
 8003c10:	f7ff fee6 	bl	80039e0 <__sinit>
 8003c14:	4b7c      	ldr	r3, [pc, #496]	; (8003e08 <_vfiprintf_r+0x20c>)
 8003c16:	429c      	cmp	r4, r3
 8003c18:	d158      	bne.n	8003ccc <_vfiprintf_r+0xd0>
 8003c1a:	6874      	ldr	r4, [r6, #4]
 8003c1c:	89a3      	ldrh	r3, [r4, #12]
 8003c1e:	0718      	lsls	r0, r3, #28
 8003c20:	d55e      	bpl.n	8003ce0 <_vfiprintf_r+0xe4>
 8003c22:	6923      	ldr	r3, [r4, #16]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d05b      	beq.n	8003ce0 <_vfiprintf_r+0xe4>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c2c:	2320      	movs	r3, #32
 8003c2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c32:	2330      	movs	r3, #48	; 0x30
 8003c34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c38:	9503      	str	r5, [sp, #12]
 8003c3a:	f04f 0b01 	mov.w	fp, #1
 8003c3e:	46b8      	mov	r8, r7
 8003c40:	4645      	mov	r5, r8
 8003c42:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003c46:	b10b      	cbz	r3, 8003c4c <_vfiprintf_r+0x50>
 8003c48:	2b25      	cmp	r3, #37	; 0x25
 8003c4a:	d154      	bne.n	8003cf6 <_vfiprintf_r+0xfa>
 8003c4c:	ebb8 0a07 	subs.w	sl, r8, r7
 8003c50:	d00b      	beq.n	8003c6a <_vfiprintf_r+0x6e>
 8003c52:	4653      	mov	r3, sl
 8003c54:	463a      	mov	r2, r7
 8003c56:	4621      	mov	r1, r4
 8003c58:	4630      	mov	r0, r6
 8003c5a:	f7ff ffbc 	bl	8003bd6 <__sfputs_r>
 8003c5e:	3001      	adds	r0, #1
 8003c60:	f000 80c2 	beq.w	8003de8 <_vfiprintf_r+0x1ec>
 8003c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c66:	4453      	add	r3, sl
 8003c68:	9309      	str	r3, [sp, #36]	; 0x24
 8003c6a:	f898 3000 	ldrb.w	r3, [r8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 80ba 	beq.w	8003de8 <_vfiprintf_r+0x1ec>
 8003c74:	2300      	movs	r3, #0
 8003c76:	f04f 32ff 	mov.w	r2, #4294967295
 8003c7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c7e:	9304      	str	r3, [sp, #16]
 8003c80:	9307      	str	r3, [sp, #28]
 8003c82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c86:	931a      	str	r3, [sp, #104]	; 0x68
 8003c88:	46a8      	mov	r8, r5
 8003c8a:	2205      	movs	r2, #5
 8003c8c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003c90:	485e      	ldr	r0, [pc, #376]	; (8003e0c <_vfiprintf_r+0x210>)
 8003c92:	f7fc faa5 	bl	80001e0 <memchr>
 8003c96:	9b04      	ldr	r3, [sp, #16]
 8003c98:	bb78      	cbnz	r0, 8003cfa <_vfiprintf_r+0xfe>
 8003c9a:	06d9      	lsls	r1, r3, #27
 8003c9c:	bf44      	itt	mi
 8003c9e:	2220      	movmi	r2, #32
 8003ca0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ca4:	071a      	lsls	r2, r3, #28
 8003ca6:	bf44      	itt	mi
 8003ca8:	222b      	movmi	r2, #43	; 0x2b
 8003caa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003cae:	782a      	ldrb	r2, [r5, #0]
 8003cb0:	2a2a      	cmp	r2, #42	; 0x2a
 8003cb2:	d02a      	beq.n	8003d0a <_vfiprintf_r+0x10e>
 8003cb4:	9a07      	ldr	r2, [sp, #28]
 8003cb6:	46a8      	mov	r8, r5
 8003cb8:	2000      	movs	r0, #0
 8003cba:	250a      	movs	r5, #10
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cc2:	3b30      	subs	r3, #48	; 0x30
 8003cc4:	2b09      	cmp	r3, #9
 8003cc6:	d969      	bls.n	8003d9c <_vfiprintf_r+0x1a0>
 8003cc8:	b360      	cbz	r0, 8003d24 <_vfiprintf_r+0x128>
 8003cca:	e024      	b.n	8003d16 <_vfiprintf_r+0x11a>
 8003ccc:	4b50      	ldr	r3, [pc, #320]	; (8003e10 <_vfiprintf_r+0x214>)
 8003cce:	429c      	cmp	r4, r3
 8003cd0:	d101      	bne.n	8003cd6 <_vfiprintf_r+0xda>
 8003cd2:	68b4      	ldr	r4, [r6, #8]
 8003cd4:	e7a2      	b.n	8003c1c <_vfiprintf_r+0x20>
 8003cd6:	4b4f      	ldr	r3, [pc, #316]	; (8003e14 <_vfiprintf_r+0x218>)
 8003cd8:	429c      	cmp	r4, r3
 8003cda:	bf08      	it	eq
 8003cdc:	68f4      	ldreq	r4, [r6, #12]
 8003cde:	e79d      	b.n	8003c1c <_vfiprintf_r+0x20>
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	4630      	mov	r0, r6
 8003ce4:	f000 fae0 	bl	80042a8 <__swsetup_r>
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	d09d      	beq.n	8003c28 <_vfiprintf_r+0x2c>
 8003cec:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf0:	b01d      	add	sp, #116	; 0x74
 8003cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cf6:	46a8      	mov	r8, r5
 8003cf8:	e7a2      	b.n	8003c40 <_vfiprintf_r+0x44>
 8003cfa:	4a44      	ldr	r2, [pc, #272]	; (8003e0c <_vfiprintf_r+0x210>)
 8003cfc:	1a80      	subs	r0, r0, r2
 8003cfe:	fa0b f000 	lsl.w	r0, fp, r0
 8003d02:	4318      	orrs	r0, r3
 8003d04:	9004      	str	r0, [sp, #16]
 8003d06:	4645      	mov	r5, r8
 8003d08:	e7be      	b.n	8003c88 <_vfiprintf_r+0x8c>
 8003d0a:	9a03      	ldr	r2, [sp, #12]
 8003d0c:	1d11      	adds	r1, r2, #4
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	9103      	str	r1, [sp, #12]
 8003d12:	2a00      	cmp	r2, #0
 8003d14:	db01      	blt.n	8003d1a <_vfiprintf_r+0x11e>
 8003d16:	9207      	str	r2, [sp, #28]
 8003d18:	e004      	b.n	8003d24 <_vfiprintf_r+0x128>
 8003d1a:	4252      	negs	r2, r2
 8003d1c:	f043 0302 	orr.w	r3, r3, #2
 8003d20:	9207      	str	r2, [sp, #28]
 8003d22:	9304      	str	r3, [sp, #16]
 8003d24:	f898 3000 	ldrb.w	r3, [r8]
 8003d28:	2b2e      	cmp	r3, #46	; 0x2e
 8003d2a:	d10e      	bne.n	8003d4a <_vfiprintf_r+0x14e>
 8003d2c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003d30:	2b2a      	cmp	r3, #42	; 0x2a
 8003d32:	d138      	bne.n	8003da6 <_vfiprintf_r+0x1aa>
 8003d34:	9b03      	ldr	r3, [sp, #12]
 8003d36:	1d1a      	adds	r2, r3, #4
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	9203      	str	r2, [sp, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bfb8      	it	lt
 8003d40:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d44:	f108 0802 	add.w	r8, r8, #2
 8003d48:	9305      	str	r3, [sp, #20]
 8003d4a:	4d33      	ldr	r5, [pc, #204]	; (8003e18 <_vfiprintf_r+0x21c>)
 8003d4c:	f898 1000 	ldrb.w	r1, [r8]
 8003d50:	2203      	movs	r2, #3
 8003d52:	4628      	mov	r0, r5
 8003d54:	f7fc fa44 	bl	80001e0 <memchr>
 8003d58:	b140      	cbz	r0, 8003d6c <_vfiprintf_r+0x170>
 8003d5a:	2340      	movs	r3, #64	; 0x40
 8003d5c:	1b40      	subs	r0, r0, r5
 8003d5e:	fa03 f000 	lsl.w	r0, r3, r0
 8003d62:	9b04      	ldr	r3, [sp, #16]
 8003d64:	4303      	orrs	r3, r0
 8003d66:	f108 0801 	add.w	r8, r8, #1
 8003d6a:	9304      	str	r3, [sp, #16]
 8003d6c:	f898 1000 	ldrb.w	r1, [r8]
 8003d70:	482a      	ldr	r0, [pc, #168]	; (8003e1c <_vfiprintf_r+0x220>)
 8003d72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d76:	2206      	movs	r2, #6
 8003d78:	f108 0701 	add.w	r7, r8, #1
 8003d7c:	f7fc fa30 	bl	80001e0 <memchr>
 8003d80:	2800      	cmp	r0, #0
 8003d82:	d037      	beq.n	8003df4 <_vfiprintf_r+0x1f8>
 8003d84:	4b26      	ldr	r3, [pc, #152]	; (8003e20 <_vfiprintf_r+0x224>)
 8003d86:	bb1b      	cbnz	r3, 8003dd0 <_vfiprintf_r+0x1d4>
 8003d88:	9b03      	ldr	r3, [sp, #12]
 8003d8a:	3307      	adds	r3, #7
 8003d8c:	f023 0307 	bic.w	r3, r3, #7
 8003d90:	3308      	adds	r3, #8
 8003d92:	9303      	str	r3, [sp, #12]
 8003d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d96:	444b      	add	r3, r9
 8003d98:	9309      	str	r3, [sp, #36]	; 0x24
 8003d9a:	e750      	b.n	8003c3e <_vfiprintf_r+0x42>
 8003d9c:	fb05 3202 	mla	r2, r5, r2, r3
 8003da0:	2001      	movs	r0, #1
 8003da2:	4688      	mov	r8, r1
 8003da4:	e78a      	b.n	8003cbc <_vfiprintf_r+0xc0>
 8003da6:	2300      	movs	r3, #0
 8003da8:	f108 0801 	add.w	r8, r8, #1
 8003dac:	9305      	str	r3, [sp, #20]
 8003dae:	4619      	mov	r1, r3
 8003db0:	250a      	movs	r5, #10
 8003db2:	4640      	mov	r0, r8
 8003db4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003db8:	3a30      	subs	r2, #48	; 0x30
 8003dba:	2a09      	cmp	r2, #9
 8003dbc:	d903      	bls.n	8003dc6 <_vfiprintf_r+0x1ca>
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0c3      	beq.n	8003d4a <_vfiprintf_r+0x14e>
 8003dc2:	9105      	str	r1, [sp, #20]
 8003dc4:	e7c1      	b.n	8003d4a <_vfiprintf_r+0x14e>
 8003dc6:	fb05 2101 	mla	r1, r5, r1, r2
 8003dca:	2301      	movs	r3, #1
 8003dcc:	4680      	mov	r8, r0
 8003dce:	e7f0      	b.n	8003db2 <_vfiprintf_r+0x1b6>
 8003dd0:	ab03      	add	r3, sp, #12
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	4622      	mov	r2, r4
 8003dd6:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <_vfiprintf_r+0x228>)
 8003dd8:	a904      	add	r1, sp, #16
 8003dda:	4630      	mov	r0, r6
 8003ddc:	f3af 8000 	nop.w
 8003de0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003de4:	4681      	mov	r9, r0
 8003de6:	d1d5      	bne.n	8003d94 <_vfiprintf_r+0x198>
 8003de8:	89a3      	ldrh	r3, [r4, #12]
 8003dea:	065b      	lsls	r3, r3, #25
 8003dec:	f53f af7e 	bmi.w	8003cec <_vfiprintf_r+0xf0>
 8003df0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003df2:	e77d      	b.n	8003cf0 <_vfiprintf_r+0xf4>
 8003df4:	ab03      	add	r3, sp, #12
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	4622      	mov	r2, r4
 8003dfa:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <_vfiprintf_r+0x228>)
 8003dfc:	a904      	add	r1, sp, #16
 8003dfe:	4630      	mov	r0, r6
 8003e00:	f000 f888 	bl	8003f14 <_printf_i>
 8003e04:	e7ec      	b.n	8003de0 <_vfiprintf_r+0x1e4>
 8003e06:	bf00      	nop
 8003e08:	080047e0 	.word	0x080047e0
 8003e0c:	08004820 	.word	0x08004820
 8003e10:	08004800 	.word	0x08004800
 8003e14:	080047c0 	.word	0x080047c0
 8003e18:	08004826 	.word	0x08004826
 8003e1c:	0800482a 	.word	0x0800482a
 8003e20:	00000000 	.word	0x00000000
 8003e24:	08003bd7 	.word	0x08003bd7

08003e28 <_printf_common>:
 8003e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e2c:	4691      	mov	r9, r2
 8003e2e:	461f      	mov	r7, r3
 8003e30:	688a      	ldr	r2, [r1, #8]
 8003e32:	690b      	ldr	r3, [r1, #16]
 8003e34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	bfb8      	it	lt
 8003e3c:	4613      	movlt	r3, r2
 8003e3e:	f8c9 3000 	str.w	r3, [r9]
 8003e42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e46:	4606      	mov	r6, r0
 8003e48:	460c      	mov	r4, r1
 8003e4a:	b112      	cbz	r2, 8003e52 <_printf_common+0x2a>
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	f8c9 3000 	str.w	r3, [r9]
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	0699      	lsls	r1, r3, #26
 8003e56:	bf42      	ittt	mi
 8003e58:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e5c:	3302      	addmi	r3, #2
 8003e5e:	f8c9 3000 	strmi.w	r3, [r9]
 8003e62:	6825      	ldr	r5, [r4, #0]
 8003e64:	f015 0506 	ands.w	r5, r5, #6
 8003e68:	d107      	bne.n	8003e7a <_printf_common+0x52>
 8003e6a:	f104 0a19 	add.w	sl, r4, #25
 8003e6e:	68e3      	ldr	r3, [r4, #12]
 8003e70:	f8d9 2000 	ldr.w	r2, [r9]
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	42ab      	cmp	r3, r5
 8003e78:	dc28      	bgt.n	8003ecc <_printf_common+0xa4>
 8003e7a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e7e:	6822      	ldr	r2, [r4, #0]
 8003e80:	3300      	adds	r3, #0
 8003e82:	bf18      	it	ne
 8003e84:	2301      	movne	r3, #1
 8003e86:	0692      	lsls	r2, r2, #26
 8003e88:	d42d      	bmi.n	8003ee6 <_printf_common+0xbe>
 8003e8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e8e:	4639      	mov	r1, r7
 8003e90:	4630      	mov	r0, r6
 8003e92:	47c0      	blx	r8
 8003e94:	3001      	adds	r0, #1
 8003e96:	d020      	beq.n	8003eda <_printf_common+0xb2>
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	68e5      	ldr	r5, [r4, #12]
 8003e9c:	f8d9 2000 	ldr.w	r2, [r9]
 8003ea0:	f003 0306 	and.w	r3, r3, #6
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	bf08      	it	eq
 8003ea8:	1aad      	subeq	r5, r5, r2
 8003eaa:	68a3      	ldr	r3, [r4, #8]
 8003eac:	6922      	ldr	r2, [r4, #16]
 8003eae:	bf0c      	ite	eq
 8003eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003eb4:	2500      	movne	r5, #0
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	bfc4      	itt	gt
 8003eba:	1a9b      	subgt	r3, r3, r2
 8003ebc:	18ed      	addgt	r5, r5, r3
 8003ebe:	f04f 0900 	mov.w	r9, #0
 8003ec2:	341a      	adds	r4, #26
 8003ec4:	454d      	cmp	r5, r9
 8003ec6:	d11a      	bne.n	8003efe <_printf_common+0xd6>
 8003ec8:	2000      	movs	r0, #0
 8003eca:	e008      	b.n	8003ede <_printf_common+0xb6>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	4652      	mov	r2, sl
 8003ed0:	4639      	mov	r1, r7
 8003ed2:	4630      	mov	r0, r6
 8003ed4:	47c0      	blx	r8
 8003ed6:	3001      	adds	r0, #1
 8003ed8:	d103      	bne.n	8003ee2 <_printf_common+0xba>
 8003eda:	f04f 30ff 	mov.w	r0, #4294967295
 8003ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ee2:	3501      	adds	r5, #1
 8003ee4:	e7c3      	b.n	8003e6e <_printf_common+0x46>
 8003ee6:	18e1      	adds	r1, r4, r3
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	2030      	movs	r0, #48	; 0x30
 8003eec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ef0:	4422      	add	r2, r4
 8003ef2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ef6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003efa:	3302      	adds	r3, #2
 8003efc:	e7c5      	b.n	8003e8a <_printf_common+0x62>
 8003efe:	2301      	movs	r3, #1
 8003f00:	4622      	mov	r2, r4
 8003f02:	4639      	mov	r1, r7
 8003f04:	4630      	mov	r0, r6
 8003f06:	47c0      	blx	r8
 8003f08:	3001      	adds	r0, #1
 8003f0a:	d0e6      	beq.n	8003eda <_printf_common+0xb2>
 8003f0c:	f109 0901 	add.w	r9, r9, #1
 8003f10:	e7d8      	b.n	8003ec4 <_printf_common+0x9c>
	...

08003f14 <_printf_i>:
 8003f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f18:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003f1c:	460c      	mov	r4, r1
 8003f1e:	7e09      	ldrb	r1, [r1, #24]
 8003f20:	b085      	sub	sp, #20
 8003f22:	296e      	cmp	r1, #110	; 0x6e
 8003f24:	4617      	mov	r7, r2
 8003f26:	4606      	mov	r6, r0
 8003f28:	4698      	mov	r8, r3
 8003f2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f2c:	f000 80b3 	beq.w	8004096 <_printf_i+0x182>
 8003f30:	d822      	bhi.n	8003f78 <_printf_i+0x64>
 8003f32:	2963      	cmp	r1, #99	; 0x63
 8003f34:	d036      	beq.n	8003fa4 <_printf_i+0x90>
 8003f36:	d80a      	bhi.n	8003f4e <_printf_i+0x3a>
 8003f38:	2900      	cmp	r1, #0
 8003f3a:	f000 80b9 	beq.w	80040b0 <_printf_i+0x19c>
 8003f3e:	2958      	cmp	r1, #88	; 0x58
 8003f40:	f000 8083 	beq.w	800404a <_printf_i+0x136>
 8003f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003f4c:	e032      	b.n	8003fb4 <_printf_i+0xa0>
 8003f4e:	2964      	cmp	r1, #100	; 0x64
 8003f50:	d001      	beq.n	8003f56 <_printf_i+0x42>
 8003f52:	2969      	cmp	r1, #105	; 0x69
 8003f54:	d1f6      	bne.n	8003f44 <_printf_i+0x30>
 8003f56:	6820      	ldr	r0, [r4, #0]
 8003f58:	6813      	ldr	r3, [r2, #0]
 8003f5a:	0605      	lsls	r5, r0, #24
 8003f5c:	f103 0104 	add.w	r1, r3, #4
 8003f60:	d52a      	bpl.n	8003fb8 <_printf_i+0xa4>
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6011      	str	r1, [r2, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	da03      	bge.n	8003f72 <_printf_i+0x5e>
 8003f6a:	222d      	movs	r2, #45	; 0x2d
 8003f6c:	425b      	negs	r3, r3
 8003f6e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f72:	486f      	ldr	r0, [pc, #444]	; (8004130 <_printf_i+0x21c>)
 8003f74:	220a      	movs	r2, #10
 8003f76:	e039      	b.n	8003fec <_printf_i+0xd8>
 8003f78:	2973      	cmp	r1, #115	; 0x73
 8003f7a:	f000 809d 	beq.w	80040b8 <_printf_i+0x1a4>
 8003f7e:	d808      	bhi.n	8003f92 <_printf_i+0x7e>
 8003f80:	296f      	cmp	r1, #111	; 0x6f
 8003f82:	d020      	beq.n	8003fc6 <_printf_i+0xb2>
 8003f84:	2970      	cmp	r1, #112	; 0x70
 8003f86:	d1dd      	bne.n	8003f44 <_printf_i+0x30>
 8003f88:	6823      	ldr	r3, [r4, #0]
 8003f8a:	f043 0320 	orr.w	r3, r3, #32
 8003f8e:	6023      	str	r3, [r4, #0]
 8003f90:	e003      	b.n	8003f9a <_printf_i+0x86>
 8003f92:	2975      	cmp	r1, #117	; 0x75
 8003f94:	d017      	beq.n	8003fc6 <_printf_i+0xb2>
 8003f96:	2978      	cmp	r1, #120	; 0x78
 8003f98:	d1d4      	bne.n	8003f44 <_printf_i+0x30>
 8003f9a:	2378      	movs	r3, #120	; 0x78
 8003f9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fa0:	4864      	ldr	r0, [pc, #400]	; (8004134 <_printf_i+0x220>)
 8003fa2:	e055      	b.n	8004050 <_printf_i+0x13c>
 8003fa4:	6813      	ldr	r3, [r2, #0]
 8003fa6:	1d19      	adds	r1, r3, #4
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6011      	str	r1, [r2, #0]
 8003fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e08c      	b.n	80040d2 <_printf_i+0x1be>
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6011      	str	r1, [r2, #0]
 8003fbc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003fc0:	bf18      	it	ne
 8003fc2:	b21b      	sxthne	r3, r3
 8003fc4:	e7cf      	b.n	8003f66 <_printf_i+0x52>
 8003fc6:	6813      	ldr	r3, [r2, #0]
 8003fc8:	6825      	ldr	r5, [r4, #0]
 8003fca:	1d18      	adds	r0, r3, #4
 8003fcc:	6010      	str	r0, [r2, #0]
 8003fce:	0628      	lsls	r0, r5, #24
 8003fd0:	d501      	bpl.n	8003fd6 <_printf_i+0xc2>
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	e002      	b.n	8003fdc <_printf_i+0xc8>
 8003fd6:	0668      	lsls	r0, r5, #25
 8003fd8:	d5fb      	bpl.n	8003fd2 <_printf_i+0xbe>
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	4854      	ldr	r0, [pc, #336]	; (8004130 <_printf_i+0x21c>)
 8003fde:	296f      	cmp	r1, #111	; 0x6f
 8003fe0:	bf14      	ite	ne
 8003fe2:	220a      	movne	r2, #10
 8003fe4:	2208      	moveq	r2, #8
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fec:	6865      	ldr	r5, [r4, #4]
 8003fee:	60a5      	str	r5, [r4, #8]
 8003ff0:	2d00      	cmp	r5, #0
 8003ff2:	f2c0 8095 	blt.w	8004120 <_printf_i+0x20c>
 8003ff6:	6821      	ldr	r1, [r4, #0]
 8003ff8:	f021 0104 	bic.w	r1, r1, #4
 8003ffc:	6021      	str	r1, [r4, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d13d      	bne.n	800407e <_printf_i+0x16a>
 8004002:	2d00      	cmp	r5, #0
 8004004:	f040 808e 	bne.w	8004124 <_printf_i+0x210>
 8004008:	4665      	mov	r5, ip
 800400a:	2a08      	cmp	r2, #8
 800400c:	d10b      	bne.n	8004026 <_printf_i+0x112>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	07db      	lsls	r3, r3, #31
 8004012:	d508      	bpl.n	8004026 <_printf_i+0x112>
 8004014:	6923      	ldr	r3, [r4, #16]
 8004016:	6862      	ldr	r2, [r4, #4]
 8004018:	429a      	cmp	r2, r3
 800401a:	bfde      	ittt	le
 800401c:	2330      	movle	r3, #48	; 0x30
 800401e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004022:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004026:	ebac 0305 	sub.w	r3, ip, r5
 800402a:	6123      	str	r3, [r4, #16]
 800402c:	f8cd 8000 	str.w	r8, [sp]
 8004030:	463b      	mov	r3, r7
 8004032:	aa03      	add	r2, sp, #12
 8004034:	4621      	mov	r1, r4
 8004036:	4630      	mov	r0, r6
 8004038:	f7ff fef6 	bl	8003e28 <_printf_common>
 800403c:	3001      	adds	r0, #1
 800403e:	d14d      	bne.n	80040dc <_printf_i+0x1c8>
 8004040:	f04f 30ff 	mov.w	r0, #4294967295
 8004044:	b005      	add	sp, #20
 8004046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800404a:	4839      	ldr	r0, [pc, #228]	; (8004130 <_printf_i+0x21c>)
 800404c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004050:	6813      	ldr	r3, [r2, #0]
 8004052:	6821      	ldr	r1, [r4, #0]
 8004054:	1d1d      	adds	r5, r3, #4
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6015      	str	r5, [r2, #0]
 800405a:	060a      	lsls	r2, r1, #24
 800405c:	d50b      	bpl.n	8004076 <_printf_i+0x162>
 800405e:	07ca      	lsls	r2, r1, #31
 8004060:	bf44      	itt	mi
 8004062:	f041 0120 	orrmi.w	r1, r1, #32
 8004066:	6021      	strmi	r1, [r4, #0]
 8004068:	b91b      	cbnz	r3, 8004072 <_printf_i+0x15e>
 800406a:	6822      	ldr	r2, [r4, #0]
 800406c:	f022 0220 	bic.w	r2, r2, #32
 8004070:	6022      	str	r2, [r4, #0]
 8004072:	2210      	movs	r2, #16
 8004074:	e7b7      	b.n	8003fe6 <_printf_i+0xd2>
 8004076:	064d      	lsls	r5, r1, #25
 8004078:	bf48      	it	mi
 800407a:	b29b      	uxthmi	r3, r3
 800407c:	e7ef      	b.n	800405e <_printf_i+0x14a>
 800407e:	4665      	mov	r5, ip
 8004080:	fbb3 f1f2 	udiv	r1, r3, r2
 8004084:	fb02 3311 	mls	r3, r2, r1, r3
 8004088:	5cc3      	ldrb	r3, [r0, r3]
 800408a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800408e:	460b      	mov	r3, r1
 8004090:	2900      	cmp	r1, #0
 8004092:	d1f5      	bne.n	8004080 <_printf_i+0x16c>
 8004094:	e7b9      	b.n	800400a <_printf_i+0xf6>
 8004096:	6813      	ldr	r3, [r2, #0]
 8004098:	6825      	ldr	r5, [r4, #0]
 800409a:	6961      	ldr	r1, [r4, #20]
 800409c:	1d18      	adds	r0, r3, #4
 800409e:	6010      	str	r0, [r2, #0]
 80040a0:	0628      	lsls	r0, r5, #24
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	d501      	bpl.n	80040aa <_printf_i+0x196>
 80040a6:	6019      	str	r1, [r3, #0]
 80040a8:	e002      	b.n	80040b0 <_printf_i+0x19c>
 80040aa:	066a      	lsls	r2, r5, #25
 80040ac:	d5fb      	bpl.n	80040a6 <_printf_i+0x192>
 80040ae:	8019      	strh	r1, [r3, #0]
 80040b0:	2300      	movs	r3, #0
 80040b2:	6123      	str	r3, [r4, #16]
 80040b4:	4665      	mov	r5, ip
 80040b6:	e7b9      	b.n	800402c <_printf_i+0x118>
 80040b8:	6813      	ldr	r3, [r2, #0]
 80040ba:	1d19      	adds	r1, r3, #4
 80040bc:	6011      	str	r1, [r2, #0]
 80040be:	681d      	ldr	r5, [r3, #0]
 80040c0:	6862      	ldr	r2, [r4, #4]
 80040c2:	2100      	movs	r1, #0
 80040c4:	4628      	mov	r0, r5
 80040c6:	f7fc f88b 	bl	80001e0 <memchr>
 80040ca:	b108      	cbz	r0, 80040d0 <_printf_i+0x1bc>
 80040cc:	1b40      	subs	r0, r0, r5
 80040ce:	6060      	str	r0, [r4, #4]
 80040d0:	6863      	ldr	r3, [r4, #4]
 80040d2:	6123      	str	r3, [r4, #16]
 80040d4:	2300      	movs	r3, #0
 80040d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040da:	e7a7      	b.n	800402c <_printf_i+0x118>
 80040dc:	6923      	ldr	r3, [r4, #16]
 80040de:	462a      	mov	r2, r5
 80040e0:	4639      	mov	r1, r7
 80040e2:	4630      	mov	r0, r6
 80040e4:	47c0      	blx	r8
 80040e6:	3001      	adds	r0, #1
 80040e8:	d0aa      	beq.n	8004040 <_printf_i+0x12c>
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	079b      	lsls	r3, r3, #30
 80040ee:	d413      	bmi.n	8004118 <_printf_i+0x204>
 80040f0:	68e0      	ldr	r0, [r4, #12]
 80040f2:	9b03      	ldr	r3, [sp, #12]
 80040f4:	4298      	cmp	r0, r3
 80040f6:	bfb8      	it	lt
 80040f8:	4618      	movlt	r0, r3
 80040fa:	e7a3      	b.n	8004044 <_printf_i+0x130>
 80040fc:	2301      	movs	r3, #1
 80040fe:	464a      	mov	r2, r9
 8004100:	4639      	mov	r1, r7
 8004102:	4630      	mov	r0, r6
 8004104:	47c0      	blx	r8
 8004106:	3001      	adds	r0, #1
 8004108:	d09a      	beq.n	8004040 <_printf_i+0x12c>
 800410a:	3501      	adds	r5, #1
 800410c:	68e3      	ldr	r3, [r4, #12]
 800410e:	9a03      	ldr	r2, [sp, #12]
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	42ab      	cmp	r3, r5
 8004114:	dcf2      	bgt.n	80040fc <_printf_i+0x1e8>
 8004116:	e7eb      	b.n	80040f0 <_printf_i+0x1dc>
 8004118:	2500      	movs	r5, #0
 800411a:	f104 0919 	add.w	r9, r4, #25
 800411e:	e7f5      	b.n	800410c <_printf_i+0x1f8>
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1ac      	bne.n	800407e <_printf_i+0x16a>
 8004124:	7803      	ldrb	r3, [r0, #0]
 8004126:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800412a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800412e:	e76c      	b.n	800400a <_printf_i+0xf6>
 8004130:	08004831 	.word	0x08004831
 8004134:	08004842 	.word	0x08004842

08004138 <_sbrk_r>:
 8004138:	b538      	push	{r3, r4, r5, lr}
 800413a:	4c06      	ldr	r4, [pc, #24]	; (8004154 <_sbrk_r+0x1c>)
 800413c:	2300      	movs	r3, #0
 800413e:	4605      	mov	r5, r0
 8004140:	4608      	mov	r0, r1
 8004142:	6023      	str	r3, [r4, #0]
 8004144:	f7fd f94c 	bl	80013e0 <_sbrk>
 8004148:	1c43      	adds	r3, r0, #1
 800414a:	d102      	bne.n	8004152 <_sbrk_r+0x1a>
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	b103      	cbz	r3, 8004152 <_sbrk_r+0x1a>
 8004150:	602b      	str	r3, [r5, #0]
 8004152:	bd38      	pop	{r3, r4, r5, pc}
 8004154:	200001a8 	.word	0x200001a8

08004158 <__sread>:
 8004158:	b510      	push	{r4, lr}
 800415a:	460c      	mov	r4, r1
 800415c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004160:	f000 fa96 	bl	8004690 <_read_r>
 8004164:	2800      	cmp	r0, #0
 8004166:	bfab      	itete	ge
 8004168:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800416a:	89a3      	ldrhlt	r3, [r4, #12]
 800416c:	181b      	addge	r3, r3, r0
 800416e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004172:	bfac      	ite	ge
 8004174:	6563      	strge	r3, [r4, #84]	; 0x54
 8004176:	81a3      	strhlt	r3, [r4, #12]
 8004178:	bd10      	pop	{r4, pc}

0800417a <__swrite>:
 800417a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800417e:	461f      	mov	r7, r3
 8004180:	898b      	ldrh	r3, [r1, #12]
 8004182:	05db      	lsls	r3, r3, #23
 8004184:	4605      	mov	r5, r0
 8004186:	460c      	mov	r4, r1
 8004188:	4616      	mov	r6, r2
 800418a:	d505      	bpl.n	8004198 <__swrite+0x1e>
 800418c:	2302      	movs	r3, #2
 800418e:	2200      	movs	r2, #0
 8004190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004194:	f000 f9b6 	bl	8004504 <_lseek_r>
 8004198:	89a3      	ldrh	r3, [r4, #12]
 800419a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800419e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041a2:	81a3      	strh	r3, [r4, #12]
 80041a4:	4632      	mov	r2, r6
 80041a6:	463b      	mov	r3, r7
 80041a8:	4628      	mov	r0, r5
 80041aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041ae:	f000 b869 	b.w	8004284 <_write_r>

080041b2 <__sseek>:
 80041b2:	b510      	push	{r4, lr}
 80041b4:	460c      	mov	r4, r1
 80041b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ba:	f000 f9a3 	bl	8004504 <_lseek_r>
 80041be:	1c43      	adds	r3, r0, #1
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	bf15      	itete	ne
 80041c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80041c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041ce:	81a3      	strheq	r3, [r4, #12]
 80041d0:	bf18      	it	ne
 80041d2:	81a3      	strhne	r3, [r4, #12]
 80041d4:	bd10      	pop	{r4, pc}

080041d6 <__sclose>:
 80041d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041da:	f000 b8d3 	b.w	8004384 <_close_r>
	...

080041e0 <__swbuf_r>:
 80041e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e2:	460e      	mov	r6, r1
 80041e4:	4614      	mov	r4, r2
 80041e6:	4605      	mov	r5, r0
 80041e8:	b118      	cbz	r0, 80041f2 <__swbuf_r+0x12>
 80041ea:	6983      	ldr	r3, [r0, #24]
 80041ec:	b90b      	cbnz	r3, 80041f2 <__swbuf_r+0x12>
 80041ee:	f7ff fbf7 	bl	80039e0 <__sinit>
 80041f2:	4b21      	ldr	r3, [pc, #132]	; (8004278 <__swbuf_r+0x98>)
 80041f4:	429c      	cmp	r4, r3
 80041f6:	d12a      	bne.n	800424e <__swbuf_r+0x6e>
 80041f8:	686c      	ldr	r4, [r5, #4]
 80041fa:	69a3      	ldr	r3, [r4, #24]
 80041fc:	60a3      	str	r3, [r4, #8]
 80041fe:	89a3      	ldrh	r3, [r4, #12]
 8004200:	071a      	lsls	r2, r3, #28
 8004202:	d52e      	bpl.n	8004262 <__swbuf_r+0x82>
 8004204:	6923      	ldr	r3, [r4, #16]
 8004206:	b363      	cbz	r3, 8004262 <__swbuf_r+0x82>
 8004208:	6923      	ldr	r3, [r4, #16]
 800420a:	6820      	ldr	r0, [r4, #0]
 800420c:	1ac0      	subs	r0, r0, r3
 800420e:	6963      	ldr	r3, [r4, #20]
 8004210:	b2f6      	uxtb	r6, r6
 8004212:	4283      	cmp	r3, r0
 8004214:	4637      	mov	r7, r6
 8004216:	dc04      	bgt.n	8004222 <__swbuf_r+0x42>
 8004218:	4621      	mov	r1, r4
 800421a:	4628      	mov	r0, r5
 800421c:	f000 f948 	bl	80044b0 <_fflush_r>
 8004220:	bb28      	cbnz	r0, 800426e <__swbuf_r+0x8e>
 8004222:	68a3      	ldr	r3, [r4, #8]
 8004224:	3b01      	subs	r3, #1
 8004226:	60a3      	str	r3, [r4, #8]
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	6022      	str	r2, [r4, #0]
 800422e:	701e      	strb	r6, [r3, #0]
 8004230:	6963      	ldr	r3, [r4, #20]
 8004232:	3001      	adds	r0, #1
 8004234:	4283      	cmp	r3, r0
 8004236:	d004      	beq.n	8004242 <__swbuf_r+0x62>
 8004238:	89a3      	ldrh	r3, [r4, #12]
 800423a:	07db      	lsls	r3, r3, #31
 800423c:	d519      	bpl.n	8004272 <__swbuf_r+0x92>
 800423e:	2e0a      	cmp	r6, #10
 8004240:	d117      	bne.n	8004272 <__swbuf_r+0x92>
 8004242:	4621      	mov	r1, r4
 8004244:	4628      	mov	r0, r5
 8004246:	f000 f933 	bl	80044b0 <_fflush_r>
 800424a:	b190      	cbz	r0, 8004272 <__swbuf_r+0x92>
 800424c:	e00f      	b.n	800426e <__swbuf_r+0x8e>
 800424e:	4b0b      	ldr	r3, [pc, #44]	; (800427c <__swbuf_r+0x9c>)
 8004250:	429c      	cmp	r4, r3
 8004252:	d101      	bne.n	8004258 <__swbuf_r+0x78>
 8004254:	68ac      	ldr	r4, [r5, #8]
 8004256:	e7d0      	b.n	80041fa <__swbuf_r+0x1a>
 8004258:	4b09      	ldr	r3, [pc, #36]	; (8004280 <__swbuf_r+0xa0>)
 800425a:	429c      	cmp	r4, r3
 800425c:	bf08      	it	eq
 800425e:	68ec      	ldreq	r4, [r5, #12]
 8004260:	e7cb      	b.n	80041fa <__swbuf_r+0x1a>
 8004262:	4621      	mov	r1, r4
 8004264:	4628      	mov	r0, r5
 8004266:	f000 f81f 	bl	80042a8 <__swsetup_r>
 800426a:	2800      	cmp	r0, #0
 800426c:	d0cc      	beq.n	8004208 <__swbuf_r+0x28>
 800426e:	f04f 37ff 	mov.w	r7, #4294967295
 8004272:	4638      	mov	r0, r7
 8004274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004276:	bf00      	nop
 8004278:	080047e0 	.word	0x080047e0
 800427c:	08004800 	.word	0x08004800
 8004280:	080047c0 	.word	0x080047c0

08004284 <_write_r>:
 8004284:	b538      	push	{r3, r4, r5, lr}
 8004286:	4c07      	ldr	r4, [pc, #28]	; (80042a4 <_write_r+0x20>)
 8004288:	4605      	mov	r5, r0
 800428a:	4608      	mov	r0, r1
 800428c:	4611      	mov	r1, r2
 800428e:	2200      	movs	r2, #0
 8004290:	6022      	str	r2, [r4, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	f7fd f853 	bl	800133e <_write>
 8004298:	1c43      	adds	r3, r0, #1
 800429a:	d102      	bne.n	80042a2 <_write_r+0x1e>
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	b103      	cbz	r3, 80042a2 <_write_r+0x1e>
 80042a0:	602b      	str	r3, [r5, #0]
 80042a2:	bd38      	pop	{r3, r4, r5, pc}
 80042a4:	200001a8 	.word	0x200001a8

080042a8 <__swsetup_r>:
 80042a8:	4b32      	ldr	r3, [pc, #200]	; (8004374 <__swsetup_r+0xcc>)
 80042aa:	b570      	push	{r4, r5, r6, lr}
 80042ac:	681d      	ldr	r5, [r3, #0]
 80042ae:	4606      	mov	r6, r0
 80042b0:	460c      	mov	r4, r1
 80042b2:	b125      	cbz	r5, 80042be <__swsetup_r+0x16>
 80042b4:	69ab      	ldr	r3, [r5, #24]
 80042b6:	b913      	cbnz	r3, 80042be <__swsetup_r+0x16>
 80042b8:	4628      	mov	r0, r5
 80042ba:	f7ff fb91 	bl	80039e0 <__sinit>
 80042be:	4b2e      	ldr	r3, [pc, #184]	; (8004378 <__swsetup_r+0xd0>)
 80042c0:	429c      	cmp	r4, r3
 80042c2:	d10f      	bne.n	80042e4 <__swsetup_r+0x3c>
 80042c4:	686c      	ldr	r4, [r5, #4]
 80042c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	0715      	lsls	r5, r2, #28
 80042ce:	d42c      	bmi.n	800432a <__swsetup_r+0x82>
 80042d0:	06d0      	lsls	r0, r2, #27
 80042d2:	d411      	bmi.n	80042f8 <__swsetup_r+0x50>
 80042d4:	2209      	movs	r2, #9
 80042d6:	6032      	str	r2, [r6, #0]
 80042d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042dc:	81a3      	strh	r3, [r4, #12]
 80042de:	f04f 30ff 	mov.w	r0, #4294967295
 80042e2:	e03e      	b.n	8004362 <__swsetup_r+0xba>
 80042e4:	4b25      	ldr	r3, [pc, #148]	; (800437c <__swsetup_r+0xd4>)
 80042e6:	429c      	cmp	r4, r3
 80042e8:	d101      	bne.n	80042ee <__swsetup_r+0x46>
 80042ea:	68ac      	ldr	r4, [r5, #8]
 80042ec:	e7eb      	b.n	80042c6 <__swsetup_r+0x1e>
 80042ee:	4b24      	ldr	r3, [pc, #144]	; (8004380 <__swsetup_r+0xd8>)
 80042f0:	429c      	cmp	r4, r3
 80042f2:	bf08      	it	eq
 80042f4:	68ec      	ldreq	r4, [r5, #12]
 80042f6:	e7e6      	b.n	80042c6 <__swsetup_r+0x1e>
 80042f8:	0751      	lsls	r1, r2, #29
 80042fa:	d512      	bpl.n	8004322 <__swsetup_r+0x7a>
 80042fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042fe:	b141      	cbz	r1, 8004312 <__swsetup_r+0x6a>
 8004300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004304:	4299      	cmp	r1, r3
 8004306:	d002      	beq.n	800430e <__swsetup_r+0x66>
 8004308:	4630      	mov	r0, r6
 800430a:	f000 f973 	bl	80045f4 <_free_r>
 800430e:	2300      	movs	r3, #0
 8004310:	6363      	str	r3, [r4, #52]	; 0x34
 8004312:	89a3      	ldrh	r3, [r4, #12]
 8004314:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004318:	81a3      	strh	r3, [r4, #12]
 800431a:	2300      	movs	r3, #0
 800431c:	6063      	str	r3, [r4, #4]
 800431e:	6923      	ldr	r3, [r4, #16]
 8004320:	6023      	str	r3, [r4, #0]
 8004322:	89a3      	ldrh	r3, [r4, #12]
 8004324:	f043 0308 	orr.w	r3, r3, #8
 8004328:	81a3      	strh	r3, [r4, #12]
 800432a:	6923      	ldr	r3, [r4, #16]
 800432c:	b94b      	cbnz	r3, 8004342 <__swsetup_r+0x9a>
 800432e:	89a3      	ldrh	r3, [r4, #12]
 8004330:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004338:	d003      	beq.n	8004342 <__swsetup_r+0x9a>
 800433a:	4621      	mov	r1, r4
 800433c:	4630      	mov	r0, r6
 800433e:	f000 f917 	bl	8004570 <__smakebuf_r>
 8004342:	89a2      	ldrh	r2, [r4, #12]
 8004344:	f012 0301 	ands.w	r3, r2, #1
 8004348:	d00c      	beq.n	8004364 <__swsetup_r+0xbc>
 800434a:	2300      	movs	r3, #0
 800434c:	60a3      	str	r3, [r4, #8]
 800434e:	6963      	ldr	r3, [r4, #20]
 8004350:	425b      	negs	r3, r3
 8004352:	61a3      	str	r3, [r4, #24]
 8004354:	6923      	ldr	r3, [r4, #16]
 8004356:	b953      	cbnz	r3, 800436e <__swsetup_r+0xc6>
 8004358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800435c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004360:	d1ba      	bne.n	80042d8 <__swsetup_r+0x30>
 8004362:	bd70      	pop	{r4, r5, r6, pc}
 8004364:	0792      	lsls	r2, r2, #30
 8004366:	bf58      	it	pl
 8004368:	6963      	ldrpl	r3, [r4, #20]
 800436a:	60a3      	str	r3, [r4, #8]
 800436c:	e7f2      	b.n	8004354 <__swsetup_r+0xac>
 800436e:	2000      	movs	r0, #0
 8004370:	e7f7      	b.n	8004362 <__swsetup_r+0xba>
 8004372:	bf00      	nop
 8004374:	20000024 	.word	0x20000024
 8004378:	080047e0 	.word	0x080047e0
 800437c:	08004800 	.word	0x08004800
 8004380:	080047c0 	.word	0x080047c0

08004384 <_close_r>:
 8004384:	b538      	push	{r3, r4, r5, lr}
 8004386:	4c06      	ldr	r4, [pc, #24]	; (80043a0 <_close_r+0x1c>)
 8004388:	2300      	movs	r3, #0
 800438a:	4605      	mov	r5, r0
 800438c:	4608      	mov	r0, r1
 800438e:	6023      	str	r3, [r4, #0]
 8004390:	f7fc fff1 	bl	8001376 <_close>
 8004394:	1c43      	adds	r3, r0, #1
 8004396:	d102      	bne.n	800439e <_close_r+0x1a>
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	b103      	cbz	r3, 800439e <_close_r+0x1a>
 800439c:	602b      	str	r3, [r5, #0]
 800439e:	bd38      	pop	{r3, r4, r5, pc}
 80043a0:	200001a8 	.word	0x200001a8

080043a4 <__sflush_r>:
 80043a4:	898a      	ldrh	r2, [r1, #12]
 80043a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043aa:	4605      	mov	r5, r0
 80043ac:	0710      	lsls	r0, r2, #28
 80043ae:	460c      	mov	r4, r1
 80043b0:	d458      	bmi.n	8004464 <__sflush_r+0xc0>
 80043b2:	684b      	ldr	r3, [r1, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	dc05      	bgt.n	80043c4 <__sflush_r+0x20>
 80043b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	dc02      	bgt.n	80043c4 <__sflush_r+0x20>
 80043be:	2000      	movs	r0, #0
 80043c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043c6:	2e00      	cmp	r6, #0
 80043c8:	d0f9      	beq.n	80043be <__sflush_r+0x1a>
 80043ca:	2300      	movs	r3, #0
 80043cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80043d0:	682f      	ldr	r7, [r5, #0]
 80043d2:	6a21      	ldr	r1, [r4, #32]
 80043d4:	602b      	str	r3, [r5, #0]
 80043d6:	d032      	beq.n	800443e <__sflush_r+0x9a>
 80043d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80043da:	89a3      	ldrh	r3, [r4, #12]
 80043dc:	075a      	lsls	r2, r3, #29
 80043de:	d505      	bpl.n	80043ec <__sflush_r+0x48>
 80043e0:	6863      	ldr	r3, [r4, #4]
 80043e2:	1ac0      	subs	r0, r0, r3
 80043e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043e6:	b10b      	cbz	r3, 80043ec <__sflush_r+0x48>
 80043e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043ea:	1ac0      	subs	r0, r0, r3
 80043ec:	2300      	movs	r3, #0
 80043ee:	4602      	mov	r2, r0
 80043f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043f2:	6a21      	ldr	r1, [r4, #32]
 80043f4:	4628      	mov	r0, r5
 80043f6:	47b0      	blx	r6
 80043f8:	1c43      	adds	r3, r0, #1
 80043fa:	89a3      	ldrh	r3, [r4, #12]
 80043fc:	d106      	bne.n	800440c <__sflush_r+0x68>
 80043fe:	6829      	ldr	r1, [r5, #0]
 8004400:	291d      	cmp	r1, #29
 8004402:	d848      	bhi.n	8004496 <__sflush_r+0xf2>
 8004404:	4a29      	ldr	r2, [pc, #164]	; (80044ac <__sflush_r+0x108>)
 8004406:	40ca      	lsrs	r2, r1
 8004408:	07d6      	lsls	r6, r2, #31
 800440a:	d544      	bpl.n	8004496 <__sflush_r+0xf2>
 800440c:	2200      	movs	r2, #0
 800440e:	6062      	str	r2, [r4, #4]
 8004410:	04d9      	lsls	r1, r3, #19
 8004412:	6922      	ldr	r2, [r4, #16]
 8004414:	6022      	str	r2, [r4, #0]
 8004416:	d504      	bpl.n	8004422 <__sflush_r+0x7e>
 8004418:	1c42      	adds	r2, r0, #1
 800441a:	d101      	bne.n	8004420 <__sflush_r+0x7c>
 800441c:	682b      	ldr	r3, [r5, #0]
 800441e:	b903      	cbnz	r3, 8004422 <__sflush_r+0x7e>
 8004420:	6560      	str	r0, [r4, #84]	; 0x54
 8004422:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004424:	602f      	str	r7, [r5, #0]
 8004426:	2900      	cmp	r1, #0
 8004428:	d0c9      	beq.n	80043be <__sflush_r+0x1a>
 800442a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800442e:	4299      	cmp	r1, r3
 8004430:	d002      	beq.n	8004438 <__sflush_r+0x94>
 8004432:	4628      	mov	r0, r5
 8004434:	f000 f8de 	bl	80045f4 <_free_r>
 8004438:	2000      	movs	r0, #0
 800443a:	6360      	str	r0, [r4, #52]	; 0x34
 800443c:	e7c0      	b.n	80043c0 <__sflush_r+0x1c>
 800443e:	2301      	movs	r3, #1
 8004440:	4628      	mov	r0, r5
 8004442:	47b0      	blx	r6
 8004444:	1c41      	adds	r1, r0, #1
 8004446:	d1c8      	bne.n	80043da <__sflush_r+0x36>
 8004448:	682b      	ldr	r3, [r5, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0c5      	beq.n	80043da <__sflush_r+0x36>
 800444e:	2b1d      	cmp	r3, #29
 8004450:	d001      	beq.n	8004456 <__sflush_r+0xb2>
 8004452:	2b16      	cmp	r3, #22
 8004454:	d101      	bne.n	800445a <__sflush_r+0xb6>
 8004456:	602f      	str	r7, [r5, #0]
 8004458:	e7b1      	b.n	80043be <__sflush_r+0x1a>
 800445a:	89a3      	ldrh	r3, [r4, #12]
 800445c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004460:	81a3      	strh	r3, [r4, #12]
 8004462:	e7ad      	b.n	80043c0 <__sflush_r+0x1c>
 8004464:	690f      	ldr	r7, [r1, #16]
 8004466:	2f00      	cmp	r7, #0
 8004468:	d0a9      	beq.n	80043be <__sflush_r+0x1a>
 800446a:	0793      	lsls	r3, r2, #30
 800446c:	680e      	ldr	r6, [r1, #0]
 800446e:	bf08      	it	eq
 8004470:	694b      	ldreq	r3, [r1, #20]
 8004472:	600f      	str	r7, [r1, #0]
 8004474:	bf18      	it	ne
 8004476:	2300      	movne	r3, #0
 8004478:	eba6 0807 	sub.w	r8, r6, r7
 800447c:	608b      	str	r3, [r1, #8]
 800447e:	f1b8 0f00 	cmp.w	r8, #0
 8004482:	dd9c      	ble.n	80043be <__sflush_r+0x1a>
 8004484:	4643      	mov	r3, r8
 8004486:	463a      	mov	r2, r7
 8004488:	6a21      	ldr	r1, [r4, #32]
 800448a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800448c:	4628      	mov	r0, r5
 800448e:	47b0      	blx	r6
 8004490:	2800      	cmp	r0, #0
 8004492:	dc06      	bgt.n	80044a2 <__sflush_r+0xfe>
 8004494:	89a3      	ldrh	r3, [r4, #12]
 8004496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800449a:	81a3      	strh	r3, [r4, #12]
 800449c:	f04f 30ff 	mov.w	r0, #4294967295
 80044a0:	e78e      	b.n	80043c0 <__sflush_r+0x1c>
 80044a2:	4407      	add	r7, r0
 80044a4:	eba8 0800 	sub.w	r8, r8, r0
 80044a8:	e7e9      	b.n	800447e <__sflush_r+0xda>
 80044aa:	bf00      	nop
 80044ac:	20400001 	.word	0x20400001

080044b0 <_fflush_r>:
 80044b0:	b538      	push	{r3, r4, r5, lr}
 80044b2:	690b      	ldr	r3, [r1, #16]
 80044b4:	4605      	mov	r5, r0
 80044b6:	460c      	mov	r4, r1
 80044b8:	b1db      	cbz	r3, 80044f2 <_fflush_r+0x42>
 80044ba:	b118      	cbz	r0, 80044c4 <_fflush_r+0x14>
 80044bc:	6983      	ldr	r3, [r0, #24]
 80044be:	b90b      	cbnz	r3, 80044c4 <_fflush_r+0x14>
 80044c0:	f7ff fa8e 	bl	80039e0 <__sinit>
 80044c4:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <_fflush_r+0x48>)
 80044c6:	429c      	cmp	r4, r3
 80044c8:	d109      	bne.n	80044de <_fflush_r+0x2e>
 80044ca:	686c      	ldr	r4, [r5, #4]
 80044cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044d0:	b17b      	cbz	r3, 80044f2 <_fflush_r+0x42>
 80044d2:	4621      	mov	r1, r4
 80044d4:	4628      	mov	r0, r5
 80044d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044da:	f7ff bf63 	b.w	80043a4 <__sflush_r>
 80044de:	4b07      	ldr	r3, [pc, #28]	; (80044fc <_fflush_r+0x4c>)
 80044e0:	429c      	cmp	r4, r3
 80044e2:	d101      	bne.n	80044e8 <_fflush_r+0x38>
 80044e4:	68ac      	ldr	r4, [r5, #8]
 80044e6:	e7f1      	b.n	80044cc <_fflush_r+0x1c>
 80044e8:	4b05      	ldr	r3, [pc, #20]	; (8004500 <_fflush_r+0x50>)
 80044ea:	429c      	cmp	r4, r3
 80044ec:	bf08      	it	eq
 80044ee:	68ec      	ldreq	r4, [r5, #12]
 80044f0:	e7ec      	b.n	80044cc <_fflush_r+0x1c>
 80044f2:	2000      	movs	r0, #0
 80044f4:	bd38      	pop	{r3, r4, r5, pc}
 80044f6:	bf00      	nop
 80044f8:	080047e0 	.word	0x080047e0
 80044fc:	08004800 	.word	0x08004800
 8004500:	080047c0 	.word	0x080047c0

08004504 <_lseek_r>:
 8004504:	b538      	push	{r3, r4, r5, lr}
 8004506:	4c07      	ldr	r4, [pc, #28]	; (8004524 <_lseek_r+0x20>)
 8004508:	4605      	mov	r5, r0
 800450a:	4608      	mov	r0, r1
 800450c:	4611      	mov	r1, r2
 800450e:	2200      	movs	r2, #0
 8004510:	6022      	str	r2, [r4, #0]
 8004512:	461a      	mov	r2, r3
 8004514:	f7fc ff56 	bl	80013c4 <_lseek>
 8004518:	1c43      	adds	r3, r0, #1
 800451a:	d102      	bne.n	8004522 <_lseek_r+0x1e>
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	b103      	cbz	r3, 8004522 <_lseek_r+0x1e>
 8004520:	602b      	str	r3, [r5, #0]
 8004522:	bd38      	pop	{r3, r4, r5, pc}
 8004524:	200001a8 	.word	0x200001a8

08004528 <__swhatbuf_r>:
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	460e      	mov	r6, r1
 800452c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004530:	2900      	cmp	r1, #0
 8004532:	b096      	sub	sp, #88	; 0x58
 8004534:	4614      	mov	r4, r2
 8004536:	461d      	mov	r5, r3
 8004538:	da07      	bge.n	800454a <__swhatbuf_r+0x22>
 800453a:	2300      	movs	r3, #0
 800453c:	602b      	str	r3, [r5, #0]
 800453e:	89b3      	ldrh	r3, [r6, #12]
 8004540:	061a      	lsls	r2, r3, #24
 8004542:	d410      	bmi.n	8004566 <__swhatbuf_r+0x3e>
 8004544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004548:	e00e      	b.n	8004568 <__swhatbuf_r+0x40>
 800454a:	466a      	mov	r2, sp
 800454c:	f000 f8b2 	bl	80046b4 <_fstat_r>
 8004550:	2800      	cmp	r0, #0
 8004552:	dbf2      	blt.n	800453a <__swhatbuf_r+0x12>
 8004554:	9a01      	ldr	r2, [sp, #4]
 8004556:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800455a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800455e:	425a      	negs	r2, r3
 8004560:	415a      	adcs	r2, r3
 8004562:	602a      	str	r2, [r5, #0]
 8004564:	e7ee      	b.n	8004544 <__swhatbuf_r+0x1c>
 8004566:	2340      	movs	r3, #64	; 0x40
 8004568:	2000      	movs	r0, #0
 800456a:	6023      	str	r3, [r4, #0]
 800456c:	b016      	add	sp, #88	; 0x58
 800456e:	bd70      	pop	{r4, r5, r6, pc}

08004570 <__smakebuf_r>:
 8004570:	898b      	ldrh	r3, [r1, #12]
 8004572:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004574:	079d      	lsls	r5, r3, #30
 8004576:	4606      	mov	r6, r0
 8004578:	460c      	mov	r4, r1
 800457a:	d507      	bpl.n	800458c <__smakebuf_r+0x1c>
 800457c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004580:	6023      	str	r3, [r4, #0]
 8004582:	6123      	str	r3, [r4, #16]
 8004584:	2301      	movs	r3, #1
 8004586:	6163      	str	r3, [r4, #20]
 8004588:	b002      	add	sp, #8
 800458a:	bd70      	pop	{r4, r5, r6, pc}
 800458c:	ab01      	add	r3, sp, #4
 800458e:	466a      	mov	r2, sp
 8004590:	f7ff ffca 	bl	8004528 <__swhatbuf_r>
 8004594:	9900      	ldr	r1, [sp, #0]
 8004596:	4605      	mov	r5, r0
 8004598:	4630      	mov	r0, r6
 800459a:	f7ff faab 	bl	8003af4 <_malloc_r>
 800459e:	b948      	cbnz	r0, 80045b4 <__smakebuf_r+0x44>
 80045a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045a4:	059a      	lsls	r2, r3, #22
 80045a6:	d4ef      	bmi.n	8004588 <__smakebuf_r+0x18>
 80045a8:	f023 0303 	bic.w	r3, r3, #3
 80045ac:	f043 0302 	orr.w	r3, r3, #2
 80045b0:	81a3      	strh	r3, [r4, #12]
 80045b2:	e7e3      	b.n	800457c <__smakebuf_r+0xc>
 80045b4:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <__smakebuf_r+0x7c>)
 80045b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80045b8:	89a3      	ldrh	r3, [r4, #12]
 80045ba:	6020      	str	r0, [r4, #0]
 80045bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c0:	81a3      	strh	r3, [r4, #12]
 80045c2:	9b00      	ldr	r3, [sp, #0]
 80045c4:	6163      	str	r3, [r4, #20]
 80045c6:	9b01      	ldr	r3, [sp, #4]
 80045c8:	6120      	str	r0, [r4, #16]
 80045ca:	b15b      	cbz	r3, 80045e4 <__smakebuf_r+0x74>
 80045cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045d0:	4630      	mov	r0, r6
 80045d2:	f000 f881 	bl	80046d8 <_isatty_r>
 80045d6:	b128      	cbz	r0, 80045e4 <__smakebuf_r+0x74>
 80045d8:	89a3      	ldrh	r3, [r4, #12]
 80045da:	f023 0303 	bic.w	r3, r3, #3
 80045de:	f043 0301 	orr.w	r3, r3, #1
 80045e2:	81a3      	strh	r3, [r4, #12]
 80045e4:	89a3      	ldrh	r3, [r4, #12]
 80045e6:	431d      	orrs	r5, r3
 80045e8:	81a5      	strh	r5, [r4, #12]
 80045ea:	e7cd      	b.n	8004588 <__smakebuf_r+0x18>
 80045ec:	080039a9 	.word	0x080039a9

080045f0 <__malloc_lock>:
 80045f0:	4770      	bx	lr

080045f2 <__malloc_unlock>:
 80045f2:	4770      	bx	lr

080045f4 <_free_r>:
 80045f4:	b538      	push	{r3, r4, r5, lr}
 80045f6:	4605      	mov	r5, r0
 80045f8:	2900      	cmp	r1, #0
 80045fa:	d045      	beq.n	8004688 <_free_r+0x94>
 80045fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004600:	1f0c      	subs	r4, r1, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	bfb8      	it	lt
 8004606:	18e4      	addlt	r4, r4, r3
 8004608:	f7ff fff2 	bl	80045f0 <__malloc_lock>
 800460c:	4a1f      	ldr	r2, [pc, #124]	; (800468c <_free_r+0x98>)
 800460e:	6813      	ldr	r3, [r2, #0]
 8004610:	4610      	mov	r0, r2
 8004612:	b933      	cbnz	r3, 8004622 <_free_r+0x2e>
 8004614:	6063      	str	r3, [r4, #4]
 8004616:	6014      	str	r4, [r2, #0]
 8004618:	4628      	mov	r0, r5
 800461a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800461e:	f7ff bfe8 	b.w	80045f2 <__malloc_unlock>
 8004622:	42a3      	cmp	r3, r4
 8004624:	d90c      	bls.n	8004640 <_free_r+0x4c>
 8004626:	6821      	ldr	r1, [r4, #0]
 8004628:	1862      	adds	r2, r4, r1
 800462a:	4293      	cmp	r3, r2
 800462c:	bf04      	itt	eq
 800462e:	681a      	ldreq	r2, [r3, #0]
 8004630:	685b      	ldreq	r3, [r3, #4]
 8004632:	6063      	str	r3, [r4, #4]
 8004634:	bf04      	itt	eq
 8004636:	1852      	addeq	r2, r2, r1
 8004638:	6022      	streq	r2, [r4, #0]
 800463a:	6004      	str	r4, [r0, #0]
 800463c:	e7ec      	b.n	8004618 <_free_r+0x24>
 800463e:	4613      	mov	r3, r2
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	b10a      	cbz	r2, 8004648 <_free_r+0x54>
 8004644:	42a2      	cmp	r2, r4
 8004646:	d9fa      	bls.n	800463e <_free_r+0x4a>
 8004648:	6819      	ldr	r1, [r3, #0]
 800464a:	1858      	adds	r0, r3, r1
 800464c:	42a0      	cmp	r0, r4
 800464e:	d10b      	bne.n	8004668 <_free_r+0x74>
 8004650:	6820      	ldr	r0, [r4, #0]
 8004652:	4401      	add	r1, r0
 8004654:	1858      	adds	r0, r3, r1
 8004656:	4282      	cmp	r2, r0
 8004658:	6019      	str	r1, [r3, #0]
 800465a:	d1dd      	bne.n	8004618 <_free_r+0x24>
 800465c:	6810      	ldr	r0, [r2, #0]
 800465e:	6852      	ldr	r2, [r2, #4]
 8004660:	605a      	str	r2, [r3, #4]
 8004662:	4401      	add	r1, r0
 8004664:	6019      	str	r1, [r3, #0]
 8004666:	e7d7      	b.n	8004618 <_free_r+0x24>
 8004668:	d902      	bls.n	8004670 <_free_r+0x7c>
 800466a:	230c      	movs	r3, #12
 800466c:	602b      	str	r3, [r5, #0]
 800466e:	e7d3      	b.n	8004618 <_free_r+0x24>
 8004670:	6820      	ldr	r0, [r4, #0]
 8004672:	1821      	adds	r1, r4, r0
 8004674:	428a      	cmp	r2, r1
 8004676:	bf04      	itt	eq
 8004678:	6811      	ldreq	r1, [r2, #0]
 800467a:	6852      	ldreq	r2, [r2, #4]
 800467c:	6062      	str	r2, [r4, #4]
 800467e:	bf04      	itt	eq
 8004680:	1809      	addeq	r1, r1, r0
 8004682:	6021      	streq	r1, [r4, #0]
 8004684:	605c      	str	r4, [r3, #4]
 8004686:	e7c7      	b.n	8004618 <_free_r+0x24>
 8004688:	bd38      	pop	{r3, r4, r5, pc}
 800468a:	bf00      	nop
 800468c:	200000b8 	.word	0x200000b8

08004690 <_read_r>:
 8004690:	b538      	push	{r3, r4, r5, lr}
 8004692:	4c07      	ldr	r4, [pc, #28]	; (80046b0 <_read_r+0x20>)
 8004694:	4605      	mov	r5, r0
 8004696:	4608      	mov	r0, r1
 8004698:	4611      	mov	r1, r2
 800469a:	2200      	movs	r2, #0
 800469c:	6022      	str	r2, [r4, #0]
 800469e:	461a      	mov	r2, r3
 80046a0:	f7fc fe30 	bl	8001304 <_read>
 80046a4:	1c43      	adds	r3, r0, #1
 80046a6:	d102      	bne.n	80046ae <_read_r+0x1e>
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	b103      	cbz	r3, 80046ae <_read_r+0x1e>
 80046ac:	602b      	str	r3, [r5, #0]
 80046ae:	bd38      	pop	{r3, r4, r5, pc}
 80046b0:	200001a8 	.word	0x200001a8

080046b4 <_fstat_r>:
 80046b4:	b538      	push	{r3, r4, r5, lr}
 80046b6:	4c07      	ldr	r4, [pc, #28]	; (80046d4 <_fstat_r+0x20>)
 80046b8:	2300      	movs	r3, #0
 80046ba:	4605      	mov	r5, r0
 80046bc:	4608      	mov	r0, r1
 80046be:	4611      	mov	r1, r2
 80046c0:	6023      	str	r3, [r4, #0]
 80046c2:	f7fc fe64 	bl	800138e <_fstat>
 80046c6:	1c43      	adds	r3, r0, #1
 80046c8:	d102      	bne.n	80046d0 <_fstat_r+0x1c>
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	b103      	cbz	r3, 80046d0 <_fstat_r+0x1c>
 80046ce:	602b      	str	r3, [r5, #0]
 80046d0:	bd38      	pop	{r3, r4, r5, pc}
 80046d2:	bf00      	nop
 80046d4:	200001a8 	.word	0x200001a8

080046d8 <_isatty_r>:
 80046d8:	b538      	push	{r3, r4, r5, lr}
 80046da:	4c06      	ldr	r4, [pc, #24]	; (80046f4 <_isatty_r+0x1c>)
 80046dc:	2300      	movs	r3, #0
 80046de:	4605      	mov	r5, r0
 80046e0:	4608      	mov	r0, r1
 80046e2:	6023      	str	r3, [r4, #0]
 80046e4:	f7fc fe63 	bl	80013ae <_isatty>
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	d102      	bne.n	80046f2 <_isatty_r+0x1a>
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	b103      	cbz	r3, 80046f2 <_isatty_r+0x1a>
 80046f0:	602b      	str	r3, [r5, #0]
 80046f2:	bd38      	pop	{r3, r4, r5, pc}
 80046f4:	200001a8 	.word	0x200001a8

080046f8 <_init>:
 80046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fa:	bf00      	nop
 80046fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fe:	bc08      	pop	{r3}
 8004700:	469e      	mov	lr, r3
 8004702:	4770      	bx	lr

08004704 <_fini>:
 8004704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004706:	bf00      	nop
 8004708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800470a:	bc08      	pop	{r3}
 800470c:	469e      	mov	lr, r3
 800470e:	4770      	bx	lr
