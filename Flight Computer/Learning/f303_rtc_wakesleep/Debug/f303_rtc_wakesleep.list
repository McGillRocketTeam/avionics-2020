
f303_rtc_wakesleep.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000452c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  080046cc  080046cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048a8  080048a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080048a8  080048a8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048a8  080048a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048a8  080048a8  000148a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048ac  080048ac  000148ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080048b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000070  08004920  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08004920  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b657  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cad  00000000  00000000  0002b6f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  0002d3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000880  00000000  00000000  0002dce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020afb  00000000  00000000  0002e560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b61a  00000000  00000000  0004f05b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c66e4  00000000  00000000  0005a675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00120d59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002870  00000000  00000000  00120dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080046b4 	.word	0x080046b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080046b4 	.word	0x080046b4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 8000296:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000298:	f000 fd20 	bl	8000cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029c:	f000 fa3c 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a0:	f000 faf6 	bl	8000890 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002a4:	f000 fac4 	bl	8000830 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80002a8:	f000 fa9c 	bl	80007e4 <MX_RTC_Init>

  /* USER CODE BEGIN 2 */

  // reset LED
  HAL_GPIO_WritePin(LED_Output_GPIO_Port, LED_Output_Pin, RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	2104      	movs	r1, #4
 80002b0:	487d      	ldr	r0, [pc, #500]	; (80004a8 <main+0x218>)
 80002b2:	f001 f839 	bl	8001328 <HAL_GPIO_WritePin>

  if (__HAL_PWR_GET_FLAG(PWR_FLAG_WU)) {
 80002b6:	4b7d      	ldr	r3, [pc, #500]	; (80004ac <main+0x21c>)
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	f003 0301 	and.w	r3, r3, #1
 80002be:	2b01      	cmp	r3, #1
 80002c0:	f040 8110 	bne.w	80004e4 <main+0x254>
	*msg = sprintf((char *)msg, "entered if: hal_pwr_get_flag\r\n");
 80002c4:	497a      	ldr	r1, [pc, #488]	; (80004b0 <main+0x220>)
 80002c6:	487b      	ldr	r0, [pc, #492]	; (80004b4 <main+0x224>)
 80002c8:	f003 fdc6 	bl	8003e58 <siprintf>
 80002cc:	4603      	mov	r3, r0
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	4b78      	ldr	r3, [pc, #480]	; (80004b4 <main+0x224>)
 80002d2:	701a      	strb	r2, [r3, #0]
  	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 80002d4:	4877      	ldr	r0, [pc, #476]	; (80004b4 <main+0x224>)
 80002d6:	f7ff ff83 	bl	80001e0 <strlen>
 80002da:	4603      	mov	r3, r0
 80002dc:	b29a      	uxth	r2, r3
 80002de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002e2:	4974      	ldr	r1, [pc, #464]	; (80004b4 <main+0x224>)
 80002e4:	4874      	ldr	r0, [pc, #464]	; (80004b8 <main+0x228>)
 80002e6:	f003 f9b3 	bl	8003650 <HAL_UART_Transmit>

  	// -------------------------------------------------------------------
  	// update alarm a so wake/sleep cycle repeats a few times for testing
  	// -------------------------------------------------------------------
  	HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 80002ea:	2200      	movs	r2, #0
 80002ec:	4973      	ldr	r1, [pc, #460]	; (80004bc <main+0x22c>)
 80002ee:	4874      	ldr	r0, [pc, #464]	; (80004c0 <main+0x230>)
 80002f0:	f002 fd1c 	bl	8002d2c <HAL_RTC_GetTime>
  	HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 80002f4:	2200      	movs	r2, #0
 80002f6:	4973      	ldr	r1, [pc, #460]	; (80004c4 <main+0x234>)
 80002f8:	4871      	ldr	r0, [pc, #452]	; (80004c0 <main+0x230>)
 80002fa:	f002 fe1c 	bl	8002f36 <HAL_RTC_GetDate>

  	sprintf((char *)msg, "GetTime/Date: %.2d:%.2d:%.2d\r\n", stimestructureget.Hours,
 80002fe:	4b6f      	ldr	r3, [pc, #444]	; (80004bc <main+0x22c>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	461a      	mov	r2, r3
  			stimestructureget.Minutes, stimestructureget.Seconds);
 8000304:	4b6d      	ldr	r3, [pc, #436]	; (80004bc <main+0x22c>)
 8000306:	785b      	ldrb	r3, [r3, #1]
  	sprintf((char *)msg, "GetTime/Date: %.2d:%.2d:%.2d\r\n", stimestructureget.Hours,
 8000308:	4619      	mov	r1, r3
  			stimestructureget.Minutes, stimestructureget.Seconds);
 800030a:	4b6c      	ldr	r3, [pc, #432]	; (80004bc <main+0x22c>)
 800030c:	789b      	ldrb	r3, [r3, #2]
  	sprintf((char *)msg, "GetTime/Date: %.2d:%.2d:%.2d\r\n", stimestructureget.Hours,
 800030e:	9300      	str	r3, [sp, #0]
 8000310:	460b      	mov	r3, r1
 8000312:	496d      	ldr	r1, [pc, #436]	; (80004c8 <main+0x238>)
 8000314:	4867      	ldr	r0, [pc, #412]	; (80004b4 <main+0x224>)
 8000316:	f003 fd9f 	bl	8003e58 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 800031a:	4866      	ldr	r0, [pc, #408]	; (80004b4 <main+0x224>)
 800031c:	f7ff ff60 	bl	80001e0 <strlen>
 8000320:	4603      	mov	r3, r0
 8000322:	b29a      	uxth	r2, r3
 8000324:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000328:	4962      	ldr	r1, [pc, #392]	; (80004b4 <main+0x224>)
 800032a:	4863      	ldr	r0, [pc, #396]	; (80004b8 <main+0x228>)
 800032c:	f003 f990 	bl	8003650 <HAL_UART_Transmit>

  	// need to call HAL_RTC_SetTime() before setting alarm
  	if (HAL_RTC_SetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BCD) != HAL_OK)
 8000330:	2201      	movs	r2, #1
 8000332:	4964      	ldr	r1, [pc, #400]	; (80004c4 <main+0x234>)
 8000334:	4862      	ldr	r0, [pc, #392]	; (80004c0 <main+0x230>)
 8000336:	f002 fd57 	bl	8002de8 <HAL_RTC_SetDate>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <main+0xb4>
  	{
  	    Error_Handler();
 8000340:	f000 fb20 	bl	8000984 <Error_Handler>
	}

  	// update alarm a values
	sAlarmA.AlarmTime.Minutes = (uint8_t) (stimestructureget.Minutes + (stimestructureget.Seconds + 20) / 60);
 8000344:	4b5d      	ldr	r3, [pc, #372]	; (80004bc <main+0x22c>)
 8000346:	785a      	ldrb	r2, [r3, #1]
 8000348:	4b5c      	ldr	r3, [pc, #368]	; (80004bc <main+0x22c>)
 800034a:	789b      	ldrb	r3, [r3, #2]
 800034c:	3314      	adds	r3, #20
 800034e:	495f      	ldr	r1, [pc, #380]	; (80004cc <main+0x23c>)
 8000350:	fb81 0103 	smull	r0, r1, r1, r3
 8000354:	4419      	add	r1, r3
 8000356:	1149      	asrs	r1, r1, #5
 8000358:	17db      	asrs	r3, r3, #31
 800035a:	1acb      	subs	r3, r1, r3
 800035c:	b2db      	uxtb	r3, r3
 800035e:	4413      	add	r3, r2
 8000360:	b2da      	uxtb	r2, r3
 8000362:	4b5b      	ldr	r3, [pc, #364]	; (80004d0 <main+0x240>)
 8000364:	705a      	strb	r2, [r3, #1]
//	if (sAlarmA.AlarmTime.Minutes > 59) {
//		sAlarmA.AlarmTime.Hours = (uint8_t) ((stimestructureget.Hours + 1) % 24);
//		sAlarmA.AlarmTime.Minutes = (uint8_t) 0;
//	}
	sAlarmA.AlarmTime.Hours = 0x11;
 8000366:	4b5a      	ldr	r3, [pc, #360]	; (80004d0 <main+0x240>)
 8000368:	2211      	movs	r2, #17
 800036a:	701a      	strb	r2, [r3, #0]
	sAlarmA.AlarmTime.Seconds = (uint8_t) ((stimestructureget.Seconds + 20) % 60);
 800036c:	4b53      	ldr	r3, [pc, #332]	; (80004bc <main+0x22c>)
 800036e:	789b      	ldrb	r3, [r3, #2]
 8000370:	f103 0214 	add.w	r2, r3, #20
 8000374:	4b55      	ldr	r3, [pc, #340]	; (80004cc <main+0x23c>)
 8000376:	fb83 1302 	smull	r1, r3, r3, r2
 800037a:	4413      	add	r3, r2
 800037c:	1159      	asrs	r1, r3, #5
 800037e:	17d3      	asrs	r3, r2, #31
 8000380:	1ac9      	subs	r1, r1, r3
 8000382:	460b      	mov	r3, r1
 8000384:	011b      	lsls	r3, r3, #4
 8000386:	1a5b      	subs	r3, r3, r1
 8000388:	009b      	lsls	r3, r3, #2
 800038a:	1ad1      	subs	r1, r2, r3
 800038c:	b2ca      	uxtb	r2, r1
 800038e:	4b50      	ldr	r3, [pc, #320]	; (80004d0 <main+0x240>)
 8000390:	709a      	strb	r2, [r3, #2]
	sAlarmA.Alarm = RTC_ALARM_A;
 8000392:	4b4f      	ldr	r3, [pc, #316]	; (80004d0 <main+0x240>)
 8000394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000398:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarmA, RTC_FORMAT_BCD) != HAL_OK)
 800039a:	2201      	movs	r2, #1
 800039c:	494c      	ldr	r1, [pc, #304]	; (80004d0 <main+0x240>)
 800039e:	4848      	ldr	r0, [pc, #288]	; (80004c0 <main+0x230>)
 80003a0:	f002 fe18 	bl	8002fd4 <HAL_RTC_SetAlarm_IT>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <main+0x11e>
	{
	  Error_Handler();
 80003aa:	f000 faeb 	bl	8000984 <Error_Handler>
	}

	// debug info
	sprintf((char *)msg, "Alarm A values: %.2d:%.2d:%.2d\r\n", sAlarmA.AlarmTime.Hours,
 80003ae:	4b48      	ldr	r3, [pc, #288]	; (80004d0 <main+0x240>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	461a      	mov	r2, r3
			sAlarmA.AlarmTime.Minutes, sAlarmA.AlarmTime.Seconds);
 80003b4:	4b46      	ldr	r3, [pc, #280]	; (80004d0 <main+0x240>)
 80003b6:	785b      	ldrb	r3, [r3, #1]
	sprintf((char *)msg, "Alarm A values: %.2d:%.2d:%.2d\r\n", sAlarmA.AlarmTime.Hours,
 80003b8:	4619      	mov	r1, r3
			sAlarmA.AlarmTime.Minutes, sAlarmA.AlarmTime.Seconds);
 80003ba:	4b45      	ldr	r3, [pc, #276]	; (80004d0 <main+0x240>)
 80003bc:	789b      	ldrb	r3, [r3, #2]
	sprintf((char *)msg, "Alarm A values: %.2d:%.2d:%.2d\r\n", sAlarmA.AlarmTime.Hours,
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	460b      	mov	r3, r1
 80003c2:	4944      	ldr	r1, [pc, #272]	; (80004d4 <main+0x244>)
 80003c4:	483b      	ldr	r0, [pc, #236]	; (80004b4 <main+0x224>)
 80003c6:	f003 fd47 	bl	8003e58 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 80003ca:	483a      	ldr	r0, [pc, #232]	; (80004b4 <main+0x224>)
 80003cc:	f7ff ff08 	bl	80001e0 <strlen>
 80003d0:	4603      	mov	r3, r0
 80003d2:	b29a      	uxth	r2, r3
 80003d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003d8:	4936      	ldr	r1, [pc, #216]	; (80004b4 <main+0x224>)
 80003da:	4837      	ldr	r0, [pc, #220]	; (80004b8 <main+0x228>)
 80003dc:	f003 f938 	bl	8003650 <HAL_UART_Transmit>

	// -------------------------------------------------------------------
  	// update alarm b so wake/sleep cycle repeats a few times for testing
	// -------------------------------------------------------------------
	sAlarmB.AlarmTime.Minutes = (uint8_t) (sAlarmA.AlarmTime.Minutes + (sAlarmA.AlarmTime.Seconds + 20) / 60);
 80003e0:	4b3b      	ldr	r3, [pc, #236]	; (80004d0 <main+0x240>)
 80003e2:	785a      	ldrb	r2, [r3, #1]
 80003e4:	4b3a      	ldr	r3, [pc, #232]	; (80004d0 <main+0x240>)
 80003e6:	789b      	ldrb	r3, [r3, #2]
 80003e8:	3314      	adds	r3, #20
 80003ea:	4938      	ldr	r1, [pc, #224]	; (80004cc <main+0x23c>)
 80003ec:	fb81 0103 	smull	r0, r1, r1, r3
 80003f0:	4419      	add	r1, r3
 80003f2:	1149      	asrs	r1, r1, #5
 80003f4:	17db      	asrs	r3, r3, #31
 80003f6:	1acb      	subs	r3, r1, r3
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	4413      	add	r3, r2
 80003fc:	b2da      	uxtb	r2, r3
 80003fe:	4b36      	ldr	r3, [pc, #216]	; (80004d8 <main+0x248>)
 8000400:	705a      	strb	r2, [r3, #1]
	if (sAlarmB.AlarmTime.Minutes > 59) {
 8000402:	4b35      	ldr	r3, [pc, #212]	; (80004d8 <main+0x248>)
 8000404:	785b      	ldrb	r3, [r3, #1]
 8000406:	2b3b      	cmp	r3, #59	; 0x3b
 8000408:	d913      	bls.n	8000432 <main+0x1a2>
		sAlarmB.AlarmTime.Hours = (uint8_t) ((sAlarmA.AlarmTime.Hours + 1) % 24);
 800040a:	4b31      	ldr	r3, [pc, #196]	; (80004d0 <main+0x240>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	1c5a      	adds	r2, r3, #1
 8000410:	4b32      	ldr	r3, [pc, #200]	; (80004dc <main+0x24c>)
 8000412:	fb83 1302 	smull	r1, r3, r3, r2
 8000416:	1099      	asrs	r1, r3, #2
 8000418:	17d3      	asrs	r3, r2, #31
 800041a:	1ac9      	subs	r1, r1, r3
 800041c:	460b      	mov	r3, r1
 800041e:	005b      	lsls	r3, r3, #1
 8000420:	440b      	add	r3, r1
 8000422:	00db      	lsls	r3, r3, #3
 8000424:	1ad1      	subs	r1, r2, r3
 8000426:	b2ca      	uxtb	r2, r1
 8000428:	4b2b      	ldr	r3, [pc, #172]	; (80004d8 <main+0x248>)
 800042a:	701a      	strb	r2, [r3, #0]
		sAlarmB.AlarmTime.Minutes = (uint8_t) 0;
 800042c:	4b2a      	ldr	r3, [pc, #168]	; (80004d8 <main+0x248>)
 800042e:	2200      	movs	r2, #0
 8000430:	705a      	strb	r2, [r3, #1]
	}
	sAlarmB.AlarmTime.Seconds = (uint8_t) ((sAlarmA.AlarmTime.Seconds + 20) % 60);
 8000432:	4b27      	ldr	r3, [pc, #156]	; (80004d0 <main+0x240>)
 8000434:	789b      	ldrb	r3, [r3, #2]
 8000436:	f103 0214 	add.w	r2, r3, #20
 800043a:	4b24      	ldr	r3, [pc, #144]	; (80004cc <main+0x23c>)
 800043c:	fb83 1302 	smull	r1, r3, r3, r2
 8000440:	4413      	add	r3, r2
 8000442:	1159      	asrs	r1, r3, #5
 8000444:	17d3      	asrs	r3, r2, #31
 8000446:	1ac9      	subs	r1, r1, r3
 8000448:	460b      	mov	r3, r1
 800044a:	011b      	lsls	r3, r3, #4
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	1ad1      	subs	r1, r2, r3
 8000452:	b2ca      	uxtb	r2, r1
 8000454:	4b20      	ldr	r3, [pc, #128]	; (80004d8 <main+0x248>)
 8000456:	709a      	strb	r2, [r3, #2]
	sAlarmB.Alarm = RTC_ALARM_A;
 8000458:	4b1f      	ldr	r3, [pc, #124]	; (80004d8 <main+0x248>)
 800045a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800045e:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarmB, RTC_FORMAT_BCD) != HAL_OK)
 8000460:	2201      	movs	r2, #1
 8000462:	491d      	ldr	r1, [pc, #116]	; (80004d8 <main+0x248>)
 8000464:	4816      	ldr	r0, [pc, #88]	; (80004c0 <main+0x230>)
 8000466:	f002 fdb5 	bl	8002fd4 <HAL_RTC_SetAlarm_IT>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <main+0x1e4>
	{
	  Error_Handler();
 8000470:	f000 fa88 	bl	8000984 <Error_Handler>
	}

	// debug info
	sprintf((char *)msg, "Alarm B values: %.2d:%.2d:%.2d\r\n", sAlarmB.AlarmTime.Hours,
 8000474:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <main+0x248>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	461a      	mov	r2, r3
			sAlarmB.AlarmTime.Minutes, sAlarmB.AlarmTime.Seconds);
 800047a:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <main+0x248>)
 800047c:	785b      	ldrb	r3, [r3, #1]
	sprintf((char *)msg, "Alarm B values: %.2d:%.2d:%.2d\r\n", sAlarmB.AlarmTime.Hours,
 800047e:	4619      	mov	r1, r3
			sAlarmB.AlarmTime.Minutes, sAlarmB.AlarmTime.Seconds);
 8000480:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <main+0x248>)
 8000482:	789b      	ldrb	r3, [r3, #2]
	sprintf((char *)msg, "Alarm B values: %.2d:%.2d:%.2d\r\n", sAlarmB.AlarmTime.Hours,
 8000484:	9300      	str	r3, [sp, #0]
 8000486:	460b      	mov	r3, r1
 8000488:	4915      	ldr	r1, [pc, #84]	; (80004e0 <main+0x250>)
 800048a:	480a      	ldr	r0, [pc, #40]	; (80004b4 <main+0x224>)
 800048c:	f003 fce4 	bl	8003e58 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000490:	4808      	ldr	r0, [pc, #32]	; (80004b4 <main+0x224>)
 8000492:	f7ff fea5 	bl	80001e0 <strlen>
 8000496:	4603      	mov	r3, r0
 8000498:	b29a      	uxth	r2, r3
 800049a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800049e:	4905      	ldr	r1, [pc, #20]	; (80004b4 <main+0x224>)
 80004a0:	4805      	ldr	r0, [pc, #20]	; (80004b8 <main+0x228>)
 80004a2:	f003 f8d5 	bl	8003650 <HAL_UART_Transmit>
 80004a6:	e0c3      	b.n	8000630 <main+0x3a0>
 80004a8:	48000800 	.word	0x48000800
 80004ac:	40007000 	.word	0x40007000
 80004b0:	080046cc 	.word	0x080046cc
 80004b4:	200000c4 	.word	0x200000c4
 80004b8:	20000188 	.word	0x20000188
 80004bc:	20000174 	.word	0x20000174
 80004c0:	20000154 	.word	0x20000154
 80004c4:	20000128 	.word	0x20000128
 80004c8:	080046ec 	.word	0x080046ec
 80004cc:	88888889 	.word	0x88888889
 80004d0:	2000012c 	.word	0x2000012c
 80004d4:	0800470c 	.word	0x0800470c
 80004d8:	2000009c 	.word	0x2000009c
 80004dc:	2aaaaaab 	.word	0x2aaaaaab
 80004e0:	08004730 	.word	0x08004730
	// -------------------------------------------------------------------
	// -------------------------------------------------------------------

  } else {
  /** Set the RTC Time and Date		 */
	sprintf((char *)msg, "Setting RTC time and date in else statement\r\n");
 80004e4:	497e      	ldr	r1, [pc, #504]	; (80006e0 <main+0x450>)
 80004e6:	487f      	ldr	r0, [pc, #508]	; (80006e4 <main+0x454>)
 80004e8:	f003 fcb6 	bl	8003e58 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 80004ec:	487d      	ldr	r0, [pc, #500]	; (80006e4 <main+0x454>)
 80004ee:	f7ff fe77 	bl	80001e0 <strlen>
 80004f2:	4603      	mov	r3, r0
 80004f4:	b29a      	uxth	r2, r3
 80004f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004fa:	497a      	ldr	r1, [pc, #488]	; (80006e4 <main+0x454>)
 80004fc:	487a      	ldr	r0, [pc, #488]	; (80006e8 <main+0x458>)
 80004fe:	f003 f8a7 	bl	8003650 <HAL_UART_Transmit>

    stimestructureget.Hours = 0x11;
 8000502:	4b7a      	ldr	r3, [pc, #488]	; (80006ec <main+0x45c>)
 8000504:	2211      	movs	r2, #17
 8000506:	701a      	strb	r2, [r3, #0]
    stimestructureget.Minutes = 0x11;
 8000508:	4b78      	ldr	r3, [pc, #480]	; (80006ec <main+0x45c>)
 800050a:	2211      	movs	r2, #17
 800050c:	705a      	strb	r2, [r3, #1]
    stimestructureget.Seconds = 0x00;
 800050e:	4b77      	ldr	r3, [pc, #476]	; (80006ec <main+0x45c>)
 8000510:	2200      	movs	r2, #0
 8000512:	709a      	strb	r2, [r3, #2]
    stimestructureget.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000514:	4b75      	ldr	r3, [pc, #468]	; (80006ec <main+0x45c>)
 8000516:	2200      	movs	r2, #0
 8000518:	60da      	str	r2, [r3, #12]
    stimestructureget.StoreOperation = RTC_STOREOPERATION_RESET;
 800051a:	4b74      	ldr	r3, [pc, #464]	; (80006ec <main+0x45c>)
 800051c:	2200      	movs	r2, #0
 800051e:	611a      	str	r2, [r3, #16]
    if (HAL_RTC_SetTime(&hrtc, &stimestructureget, RTC_FORMAT_BCD) != HAL_OK)
 8000520:	2201      	movs	r2, #1
 8000522:	4972      	ldr	r1, [pc, #456]	; (80006ec <main+0x45c>)
 8000524:	4872      	ldr	r0, [pc, #456]	; (80006f0 <main+0x460>)
 8000526:	f002 fb44 	bl	8002bb2 <HAL_RTC_SetTime>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <main+0x2a4>
    {
  	  Error_Handler();
 8000530:	f000 fa28 	bl	8000984 <Error_Handler>
    }
    sdatestructureget.WeekDay = RTC_WEEKDAY_MONDAY;
 8000534:	4b6f      	ldr	r3, [pc, #444]	; (80006f4 <main+0x464>)
 8000536:	2201      	movs	r2, #1
 8000538:	701a      	strb	r2, [r3, #0]
    sdatestructureget.Month = RTC_MONTH_APRIL;
 800053a:	4b6e      	ldr	r3, [pc, #440]	; (80006f4 <main+0x464>)
 800053c:	2204      	movs	r2, #4
 800053e:	705a      	strb	r2, [r3, #1]
    sdatestructureget.Date = 0x12;
 8000540:	4b6c      	ldr	r3, [pc, #432]	; (80006f4 <main+0x464>)
 8000542:	2212      	movs	r2, #18
 8000544:	709a      	strb	r2, [r3, #2]
    sdatestructureget.Year = 0x21;
 8000546:	4b6b      	ldr	r3, [pc, #428]	; (80006f4 <main+0x464>)
 8000548:	2221      	movs	r2, #33	; 0x21
 800054a:	70da      	strb	r2, [r3, #3]

    if (HAL_RTC_SetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BCD) != HAL_OK)
 800054c:	2201      	movs	r2, #1
 800054e:	4969      	ldr	r1, [pc, #420]	; (80006f4 <main+0x464>)
 8000550:	4867      	ldr	r0, [pc, #412]	; (80006f0 <main+0x460>)
 8000552:	f002 fc49 	bl	8002de8 <HAL_RTC_SetDate>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <main+0x2d0>
    {
  	  Error_Handler();
 800055c:	f000 fa12 	bl	8000984 <Error_Handler>
    }

    /** Enable the Alarm A */
    sAlarmA.AlarmTime.Hours = 0x11;
 8000560:	4b65      	ldr	r3, [pc, #404]	; (80006f8 <main+0x468>)
 8000562:	2211      	movs	r2, #17
 8000564:	701a      	strb	r2, [r3, #0]
    sAlarmA.AlarmTime.Minutes = 0x11;
 8000566:	4b64      	ldr	r3, [pc, #400]	; (80006f8 <main+0x468>)
 8000568:	2211      	movs	r2, #17
 800056a:	705a      	strb	r2, [r3, #1]
    sAlarmA.AlarmTime.Seconds = 0x10;
 800056c:	4b62      	ldr	r3, [pc, #392]	; (80006f8 <main+0x468>)
 800056e:	2210      	movs	r2, #16
 8000570:	709a      	strb	r2, [r3, #2]
    sAlarmA.AlarmTime.SubSeconds = 0x0;
 8000572:	4b61      	ldr	r3, [pc, #388]	; (80006f8 <main+0x468>)
 8000574:	2200      	movs	r2, #0
 8000576:	605a      	str	r2, [r3, #4]
    sAlarmA.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000578:	4b5f      	ldr	r3, [pc, #380]	; (80006f8 <main+0x468>)
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
    sAlarmA.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800057e:	4b5e      	ldr	r3, [pc, #376]	; (80006f8 <main+0x468>)
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
    sAlarmA.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY; // make alarm occur every day at specified time
 8000584:	4b5c      	ldr	r3, [pc, #368]	; (80006f8 <main+0x468>)
 8000586:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800058a:	615a      	str	r2, [r3, #20]
    sAlarmA.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 800058c:	4b5a      	ldr	r3, [pc, #360]	; (80006f8 <main+0x468>)
 800058e:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8000592:	619a      	str	r2, [r3, #24]
    sAlarmA.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000594:	4b58      	ldr	r3, [pc, #352]	; (80006f8 <main+0x468>)
 8000596:	2200      	movs	r2, #0
 8000598:	61da      	str	r2, [r3, #28]
    sAlarmA.AlarmDateWeekDay = 0x1;
 800059a:	4b57      	ldr	r3, [pc, #348]	; (80006f8 <main+0x468>)
 800059c:	2201      	movs	r2, #1
 800059e:	f883 2020 	strb.w	r2, [r3, #32]
    sAlarmA.Alarm = RTC_ALARM_A;
 80005a2:	4b55      	ldr	r3, [pc, #340]	; (80006f8 <main+0x468>)
 80005a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarmA, RTC_FORMAT_BCD) != HAL_OK)
 80005aa:	2201      	movs	r2, #1
 80005ac:	4952      	ldr	r1, [pc, #328]	; (80006f8 <main+0x468>)
 80005ae:	4850      	ldr	r0, [pc, #320]	; (80006f0 <main+0x460>)
 80005b0:	f002 fd10 	bl	8002fd4 <HAL_RTC_SetAlarm_IT>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <main+0x32e>
    {
      Error_Handler();
 80005ba:	f000 f9e3 	bl	8000984 <Error_Handler>
    }
    /** Enable the Alarm B */
    sAlarmB.AlarmTime.Hours = 0x11;
 80005be:	4b4f      	ldr	r3, [pc, #316]	; (80006fc <main+0x46c>)
 80005c0:	2211      	movs	r2, #17
 80005c2:	701a      	strb	r2, [r3, #0]
    sAlarmB.AlarmTime.Minutes = 0x11;
 80005c4:	4b4d      	ldr	r3, [pc, #308]	; (80006fc <main+0x46c>)
 80005c6:	2211      	movs	r2, #17
 80005c8:	705a      	strb	r2, [r3, #1]
    sAlarmB.AlarmTime.Seconds = 0x30;
 80005ca:	4b4c      	ldr	r3, [pc, #304]	; (80006fc <main+0x46c>)
 80005cc:	2230      	movs	r2, #48	; 0x30
 80005ce:	709a      	strb	r2, [r3, #2]
    sAlarmB.AlarmTime.SubSeconds = 0x0;
 80005d0:	4b4a      	ldr	r3, [pc, #296]	; (80006fc <main+0x46c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	605a      	str	r2, [r3, #4]
    sAlarmB.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80005d6:	4b49      	ldr	r3, [pc, #292]	; (80006fc <main+0x46c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
    sAlarmB.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80005dc:	4b47      	ldr	r3, [pc, #284]	; (80006fc <main+0x46c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
    sAlarmB.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY; // make alarm occur every day at specified time
 80005e2:	4b46      	ldr	r3, [pc, #280]	; (80006fc <main+0x46c>)
 80005e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80005e8:	615a      	str	r2, [r3, #20]
    sAlarmB.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80005ea:	4b44      	ldr	r3, [pc, #272]	; (80006fc <main+0x46c>)
 80005ec:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 80005f0:	619a      	str	r2, [r3, #24]
    sAlarmB.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80005f2:	4b42      	ldr	r3, [pc, #264]	; (80006fc <main+0x46c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	61da      	str	r2, [r3, #28]
    sAlarmB.AlarmDateWeekDay = 0x1;
 80005f8:	4b40      	ldr	r3, [pc, #256]	; (80006fc <main+0x46c>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	f883 2020 	strb.w	r2, [r3, #32]
    sAlarmB.Alarm = RTC_ALARM_B;
 8000600:	4b3e      	ldr	r3, [pc, #248]	; (80006fc <main+0x46c>)
 8000602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000606:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarmB, RTC_FORMAT_BCD) != HAL_OK)
 8000608:	2201      	movs	r2, #1
 800060a:	493c      	ldr	r1, [pc, #240]	; (80006fc <main+0x46c>)
 800060c:	4838      	ldr	r0, [pc, #224]	; (80006f0 <main+0x460>)
 800060e:	f002 fce1 	bl	8002fd4 <HAL_RTC_SetAlarm_IT>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <main+0x38c>
    {
  	  Error_Handler();
 8000618:	f000 f9b4 	bl	8000984 <Error_Handler>
    }

    /** Enable the WakeUp */
    if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800061c:	2200      	movs	r2, #0
 800061e:	2100      	movs	r1, #0
 8000620:	4833      	ldr	r0, [pc, #204]	; (80006f0 <main+0x460>)
 8000622:	f002 fee5 	bl	80033f0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <main+0x3a0>
    {
  	  Error_Handler();
 800062c:	f000 f9aa 	bl	8000984 <Error_Handler>
    }
  }
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU); // clear the wakeup flag
 8000630:	4b33      	ldr	r3, [pc, #204]	; (8000700 <main+0x470>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a32      	ldr	r2, [pc, #200]	; (8000700 <main+0x470>)
 8000636:	f043 0304 	orr.w	r3, r3, #4
 800063a:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (alarmAOccurred) {
 800063c:	4b31      	ldr	r3, [pc, #196]	; (8000704 <main+0x474>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d01f      	beq.n	8000686 <main+0x3f6>
		  sprintf((char *)msg, "entered alarmAOccurred in while loop\r\n");
 8000646:	4930      	ldr	r1, [pc, #192]	; (8000708 <main+0x478>)
 8000648:	4826      	ldr	r0, [pc, #152]	; (80006e4 <main+0x454>)
 800064a:	f003 fc05 	bl	8003e58 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 800064e:	4825      	ldr	r0, [pc, #148]	; (80006e4 <main+0x454>)
 8000650:	f7ff fdc6 	bl	80001e0 <strlen>
 8000654:	4603      	mov	r3, r0
 8000656:	b29a      	uxth	r2, r3
 8000658:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065c:	4921      	ldr	r1, [pc, #132]	; (80006e4 <main+0x454>)
 800065e:	4822      	ldr	r0, [pc, #136]	; (80006e8 <main+0x458>)
 8000660:	f002 fff6 	bl	8003650 <HAL_UART_Transmit>
		  HAL_PWR_EnterSTANDBYMode();
 8000664:	f000 fe92 	bl	800138c <HAL_PWR_EnterSTANDBYMode>
		  sprintf((char *)msg, "line right after enter standby mode\r\n");
 8000668:	4928      	ldr	r1, [pc, #160]	; (800070c <main+0x47c>)
 800066a:	481e      	ldr	r0, [pc, #120]	; (80006e4 <main+0x454>)
 800066c:	f003 fbf4 	bl	8003e58 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000670:	481c      	ldr	r0, [pc, #112]	; (80006e4 <main+0x454>)
 8000672:	f7ff fdb5 	bl	80001e0 <strlen>
 8000676:	4603      	mov	r3, r0
 8000678:	b29a      	uxth	r2, r3
 800067a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067e:	4919      	ldr	r1, [pc, #100]	; (80006e4 <main+0x454>)
 8000680:	4819      	ldr	r0, [pc, #100]	; (80006e8 <main+0x458>)
 8000682:	f002 ffe5 	bl	8003650 <HAL_UART_Transmit>
	  }
	  // if this loop is entered, blink led really fast
	  HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 8000686:	2200      	movs	r2, #0
 8000688:	491a      	ldr	r1, [pc, #104]	; (80006f4 <main+0x464>)
 800068a:	4819      	ldr	r0, [pc, #100]	; (80006f0 <main+0x460>)
 800068c:	f002 fc53 	bl	8002f36 <HAL_RTC_GetDate>
	  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8000690:	2200      	movs	r2, #0
 8000692:	4916      	ldr	r1, [pc, #88]	; (80006ec <main+0x45c>)
 8000694:	4816      	ldr	r0, [pc, #88]	; (80006f0 <main+0x460>)
 8000696:	f002 fb49 	bl	8002d2c <HAL_RTC_GetTime>

	  uint8_t tx_buffer[1000];
	  sprintf((char *)tx_buffer, "TIME -- Hour:%hu\t\t Minute:%hu\t Second:%hu\n\r\n", (uint16_t)stimestructureget.Hours, (uint16_t)stimestructureget.Minutes, (uint16_t)stimestructureget.Seconds);
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <main+0x45c>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <main+0x45c>)
 80006a2:	785b      	ldrb	r3, [r3, #1]
 80006a4:	4619      	mov	r1, r3
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <main+0x45c>)
 80006a8:	789b      	ldrb	r3, [r3, #2]
 80006aa:	4638      	mov	r0, r7
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	460b      	mov	r3, r1
 80006b0:	4917      	ldr	r1, [pc, #92]	; (8000710 <main+0x480>)
 80006b2:	f003 fbd1 	bl	8003e58 <siprintf>
	  HAL_UART_Transmit(&huart2, tx_buffer, strlen((char const *) tx_buffer), 1000);
 80006b6:	463b      	mov	r3, r7
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fd91 	bl	80001e0 <strlen>
 80006be:	4603      	mov	r3, r0
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	4639      	mov	r1, r7
 80006c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c8:	4807      	ldr	r0, [pc, #28]	; (80006e8 <main+0x458>)
 80006ca:	f002 ffc1 	bl	8003650 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(LED_Output_GPIO_Port, LED_Output_Pin);
 80006ce:	2104      	movs	r1, #4
 80006d0:	4810      	ldr	r0, [pc, #64]	; (8000714 <main+0x484>)
 80006d2:	f000 fe41 	bl	8001358 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 80006d6:	20fa      	movs	r0, #250	; 0xfa
 80006d8:	f000 fb66 	bl	8000da8 <HAL_Delay>
  {
 80006dc:	e7ae      	b.n	800063c <main+0x3ac>
 80006de:	bf00      	nop
 80006e0:	08004754 	.word	0x08004754
 80006e4:	200000c4 	.word	0x200000c4
 80006e8:	20000188 	.word	0x20000188
 80006ec:	20000174 	.word	0x20000174
 80006f0:	20000154 	.word	0x20000154
 80006f4:	20000128 	.word	0x20000128
 80006f8:	2000012c 	.word	0x2000012c
 80006fc:	2000009c 	.word	0x2000009c
 8000700:	40007000 	.word	0x40007000
 8000704:	2000008c 	.word	0x2000008c
 8000708:	08004784 	.word	0x08004784
 800070c:	080047ac 	.word	0x080047ac
 8000710:	080047d4 	.word	0x080047d4
 8000714:	48000800 	.word	0x48000800

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b0a6      	sub	sp, #152	; 0x98
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000722:	2228      	movs	r2, #40	; 0x28
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f003 fb8e 	bl	8003e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2258      	movs	r2, #88	; 0x58
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f003 fb80 	bl	8003e48 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000748:	230a      	movs	r3, #10
 800074a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000750:	2310      	movs	r3, #16
 8000752:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000756:	2301      	movs	r3, #1
 8000758:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2302      	movs	r3, #2
 800075e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000766:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800076a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800076e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fe1d 	bl	80013bc <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000788:	f000 f8fc 	bl	8000984 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078c:	230f      	movs	r3, #15
 800078e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000790:	2302      	movs	r3, #2
 8000792:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800079c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80007a6:	2102      	movs	r1, #2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 fd1d 	bl	80021e8 <HAL_RCC_ClockConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80007b4:	f000 f8e6 	bl	8000984 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <SystemClock_Config+0xc8>)
 80007ba:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80007c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 ff43 	bl	8002654 <HAL_RCCEx_PeriphCLKConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007d4:	f000 f8d6 	bl	8000984 <Error_Handler>
  }
}
 80007d8:	bf00      	nop
 80007da:	3798      	adds	r7, #152	; 0x98
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	00010002 	.word	0x00010002

080007e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_RTC_Init+0x44>)
 80007ea:	4a10      	ldr	r2, [pc, #64]	; (800082c <MX_RTC_Init+0x48>)
 80007ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_RTC_Init+0x44>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_RTC_Init+0x44>)
 80007f6:	227f      	movs	r2, #127	; 0x7f
 80007f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_RTC_Init+0x44>)
 80007fc:	22ff      	movs	r2, #255	; 0xff
 80007fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_RTC_Init+0x44>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_RTC_Init+0x44>)
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_RTC_Init+0x44>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_RTC_Init+0x44>)
 8000814:	f002 f93c 	bl	8002a90 <HAL_RTC_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800081e:	f000 f8b1 	bl	8000984 <Error_Handler>

  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000154 	.word	0x20000154
 800082c:	40002800 	.word	0x40002800

08000830 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_USART2_UART_Init+0x58>)
 8000836:	4a15      	ldr	r2, [pc, #84]	; (800088c <MX_USART2_UART_Init+0x5c>)
 8000838:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_USART2_UART_Init+0x58>)
 800083c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000840:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_USART2_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_USART2_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_USART2_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_USART2_UART_Init+0x58>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_USART2_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_USART2_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_USART2_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_USART2_UART_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_USART2_UART_Init+0x58>)
 8000874:	f002 fe9e 	bl	80035b4 <HAL_UART_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800087e:	f000 f881 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000188 	.word	0x20000188
 800088c:	40004400 	.word	0x40004400

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	4b34      	ldr	r3, [pc, #208]	; (8000978 <MX_GPIO_Init+0xe8>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	4a33      	ldr	r2, [pc, #204]	; (8000978 <MX_GPIO_Init+0xe8>)
 80008ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008b0:	6153      	str	r3, [r2, #20]
 80008b2:	4b31      	ldr	r3, [pc, #196]	; (8000978 <MX_GPIO_Init+0xe8>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008be:	4b2e      	ldr	r3, [pc, #184]	; (8000978 <MX_GPIO_Init+0xe8>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	4a2d      	ldr	r2, [pc, #180]	; (8000978 <MX_GPIO_Init+0xe8>)
 80008c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008c8:	6153      	str	r3, [r2, #20]
 80008ca:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <MX_GPIO_Init+0xe8>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b28      	ldr	r3, [pc, #160]	; (8000978 <MX_GPIO_Init+0xe8>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	4a27      	ldr	r2, [pc, #156]	; (8000978 <MX_GPIO_Init+0xe8>)
 80008dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e0:	6153      	str	r3, [r2, #20]
 80008e2:	4b25      	ldr	r3, [pc, #148]	; (8000978 <MX_GPIO_Init+0xe8>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	4b22      	ldr	r3, [pc, #136]	; (8000978 <MX_GPIO_Init+0xe8>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	4a21      	ldr	r2, [pc, #132]	; (8000978 <MX_GPIO_Init+0xe8>)
 80008f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008f8:	6153      	str	r3, [r2, #20]
 80008fa:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <MX_GPIO_Init+0xe8>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Output_GPIO_Port, LED_Output_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2104      	movs	r1, #4
 800090a:	481c      	ldr	r0, [pc, #112]	; (800097c <MX_GPIO_Init+0xec>)
 800090c:	f000 fd0c 	bl	8001328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2120      	movs	r1, #32
 8000914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000918:	f000 fd06 	bl	8001328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800091c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_GPIO_Init+0xf0>)
 8000924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	4812      	ldr	r0, [pc, #72]	; (800097c <MX_GPIO_Init+0xec>)
 8000932:	f000 fb6f 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Output_Pin */
  GPIO_InitStruct.Pin = LED_Output_Pin;
 8000936:	2304      	movs	r3, #4
 8000938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Output_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	480b      	ldr	r0, [pc, #44]	; (800097c <MX_GPIO_Init+0xec>)
 800094e:	f000 fb61 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000952:	2320      	movs	r3, #32
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096c:	f000 fb52 	bl	8001014 <HAL_GPIO_Init>

}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	; 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40021000 	.word	0x40021000
 800097c:	48000800 	.word	0x48000800
 8000980:	10210000 	.word	0x10210000

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
//  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LED_Output_GPIO_Port, LED_Output_Pin, RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2104      	movs	r1, #4
 800098c:	4807      	ldr	r0, [pc, #28]	; (80009ac <Error_Handler+0x28>)
 800098e:	f000 fccb 	bl	8001328 <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 8000992:	20fa      	movs	r0, #250	; 0xfa
 8000994:	f000 fa08 	bl	8000da8 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_Output_GPIO_Port, LED_Output_Pin, SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2104      	movs	r1, #4
 800099c:	4803      	ldr	r0, [pc, #12]	; (80009ac <Error_Handler+0x28>)
 800099e:	f000 fcc3 	bl	8001328 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80009a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009a6:	f000 f9ff 	bl	8000da8 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_Output_GPIO_Port, LED_Output_Pin, RESET);
 80009aa:	e7ed      	b.n	8000988 <Error_Handler+0x4>
 80009ac:	48000800 	.word	0x48000800

080009b0 <HAL_RTC_AlarmAEventCallback>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

// Callbacks
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b09c      	sub	sp, #112	; 0x70
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	// transmit over UART2 to indicate callback happened
	uint8_t msg[100];
	sprintf((char *)msg, "Alarm A callback entered\r\n");
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	490c      	ldr	r1, [pc, #48]	; (80009f0 <HAL_RTC_AlarmAEventCallback+0x40>)
 80009be:	4618      	mov	r0, r3
 80009c0:	f003 fa4a 	bl	8003e58 <siprintf>
	HAL_UART_Transmit(&huart2, msg, strlen((char const *)msg), 1000);
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fc09 	bl	80001e0 <strlen>
 80009ce:	4603      	mov	r3, r0
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	f107 010c 	add.w	r1, r7, #12
 80009d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009da:	4806      	ldr	r0, [pc, #24]	; (80009f4 <HAL_RTC_AlarmAEventCallback+0x44>)
 80009dc:	f002 fe38 	bl	8003650 <HAL_UART_Transmit>

//	HAL_PWR_EnterSTANDBYMode();
	alarmAOccurred = 1;
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_RTC_AlarmAEventCallback+0x48>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]

}
 80009e6:	bf00      	nop
 80009e8:	3770      	adds	r7, #112	; 0x70
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	08004804 	.word	0x08004804
 80009f4:	20000188 	.word	0x20000188
 80009f8:	2000008c 	.word	0x2000008c

080009fc <HAL_RTCEx_AlarmBEventCallback>:

void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b09c      	sub	sp, #112	; 0x70
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	// transmit over UART2 to indicate callback happened
	uint8_t msg[100];
	sprintf((char *)msg, "Alarm B callback entered\r\n");
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	490c      	ldr	r1, [pc, #48]	; (8000a3c <HAL_RTCEx_AlarmBEventCallback+0x40>)
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f003 fa24 	bl	8003e58 <siprintf>
	HAL_UART_Transmit(&huart2, msg, strlen((char const *)msg), 1000);
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fbe3 	bl	80001e0 <strlen>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	f107 010c 	add.w	r1, r7, #12
 8000a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a26:	4806      	ldr	r0, [pc, #24]	; (8000a40 <HAL_RTCEx_AlarmBEventCallback+0x44>)
 8000a28:	f002 fe12 	bl	8003650 <HAL_UART_Transmit>
	alarmAOccurred = 0;
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <HAL_RTCEx_AlarmBEventCallback+0x48>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]

}
 8000a32:	bf00      	nop
 8000a34:	3770      	adds	r7, #112	; 0x70
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	08004820 	.word	0x08004820
 8000a40:	20000188 	.word	0x20000188
 8000a44:	2000008c 	.word	0x2000008c

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <HAL_MspInit+0x44>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <HAL_MspInit+0x44>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6193      	str	r3, [r2, #24]
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <HAL_MspInit+0x44>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_MspInit+0x44>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	4a08      	ldr	r2, [pc, #32]	; (8000a8c <HAL_MspInit+0x44>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a70:	61d3      	str	r3, [r2, #28]
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_MspInit+0x44>)
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a7e:	2007      	movs	r0, #7
 8000a80:	f000 fa86 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40021000 	.word	0x40021000

08000a90 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <HAL_RTC_MspInit+0x60>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d121      	bne.n	8000ae6 <HAL_RTC_MspInit+0x56>
 8000aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aa6:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	fa93 f3a3 	rbit	r3, r3
 8000aae:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ab2:	fab3 f383 	clz	r3, r3
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_RTC_MspInit+0x64>)
 8000abc:	4413      	add	r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	6013      	str	r3, [r2, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2003      	movs	r0, #3
 8000acc:	f000 fa6b 	bl	8000fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f000 fa84 	bl	8000fde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2029      	movs	r0, #41	; 0x29
 8000adc:	f000 fa63 	bl	8000fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000ae0:	2029      	movs	r0, #41	; 0x29
 8000ae2:	f000 fa7c 	bl	8000fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40002800 	.word	0x40002800
 8000af4:	10908100 	.word	0x10908100

08000af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <HAL_UART_MspInit+0x7c>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d128      	bne.n	8000b6c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_UART_MspInit+0x80>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	4a16      	ldr	r2, [pc, #88]	; (8000b78 <HAL_UART_MspInit+0x80>)
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b24:	61d3      	str	r3, [r2, #28]
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <HAL_UART_MspInit+0x80>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <HAL_UART_MspInit+0x80>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	4a10      	ldr	r2, [pc, #64]	; (8000b78 <HAL_UART_MspInit+0x80>)
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	6153      	str	r3, [r2, #20]
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <HAL_UART_MspInit+0x80>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b4a:	230c      	movs	r3, #12
 8000b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b5a:	2307      	movs	r3, #7
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b68:	f000 fa54 	bl	8001014 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b6c:	bf00      	nop
 8000b6e:	3728      	adds	r7, #40	; 0x28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40004400 	.word	0x40004400
 8000b78:	40021000 	.word	0x40021000

08000b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <NMI_Handler+0x4>

08000b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <MemManage_Handler+0x4>

08000b8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <BusFault_Handler+0x4>

08000b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <UsageFault_Handler+0x4>

08000b9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc8:	f000 f8ce 	bl	8000d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <RTC_WKUP_IRQHandler+0x10>)
 8000bd6:	f002 fcbf 	bl	8003558 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000154 	.word	0x20000154

08000be4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <RTC_Alarm_IRQHandler+0x10>)
 8000bea:	f002 fb2b 	bl	8003244 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000154 	.word	0x20000154

08000bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c00:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <_sbrk+0x5c>)
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <_sbrk+0x60>)
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <_sbrk+0x64>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <_sbrk+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d207      	bcs.n	8000c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c28:	f003 f8e4 	bl	8003df4 <__errno>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	220c      	movs	r2, #12
 8000c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	e009      	b.n	8000c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <_sbrk+0x64>)
 8000c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20010000 	.word	0x20010000
 8000c58:	00000400 	.word	0x00000400
 8000c5c:	20000090 	.word	0x20000090
 8000c60:	20000220 	.word	0x20000220

08000c64 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <SystemInit+0x20>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <SystemInit+0x20>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c8c:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c8e:	490e      	ldr	r1, [pc, #56]	; (8000cc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c90:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <LoopForever+0xe>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c94:	e002      	b.n	8000c9c <LoopCopyDataInit>

08000c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9a:	3304      	adds	r3, #4

08000c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca0:	d3f9      	bcc.n	8000c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca4:	4c0b      	ldr	r4, [pc, #44]	; (8000cd4 <LoopForever+0x16>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca8:	e001      	b.n	8000cae <LoopFillZerobss>

08000caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cac:	3204      	adds	r2, #4

08000cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb0:	d3fb      	bcc.n	8000caa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cb2:	f7ff ffd7 	bl	8000c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f003 f8a3 	bl	8003e00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cba:	f7ff fae9 	bl	8000290 <main>

08000cbe <LoopForever>:

LoopForever:
    b LoopForever
 8000cbe:	e7fe      	b.n	8000cbe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cc0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ccc:	080048b0 	.word	0x080048b0
  ldr r2, =_sbss
 8000cd0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cd4:	20000220 	.word	0x20000220

08000cd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC1_2_IRQHandler>
	...

08000cdc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <HAL_Init+0x28>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <HAL_Init+0x28>)
 8000ce6:	f043 0310 	orr.w	r3, r3, #16
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cec:	2003      	movs	r0, #3
 8000cee:	f000 f94f 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f000 f808 	bl	8000d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf8:	f7ff fea6 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40022000 	.word	0x40022000

08000d08 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_InitTick+0x54>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <HAL_InitTick+0x58>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 f967 	bl	8000ffa <HAL_SYSTICK_Config>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00e      	b.n	8000d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b0f      	cmp	r3, #15
 8000d3a:	d80a      	bhi.n	8000d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f000 f92f 	bl	8000fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d48:	4a06      	ldr	r2, [pc, #24]	; (8000d64 <HAL_InitTick+0x5c>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e000      	b.n	8000d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000004 	.word	0x20000004

08000d68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x20>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_IncTick+0x24>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <HAL_IncTick+0x24>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	2000020c 	.word	0x2000020c

08000d90 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <HAL_GetTick+0x14>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	2000020c 	.word	0x2000020c

08000da8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db0:	f7ff ffee 	bl	8000d90 <HAL_GetTick>
 8000db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc0:	d005      	beq.n	8000dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_Delay+0x44>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4413      	add	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000dce:	bf00      	nop
 8000dd0:	f7ff ffde 	bl	8000d90 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d8f7      	bhi.n	8000dd0 <HAL_Delay+0x28>
  {
  }
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008

08000df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e22:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	60d3      	str	r3, [r2, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <__NVIC_GetPriorityGrouping+0x18>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	f003 0307 	and.w	r3, r3, #7
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db0b      	blt.n	8000e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 021f 	and.w	r2, r3, #31
 8000e6c:	4907      	ldr	r1, [pc, #28]	; (8000e8c <__NVIC_EnableIRQ+0x38>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	095b      	lsrs	r3, r3, #5
 8000e74:	2001      	movs	r0, #1
 8000e76:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e100 	.word	0xe000e100

08000e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	6039      	str	r1, [r7, #0]
 8000e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db0a      	blt.n	8000eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	490c      	ldr	r1, [pc, #48]	; (8000edc <__NVIC_SetPriority+0x4c>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb8:	e00a      	b.n	8000ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4908      	ldr	r1, [pc, #32]	; (8000ee0 <__NVIC_SetPriority+0x50>)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	440b      	add	r3, r1
 8000ece:	761a      	strb	r2, [r3, #24]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f1c3 0307 	rsb	r3, r3, #7
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf28      	it	cs
 8000f02:	2304      	movcs	r3, #4
 8000f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	d902      	bls.n	8000f14 <NVIC_EncodePriority+0x30>
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3b03      	subs	r3, #3
 8000f12:	e000      	b.n	8000f16 <NVIC_EncodePriority+0x32>
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43da      	mvns	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	401a      	ands	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	4313      	orrs	r3, r2
         );
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3724      	adds	r7, #36	; 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f5c:	d301      	bcc.n	8000f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00f      	b.n	8000f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <SysTick_Config+0x40>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6a:	210f      	movs	r1, #15
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f7ff ff8e 	bl	8000e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <SysTick_Config+0x40>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <SysTick_Config+0x40>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ff29 	bl	8000df0 <__NVIC_SetPriorityGrouping>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb8:	f7ff ff3e 	bl	8000e38 <__NVIC_GetPriorityGrouping>
 8000fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	68b9      	ldr	r1, [r7, #8]
 8000fc2:	6978      	ldr	r0, [r7, #20]
 8000fc4:	f7ff ff8e 	bl	8000ee4 <NVIC_EncodePriority>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff5d 	bl	8000e90 <__NVIC_SetPriority>
}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff31 	bl	8000e54 <__NVIC_EnableIRQ>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffa2 	bl	8000f4c <SysTick_Config>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001022:	e160      	b.n	80012e6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	2101      	movs	r1, #1
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	4013      	ands	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 8152 	beq.w	80012e0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d00b      	beq.n	800105c <HAL_GPIO_Init+0x48>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d007      	beq.n	800105c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001050:	2b11      	cmp	r3, #17
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b12      	cmp	r3, #18
 800105a:	d130      	bne.n	80010be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001092:	2201      	movs	r2, #1
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	091b      	lsrs	r3, r3, #4
 80010a8:	f003 0201 	and.w	r2, r3, #1
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	2203      	movs	r2, #3
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0xea>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b12      	cmp	r3, #18
 80010fc:	d123      	bne.n	8001146 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	08da      	lsrs	r2, r3, #3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3208      	adds	r2, #8
 8001106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	220f      	movs	r2, #15
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	691a      	ldr	r2, [r3, #16]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	6939      	ldr	r1, [r7, #16]
 8001142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0203 	and.w	r2, r3, #3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 80ac 	beq.w	80012e0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001188:	4b5e      	ldr	r3, [pc, #376]	; (8001304 <HAL_GPIO_Init+0x2f0>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a5d      	ldr	r2, [pc, #372]	; (8001304 <HAL_GPIO_Init+0x2f0>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b5b      	ldr	r3, [pc, #364]	; (8001304 <HAL_GPIO_Init+0x2f0>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011a0:	4a59      	ldr	r2, [pc, #356]	; (8001308 <HAL_GPIO_Init+0x2f4>)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011ca:	d025      	beq.n	8001218 <HAL_GPIO_Init+0x204>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a4f      	ldr	r2, [pc, #316]	; (800130c <HAL_GPIO_Init+0x2f8>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d01f      	beq.n	8001214 <HAL_GPIO_Init+0x200>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a4e      	ldr	r2, [pc, #312]	; (8001310 <HAL_GPIO_Init+0x2fc>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d019      	beq.n	8001210 <HAL_GPIO_Init+0x1fc>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a4d      	ldr	r2, [pc, #308]	; (8001314 <HAL_GPIO_Init+0x300>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d013      	beq.n	800120c <HAL_GPIO_Init+0x1f8>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a4c      	ldr	r2, [pc, #304]	; (8001318 <HAL_GPIO_Init+0x304>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d00d      	beq.n	8001208 <HAL_GPIO_Init+0x1f4>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a4b      	ldr	r2, [pc, #300]	; (800131c <HAL_GPIO_Init+0x308>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d007      	beq.n	8001204 <HAL_GPIO_Init+0x1f0>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a4a      	ldr	r2, [pc, #296]	; (8001320 <HAL_GPIO_Init+0x30c>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d101      	bne.n	8001200 <HAL_GPIO_Init+0x1ec>
 80011fc:	2306      	movs	r3, #6
 80011fe:	e00c      	b.n	800121a <HAL_GPIO_Init+0x206>
 8001200:	2307      	movs	r3, #7
 8001202:	e00a      	b.n	800121a <HAL_GPIO_Init+0x206>
 8001204:	2305      	movs	r3, #5
 8001206:	e008      	b.n	800121a <HAL_GPIO_Init+0x206>
 8001208:	2304      	movs	r3, #4
 800120a:	e006      	b.n	800121a <HAL_GPIO_Init+0x206>
 800120c:	2303      	movs	r3, #3
 800120e:	e004      	b.n	800121a <HAL_GPIO_Init+0x206>
 8001210:	2302      	movs	r3, #2
 8001212:	e002      	b.n	800121a <HAL_GPIO_Init+0x206>
 8001214:	2301      	movs	r3, #1
 8001216:	e000      	b.n	800121a <HAL_GPIO_Init+0x206>
 8001218:	2300      	movs	r3, #0
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	f002 0203 	and.w	r2, r2, #3
 8001220:	0092      	lsls	r2, r2, #2
 8001222:	4093      	lsls	r3, r2
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800122a:	4937      	ldr	r1, [pc, #220]	; (8001308 <HAL_GPIO_Init+0x2f4>)
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	3302      	adds	r3, #2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001238:	4b3a      	ldr	r3, [pc, #232]	; (8001324 <HAL_GPIO_Init+0x310>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800125c:	4a31      	ldr	r2, [pc, #196]	; (8001324 <HAL_GPIO_Init+0x310>)
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001262:	4b30      	ldr	r3, [pc, #192]	; (8001324 <HAL_GPIO_Init+0x310>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001286:	4a27      	ldr	r2, [pc, #156]	; (8001324 <HAL_GPIO_Init+0x310>)
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800128c:	4b25      	ldr	r3, [pc, #148]	; (8001324 <HAL_GPIO_Init+0x310>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	43db      	mvns	r3, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012b0:	4a1c      	ldr	r2, [pc, #112]	; (8001324 <HAL_GPIO_Init+0x310>)
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b6:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <HAL_GPIO_Init+0x310>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012da:	4a12      	ldr	r2, [pc, #72]	; (8001324 <HAL_GPIO_Init+0x310>)
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	3301      	adds	r3, #1
 80012e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	fa22 f303 	lsr.w	r3, r2, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f47f ae97 	bne.w	8001024 <HAL_GPIO_Init+0x10>
  }
}
 80012f6:	bf00      	nop
 80012f8:	bf00      	nop
 80012fa:	371c      	adds	r7, #28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	40021000 	.word	0x40021000
 8001308:	40010000 	.word	0x40010000
 800130c:	48000400 	.word	0x48000400
 8001310:	48000800 	.word	0x48000800
 8001314:	48000c00 	.word	0x48000c00
 8001318:	48001000 	.word	0x48001000
 800131c:	48001400 	.word	0x48001400
 8001320:	48001800 	.word	0x48001800
 8001324:	40010400 	.word	0x40010400

08001328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]
 8001334:	4613      	mov	r3, r2
 8001336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001338:	787b      	ldrb	r3, [r7, #1]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800133e:	887a      	ldrh	r2, [r7, #2]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001344:	e002      	b.n	800134c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001346:	887a      	ldrh	r2, [r7, #2]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800136a:	887a      	ldrh	r2, [r7, #2]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4013      	ands	r3, r2
 8001370:	041a      	lsls	r2, r3, #16
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	43d9      	mvns	r1, r3
 8001376:	887b      	ldrh	r3, [r7, #2]
 8001378:	400b      	ands	r3, r1
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	619a      	str	r2, [r3, #24]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <HAL_PWR_EnterSTANDBYMode>:
  *            Alarm out, or RTC clock calibration out, 
  *          - WKUP pins if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a07      	ldr	r2, [pc, #28]	; (80013b4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8001396:	f043 0302 	orr.w	r3, r3, #2
 800139a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80013a8:	bf30      	wfi
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	40007000 	.word	0x40007000
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d102      	bne.n	80013d6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	f000 bf01 	b.w	80021d8 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 8160 	beq.w	80016a6 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013e6:	4bae      	ldr	r3, [pc, #696]	; (80016a0 <HAL_RCC_OscConfig+0x2e4>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	d00c      	beq.n	800140c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013f2:	4bab      	ldr	r3, [pc, #684]	; (80016a0 <HAL_RCC_OscConfig+0x2e4>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 030c 	and.w	r3, r3, #12
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d159      	bne.n	80014b2 <HAL_RCC_OscConfig+0xf6>
 80013fe:	4ba8      	ldr	r3, [pc, #672]	; (80016a0 <HAL_RCC_OscConfig+0x2e4>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800140a:	d152      	bne.n	80014b2 <HAL_RCC_OscConfig+0xf6>
 800140c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001410:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001414:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001418:	fa93 f3a3 	rbit	r3, r3
 800141c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8001420:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001424:	fab3 f383 	clz	r3, r3
 8001428:	b2db      	uxtb	r3, r3
 800142a:	095b      	lsrs	r3, r3, #5
 800142c:	b2db      	uxtb	r3, r3
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b01      	cmp	r3, #1
 8001436:	d102      	bne.n	800143e <HAL_RCC_OscConfig+0x82>
 8001438:	4b99      	ldr	r3, [pc, #612]	; (80016a0 <HAL_RCC_OscConfig+0x2e4>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	e015      	b.n	800146a <HAL_RCC_OscConfig+0xae>
 800143e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001442:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001446:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800144a:	fa93 f3a3 	rbit	r3, r3
 800144e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001452:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001456:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800145a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800145e:	fa93 f3a3 	rbit	r3, r3
 8001462:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001466:	4b8e      	ldr	r3, [pc, #568]	; (80016a0 <HAL_RCC_OscConfig+0x2e4>)
 8001468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800146e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001472:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001476:	fa92 f2a2 	rbit	r2, r2
 800147a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800147e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001482:	fab2 f282 	clz	r2, r2
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	f042 0220 	orr.w	r2, r2, #32
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	f002 021f 	and.w	r2, r2, #31
 8001492:	2101      	movs	r1, #1
 8001494:	fa01 f202 	lsl.w	r2, r1, r2
 8001498:	4013      	ands	r3, r2
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 8102 	beq.w	80016a4 <HAL_RCC_OscConfig+0x2e8>
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f040 80fc 	bne.w	80016a4 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	f000 be93 	b.w	80021d8 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014bc:	d106      	bne.n	80014cc <HAL_RCC_OscConfig+0x110>
 80014be:	4b78      	ldr	r3, [pc, #480]	; (80016a0 <HAL_RCC_OscConfig+0x2e4>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a77      	ldr	r2, [pc, #476]	; (80016a0 <HAL_RCC_OscConfig+0x2e4>)
 80014c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e030      	b.n	800152e <HAL_RCC_OscConfig+0x172>
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10c      	bne.n	80014f0 <HAL_RCC_OscConfig+0x134>
 80014d6:	4b72      	ldr	r3, [pc, #456]	; (80016a0 <HAL_RCC_OscConfig+0x2e4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a71      	ldr	r2, [pc, #452]	; (80016a0 <HAL_RCC_OscConfig+0x2e4>)
 80014dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	4b6f      	ldr	r3, [pc, #444]	; (80016a0 <HAL_RCC_OscConfig+0x2e4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a6e      	ldr	r2, [pc, #440]	; (80016a0 <HAL_RCC_OscConfig+0x2e4>)
 80014e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	e01e      	b.n	800152e <HAL_RCC_OscConfig+0x172>
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014fa:	d10c      	bne.n	8001516 <HAL_RCC_OscConfig+0x15a>
 80014fc:	4b68      	ldr	r3, [pc, #416]	; (80016a0 <HAL_RCC_OscConfig+0x2e4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a67      	ldr	r2, [pc, #412]	; (80016a0 <HAL_RCC_OscConfig+0x2e4>)
 8001502:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b65      	ldr	r3, [pc, #404]	; (80016a0 <HAL_RCC_OscConfig+0x2e4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a64      	ldr	r2, [pc, #400]	; (80016a0 <HAL_RCC_OscConfig+0x2e4>)
 800150e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	e00b      	b.n	800152e <HAL_RCC_OscConfig+0x172>
 8001516:	4b62      	ldr	r3, [pc, #392]	; (80016a0 <HAL_RCC_OscConfig+0x2e4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a61      	ldr	r2, [pc, #388]	; (80016a0 <HAL_RCC_OscConfig+0x2e4>)
 800151c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	4b5f      	ldr	r3, [pc, #380]	; (80016a0 <HAL_RCC_OscConfig+0x2e4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a5e      	ldr	r2, [pc, #376]	; (80016a0 <HAL_RCC_OscConfig+0x2e4>)
 8001528:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800152c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d059      	beq.n	80015ec <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fc2a 	bl	8000d90 <HAL_GetTick>
 800153c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001540:	e00a      	b.n	8001558 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001542:	f7ff fc25 	bl	8000d90 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	; 0x64
 8001550:	d902      	bls.n	8001558 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	f000 be40 	b.w	80021d8 <HAL_RCC_OscConfig+0xe1c>
 8001558:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800155c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001560:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001564:	fa93 f3a3 	rbit	r3, r3
 8001568:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800156c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001570:	fab3 f383 	clz	r3, r3
 8001574:	b2db      	uxtb	r3, r3
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b01      	cmp	r3, #1
 8001582:	d102      	bne.n	800158a <HAL_RCC_OscConfig+0x1ce>
 8001584:	4b46      	ldr	r3, [pc, #280]	; (80016a0 <HAL_RCC_OscConfig+0x2e4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	e015      	b.n	80015b6 <HAL_RCC_OscConfig+0x1fa>
 800158a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800158e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001592:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001596:	fa93 f3a3 	rbit	r3, r3
 800159a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800159e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015a2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80015a6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80015aa:	fa93 f3a3 	rbit	r3, r3
 80015ae:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80015b2:	4b3b      	ldr	r3, [pc, #236]	; (80016a0 <HAL_RCC_OscConfig+0x2e4>)
 80015b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015ba:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80015be:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80015c2:	fa92 f2a2 	rbit	r2, r2
 80015c6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80015ca:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80015ce:	fab2 f282 	clz	r2, r2
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	f042 0220 	orr.w	r2, r2, #32
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	f002 021f 	and.w	r2, r2, #31
 80015de:	2101      	movs	r1, #1
 80015e0:	fa01 f202 	lsl.w	r2, r1, r2
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0ab      	beq.n	8001542 <HAL_RCC_OscConfig+0x186>
 80015ea:	e05c      	b.n	80016a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fbd0 	bl	8000d90 <HAL_GetTick>
 80015f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f4:	e00a      	b.n	800160c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015f6:	f7ff fbcb 	bl	8000d90 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b64      	cmp	r3, #100	; 0x64
 8001604:	d902      	bls.n	800160c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	f000 bde6 	b.w	80021d8 <HAL_RCC_OscConfig+0xe1c>
 800160c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001610:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001614:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001618:	fa93 f3a3 	rbit	r3, r3
 800161c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001620:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001624:	fab3 f383 	clz	r3, r3
 8001628:	b2db      	uxtb	r3, r3
 800162a:	095b      	lsrs	r3, r3, #5
 800162c:	b2db      	uxtb	r3, r3
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b01      	cmp	r3, #1
 8001636:	d102      	bne.n	800163e <HAL_RCC_OscConfig+0x282>
 8001638:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <HAL_RCC_OscConfig+0x2e4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	e015      	b.n	800166a <HAL_RCC_OscConfig+0x2ae>
 800163e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001642:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001646:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800164a:	fa93 f3a3 	rbit	r3, r3
 800164e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001652:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001656:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800165a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800165e:	fa93 f3a3 	rbit	r3, r3
 8001662:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_RCC_OscConfig+0x2e4>)
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800166e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001672:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001676:	fa92 f2a2 	rbit	r2, r2
 800167a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800167e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001682:	fab2 f282 	clz	r2, r2
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	f042 0220 	orr.w	r2, r2, #32
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	f002 021f 	and.w	r2, r2, #31
 8001692:	2101      	movs	r1, #1
 8001694:	fa01 f202 	lsl.w	r2, r1, r2
 8001698:	4013      	ands	r3, r2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1ab      	bne.n	80015f6 <HAL_RCC_OscConfig+0x23a>
 800169e:	e002      	b.n	80016a6 <HAL_RCC_OscConfig+0x2ea>
 80016a0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 8170 	beq.w	8001996 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016b6:	4bd0      	ldr	r3, [pc, #832]	; (80019f8 <HAL_RCC_OscConfig+0x63c>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00c      	beq.n	80016dc <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016c2:	4bcd      	ldr	r3, [pc, #820]	; (80019f8 <HAL_RCC_OscConfig+0x63c>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d16d      	bne.n	80017aa <HAL_RCC_OscConfig+0x3ee>
 80016ce:	4bca      	ldr	r3, [pc, #808]	; (80019f8 <HAL_RCC_OscConfig+0x63c>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80016d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016da:	d166      	bne.n	80017aa <HAL_RCC_OscConfig+0x3ee>
 80016dc:	2302      	movs	r3, #2
 80016de:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80016e6:	fa93 f3a3 	rbit	r3, r3
 80016ea:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80016ee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f2:	fab3 f383 	clz	r3, r3
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	095b      	lsrs	r3, r3, #5
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b01      	cmp	r3, #1
 8001704:	d102      	bne.n	800170c <HAL_RCC_OscConfig+0x350>
 8001706:	4bbc      	ldr	r3, [pc, #752]	; (80019f8 <HAL_RCC_OscConfig+0x63c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	e013      	b.n	8001734 <HAL_RCC_OscConfig+0x378>
 800170c:	2302      	movs	r3, #2
 800170e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001712:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001716:	fa93 f3a3 	rbit	r3, r3
 800171a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800171e:	2302      	movs	r3, #2
 8001720:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001724:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001728:	fa93 f3a3 	rbit	r3, r3
 800172c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001730:	4bb1      	ldr	r3, [pc, #708]	; (80019f8 <HAL_RCC_OscConfig+0x63c>)
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	2202      	movs	r2, #2
 8001736:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800173a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800173e:	fa92 f2a2 	rbit	r2, r2
 8001742:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001746:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800174a:	fab2 f282 	clz	r2, r2
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	f042 0220 	orr.w	r2, r2, #32
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	f002 021f 	and.w	r2, r2, #31
 800175a:	2101      	movs	r1, #1
 800175c:	fa01 f202 	lsl.w	r2, r1, r2
 8001760:	4013      	ands	r3, r2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d007      	beq.n	8001776 <HAL_RCC_OscConfig+0x3ba>
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d002      	beq.n	8001776 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	f000 bd31 	b.w	80021d8 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001776:	4ba0      	ldr	r3, [pc, #640]	; (80019f8 <HAL_RCC_OscConfig+0x63c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	21f8      	movs	r1, #248	; 0xf8
 8001786:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800178e:	fa91 f1a1 	rbit	r1, r1
 8001792:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001796:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800179a:	fab1 f181 	clz	r1, r1
 800179e:	b2c9      	uxtb	r1, r1
 80017a0:	408b      	lsls	r3, r1
 80017a2:	4995      	ldr	r1, [pc, #596]	; (80019f8 <HAL_RCC_OscConfig+0x63c>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a8:	e0f5      	b.n	8001996 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 8085 	beq.w	80018c0 <HAL_RCC_OscConfig+0x504>
 80017b6:	2301      	movs	r3, #1
 80017b8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80017c0:	fa93 f3a3 	rbit	r3, r3
 80017c4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80017c8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017cc:	fab3 f383 	clz	r3, r3
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	461a      	mov	r2, r3
 80017de:	2301      	movs	r3, #1
 80017e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e2:	f7ff fad5 	bl	8000d90 <HAL_GetTick>
 80017e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ea:	e00a      	b.n	8001802 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ec:	f7ff fad0 	bl	8000d90 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d902      	bls.n	8001802 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	f000 bceb 	b.w	80021d8 <HAL_RCC_OscConfig+0xe1c>
 8001802:	2302      	movs	r3, #2
 8001804:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001808:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800180c:	fa93 f3a3 	rbit	r3, r3
 8001810:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001814:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001818:	fab3 f383 	clz	r3, r3
 800181c:	b2db      	uxtb	r3, r3
 800181e:	095b      	lsrs	r3, r3, #5
 8001820:	b2db      	uxtb	r3, r3
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b01      	cmp	r3, #1
 800182a:	d102      	bne.n	8001832 <HAL_RCC_OscConfig+0x476>
 800182c:	4b72      	ldr	r3, [pc, #456]	; (80019f8 <HAL_RCC_OscConfig+0x63c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	e013      	b.n	800185a <HAL_RCC_OscConfig+0x49e>
 8001832:	2302      	movs	r3, #2
 8001834:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001838:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800183c:	fa93 f3a3 	rbit	r3, r3
 8001840:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001844:	2302      	movs	r3, #2
 8001846:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800184a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800184e:	fa93 f3a3 	rbit	r3, r3
 8001852:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001856:	4b68      	ldr	r3, [pc, #416]	; (80019f8 <HAL_RCC_OscConfig+0x63c>)
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	2202      	movs	r2, #2
 800185c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001860:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001864:	fa92 f2a2 	rbit	r2, r2
 8001868:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800186c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001870:	fab2 f282 	clz	r2, r2
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	f042 0220 	orr.w	r2, r2, #32
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	f002 021f 	and.w	r2, r2, #31
 8001880:	2101      	movs	r1, #1
 8001882:	fa01 f202 	lsl.w	r2, r1, r2
 8001886:	4013      	ands	r3, r2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0af      	beq.n	80017ec <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188c:	4b5a      	ldr	r3, [pc, #360]	; (80019f8 <HAL_RCC_OscConfig+0x63c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	21f8      	movs	r1, #248	; 0xf8
 800189c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80018a4:	fa91 f1a1 	rbit	r1, r1
 80018a8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80018ac:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80018b0:	fab1 f181 	clz	r1, r1
 80018b4:	b2c9      	uxtb	r1, r1
 80018b6:	408b      	lsls	r3, r1
 80018b8:	494f      	ldr	r1, [pc, #316]	; (80019f8 <HAL_RCC_OscConfig+0x63c>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]
 80018be:	e06a      	b.n	8001996 <HAL_RCC_OscConfig+0x5da>
 80018c0:	2301      	movs	r3, #1
 80018c2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80018ca:	fa93 f3a3 	rbit	r3, r3
 80018ce:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80018d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d6:	fab3 f383 	clz	r3, r3
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	461a      	mov	r2, r3
 80018e8:	2300      	movs	r3, #0
 80018ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff fa50 	bl	8000d90 <HAL_GetTick>
 80018f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f4:	e00a      	b.n	800190c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f6:	f7ff fa4b 	bl	8000d90 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d902      	bls.n	800190c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	f000 bc66 	b.w	80021d8 <HAL_RCC_OscConfig+0xe1c>
 800190c:	2302      	movs	r3, #2
 800190e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001912:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001916:	fa93 f3a3 	rbit	r3, r3
 800191a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800191e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001922:	fab3 f383 	clz	r3, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	095b      	lsrs	r3, r3, #5
 800192a:	b2db      	uxtb	r3, r3
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b01      	cmp	r3, #1
 8001934:	d102      	bne.n	800193c <HAL_RCC_OscConfig+0x580>
 8001936:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <HAL_RCC_OscConfig+0x63c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	e013      	b.n	8001964 <HAL_RCC_OscConfig+0x5a8>
 800193c:	2302      	movs	r3, #2
 800193e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001946:	fa93 f3a3 	rbit	r3, r3
 800194a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800194e:	2302      	movs	r3, #2
 8001950:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001954:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001958:	fa93 f3a3 	rbit	r3, r3
 800195c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001960:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <HAL_RCC_OscConfig+0x63c>)
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	2202      	movs	r2, #2
 8001966:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800196a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800196e:	fa92 f2a2 	rbit	r2, r2
 8001972:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001976:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800197a:	fab2 f282 	clz	r2, r2
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	f042 0220 	orr.w	r2, r2, #32
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	f002 021f 	and.w	r2, r2, #31
 800198a:	2101      	movs	r1, #1
 800198c:	fa01 f202 	lsl.w	r2, r1, r2
 8001990:	4013      	ands	r3, r2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1af      	bne.n	80018f6 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 80da 	beq.w	8001b5a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d069      	beq.n	8001a84 <HAL_RCC_OscConfig+0x6c8>
 80019b0:	2301      	movs	r3, #1
 80019b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019ba:	fa93 f3a3 	rbit	r3, r3
 80019be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80019c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c6:	fab3 f383 	clz	r3, r3
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_RCC_OscConfig+0x640>)
 80019d0:	4413      	add	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	461a      	mov	r2, r3
 80019d6:	2301      	movs	r3, #1
 80019d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019da:	f7ff f9d9 	bl	8000d90 <HAL_GetTick>
 80019de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e2:	e00d      	b.n	8001a00 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019e4:	f7ff f9d4 	bl	8000d90 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d905      	bls.n	8001a00 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e3ef      	b.n	80021d8 <HAL_RCC_OscConfig+0xe1c>
 80019f8:	40021000 	.word	0x40021000
 80019fc:	10908120 	.word	0x10908120
 8001a00:	2302      	movs	r3, #2
 8001a02:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001a0a:	fa93 f2a3 	rbit	r2, r3
 8001a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001a18:	2202      	movs	r2, #2
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	fa93 f2a3 	rbit	r2, r3
 8001a26:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001a30:	2202      	movs	r2, #2
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	fa93 f2a3 	rbit	r2, r3
 8001a3e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001a42:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a44:	4ba4      	ldr	r3, [pc, #656]	; (8001cd8 <HAL_RCC_OscConfig+0x91c>)
 8001a46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a48:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001a4c:	2102      	movs	r1, #2
 8001a4e:	6019      	str	r1, [r3, #0]
 8001a50:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	fa93 f1a3 	rbit	r1, r3
 8001a5a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001a5e:	6019      	str	r1, [r3, #0]
  return result;
 8001a60:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	fab3 f383 	clz	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	f003 031f 	and.w	r3, r3, #31
 8001a76:	2101      	movs	r1, #1
 8001a78:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0b0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x628>
 8001a82:	e06a      	b.n	8001b5a <HAL_RCC_OscConfig+0x79e>
 8001a84:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a88:	2201      	movs	r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	fa93 f2a3 	rbit	r2, r3
 8001a96:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a9a:	601a      	str	r2, [r3, #0]
  return result;
 8001a9c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001aa0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa2:	fab3 f383 	clz	r3, r3
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b8c      	ldr	r3, [pc, #560]	; (8001cdc <HAL_RCC_OscConfig+0x920>)
 8001aac:	4413      	add	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab6:	f7ff f96b 	bl	8000d90 <HAL_GetTick>
 8001aba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001abe:	e009      	b.n	8001ad4 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac0:	f7ff f966 	bl	8000d90 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e381      	b.n	80021d8 <HAL_RCC_OscConfig+0xe1c>
 8001ad4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ad8:	2202      	movs	r2, #2
 8001ada:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001adc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	fa93 f2a3 	rbit	r2, r3
 8001ae6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001af0:	2202      	movs	r2, #2
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	fa93 f2a3 	rbit	r2, r3
 8001afe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b08:	2202      	movs	r2, #2
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	fa93 f2a3 	rbit	r2, r3
 8001b16:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001b1a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b1c:	4b6e      	ldr	r3, [pc, #440]	; (8001cd8 <HAL_RCC_OscConfig+0x91c>)
 8001b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b24:	2102      	movs	r1, #2
 8001b26:	6019      	str	r1, [r3, #0]
 8001b28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	fa93 f1a3 	rbit	r1, r3
 8001b32:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b36:	6019      	str	r1, [r3, #0]
  return result;
 8001b38:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	fab3 f383 	clz	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	f003 031f 	and.w	r3, r3, #31
 8001b4e:	2101      	movs	r1, #1
 8001b50:	fa01 f303 	lsl.w	r3, r1, r3
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1b2      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 8157 	beq.w	8001e18 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b70:	4b59      	ldr	r3, [pc, #356]	; (8001cd8 <HAL_RCC_OscConfig+0x91c>)
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d112      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b7c:	4b56      	ldr	r3, [pc, #344]	; (8001cd8 <HAL_RCC_OscConfig+0x91c>)
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	4a55      	ldr	r2, [pc, #340]	; (8001cd8 <HAL_RCC_OscConfig+0x91c>)
 8001b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b86:	61d3      	str	r3, [r2, #28]
 8001b88:	4b53      	ldr	r3, [pc, #332]	; (8001cd8 <HAL_RCC_OscConfig+0x91c>)
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba2:	4b4f      	ldr	r3, [pc, #316]	; (8001ce0 <HAL_RCC_OscConfig+0x924>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d11a      	bne.n	8001be4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bae:	4b4c      	ldr	r3, [pc, #304]	; (8001ce0 <HAL_RCC_OscConfig+0x924>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a4b      	ldr	r2, [pc, #300]	; (8001ce0 <HAL_RCC_OscConfig+0x924>)
 8001bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bba:	f7ff f8e9 	bl	8000d90 <HAL_GetTick>
 8001bbe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc2:	e009      	b.n	8001bd8 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc4:	f7ff f8e4 	bl	8000d90 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b64      	cmp	r3, #100	; 0x64
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e2ff      	b.n	80021d8 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd8:	4b41      	ldr	r3, [pc, #260]	; (8001ce0 <HAL_RCC_OscConfig+0x924>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0ef      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d106      	bne.n	8001bfc <HAL_RCC_OscConfig+0x840>
 8001bee:	4b3a      	ldr	r3, [pc, #232]	; (8001cd8 <HAL_RCC_OscConfig+0x91c>)
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	4a39      	ldr	r2, [pc, #228]	; (8001cd8 <HAL_RCC_OscConfig+0x91c>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6213      	str	r3, [r2, #32]
 8001bfa:	e02f      	b.n	8001c5c <HAL_RCC_OscConfig+0x8a0>
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10c      	bne.n	8001c20 <HAL_RCC_OscConfig+0x864>
 8001c06:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <HAL_RCC_OscConfig+0x91c>)
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	4a33      	ldr	r2, [pc, #204]	; (8001cd8 <HAL_RCC_OscConfig+0x91c>)
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
 8001c10:	6213      	str	r3, [r2, #32]
 8001c12:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <HAL_RCC_OscConfig+0x91c>)
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	4a30      	ldr	r2, [pc, #192]	; (8001cd8 <HAL_RCC_OscConfig+0x91c>)
 8001c18:	f023 0304 	bic.w	r3, r3, #4
 8001c1c:	6213      	str	r3, [r2, #32]
 8001c1e:	e01d      	b.n	8001c5c <HAL_RCC_OscConfig+0x8a0>
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2b05      	cmp	r3, #5
 8001c28:	d10c      	bne.n	8001c44 <HAL_RCC_OscConfig+0x888>
 8001c2a:	4b2b      	ldr	r3, [pc, #172]	; (8001cd8 <HAL_RCC_OscConfig+0x91c>)
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	4a2a      	ldr	r2, [pc, #168]	; (8001cd8 <HAL_RCC_OscConfig+0x91c>)
 8001c30:	f043 0304 	orr.w	r3, r3, #4
 8001c34:	6213      	str	r3, [r2, #32]
 8001c36:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <HAL_RCC_OscConfig+0x91c>)
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	4a27      	ldr	r2, [pc, #156]	; (8001cd8 <HAL_RCC_OscConfig+0x91c>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	6213      	str	r3, [r2, #32]
 8001c42:	e00b      	b.n	8001c5c <HAL_RCC_OscConfig+0x8a0>
 8001c44:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <HAL_RCC_OscConfig+0x91c>)
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	4a23      	ldr	r2, [pc, #140]	; (8001cd8 <HAL_RCC_OscConfig+0x91c>)
 8001c4a:	f023 0301 	bic.w	r3, r3, #1
 8001c4e:	6213      	str	r3, [r2, #32]
 8001c50:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <HAL_RCC_OscConfig+0x91c>)
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	4a20      	ldr	r2, [pc, #128]	; (8001cd8 <HAL_RCC_OscConfig+0x91c>)
 8001c56:	f023 0304 	bic.w	r3, r3, #4
 8001c5a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d06a      	beq.n	8001d3c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c66:	f7ff f893 	bl	8000d90 <HAL_GetTick>
 8001c6a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c6e:	e00b      	b.n	8001c88 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c70:	f7ff f88e 	bl	8000d90 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e2a7      	b.n	80021d8 <HAL_RCC_OscConfig+0xe1c>
 8001c88:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c90:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	fa93 f2a3 	rbit	r2, r3
 8001c9a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	fa93 f2a3 	rbit	r2, r3
 8001cb2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001cb6:	601a      	str	r2, [r3, #0]
  return result;
 8001cb8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001cbc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	095b      	lsrs	r3, r3, #5
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d108      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x928>
 8001cd2:	4b01      	ldr	r3, [pc, #4]	; (8001cd8 <HAL_RCC_OscConfig+0x91c>)
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	e013      	b.n	8001d00 <HAL_RCC_OscConfig+0x944>
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	10908120 	.word	0x10908120
 8001ce0:	40007000 	.word	0x40007000
 8001ce4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ce8:	2202      	movs	r2, #2
 8001cea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	fa93 f2a3 	rbit	r2, r3
 8001cf6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	4bc0      	ldr	r3, [pc, #768]	; (8002000 <HAL_RCC_OscConfig+0xc44>)
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001d04:	2102      	movs	r1, #2
 8001d06:	6011      	str	r1, [r2, #0]
 8001d08:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001d0c:	6812      	ldr	r2, [r2, #0]
 8001d0e:	fa92 f1a2 	rbit	r1, r2
 8001d12:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001d16:	6011      	str	r1, [r2, #0]
  return result;
 8001d18:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	fab2 f282 	clz	r2, r2
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	f002 021f 	and.w	r2, r2, #31
 8001d2e:	2101      	movs	r1, #1
 8001d30:	fa01 f202 	lsl.w	r2, r1, r2
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d09a      	beq.n	8001c70 <HAL_RCC_OscConfig+0x8b4>
 8001d3a:	e063      	b.n	8001e04 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3c:	f7ff f828 	bl	8000d90 <HAL_GetTick>
 8001d40:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d44:	e00b      	b.n	8001d5e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d46:	f7ff f823 	bl	8000d90 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e23c      	b.n	80021d8 <HAL_RCC_OscConfig+0xe1c>
 8001d5e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d62:	2202      	movs	r2, #2
 8001d64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	fa93 f2a3 	rbit	r2, r3
 8001d70:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	fa93 f2a3 	rbit	r2, r3
 8001d88:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d8c:	601a      	str	r2, [r3, #0]
  return result;
 8001d8e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d92:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d94:	fab3 f383 	clz	r3, r3
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	f043 0302 	orr.w	r3, r3, #2
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d102      	bne.n	8001dae <HAL_RCC_OscConfig+0x9f2>
 8001da8:	4b95      	ldr	r3, [pc, #596]	; (8002000 <HAL_RCC_OscConfig+0xc44>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	e00d      	b.n	8001dca <HAL_RCC_OscConfig+0xa0e>
 8001dae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001db2:	2202      	movs	r2, #2
 8001db4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	fa93 f2a3 	rbit	r2, r3
 8001dc0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	4b8e      	ldr	r3, [pc, #568]	; (8002000 <HAL_RCC_OscConfig+0xc44>)
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001dce:	2102      	movs	r1, #2
 8001dd0:	6011      	str	r1, [r2, #0]
 8001dd2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	fa92 f1a2 	rbit	r1, r2
 8001ddc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001de0:	6011      	str	r1, [r2, #0]
  return result;
 8001de2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	fab2 f282 	clz	r2, r2
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	f002 021f 	and.w	r2, r2, #31
 8001df8:	2101      	movs	r1, #1
 8001dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1a0      	bne.n	8001d46 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e04:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d105      	bne.n	8001e18 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0c:	4b7c      	ldr	r3, [pc, #496]	; (8002000 <HAL_RCC_OscConfig+0xc44>)
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	4a7b      	ldr	r2, [pc, #492]	; (8002000 <HAL_RCC_OscConfig+0xc44>)
 8001e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e16:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 81d9 	beq.w	80021d6 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e24:	4b76      	ldr	r3, [pc, #472]	; (8002000 <HAL_RCC_OscConfig+0xc44>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	f000 81a6 	beq.w	800217e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	f040 811e 	bne.w	800207a <HAL_RCC_OscConfig+0xcbe>
 8001e3e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001e42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	fa93 f2a3 	rbit	r2, r3
 8001e52:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e56:	601a      	str	r2, [r3, #0]
  return result;
 8001e58:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e5c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5e:	fab3 f383 	clz	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	461a      	mov	r2, r3
 8001e70:	2300      	movs	r3, #0
 8001e72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7fe ff8c 	bl	8000d90 <HAL_GetTick>
 8001e78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e7c:	e009      	b.n	8001e92 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e7e:	f7fe ff87 	bl	8000d90 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e1a2      	b.n	80021d8 <HAL_RCC_OscConfig+0xe1c>
 8001e92:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	fa93 f2a3 	rbit	r2, r3
 8001ea6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001eaa:	601a      	str	r2, [r3, #0]
  return result;
 8001eac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001eb0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	095b      	lsrs	r3, r3, #5
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d102      	bne.n	8001ecc <HAL_RCC_OscConfig+0xb10>
 8001ec6:	4b4e      	ldr	r3, [pc, #312]	; (8002000 <HAL_RCC_OscConfig+0xc44>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	e01b      	b.n	8001f04 <HAL_RCC_OscConfig+0xb48>
 8001ecc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ed0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ed4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	fa93 f2a3 	rbit	r2, r3
 8001ee0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001eea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	fa93 f2a3 	rbit	r2, r3
 8001efa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	4b3f      	ldr	r3, [pc, #252]	; (8002000 <HAL_RCC_OscConfig+0xc44>)
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001f08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f0c:	6011      	str	r1, [r2, #0]
 8001f0e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	fa92 f1a2 	rbit	r1, r2
 8001f18:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f1c:	6011      	str	r1, [r2, #0]
  return result;
 8001f1e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	fab2 f282 	clz	r2, r2
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	f042 0220 	orr.w	r2, r2, #32
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	f002 021f 	and.w	r2, r2, #31
 8001f34:	2101      	movs	r1, #1
 8001f36:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d19e      	bne.n	8001e7e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f40:	4b2f      	ldr	r3, [pc, #188]	; (8002000 <HAL_RCC_OscConfig+0xc44>)
 8001f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f44:	f023 020f 	bic.w	r2, r3, #15
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	492c      	ldr	r1, [pc, #176]	; (8002000 <HAL_RCC_OscConfig+0xc44>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001f54:	4b2a      	ldr	r3, [pc, #168]	; (8002000 <HAL_RCC_OscConfig+0xc44>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6a19      	ldr	r1, [r3, #32]
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	4925      	ldr	r1, [pc, #148]	; (8002000 <HAL_RCC_OscConfig+0xc44>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
 8001f70:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	fa93 f2a3 	rbit	r2, r3
 8001f84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f88:	601a      	str	r2, [r3, #0]
  return result;
 8001f8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f8e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f90:	fab3 f383 	clz	r3, r3
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f9a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa6:	f7fe fef3 	bl	8000d90 <HAL_GetTick>
 8001faa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fae:	e009      	b.n	8001fc4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb0:	f7fe feee 	bl	8000d90 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e109      	b.n	80021d8 <HAL_RCC_OscConfig+0xe1c>
 8001fc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	fa93 f2a3 	rbit	r2, r3
 8001fd8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fdc:	601a      	str	r2, [r3, #0]
  return result;
 8001fde:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fe2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe4:	fab3 f383 	clz	r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d105      	bne.n	8002004 <HAL_RCC_OscConfig+0xc48>
 8001ff8:	4b01      	ldr	r3, [pc, #4]	; (8002000 <HAL_RCC_OscConfig+0xc44>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	e01e      	b.n	800203c <HAL_RCC_OscConfig+0xc80>
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000
 8002004:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002008:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800200c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	fa93 f2a3 	rbit	r2, r3
 8002018:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002022:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	fa93 f2a3 	rbit	r2, r3
 8002032:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	4b6a      	ldr	r3, [pc, #424]	; (80021e4 <HAL_RCC_OscConfig+0xe28>)
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002040:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002044:	6011      	str	r1, [r2, #0]
 8002046:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	fa92 f1a2 	rbit	r1, r2
 8002050:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002054:	6011      	str	r1, [r2, #0]
  return result;
 8002056:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	fab2 f282 	clz	r2, r2
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	f042 0220 	orr.w	r2, r2, #32
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	f002 021f 	and.w	r2, r2, #31
 800206c:	2101      	movs	r1, #1
 800206e:	fa01 f202 	lsl.w	r2, r1, r2
 8002072:	4013      	ands	r3, r2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d09b      	beq.n	8001fb0 <HAL_RCC_OscConfig+0xbf4>
 8002078:	e0ad      	b.n	80021d6 <HAL_RCC_OscConfig+0xe1a>
 800207a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800207e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002082:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	fa93 f2a3 	rbit	r2, r3
 800208e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002092:	601a      	str	r2, [r3, #0]
  return result;
 8002094:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002098:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	461a      	mov	r2, r3
 80020ac:	2300      	movs	r3, #0
 80020ae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7fe fe6e 	bl	8000d90 <HAL_GetTick>
 80020b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b8:	e009      	b.n	80020ce <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ba:	f7fe fe69 	bl	8000d90 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e084      	b.n	80021d8 <HAL_RCC_OscConfig+0xe1c>
 80020ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	fa93 f2a3 	rbit	r2, r3
 80020e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020e6:	601a      	str	r2, [r3, #0]
  return result;
 80020e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	095b      	lsrs	r3, r3, #5
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d102      	bne.n	8002108 <HAL_RCC_OscConfig+0xd4c>
 8002102:	4b38      	ldr	r3, [pc, #224]	; (80021e4 <HAL_RCC_OscConfig+0xe28>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	e01b      	b.n	8002140 <HAL_RCC_OscConfig+0xd84>
 8002108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002110:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	fa93 f2a3 	rbit	r2, r3
 800211c:	f107 0320 	add.w	r3, r7, #32
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	f107 031c 	add.w	r3, r7, #28
 8002126:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	f107 031c 	add.w	r3, r7, #28
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	fa93 f2a3 	rbit	r2, r3
 8002136:	f107 0318 	add.w	r3, r7, #24
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	4b29      	ldr	r3, [pc, #164]	; (80021e4 <HAL_RCC_OscConfig+0xe28>)
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	f107 0214 	add.w	r2, r7, #20
 8002144:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002148:	6011      	str	r1, [r2, #0]
 800214a:	f107 0214 	add.w	r2, r7, #20
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	fa92 f1a2 	rbit	r1, r2
 8002154:	f107 0210 	add.w	r2, r7, #16
 8002158:	6011      	str	r1, [r2, #0]
  return result;
 800215a:	f107 0210 	add.w	r2, r7, #16
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	fab2 f282 	clz	r2, r2
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	f042 0220 	orr.w	r2, r2, #32
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	f002 021f 	and.w	r2, r2, #31
 8002170:	2101      	movs	r1, #1
 8002172:	fa01 f202 	lsl.w	r2, r1, r2
 8002176:	4013      	ands	r3, r2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d19e      	bne.n	80020ba <HAL_RCC_OscConfig+0xcfe>
 800217c:	e02b      	b.n	80021d6 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e025      	b.n	80021d8 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800218c:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <HAL_RCC_OscConfig+0xe28>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002194:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <HAL_RCC_OscConfig+0xe28>)
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800219c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021a0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80021a4:	1d3b      	adds	r3, r7, #4
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d111      	bne.n	80021d2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80021ae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021bc:	429a      	cmp	r2, r3
 80021be:	d108      	bne.n	80021d2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80021c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021c4:	f003 020f 	and.w	r2, r3, #15
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d001      	beq.n	80021d6 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40021000 	.word	0x40021000

080021e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b09e      	sub	sp, #120	; 0x78
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e162      	b.n	80024c6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002200:	4b90      	ldr	r3, [pc, #576]	; (8002444 <HAL_RCC_ClockConfig+0x25c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d910      	bls.n	8002230 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b8d      	ldr	r3, [pc, #564]	; (8002444 <HAL_RCC_ClockConfig+0x25c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 0207 	bic.w	r2, r3, #7
 8002216:	498b      	ldr	r1, [pc, #556]	; (8002444 <HAL_RCC_ClockConfig+0x25c>)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800221e:	4b89      	ldr	r3, [pc, #548]	; (8002444 <HAL_RCC_ClockConfig+0x25c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d001      	beq.n	8002230 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e14a      	b.n	80024c6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d008      	beq.n	800224e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800223c:	4b82      	ldr	r3, [pc, #520]	; (8002448 <HAL_RCC_ClockConfig+0x260>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	497f      	ldr	r1, [pc, #508]	; (8002448 <HAL_RCC_ClockConfig+0x260>)
 800224a:	4313      	orrs	r3, r2
 800224c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 80dc 	beq.w	8002414 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d13c      	bne.n	80022de <HAL_RCC_ClockConfig+0xf6>
 8002264:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002268:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800226c:	fa93 f3a3 	rbit	r3, r3
 8002270:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002274:	fab3 f383 	clz	r3, r3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	b2db      	uxtb	r3, r3
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b01      	cmp	r3, #1
 8002286:	d102      	bne.n	800228e <HAL_RCC_ClockConfig+0xa6>
 8002288:	4b6f      	ldr	r3, [pc, #444]	; (8002448 <HAL_RCC_ClockConfig+0x260>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	e00f      	b.n	80022ae <HAL_RCC_ClockConfig+0xc6>
 800228e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002292:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	667b      	str	r3, [r7, #100]	; 0x64
 800229c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022a0:	663b      	str	r3, [r7, #96]	; 0x60
 80022a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022a4:	fa93 f3a3 	rbit	r3, r3
 80022a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022aa:	4b67      	ldr	r3, [pc, #412]	; (8002448 <HAL_RCC_ClockConfig+0x260>)
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80022b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022b6:	fa92 f2a2 	rbit	r2, r2
 80022ba:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80022bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022be:	fab2 f282 	clz	r2, r2
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	f042 0220 	orr.w	r2, r2, #32
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	f002 021f 	and.w	r2, r2, #31
 80022ce:	2101      	movs	r1, #1
 80022d0:	fa01 f202 	lsl.w	r2, r1, r2
 80022d4:	4013      	ands	r3, r2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d17b      	bne.n	80023d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e0f3      	b.n	80024c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d13c      	bne.n	8002360 <HAL_RCC_ClockConfig+0x178>
 80022e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80022f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	095b      	lsrs	r3, r3, #5
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b01      	cmp	r3, #1
 8002308:	d102      	bne.n	8002310 <HAL_RCC_ClockConfig+0x128>
 800230a:	4b4f      	ldr	r3, [pc, #316]	; (8002448 <HAL_RCC_ClockConfig+0x260>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	e00f      	b.n	8002330 <HAL_RCC_ClockConfig+0x148>
 8002310:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002314:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002318:	fa93 f3a3 	rbit	r3, r3
 800231c:	647b      	str	r3, [r7, #68]	; 0x44
 800231e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002322:	643b      	str	r3, [r7, #64]	; 0x40
 8002324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800232c:	4b46      	ldr	r3, [pc, #280]	; (8002448 <HAL_RCC_ClockConfig+0x260>)
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002334:	63ba      	str	r2, [r7, #56]	; 0x38
 8002336:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002338:	fa92 f2a2 	rbit	r2, r2
 800233c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800233e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002340:	fab2 f282 	clz	r2, r2
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	f042 0220 	orr.w	r2, r2, #32
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	f002 021f 	and.w	r2, r2, #31
 8002350:	2101      	movs	r1, #1
 8002352:	fa01 f202 	lsl.w	r2, r1, r2
 8002356:	4013      	ands	r3, r2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d13a      	bne.n	80023d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0b2      	b.n	80024c6 <HAL_RCC_ClockConfig+0x2de>
 8002360:	2302      	movs	r3, #2
 8002362:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800236c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	095b      	lsrs	r3, r3, #5
 8002376:	b2db      	uxtb	r3, r3
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b01      	cmp	r3, #1
 8002380:	d102      	bne.n	8002388 <HAL_RCC_ClockConfig+0x1a0>
 8002382:	4b31      	ldr	r3, [pc, #196]	; (8002448 <HAL_RCC_ClockConfig+0x260>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	e00d      	b.n	80023a4 <HAL_RCC_ClockConfig+0x1bc>
 8002388:	2302      	movs	r3, #2
 800238a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238e:	fa93 f3a3 	rbit	r3, r3
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
 8002394:	2302      	movs	r3, #2
 8002396:	623b      	str	r3, [r7, #32]
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	fa93 f3a3 	rbit	r3, r3
 800239e:	61fb      	str	r3, [r7, #28]
 80023a0:	4b29      	ldr	r3, [pc, #164]	; (8002448 <HAL_RCC_ClockConfig+0x260>)
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	2202      	movs	r2, #2
 80023a6:	61ba      	str	r2, [r7, #24]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	fa92 f2a2 	rbit	r2, r2
 80023ae:	617a      	str	r2, [r7, #20]
  return result;
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	fab2 f282 	clz	r2, r2
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	f042 0220 	orr.w	r2, r2, #32
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	f002 021f 	and.w	r2, r2, #31
 80023c2:	2101      	movs	r1, #1
 80023c4:	fa01 f202 	lsl.w	r2, r1, r2
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e079      	b.n	80024c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023d2:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <HAL_RCC_ClockConfig+0x260>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f023 0203 	bic.w	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	491a      	ldr	r1, [pc, #104]	; (8002448 <HAL_RCC_ClockConfig+0x260>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e4:	f7fe fcd4 	bl	8000d90 <HAL_GetTick>
 80023e8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ea:	e00a      	b.n	8002402 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ec:	f7fe fcd0 	bl	8000d90 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e061      	b.n	80024c6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	4b11      	ldr	r3, [pc, #68]	; (8002448 <HAL_RCC_ClockConfig+0x260>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 020c 	and.w	r2, r3, #12
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	429a      	cmp	r2, r3
 8002412:	d1eb      	bne.n	80023ec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_RCC_ClockConfig+0x25c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d214      	bcs.n	800244c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <HAL_RCC_ClockConfig+0x25c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f023 0207 	bic.w	r2, r3, #7
 800242a:	4906      	ldr	r1, [pc, #24]	; (8002444 <HAL_RCC_ClockConfig+0x25c>)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	4b04      	ldr	r3, [pc, #16]	; (8002444 <HAL_RCC_ClockConfig+0x25c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d005      	beq.n	800244c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e040      	b.n	80024c6 <HAL_RCC_ClockConfig+0x2de>
 8002444:	40022000 	.word	0x40022000
 8002448:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002458:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <HAL_RCC_ClockConfig+0x2e8>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	491a      	ldr	r1, [pc, #104]	; (80024d0 <HAL_RCC_ClockConfig+0x2e8>)
 8002466:	4313      	orrs	r3, r2
 8002468:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002476:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <HAL_RCC_ClockConfig+0x2e8>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4912      	ldr	r1, [pc, #72]	; (80024d0 <HAL_RCC_ClockConfig+0x2e8>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800248a:	f000 f829 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 800248e:	4601      	mov	r1, r0
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <HAL_RCC_ClockConfig+0x2e8>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002498:	22f0      	movs	r2, #240	; 0xf0
 800249a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	fa92 f2a2 	rbit	r2, r2
 80024a2:	60fa      	str	r2, [r7, #12]
  return result;
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	fab2 f282 	clz	r2, r2
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	40d3      	lsrs	r3, r2
 80024ae:	4a09      	ldr	r2, [pc, #36]	; (80024d4 <HAL_RCC_ClockConfig+0x2ec>)
 80024b0:	5cd3      	ldrb	r3, [r2, r3]
 80024b2:	fa21 f303 	lsr.w	r3, r1, r3
 80024b6:	4a08      	ldr	r2, [pc, #32]	; (80024d8 <HAL_RCC_ClockConfig+0x2f0>)
 80024b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <HAL_RCC_ClockConfig+0x2f4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe fc22 	bl	8000d08 <HAL_InitTick>
  
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3778      	adds	r7, #120	; 0x78
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000
 80024d4:	0800483c 	.word	0x0800483c
 80024d8:	20000000 	.word	0x20000000
 80024dc:	20000004 	.word	0x20000004

080024e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b08b      	sub	sp, #44	; 0x2c
 80024e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
 80024ea:	2300      	movs	r3, #0
 80024ec:	61bb      	str	r3, [r7, #24]
 80024ee:	2300      	movs	r3, #0
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80024fa:	4b2a      	ldr	r3, [pc, #168]	; (80025a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b04      	cmp	r3, #4
 8002508:	d002      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x30>
 800250a:	2b08      	cmp	r3, #8
 800250c:	d003      	beq.n	8002516 <HAL_RCC_GetSysClockFreq+0x36>
 800250e:	e03f      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002510:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002512:	623b      	str	r3, [r7, #32]
      break;
 8002514:	e03f      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800251c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002520:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	fa92 f2a2 	rbit	r2, r2
 8002528:	607a      	str	r2, [r7, #4]
  return result;
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	fab2 f282 	clz	r2, r2
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	40d3      	lsrs	r3, r2
 8002534:	4a1d      	ldr	r2, [pc, #116]	; (80025ac <HAL_RCC_GetSysClockFreq+0xcc>)
 8002536:	5cd3      	ldrb	r3, [r2, r3]
 8002538:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800253a:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	220f      	movs	r2, #15
 8002544:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	fa92 f2a2 	rbit	r2, r2
 800254c:	60fa      	str	r2, [r7, #12]
  return result;
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	fab2 f282 	clz	r2, r2
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	40d3      	lsrs	r3, r2
 8002558:	4a15      	ldr	r2, [pc, #84]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800255a:	5cd3      	ldrb	r3, [r2, r3]
 800255c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d008      	beq.n	800257a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002568:	4a0f      	ldr	r2, [pc, #60]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	fb02 f303 	mul.w	r3, r2, r3
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
 8002578:	e007      	b.n	800258a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800257a:	4a0b      	ldr	r2, [pc, #44]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	fb02 f303 	mul.w	r3, r2, r3
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	623b      	str	r3, [r7, #32]
      break;
 800258e:	e002      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002592:	623b      	str	r3, [r7, #32]
      break;
 8002594:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002596:	6a3b      	ldr	r3, [r7, #32]
}
 8002598:	4618      	mov	r0, r3
 800259a:	372c      	adds	r7, #44	; 0x2c
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	40021000 	.word	0x40021000
 80025a8:	007a1200 	.word	0x007a1200
 80025ac:	08004854 	.word	0x08004854
 80025b0:	08004864 	.word	0x08004864

080025b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b8:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	20000000 	.word	0x20000000

080025cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80025d2:	f7ff ffef 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
 80025d6:	4601      	mov	r1, r0
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025e0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	fa92 f2a2 	rbit	r2, r2
 80025ec:	603a      	str	r2, [r7, #0]
  return result;
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	fab2 f282 	clz	r2, r2
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	40d3      	lsrs	r3, r2
 80025f8:	4a04      	ldr	r2, [pc, #16]	; (800260c <HAL_RCC_GetPCLK1Freq+0x40>)
 80025fa:	5cd3      	ldrb	r3, [r2, r3]
 80025fc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021000 	.word	0x40021000
 800260c:	0800484c 	.word	0x0800484c

08002610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002616:	f7ff ffcd 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
 800261a:	4601      	mov	r1, r0
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002624:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002628:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	fa92 f2a2 	rbit	r2, r2
 8002630:	603a      	str	r2, [r7, #0]
  return result;
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	fab2 f282 	clz	r2, r2
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	40d3      	lsrs	r3, r2
 800263c:	4a04      	ldr	r2, [pc, #16]	; (8002650 <HAL_RCC_GetPCLK2Freq+0x40>)
 800263e:	5cd3      	ldrb	r3, [r2, r3]
 8002640:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40021000 	.word	0x40021000
 8002650:	0800484c 	.word	0x0800484c

08002654 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b092      	sub	sp, #72	; 0x48
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002664:	2300      	movs	r3, #0
 8002666:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 80d4 	beq.w	8002820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002678:	4b4e      	ldr	r3, [pc, #312]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10e      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	4a4a      	ldr	r2, [pc, #296]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800268a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268e:	61d3      	str	r3, [r2, #28]
 8002690:	4b48      	ldr	r3, [pc, #288]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269c:	2301      	movs	r3, #1
 800269e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a2:	4b45      	ldr	r3, [pc, #276]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d118      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ae:	4b42      	ldr	r3, [pc, #264]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a41      	ldr	r2, [pc, #260]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ba:	f7fe fb69 	bl	8000d90 <HAL_GetTick>
 80026be:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c0:	e008      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c2:	f7fe fb65 	bl	8000d90 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b64      	cmp	r3, #100	; 0x64
 80026ce:	d901      	bls.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e1d6      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d4:	4b38      	ldr	r3, [pc, #224]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026e0:	4b34      	ldr	r3, [pc, #208]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 8084 	beq.w	80027fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d07c      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002700:	4b2c      	ldr	r3, [pc, #176]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002708:	63fb      	str	r3, [r7, #60]	; 0x3c
 800270a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800270e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	461a      	mov	r2, r3
 8002722:	4b26      	ldr	r3, [pc, #152]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002724:	4413      	add	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	461a      	mov	r2, r3
 800272a:	2301      	movs	r3, #1
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002732:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002736:	fa93 f3a3 	rbit	r3, r3
 800273a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800273c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	461a      	mov	r2, r3
 800274e:	2300      	movs	r3, #0
 8002750:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002752:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002756:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d04b      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7fe fb15 	bl	8000d90 <HAL_GetTick>
 8002766:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002768:	e00a      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276a:	f7fe fb11 	bl	8000d90 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	f241 3288 	movw	r2, #5000	; 0x1388
 8002778:	4293      	cmp	r3, r2
 800277a:	d901      	bls.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e180      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002780:	2302      	movs	r3, #2
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002786:	fa93 f3a3 	rbit	r3, r3
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
 800278c:	2302      	movs	r3, #2
 800278e:	623b      	str	r3, [r7, #32]
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	61fb      	str	r3, [r7, #28]
  return result;
 8002798:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	095b      	lsrs	r3, r3, #5
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d108      	bne.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80027ae:	4b01      	ldr	r3, [pc, #4]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	e00d      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40007000 	.word	0x40007000
 80027bc:	10908100 	.word	0x10908100
 80027c0:	2302      	movs	r3, #2
 80027c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	4ba0      	ldr	r3, [pc, #640]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	2202      	movs	r2, #2
 80027d2:	613a      	str	r2, [r7, #16]
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	fa92 f2a2 	rbit	r2, r2
 80027da:	60fa      	str	r2, [r7, #12]
  return result;
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	fab2 f282 	clz	r2, r2
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	f002 021f 	and.w	r2, r2, #31
 80027ee:	2101      	movs	r1, #1
 80027f0:	fa01 f202 	lsl.w	r2, r1, r2
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0b7      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80027fa:	4b95      	ldr	r3, [pc, #596]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4992      	ldr	r1, [pc, #584]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002808:	4313      	orrs	r3, r2
 800280a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800280c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002810:	2b01      	cmp	r3, #1
 8002812:	d105      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002814:	4b8e      	ldr	r3, [pc, #568]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	4a8d      	ldr	r2, [pc, #564]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800281a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800281e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800282c:	4b88      	ldr	r3, [pc, #544]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002830:	f023 0203 	bic.w	r2, r3, #3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	4985      	ldr	r1, [pc, #532]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800283a:	4313      	orrs	r3, r2
 800283c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d008      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800284a:	4b81      	ldr	r3, [pc, #516]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	497e      	ldr	r1, [pc, #504]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002858:	4313      	orrs	r3, r2
 800285a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002868:	4b79      	ldr	r3, [pc, #484]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	4976      	ldr	r1, [pc, #472]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002876:	4313      	orrs	r3, r2
 8002878:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0320 	and.w	r3, r3, #32
 8002882:	2b00      	cmp	r3, #0
 8002884:	d008      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002886:	4b72      	ldr	r3, [pc, #456]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f023 0210 	bic.w	r2, r3, #16
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	496f      	ldr	r1, [pc, #444]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002894:	4313      	orrs	r3, r2
 8002896:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80028a4:	4b6a      	ldr	r3, [pc, #424]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b0:	4967      	ldr	r1, [pc, #412]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d008      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028c2:	4b63      	ldr	r3, [pc, #396]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	f023 0220 	bic.w	r2, r3, #32
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	4960      	ldr	r1, [pc, #384]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028e0:	4b5b      	ldr	r3, [pc, #364]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	4958      	ldr	r1, [pc, #352]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d008      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028fe:	4b54      	ldr	r3, [pc, #336]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	4951      	ldr	r1, [pc, #324]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800290c:	4313      	orrs	r3, r2
 800290e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800291c:	4b4c      	ldr	r3, [pc, #304]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	4949      	ldr	r1, [pc, #292]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800292a:	4313      	orrs	r3, r2
 800292c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002936:	2b00      	cmp	r3, #0
 8002938:	d008      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800293a:	4b45      	ldr	r3, [pc, #276]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	4942      	ldr	r1, [pc, #264]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002958:	4b3d      	ldr	r3, [pc, #244]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800295a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	493a      	ldr	r1, [pc, #232]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002966:	4313      	orrs	r3, r2
 8002968:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002972:	2b00      	cmp	r3, #0
 8002974:	d008      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002976:	4b36      	ldr	r3, [pc, #216]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002982:	4933      	ldr	r1, [pc, #204]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002984:	4313      	orrs	r3, r2
 8002986:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002994:	4b2e      	ldr	r3, [pc, #184]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a0:	492b      	ldr	r1, [pc, #172]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d008      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80029b2:	4b27      	ldr	r3, [pc, #156]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	4924      	ldr	r1, [pc, #144]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80029d0:	4b1f      	ldr	r3, [pc, #124]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029dc:	491c      	ldr	r1, [pc, #112]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d008      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80029ee:	4b18      	ldr	r3, [pc, #96]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fa:	4915      	ldr	r1, [pc, #84]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002a0c:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a18:	490d      	ldr	r1, [pc, #52]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d008      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a36:	4906      	ldr	r1, [pc, #24]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00c      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002a48:	4b01      	ldr	r3, [pc, #4]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	e002      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002a4e:	bf00      	nop
 8002a50:	40021000 	.word	0x40021000
 8002a54:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5c:	490b      	ldr	r1, [pc, #44]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d008      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002a6e:	4b07      	ldr	r3, [pc, #28]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a7a:	4904      	ldr	r1, [pc, #16]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3748      	adds	r7, #72	; 0x48
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40021000 	.word	0x40021000

08002a90 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e083      	b.n	8002baa <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	7f5b      	ldrb	r3, [r3, #29]
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d105      	bne.n	8002ab8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7fd ffec 	bl	8000a90 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	22ca      	movs	r2, #202	; 0xca
 8002ac4:	625a      	str	r2, [r3, #36]	; 0x24
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2253      	movs	r2, #83	; 0x53
 8002acc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fc26 	bl	8003320 <RTC_EnterInitMode>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d008      	beq.n	8002aec <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	22ff      	movs	r2, #255	; 0xff
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e05e      	b.n	8002baa <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002afe:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6899      	ldr	r1, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68d2      	ldr	r2, [r2, #12]
 8002b26:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6919      	ldr	r1, [r3, #16]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	041a      	lsls	r2, r3, #16
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b4a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 0320 	and.w	r3, r3, #32
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10e      	bne.n	8002b78 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fbb8 	bl	80032d0 <HAL_RTC_WaitForSynchro>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d008      	beq.n	8002b78 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	22ff      	movs	r2, #255	; 0xff
 8002b6c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2204      	movs	r2, #4
 8002b72:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e018      	b.n	8002baa <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699a      	ldr	r2, [r3, #24]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	22ff      	movs	r2, #255	; 0xff
 8002ba0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
  }
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002bb2:	b590      	push	{r4, r7, lr}
 8002bb4:	b087      	sub	sp, #28
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	7f1b      	ldrb	r3, [r3, #28]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_RTC_SetTime+0x1c>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e0aa      	b.n	8002d24 <HAL_RTC_SetTime+0x172>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d126      	bne.n	8002c2e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d102      	bne.n	8002bf4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 fbbd 	bl	8003378 <RTC_ByteToBcd2>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	785b      	ldrb	r3, [r3, #1]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fbb6 	bl	8003378 <RTC_ByteToBcd2>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002c10:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	789b      	ldrb	r3, [r3, #2]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 fbae 	bl	8003378 <RTC_ByteToBcd2>
 8002c1c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002c1e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	78db      	ldrb	r3, [r3, #3]
 8002c26:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	e018      	b.n	8002c60 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d102      	bne.n	8002c42 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	785b      	ldrb	r3, [r3, #1]
 8002c4c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002c4e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002c54:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	78db      	ldrb	r3, [r3, #3]
 8002c5a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	22ca      	movs	r2, #202	; 0xca
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2253      	movs	r2, #83	; 0x53
 8002c6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 fb55 	bl	8003320 <RTC_EnterInitMode>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00b      	beq.n	8002c94 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	22ff      	movs	r2, #255	; 0xff
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2204      	movs	r2, #4
 8002c88:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e047      	b.n	8002d24 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002c9e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002ca2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cb2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6899      	ldr	r1, [r3, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cda:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 0320 	and.w	r3, r3, #32
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d111      	bne.n	8002d0e <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 faf0 	bl	80032d0 <HAL_RTC_WaitForSynchro>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00b      	beq.n	8002d0e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	22ff      	movs	r2, #255	; 0xff
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2204      	movs	r2, #4
 8002d02:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e00a      	b.n	8002d24 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	22ff      	movs	r2, #255	; 0xff
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002d22:	2300      	movs	r3, #0
  }
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	371c      	adds	r7, #28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd90      	pop	{r4, r7, pc}

08002d2c <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002d5e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002d62:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	0c1b      	lsrs	r3, r3, #16
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	0a1b      	lsrs	r3, r3, #8
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	0c1b      	lsrs	r3, r3, #16
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d11a      	bne.n	8002dde <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 fb01 	bl	80033b4 <RTC_Bcd2ToByte>
 8002db2:	4603      	mov	r3, r0
 8002db4:	461a      	mov	r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	785b      	ldrb	r3, [r3, #1]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 faf8 	bl	80033b4 <RTC_Bcd2ToByte>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	789b      	ldrb	r3, [r3, #2]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 faef 	bl	80033b4 <RTC_Bcd2ToByte>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	461a      	mov	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	7f1b      	ldrb	r3, [r3, #28]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_RTC_SetDate+0x1c>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e094      	b.n	8002f2e <HAL_RTC_SetDate+0x146>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10e      	bne.n	8002e34 <HAL_RTC_SetDate+0x4c>
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	785b      	ldrb	r3, [r3, #1]
 8002e1a:	f003 0310 	and.w	r3, r3, #16
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d008      	beq.n	8002e34 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	785b      	ldrb	r3, [r3, #1]
 8002e26:	f023 0310 	bic.w	r3, r3, #16
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	330a      	adds	r3, #10
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d11c      	bne.n	8002e74 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	78db      	ldrb	r3, [r3, #3]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fa9a 	bl	8003378 <RTC_ByteToBcd2>
 8002e44:	4603      	mov	r3, r0
 8002e46:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	785b      	ldrb	r3, [r3, #1]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fa93 	bl	8003378 <RTC_ByteToBcd2>
 8002e52:	4603      	mov	r3, r0
 8002e54:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002e56:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	789b      	ldrb	r3, [r3, #2]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 fa8b 	bl	8003378 <RTC_ByteToBcd2>
 8002e62:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002e64:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	e00e      	b.n	8002e92 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	78db      	ldrb	r3, [r3, #3]
 8002e78:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	785b      	ldrb	r3, [r3, #1]
 8002e7e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002e80:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002e86:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	22ca      	movs	r2, #202	; 0xca
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2253      	movs	r2, #83	; 0x53
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 fa3c 	bl	8003320 <RTC_EnterInitMode>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	22ff      	movs	r2, #255	; 0xff
 8002eb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2204      	movs	r2, #4
 8002eba:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e033      	b.n	8002f2e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ed0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002ed4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ee4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d111      	bne.n	8002f18 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 f9eb 	bl	80032d0 <HAL_RTC_WaitForSynchro>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00b      	beq.n	8002f18 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	22ff      	movs	r2, #255	; 0xff
 8002f06:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e00a      	b.n	8002f2e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	22ff      	movs	r2, #255	; 0xff
 8002f1e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2201      	movs	r2, #1
 8002f24:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
  }
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	371c      	adds	r7, #28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd90      	pop	{r4, r7, pc}

08002f36 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b086      	sub	sp, #24
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f54:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	0c1b      	lsrs	r3, r3, #16
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	0a1b      	lsrs	r3, r3, #8
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	f003 031f 	and.w	r3, r3, #31
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	0b5b      	lsrs	r3, r3, #13
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d11a      	bne.n	8002fca <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	78db      	ldrb	r3, [r3, #3]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 fa0b 	bl	80033b4 <RTC_Bcd2ToByte>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	785b      	ldrb	r3, [r3, #1]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fa02 	bl	80033b4 <RTC_Bcd2ToByte>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	789b      	ldrb	r3, [r3, #2]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 f9f9 	bl	80033b4 <RTC_Bcd2ToByte>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b089      	sub	sp, #36	; 0x24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61fb      	str	r3, [r7, #28]
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	7f1b      	ldrb	r3, [r3, #28]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_RTC_SetAlarm_IT+0x24>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e11f      	b.n	8003238 <HAL_RTC_SetAlarm_IT+0x264>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2202      	movs	r2, #2
 8003002:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d137      	bne.n	800307a <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003014:	2b00      	cmp	r3, #0
 8003016:	d102      	bne.n	800301e <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2200      	movs	r2, #0
 800301c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f000 f9a8 	bl	8003378 <RTC_ByteToBcd2>
 8003028:	4603      	mov	r3, r0
 800302a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	785b      	ldrb	r3, [r3, #1]
 8003030:	4618      	mov	r0, r3
 8003032:	f000 f9a1 	bl	8003378 <RTC_ByteToBcd2>
 8003036:	4603      	mov	r3, r0
 8003038:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800303a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	789b      	ldrb	r3, [r3, #2]
 8003040:	4618      	mov	r0, r3
 8003042:	f000 f999 	bl	8003378 <RTC_ByteToBcd2>
 8003046:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003048:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	78db      	ldrb	r3, [r3, #3]
 8003050:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003052:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f893 3020 	ldrb.w	r3, [r3, #32]
 800305c:	4618      	mov	r0, r3
 800305e:	f000 f98b 	bl	8003378 <RTC_ByteToBcd2>
 8003062:	4603      	mov	r3, r0
 8003064:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003066:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800306e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003074:	4313      	orrs	r3, r2
 8003076:	61fb      	str	r3, [r7, #28]
 8003078:	e023      	b.n	80030c2 <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003084:	2b00      	cmp	r3, #0
 8003086:	d102      	bne.n	800308e <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2200      	movs	r2, #0
 800308c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	785b      	ldrb	r3, [r3, #1]
 8003098:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800309a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80030a0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	78db      	ldrb	r3, [r3, #3]
 80030a6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80030a8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030b0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80030b2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80030b8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80030be:	4313      	orrs	r3, r2
 80030c0:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	22ca      	movs	r2, #202	; 0xca
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2253      	movs	r2, #83	; 0x53
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e6:	d148      	bne.n	800317a <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030f6:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003108:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800310a:	f7fd fe41 	bl	8000d90 <HAL_GetTick>
 800310e:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8003110:	e013      	b.n	800313a <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003112:	f7fd fe3d 	bl	8000d90 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003120:	d90b      	bls.n	800313a <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	22ff      	movs	r2, #255	; 0xff
 8003128:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2203      	movs	r2, #3
 800312e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e07e      	b.n	8003238 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0e4      	beq.n	8003112 <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	69fa      	ldr	r2, [r7, #28]
 800314e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003166:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	e047      	b.n	800320a <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003188:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	b2da      	uxtb	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f462 7220 	orn	r2, r2, #640	; 0x280
 800319a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800319c:	f7fd fdf8 	bl	8000d90 <HAL_GetTick>
 80031a0:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80031a2:	e013      	b.n	80031cc <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80031a4:	f7fd fdf4 	bl	8000d90 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031b2:	d90b      	bls.n	80031cc <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	22ff      	movs	r2, #255	; 0xff
 80031ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2203      	movs	r2, #3
 80031c0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e035      	b.n	8003238 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0e4      	beq.n	80031a4 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69fa      	ldr	r2, [r7, #28]
 80031e0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003208:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800320a:	4b0d      	ldr	r3, [pc, #52]	; (8003240 <HAL_RTC_SetAlarm_IT+0x26c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a0c      	ldr	r2, [pc, #48]	; (8003240 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003214:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003216:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	4a09      	ldr	r2, [pc, #36]	; (8003240 <HAL_RTC_SetAlarm_IT+0x26c>)
 800321c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003220:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	22ff      	movs	r2, #255	; 0xff
 8003228:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2201      	movs	r2, #1
 800322e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3724      	adds	r7, #36	; 0x24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd90      	pop	{r4, r7, pc}
 8003240:	40010400 	.word	0x40010400

08003244 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d012      	beq.n	8003280 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00b      	beq.n	8003280 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7fd fba1 	bl	80009b0 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	b2da      	uxtb	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800327e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d012      	beq.n	80032b4 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00b      	beq.n	80032b4 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7fd fbad 	bl	80009fc <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f462 7220 	orn	r2, r2, #640	; 0x280
 80032b2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80032b4:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_RTC_AlarmIRQHandler+0x88>)
 80032b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032ba:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	775a      	strb	r2, [r3, #29]
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40010400 	.word	0x40010400

080032d0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032ea:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80032ec:	f7fd fd50 	bl	8000d90 <HAL_GetTick>
 80032f0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80032f2:	e009      	b.n	8003308 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032f4:	f7fd fd4c 	bl	8000d90 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003302:	d901      	bls.n	8003308 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e007      	b.n	8003318 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f003 0320 	and.w	r3, r3, #32
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0ee      	beq.n	80032f4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d119      	bne.n	800336e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f04f 32ff 	mov.w	r2, #4294967295
 8003342:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003344:	f7fd fd24 	bl	8000d90 <HAL_GetTick>
 8003348:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800334a:	e009      	b.n	8003360 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800334c:	f7fd fd20 	bl	8000d90 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800335a:	d901      	bls.n	8003360 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e007      	b.n	8003370 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0ee      	beq.n	800334c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003386:	e005      	b.n	8003394 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	3301      	adds	r3, #1
 800338c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	3b0a      	subs	r3, #10
 8003392:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	2b09      	cmp	r3, #9
 8003398:	d8f6      	bhi.n	8003388 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	b2db      	uxtb	r3, r3
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	091b      	lsrs	r3, r3, #4
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	4413      	add	r3, r2
 80033e2:	b2db      	uxtb	r3, r3
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	7f1b      	ldrb	r3, [r3, #28]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d101      	bne.n	800340c <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8003408:	2302      	movs	r3, #2
 800340a:	e09e      	b.n	800354a <HAL_RTCEx_SetWakeUpTimer_IT+0x15a>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2201      	movs	r2, #1
 8003410:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2202      	movs	r2, #2
 8003416:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	22ca      	movs	r2, #202	; 0xca
 800341e:	625a      	str	r2, [r3, #36]	; 0x24
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2253      	movs	r2, #83	; 0x53
 8003426:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003432:	2b00      	cmp	r3, #0
 8003434:	d01e      	beq.n	8003474 <HAL_RTCEx_SetWakeUpTimer_IT+0x84>
  {
    tickstart = HAL_GetTick();
 8003436:	f7fd fcab 	bl	8000d90 <HAL_GetTick>
 800343a:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 800343c:	e013      	b.n	8003466 <HAL_RTCEx_SetWakeUpTimer_IT+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800343e:	f7fd fca7 	bl	8000d90 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800344c:	d90b      	bls.n	8003466 <HAL_RTCEx_SetWakeUpTimer_IT+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	22ff      	movs	r2, #255	; 0xff
 8003454:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2203      	movs	r2, #3
 800345a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e071      	b.n	800354a <HAL_RTCEx_SetWakeUpTimer_IT+0x15a>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1e4      	bne.n	800343e <HAL_RTCEx_SetWakeUpTimer_IT+0x4e>
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003482:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	b2da      	uxtb	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003494:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003496:	f7fd fc7b 	bl	8000d90 <HAL_GetTick>
 800349a:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800349c:	e013      	b.n	80034c6 <HAL_RTCEx_SetWakeUpTimer_IT+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800349e:	f7fd fc77 	bl	8000d90 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034ac:	d90b      	bls.n	80034c6 <HAL_RTCEx_SetWakeUpTimer_IT+0xd6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	22ff      	movs	r2, #255	; 0xff
 80034b4:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2203      	movs	r2, #3
 80034ba:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e041      	b.n	800354a <HAL_RTCEx_SetWakeUpTimer_IT+0x15a>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0e4      	beq.n	800349e <HAL_RTCEx_SetWakeUpTimer_IT+0xae>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0207 	bic.w	r2, r2, #7
 80034ea:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6899      	ldr	r1, [r3, #8]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80034fc:	4b15      	ldr	r3, [pc, #84]	; (8003554 <HAL_RTCEx_SetWakeUpTimer_IT+0x164>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a14      	ldr	r2, [pc, #80]	; (8003554 <HAL_RTCEx_SetWakeUpTimer_IT+0x164>)
 8003502:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003506:	6013      	str	r3, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003508:	4b12      	ldr	r3, [pc, #72]	; (8003554 <HAL_RTCEx_SetWakeUpTimer_IT+0x164>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4a11      	ldr	r2, [pc, #68]	; (8003554 <HAL_RTCEx_SetWakeUpTimer_IT+0x164>)
 800350e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003512:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003522:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003532:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	22ff      	movs	r2, #255	; 0xff
 800353a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2201      	movs	r2, #1
 8003540:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40010400 	.word	0x40010400

08003558 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f816 	bl	80035a0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	b2da      	uxtb	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003584:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003586:	4b05      	ldr	r3, [pc, #20]	; (800359c <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8003588:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800358c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	775a      	strb	r2, [r3, #29]
}
 8003594:	bf00      	nop
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40010400 	.word	0x40010400

080035a0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e040      	b.n	8003648 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fd fa8e 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2224      	movs	r2, #36	; 0x24
 80035e0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0201 	bic.w	r2, r2, #1
 80035f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f8c0 	bl	8003778 <UART_SetConfig>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e022      	b.n	8003648 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fa8a 	bl	8003b24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800361e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800362e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fb11 	bl	8003c68 <UART_CheckIdleState>
 8003646:	4603      	mov	r3, r0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08a      	sub	sp, #40	; 0x28
 8003654:	af02      	add	r7, sp, #8
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	4613      	mov	r3, r2
 800365e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003664:	2b20      	cmp	r3, #32
 8003666:	f040 8082 	bne.w	800376e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <HAL_UART_Transmit+0x26>
 8003670:	88fb      	ldrh	r3, [r7, #6]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e07a      	b.n	8003770 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_UART_Transmit+0x38>
 8003684:	2302      	movs	r3, #2
 8003686:	e073      	b.n	8003770 <HAL_UART_Transmit+0x120>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2221      	movs	r2, #33	; 0x21
 800369c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800369e:	f7fd fb77 	bl	8000d90 <HAL_GetTick>
 80036a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	88fa      	ldrh	r2, [r7, #6]
 80036a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	88fa      	ldrh	r2, [r7, #6]
 80036b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036bc:	d108      	bne.n	80036d0 <HAL_UART_Transmit+0x80>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d104      	bne.n	80036d0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	e003      	b.n	80036d8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80036e0:	e02d      	b.n	800373e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2200      	movs	r2, #0
 80036ea:	2180      	movs	r1, #128	; 0x80
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 fb04 	bl	8003cfa <UART_WaitOnFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e039      	b.n	8003770 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10b      	bne.n	800371a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	881a      	ldrh	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800370e:	b292      	uxth	r2, r2
 8003710:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	3302      	adds	r3, #2
 8003716:	61bb      	str	r3, [r7, #24]
 8003718:	e008      	b.n	800372c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	781a      	ldrb	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	b292      	uxth	r2, r2
 8003724:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	3301      	adds	r3, #1
 800372a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003732:	b29b      	uxth	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1cb      	bne.n	80036e2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2200      	movs	r2, #0
 8003752:	2140      	movs	r1, #64	; 0x40
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 fad0 	bl	8003cfa <UART_WaitOnFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e005      	b.n	8003770 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	e000      	b.n	8003770 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800376e:	2302      	movs	r3, #2
  }
}
 8003770:	4618      	mov	r0, r3
 8003772:	3720      	adds	r7, #32
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b088      	sub	sp, #32
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	431a      	orrs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	4313      	orrs	r3, r2
 800379a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	4bab      	ldr	r3, [pc, #684]	; (8003a50 <UART_SetConfig+0x2d8>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6812      	ldr	r2, [r2, #0]
 80037aa:	6979      	ldr	r1, [r7, #20]
 80037ac:	430b      	orrs	r3, r1
 80037ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a99      	ldr	r2, [pc, #612]	; (8003a54 <UART_SetConfig+0x2dc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d120      	bne.n	8003836 <UART_SetConfig+0xbe>
 80037f4:	4b98      	ldr	r3, [pc, #608]	; (8003a58 <UART_SetConfig+0x2e0>)
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d817      	bhi.n	8003830 <UART_SetConfig+0xb8>
 8003800:	a201      	add	r2, pc, #4	; (adr r2, 8003808 <UART_SetConfig+0x90>)
 8003802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003806:	bf00      	nop
 8003808:	08003819 	.word	0x08003819
 800380c:	08003825 	.word	0x08003825
 8003810:	0800382b 	.word	0x0800382b
 8003814:	0800381f 	.word	0x0800381f
 8003818:	2301      	movs	r3, #1
 800381a:	77fb      	strb	r3, [r7, #31]
 800381c:	e0b5      	b.n	800398a <UART_SetConfig+0x212>
 800381e:	2302      	movs	r3, #2
 8003820:	77fb      	strb	r3, [r7, #31]
 8003822:	e0b2      	b.n	800398a <UART_SetConfig+0x212>
 8003824:	2304      	movs	r3, #4
 8003826:	77fb      	strb	r3, [r7, #31]
 8003828:	e0af      	b.n	800398a <UART_SetConfig+0x212>
 800382a:	2308      	movs	r3, #8
 800382c:	77fb      	strb	r3, [r7, #31]
 800382e:	e0ac      	b.n	800398a <UART_SetConfig+0x212>
 8003830:	2310      	movs	r3, #16
 8003832:	77fb      	strb	r3, [r7, #31]
 8003834:	e0a9      	b.n	800398a <UART_SetConfig+0x212>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a88      	ldr	r2, [pc, #544]	; (8003a5c <UART_SetConfig+0x2e4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d124      	bne.n	800388a <UART_SetConfig+0x112>
 8003840:	4b85      	ldr	r3, [pc, #532]	; (8003a58 <UART_SetConfig+0x2e0>)
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003848:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800384c:	d011      	beq.n	8003872 <UART_SetConfig+0xfa>
 800384e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003852:	d817      	bhi.n	8003884 <UART_SetConfig+0x10c>
 8003854:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003858:	d011      	beq.n	800387e <UART_SetConfig+0x106>
 800385a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800385e:	d811      	bhi.n	8003884 <UART_SetConfig+0x10c>
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <UART_SetConfig+0xf4>
 8003864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003868:	d006      	beq.n	8003878 <UART_SetConfig+0x100>
 800386a:	e00b      	b.n	8003884 <UART_SetConfig+0x10c>
 800386c:	2300      	movs	r3, #0
 800386e:	77fb      	strb	r3, [r7, #31]
 8003870:	e08b      	b.n	800398a <UART_SetConfig+0x212>
 8003872:	2302      	movs	r3, #2
 8003874:	77fb      	strb	r3, [r7, #31]
 8003876:	e088      	b.n	800398a <UART_SetConfig+0x212>
 8003878:	2304      	movs	r3, #4
 800387a:	77fb      	strb	r3, [r7, #31]
 800387c:	e085      	b.n	800398a <UART_SetConfig+0x212>
 800387e:	2308      	movs	r3, #8
 8003880:	77fb      	strb	r3, [r7, #31]
 8003882:	e082      	b.n	800398a <UART_SetConfig+0x212>
 8003884:	2310      	movs	r3, #16
 8003886:	77fb      	strb	r3, [r7, #31]
 8003888:	e07f      	b.n	800398a <UART_SetConfig+0x212>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a74      	ldr	r2, [pc, #464]	; (8003a60 <UART_SetConfig+0x2e8>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d124      	bne.n	80038de <UART_SetConfig+0x166>
 8003894:	4b70      	ldr	r3, [pc, #448]	; (8003a58 <UART_SetConfig+0x2e0>)
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800389c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80038a0:	d011      	beq.n	80038c6 <UART_SetConfig+0x14e>
 80038a2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80038a6:	d817      	bhi.n	80038d8 <UART_SetConfig+0x160>
 80038a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038ac:	d011      	beq.n	80038d2 <UART_SetConfig+0x15a>
 80038ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038b2:	d811      	bhi.n	80038d8 <UART_SetConfig+0x160>
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <UART_SetConfig+0x148>
 80038b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038bc:	d006      	beq.n	80038cc <UART_SetConfig+0x154>
 80038be:	e00b      	b.n	80038d8 <UART_SetConfig+0x160>
 80038c0:	2300      	movs	r3, #0
 80038c2:	77fb      	strb	r3, [r7, #31]
 80038c4:	e061      	b.n	800398a <UART_SetConfig+0x212>
 80038c6:	2302      	movs	r3, #2
 80038c8:	77fb      	strb	r3, [r7, #31]
 80038ca:	e05e      	b.n	800398a <UART_SetConfig+0x212>
 80038cc:	2304      	movs	r3, #4
 80038ce:	77fb      	strb	r3, [r7, #31]
 80038d0:	e05b      	b.n	800398a <UART_SetConfig+0x212>
 80038d2:	2308      	movs	r3, #8
 80038d4:	77fb      	strb	r3, [r7, #31]
 80038d6:	e058      	b.n	800398a <UART_SetConfig+0x212>
 80038d8:	2310      	movs	r3, #16
 80038da:	77fb      	strb	r3, [r7, #31]
 80038dc:	e055      	b.n	800398a <UART_SetConfig+0x212>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a60      	ldr	r2, [pc, #384]	; (8003a64 <UART_SetConfig+0x2ec>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d124      	bne.n	8003932 <UART_SetConfig+0x1ba>
 80038e8:	4b5b      	ldr	r3, [pc, #364]	; (8003a58 <UART_SetConfig+0x2e0>)
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80038f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038f4:	d011      	beq.n	800391a <UART_SetConfig+0x1a2>
 80038f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038fa:	d817      	bhi.n	800392c <UART_SetConfig+0x1b4>
 80038fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003900:	d011      	beq.n	8003926 <UART_SetConfig+0x1ae>
 8003902:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003906:	d811      	bhi.n	800392c <UART_SetConfig+0x1b4>
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <UART_SetConfig+0x19c>
 800390c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003910:	d006      	beq.n	8003920 <UART_SetConfig+0x1a8>
 8003912:	e00b      	b.n	800392c <UART_SetConfig+0x1b4>
 8003914:	2300      	movs	r3, #0
 8003916:	77fb      	strb	r3, [r7, #31]
 8003918:	e037      	b.n	800398a <UART_SetConfig+0x212>
 800391a:	2302      	movs	r3, #2
 800391c:	77fb      	strb	r3, [r7, #31]
 800391e:	e034      	b.n	800398a <UART_SetConfig+0x212>
 8003920:	2304      	movs	r3, #4
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e031      	b.n	800398a <UART_SetConfig+0x212>
 8003926:	2308      	movs	r3, #8
 8003928:	77fb      	strb	r3, [r7, #31]
 800392a:	e02e      	b.n	800398a <UART_SetConfig+0x212>
 800392c:	2310      	movs	r3, #16
 800392e:	77fb      	strb	r3, [r7, #31]
 8003930:	e02b      	b.n	800398a <UART_SetConfig+0x212>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a4c      	ldr	r2, [pc, #304]	; (8003a68 <UART_SetConfig+0x2f0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d124      	bne.n	8003986 <UART_SetConfig+0x20e>
 800393c:	4b46      	ldr	r3, [pc, #280]	; (8003a58 <UART_SetConfig+0x2e0>)
 800393e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003940:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003944:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003948:	d011      	beq.n	800396e <UART_SetConfig+0x1f6>
 800394a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800394e:	d817      	bhi.n	8003980 <UART_SetConfig+0x208>
 8003950:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003954:	d011      	beq.n	800397a <UART_SetConfig+0x202>
 8003956:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800395a:	d811      	bhi.n	8003980 <UART_SetConfig+0x208>
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <UART_SetConfig+0x1f0>
 8003960:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003964:	d006      	beq.n	8003974 <UART_SetConfig+0x1fc>
 8003966:	e00b      	b.n	8003980 <UART_SetConfig+0x208>
 8003968:	2300      	movs	r3, #0
 800396a:	77fb      	strb	r3, [r7, #31]
 800396c:	e00d      	b.n	800398a <UART_SetConfig+0x212>
 800396e:	2302      	movs	r3, #2
 8003970:	77fb      	strb	r3, [r7, #31]
 8003972:	e00a      	b.n	800398a <UART_SetConfig+0x212>
 8003974:	2304      	movs	r3, #4
 8003976:	77fb      	strb	r3, [r7, #31]
 8003978:	e007      	b.n	800398a <UART_SetConfig+0x212>
 800397a:	2308      	movs	r3, #8
 800397c:	77fb      	strb	r3, [r7, #31]
 800397e:	e004      	b.n	800398a <UART_SetConfig+0x212>
 8003980:	2310      	movs	r3, #16
 8003982:	77fb      	strb	r3, [r7, #31]
 8003984:	e001      	b.n	800398a <UART_SetConfig+0x212>
 8003986:	2310      	movs	r3, #16
 8003988:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003992:	d16d      	bne.n	8003a70 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8003994:	7ffb      	ldrb	r3, [r7, #31]
 8003996:	2b08      	cmp	r3, #8
 8003998:	d827      	bhi.n	80039ea <UART_SetConfig+0x272>
 800399a:	a201      	add	r2, pc, #4	; (adr r2, 80039a0 <UART_SetConfig+0x228>)
 800399c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a0:	080039c5 	.word	0x080039c5
 80039a4:	080039cd 	.word	0x080039cd
 80039a8:	080039d5 	.word	0x080039d5
 80039ac:	080039eb 	.word	0x080039eb
 80039b0:	080039db 	.word	0x080039db
 80039b4:	080039eb 	.word	0x080039eb
 80039b8:	080039eb 	.word	0x080039eb
 80039bc:	080039eb 	.word	0x080039eb
 80039c0:	080039e3 	.word	0x080039e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039c4:	f7fe fe02 	bl	80025cc <HAL_RCC_GetPCLK1Freq>
 80039c8:	61b8      	str	r0, [r7, #24]
        break;
 80039ca:	e013      	b.n	80039f4 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039cc:	f7fe fe20 	bl	8002610 <HAL_RCC_GetPCLK2Freq>
 80039d0:	61b8      	str	r0, [r7, #24]
        break;
 80039d2:	e00f      	b.n	80039f4 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039d4:	4b25      	ldr	r3, [pc, #148]	; (8003a6c <UART_SetConfig+0x2f4>)
 80039d6:	61bb      	str	r3, [r7, #24]
        break;
 80039d8:	e00c      	b.n	80039f4 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039da:	f7fe fd81 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 80039de:	61b8      	str	r0, [r7, #24]
        break;
 80039e0:	e008      	b.n	80039f4 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039e6:	61bb      	str	r3, [r7, #24]
        break;
 80039e8:	e004      	b.n	80039f4 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	77bb      	strb	r3, [r7, #30]
        break;
 80039f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 8086 	beq.w	8003b08 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	005a      	lsls	r2, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	085b      	lsrs	r3, r3, #1
 8003a06:	441a      	add	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	2b0f      	cmp	r3, #15
 8003a18:	d916      	bls.n	8003a48 <UART_SetConfig+0x2d0>
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a20:	d212      	bcs.n	8003a48 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	f023 030f 	bic.w	r3, r3, #15
 8003a2a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	085b      	lsrs	r3, r3, #1
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	89fb      	ldrh	r3, [r7, #14]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	89fa      	ldrh	r2, [r7, #14]
 8003a44:	60da      	str	r2, [r3, #12]
 8003a46:	e05f      	b.n	8003b08 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	77bb      	strb	r3, [r7, #30]
 8003a4c:	e05c      	b.n	8003b08 <UART_SetConfig+0x390>
 8003a4e:	bf00      	nop
 8003a50:	efff69f3 	.word	0xefff69f3
 8003a54:	40013800 	.word	0x40013800
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	40004400 	.word	0x40004400
 8003a60:	40004800 	.word	0x40004800
 8003a64:	40004c00 	.word	0x40004c00
 8003a68:	40005000 	.word	0x40005000
 8003a6c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a70:	7ffb      	ldrb	r3, [r7, #31]
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d827      	bhi.n	8003ac6 <UART_SetConfig+0x34e>
 8003a76:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <UART_SetConfig+0x304>)
 8003a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7c:	08003aa1 	.word	0x08003aa1
 8003a80:	08003aa9 	.word	0x08003aa9
 8003a84:	08003ab1 	.word	0x08003ab1
 8003a88:	08003ac7 	.word	0x08003ac7
 8003a8c:	08003ab7 	.word	0x08003ab7
 8003a90:	08003ac7 	.word	0x08003ac7
 8003a94:	08003ac7 	.word	0x08003ac7
 8003a98:	08003ac7 	.word	0x08003ac7
 8003a9c:	08003abf 	.word	0x08003abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aa0:	f7fe fd94 	bl	80025cc <HAL_RCC_GetPCLK1Freq>
 8003aa4:	61b8      	str	r0, [r7, #24]
        break;
 8003aa6:	e013      	b.n	8003ad0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aa8:	f7fe fdb2 	bl	8002610 <HAL_RCC_GetPCLK2Freq>
 8003aac:	61b8      	str	r0, [r7, #24]
        break;
 8003aae:	e00f      	b.n	8003ad0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ab0:	4b1b      	ldr	r3, [pc, #108]	; (8003b20 <UART_SetConfig+0x3a8>)
 8003ab2:	61bb      	str	r3, [r7, #24]
        break;
 8003ab4:	e00c      	b.n	8003ad0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ab6:	f7fe fd13 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 8003aba:	61b8      	str	r0, [r7, #24]
        break;
 8003abc:	e008      	b.n	8003ad0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ac2:	61bb      	str	r3, [r7, #24]
        break;
 8003ac4:	e004      	b.n	8003ad0 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	77bb      	strb	r3, [r7, #30]
        break;
 8003ace:	bf00      	nop
    }

    if (pclk != 0U)
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d018      	beq.n	8003b08 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	085a      	lsrs	r2, r3, #1
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	441a      	add	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	2b0f      	cmp	r3, #15
 8003af0:	d908      	bls.n	8003b04 <UART_SetConfig+0x38c>
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af8:	d204      	bcs.n	8003b04 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	60da      	str	r2, [r3, #12]
 8003b02:	e001      	b.n	8003b08 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b14:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3720      	adds	r7, #32
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	007a1200 	.word	0x007a1200

08003b24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00a      	beq.n	8003b92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d01a      	beq.n	8003c3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c22:	d10a      	bne.n	8003c3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	605a      	str	r2, [r3, #4]
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c78:	f7fd f88a 	bl	8000d90 <HAL_GetTick>
 8003c7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d10e      	bne.n	8003caa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f82d 	bl	8003cfa <UART_WaitOnFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e023      	b.n	8003cf2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d10e      	bne.n	8003cd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f817 	bl	8003cfa <UART_WaitOnFlagUntilTimeout>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e00d      	b.n	8003cf2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	60f8      	str	r0, [r7, #12]
 8003d02:	60b9      	str	r1, [r7, #8]
 8003d04:	603b      	str	r3, [r7, #0]
 8003d06:	4613      	mov	r3, r2
 8003d08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d0a:	e05e      	b.n	8003dca <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d12:	d05a      	beq.n	8003dca <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d14:	f7fd f83c 	bl	8000d90 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d302      	bcc.n	8003d2a <UART_WaitOnFlagUntilTimeout+0x30>
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d11b      	bne.n	8003d62 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d38:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0201 	bic.w	r2, r2, #1
 8003d48:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2220      	movs	r2, #32
 8003d54:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e043      	b.n	8003dea <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d02c      	beq.n	8003dca <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d7e:	d124      	bne.n	8003dca <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d98:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0201 	bic.w	r2, r2, #1
 8003da8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2220      	movs	r2, #32
 8003dae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e00f      	b.n	8003dea <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69da      	ldr	r2, [r3, #28]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	bf0c      	ite	eq
 8003dda:	2301      	moveq	r3, #1
 8003ddc:	2300      	movne	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d091      	beq.n	8003d0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <__errno>:
 8003df4:	4b01      	ldr	r3, [pc, #4]	; (8003dfc <__errno+0x8>)
 8003df6:	6818      	ldr	r0, [r3, #0]
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	2000000c 	.word	0x2000000c

08003e00 <__libc_init_array>:
 8003e00:	b570      	push	{r4, r5, r6, lr}
 8003e02:	4d0d      	ldr	r5, [pc, #52]	; (8003e38 <__libc_init_array+0x38>)
 8003e04:	4c0d      	ldr	r4, [pc, #52]	; (8003e3c <__libc_init_array+0x3c>)
 8003e06:	1b64      	subs	r4, r4, r5
 8003e08:	10a4      	asrs	r4, r4, #2
 8003e0a:	2600      	movs	r6, #0
 8003e0c:	42a6      	cmp	r6, r4
 8003e0e:	d109      	bne.n	8003e24 <__libc_init_array+0x24>
 8003e10:	4d0b      	ldr	r5, [pc, #44]	; (8003e40 <__libc_init_array+0x40>)
 8003e12:	4c0c      	ldr	r4, [pc, #48]	; (8003e44 <__libc_init_array+0x44>)
 8003e14:	f000 fc4e 	bl	80046b4 <_init>
 8003e18:	1b64      	subs	r4, r4, r5
 8003e1a:	10a4      	asrs	r4, r4, #2
 8003e1c:	2600      	movs	r6, #0
 8003e1e:	42a6      	cmp	r6, r4
 8003e20:	d105      	bne.n	8003e2e <__libc_init_array+0x2e>
 8003e22:	bd70      	pop	{r4, r5, r6, pc}
 8003e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e28:	4798      	blx	r3
 8003e2a:	3601      	adds	r6, #1
 8003e2c:	e7ee      	b.n	8003e0c <__libc_init_array+0xc>
 8003e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e32:	4798      	blx	r3
 8003e34:	3601      	adds	r6, #1
 8003e36:	e7f2      	b.n	8003e1e <__libc_init_array+0x1e>
 8003e38:	080048a8 	.word	0x080048a8
 8003e3c:	080048a8 	.word	0x080048a8
 8003e40:	080048a8 	.word	0x080048a8
 8003e44:	080048ac 	.word	0x080048ac

08003e48 <memset>:
 8003e48:	4402      	add	r2, r0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d100      	bne.n	8003e52 <memset+0xa>
 8003e50:	4770      	bx	lr
 8003e52:	f803 1b01 	strb.w	r1, [r3], #1
 8003e56:	e7f9      	b.n	8003e4c <memset+0x4>

08003e58 <siprintf>:
 8003e58:	b40e      	push	{r1, r2, r3}
 8003e5a:	b500      	push	{lr}
 8003e5c:	b09c      	sub	sp, #112	; 0x70
 8003e5e:	ab1d      	add	r3, sp, #116	; 0x74
 8003e60:	9002      	str	r0, [sp, #8]
 8003e62:	9006      	str	r0, [sp, #24]
 8003e64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e68:	4809      	ldr	r0, [pc, #36]	; (8003e90 <siprintf+0x38>)
 8003e6a:	9107      	str	r1, [sp, #28]
 8003e6c:	9104      	str	r1, [sp, #16]
 8003e6e:	4909      	ldr	r1, [pc, #36]	; (8003e94 <siprintf+0x3c>)
 8003e70:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e74:	9105      	str	r1, [sp, #20]
 8003e76:	6800      	ldr	r0, [r0, #0]
 8003e78:	9301      	str	r3, [sp, #4]
 8003e7a:	a902      	add	r1, sp, #8
 8003e7c:	f000 f868 	bl	8003f50 <_svfiprintf_r>
 8003e80:	9b02      	ldr	r3, [sp, #8]
 8003e82:	2200      	movs	r2, #0
 8003e84:	701a      	strb	r2, [r3, #0]
 8003e86:	b01c      	add	sp, #112	; 0x70
 8003e88:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e8c:	b003      	add	sp, #12
 8003e8e:	4770      	bx	lr
 8003e90:	2000000c 	.word	0x2000000c
 8003e94:	ffff0208 	.word	0xffff0208

08003e98 <__ssputs_r>:
 8003e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e9c:	688e      	ldr	r6, [r1, #8]
 8003e9e:	429e      	cmp	r6, r3
 8003ea0:	4682      	mov	sl, r0
 8003ea2:	460c      	mov	r4, r1
 8003ea4:	4690      	mov	r8, r2
 8003ea6:	461f      	mov	r7, r3
 8003ea8:	d838      	bhi.n	8003f1c <__ssputs_r+0x84>
 8003eaa:	898a      	ldrh	r2, [r1, #12]
 8003eac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003eb0:	d032      	beq.n	8003f18 <__ssputs_r+0x80>
 8003eb2:	6825      	ldr	r5, [r4, #0]
 8003eb4:	6909      	ldr	r1, [r1, #16]
 8003eb6:	eba5 0901 	sub.w	r9, r5, r1
 8003eba:	6965      	ldr	r5, [r4, #20]
 8003ebc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ec0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	444b      	add	r3, r9
 8003ec8:	106d      	asrs	r5, r5, #1
 8003eca:	429d      	cmp	r5, r3
 8003ecc:	bf38      	it	cc
 8003ece:	461d      	movcc	r5, r3
 8003ed0:	0553      	lsls	r3, r2, #21
 8003ed2:	d531      	bpl.n	8003f38 <__ssputs_r+0xa0>
 8003ed4:	4629      	mov	r1, r5
 8003ed6:	f000 fb47 	bl	8004568 <_malloc_r>
 8003eda:	4606      	mov	r6, r0
 8003edc:	b950      	cbnz	r0, 8003ef4 <__ssputs_r+0x5c>
 8003ede:	230c      	movs	r3, #12
 8003ee0:	f8ca 3000 	str.w	r3, [sl]
 8003ee4:	89a3      	ldrh	r3, [r4, #12]
 8003ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eea:	81a3      	strh	r3, [r4, #12]
 8003eec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef4:	6921      	ldr	r1, [r4, #16]
 8003ef6:	464a      	mov	r2, r9
 8003ef8:	f000 fabe 	bl	8004478 <memcpy>
 8003efc:	89a3      	ldrh	r3, [r4, #12]
 8003efe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f06:	81a3      	strh	r3, [r4, #12]
 8003f08:	6126      	str	r6, [r4, #16]
 8003f0a:	6165      	str	r5, [r4, #20]
 8003f0c:	444e      	add	r6, r9
 8003f0e:	eba5 0509 	sub.w	r5, r5, r9
 8003f12:	6026      	str	r6, [r4, #0]
 8003f14:	60a5      	str	r5, [r4, #8]
 8003f16:	463e      	mov	r6, r7
 8003f18:	42be      	cmp	r6, r7
 8003f1a:	d900      	bls.n	8003f1e <__ssputs_r+0x86>
 8003f1c:	463e      	mov	r6, r7
 8003f1e:	4632      	mov	r2, r6
 8003f20:	6820      	ldr	r0, [r4, #0]
 8003f22:	4641      	mov	r1, r8
 8003f24:	f000 fab6 	bl	8004494 <memmove>
 8003f28:	68a3      	ldr	r3, [r4, #8]
 8003f2a:	6822      	ldr	r2, [r4, #0]
 8003f2c:	1b9b      	subs	r3, r3, r6
 8003f2e:	4432      	add	r2, r6
 8003f30:	60a3      	str	r3, [r4, #8]
 8003f32:	6022      	str	r2, [r4, #0]
 8003f34:	2000      	movs	r0, #0
 8003f36:	e7db      	b.n	8003ef0 <__ssputs_r+0x58>
 8003f38:	462a      	mov	r2, r5
 8003f3a:	f000 fb6f 	bl	800461c <_realloc_r>
 8003f3e:	4606      	mov	r6, r0
 8003f40:	2800      	cmp	r0, #0
 8003f42:	d1e1      	bne.n	8003f08 <__ssputs_r+0x70>
 8003f44:	6921      	ldr	r1, [r4, #16]
 8003f46:	4650      	mov	r0, sl
 8003f48:	f000 fabe 	bl	80044c8 <_free_r>
 8003f4c:	e7c7      	b.n	8003ede <__ssputs_r+0x46>
	...

08003f50 <_svfiprintf_r>:
 8003f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f54:	4698      	mov	r8, r3
 8003f56:	898b      	ldrh	r3, [r1, #12]
 8003f58:	061b      	lsls	r3, r3, #24
 8003f5a:	b09d      	sub	sp, #116	; 0x74
 8003f5c:	4607      	mov	r7, r0
 8003f5e:	460d      	mov	r5, r1
 8003f60:	4614      	mov	r4, r2
 8003f62:	d50e      	bpl.n	8003f82 <_svfiprintf_r+0x32>
 8003f64:	690b      	ldr	r3, [r1, #16]
 8003f66:	b963      	cbnz	r3, 8003f82 <_svfiprintf_r+0x32>
 8003f68:	2140      	movs	r1, #64	; 0x40
 8003f6a:	f000 fafd 	bl	8004568 <_malloc_r>
 8003f6e:	6028      	str	r0, [r5, #0]
 8003f70:	6128      	str	r0, [r5, #16]
 8003f72:	b920      	cbnz	r0, 8003f7e <_svfiprintf_r+0x2e>
 8003f74:	230c      	movs	r3, #12
 8003f76:	603b      	str	r3, [r7, #0]
 8003f78:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7c:	e0d1      	b.n	8004122 <_svfiprintf_r+0x1d2>
 8003f7e:	2340      	movs	r3, #64	; 0x40
 8003f80:	616b      	str	r3, [r5, #20]
 8003f82:	2300      	movs	r3, #0
 8003f84:	9309      	str	r3, [sp, #36]	; 0x24
 8003f86:	2320      	movs	r3, #32
 8003f88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f90:	2330      	movs	r3, #48	; 0x30
 8003f92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800413c <_svfiprintf_r+0x1ec>
 8003f96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f9a:	f04f 0901 	mov.w	r9, #1
 8003f9e:	4623      	mov	r3, r4
 8003fa0:	469a      	mov	sl, r3
 8003fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fa6:	b10a      	cbz	r2, 8003fac <_svfiprintf_r+0x5c>
 8003fa8:	2a25      	cmp	r2, #37	; 0x25
 8003faa:	d1f9      	bne.n	8003fa0 <_svfiprintf_r+0x50>
 8003fac:	ebba 0b04 	subs.w	fp, sl, r4
 8003fb0:	d00b      	beq.n	8003fca <_svfiprintf_r+0x7a>
 8003fb2:	465b      	mov	r3, fp
 8003fb4:	4622      	mov	r2, r4
 8003fb6:	4629      	mov	r1, r5
 8003fb8:	4638      	mov	r0, r7
 8003fba:	f7ff ff6d 	bl	8003e98 <__ssputs_r>
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	f000 80aa 	beq.w	8004118 <_svfiprintf_r+0x1c8>
 8003fc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fc6:	445a      	add	r2, fp
 8003fc8:	9209      	str	r2, [sp, #36]	; 0x24
 8003fca:	f89a 3000 	ldrb.w	r3, [sl]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 80a2 	beq.w	8004118 <_svfiprintf_r+0x1c8>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fde:	f10a 0a01 	add.w	sl, sl, #1
 8003fe2:	9304      	str	r3, [sp, #16]
 8003fe4:	9307      	str	r3, [sp, #28]
 8003fe6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fea:	931a      	str	r3, [sp, #104]	; 0x68
 8003fec:	4654      	mov	r4, sl
 8003fee:	2205      	movs	r2, #5
 8003ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ff4:	4851      	ldr	r0, [pc, #324]	; (800413c <_svfiprintf_r+0x1ec>)
 8003ff6:	f7fc f8fb 	bl	80001f0 <memchr>
 8003ffa:	9a04      	ldr	r2, [sp, #16]
 8003ffc:	b9d8      	cbnz	r0, 8004036 <_svfiprintf_r+0xe6>
 8003ffe:	06d0      	lsls	r0, r2, #27
 8004000:	bf44      	itt	mi
 8004002:	2320      	movmi	r3, #32
 8004004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004008:	0711      	lsls	r1, r2, #28
 800400a:	bf44      	itt	mi
 800400c:	232b      	movmi	r3, #43	; 0x2b
 800400e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004012:	f89a 3000 	ldrb.w	r3, [sl]
 8004016:	2b2a      	cmp	r3, #42	; 0x2a
 8004018:	d015      	beq.n	8004046 <_svfiprintf_r+0xf6>
 800401a:	9a07      	ldr	r2, [sp, #28]
 800401c:	4654      	mov	r4, sl
 800401e:	2000      	movs	r0, #0
 8004020:	f04f 0c0a 	mov.w	ip, #10
 8004024:	4621      	mov	r1, r4
 8004026:	f811 3b01 	ldrb.w	r3, [r1], #1
 800402a:	3b30      	subs	r3, #48	; 0x30
 800402c:	2b09      	cmp	r3, #9
 800402e:	d94e      	bls.n	80040ce <_svfiprintf_r+0x17e>
 8004030:	b1b0      	cbz	r0, 8004060 <_svfiprintf_r+0x110>
 8004032:	9207      	str	r2, [sp, #28]
 8004034:	e014      	b.n	8004060 <_svfiprintf_r+0x110>
 8004036:	eba0 0308 	sub.w	r3, r0, r8
 800403a:	fa09 f303 	lsl.w	r3, r9, r3
 800403e:	4313      	orrs	r3, r2
 8004040:	9304      	str	r3, [sp, #16]
 8004042:	46a2      	mov	sl, r4
 8004044:	e7d2      	b.n	8003fec <_svfiprintf_r+0x9c>
 8004046:	9b03      	ldr	r3, [sp, #12]
 8004048:	1d19      	adds	r1, r3, #4
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	9103      	str	r1, [sp, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	bfbb      	ittet	lt
 8004052:	425b      	neglt	r3, r3
 8004054:	f042 0202 	orrlt.w	r2, r2, #2
 8004058:	9307      	strge	r3, [sp, #28]
 800405a:	9307      	strlt	r3, [sp, #28]
 800405c:	bfb8      	it	lt
 800405e:	9204      	strlt	r2, [sp, #16]
 8004060:	7823      	ldrb	r3, [r4, #0]
 8004062:	2b2e      	cmp	r3, #46	; 0x2e
 8004064:	d10c      	bne.n	8004080 <_svfiprintf_r+0x130>
 8004066:	7863      	ldrb	r3, [r4, #1]
 8004068:	2b2a      	cmp	r3, #42	; 0x2a
 800406a:	d135      	bne.n	80040d8 <_svfiprintf_r+0x188>
 800406c:	9b03      	ldr	r3, [sp, #12]
 800406e:	1d1a      	adds	r2, r3, #4
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	9203      	str	r2, [sp, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	bfb8      	it	lt
 8004078:	f04f 33ff 	movlt.w	r3, #4294967295
 800407c:	3402      	adds	r4, #2
 800407e:	9305      	str	r3, [sp, #20]
 8004080:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800414c <_svfiprintf_r+0x1fc>
 8004084:	7821      	ldrb	r1, [r4, #0]
 8004086:	2203      	movs	r2, #3
 8004088:	4650      	mov	r0, sl
 800408a:	f7fc f8b1 	bl	80001f0 <memchr>
 800408e:	b140      	cbz	r0, 80040a2 <_svfiprintf_r+0x152>
 8004090:	2340      	movs	r3, #64	; 0x40
 8004092:	eba0 000a 	sub.w	r0, r0, sl
 8004096:	fa03 f000 	lsl.w	r0, r3, r0
 800409a:	9b04      	ldr	r3, [sp, #16]
 800409c:	4303      	orrs	r3, r0
 800409e:	3401      	adds	r4, #1
 80040a0:	9304      	str	r3, [sp, #16]
 80040a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040a6:	4826      	ldr	r0, [pc, #152]	; (8004140 <_svfiprintf_r+0x1f0>)
 80040a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040ac:	2206      	movs	r2, #6
 80040ae:	f7fc f89f 	bl	80001f0 <memchr>
 80040b2:	2800      	cmp	r0, #0
 80040b4:	d038      	beq.n	8004128 <_svfiprintf_r+0x1d8>
 80040b6:	4b23      	ldr	r3, [pc, #140]	; (8004144 <_svfiprintf_r+0x1f4>)
 80040b8:	bb1b      	cbnz	r3, 8004102 <_svfiprintf_r+0x1b2>
 80040ba:	9b03      	ldr	r3, [sp, #12]
 80040bc:	3307      	adds	r3, #7
 80040be:	f023 0307 	bic.w	r3, r3, #7
 80040c2:	3308      	adds	r3, #8
 80040c4:	9303      	str	r3, [sp, #12]
 80040c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040c8:	4433      	add	r3, r6
 80040ca:	9309      	str	r3, [sp, #36]	; 0x24
 80040cc:	e767      	b.n	8003f9e <_svfiprintf_r+0x4e>
 80040ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80040d2:	460c      	mov	r4, r1
 80040d4:	2001      	movs	r0, #1
 80040d6:	e7a5      	b.n	8004024 <_svfiprintf_r+0xd4>
 80040d8:	2300      	movs	r3, #0
 80040da:	3401      	adds	r4, #1
 80040dc:	9305      	str	r3, [sp, #20]
 80040de:	4619      	mov	r1, r3
 80040e0:	f04f 0c0a 	mov.w	ip, #10
 80040e4:	4620      	mov	r0, r4
 80040e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040ea:	3a30      	subs	r2, #48	; 0x30
 80040ec:	2a09      	cmp	r2, #9
 80040ee:	d903      	bls.n	80040f8 <_svfiprintf_r+0x1a8>
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0c5      	beq.n	8004080 <_svfiprintf_r+0x130>
 80040f4:	9105      	str	r1, [sp, #20]
 80040f6:	e7c3      	b.n	8004080 <_svfiprintf_r+0x130>
 80040f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80040fc:	4604      	mov	r4, r0
 80040fe:	2301      	movs	r3, #1
 8004100:	e7f0      	b.n	80040e4 <_svfiprintf_r+0x194>
 8004102:	ab03      	add	r3, sp, #12
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	462a      	mov	r2, r5
 8004108:	4b0f      	ldr	r3, [pc, #60]	; (8004148 <_svfiprintf_r+0x1f8>)
 800410a:	a904      	add	r1, sp, #16
 800410c:	4638      	mov	r0, r7
 800410e:	f3af 8000 	nop.w
 8004112:	1c42      	adds	r2, r0, #1
 8004114:	4606      	mov	r6, r0
 8004116:	d1d6      	bne.n	80040c6 <_svfiprintf_r+0x176>
 8004118:	89ab      	ldrh	r3, [r5, #12]
 800411a:	065b      	lsls	r3, r3, #25
 800411c:	f53f af2c 	bmi.w	8003f78 <_svfiprintf_r+0x28>
 8004120:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004122:	b01d      	add	sp, #116	; 0x74
 8004124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004128:	ab03      	add	r3, sp, #12
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	462a      	mov	r2, r5
 800412e:	4b06      	ldr	r3, [pc, #24]	; (8004148 <_svfiprintf_r+0x1f8>)
 8004130:	a904      	add	r1, sp, #16
 8004132:	4638      	mov	r0, r7
 8004134:	f000 f87a 	bl	800422c <_printf_i>
 8004138:	e7eb      	b.n	8004112 <_svfiprintf_r+0x1c2>
 800413a:	bf00      	nop
 800413c:	08004874 	.word	0x08004874
 8004140:	0800487e 	.word	0x0800487e
 8004144:	00000000 	.word	0x00000000
 8004148:	08003e99 	.word	0x08003e99
 800414c:	0800487a 	.word	0x0800487a

08004150 <_printf_common>:
 8004150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004154:	4616      	mov	r6, r2
 8004156:	4699      	mov	r9, r3
 8004158:	688a      	ldr	r2, [r1, #8]
 800415a:	690b      	ldr	r3, [r1, #16]
 800415c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004160:	4293      	cmp	r3, r2
 8004162:	bfb8      	it	lt
 8004164:	4613      	movlt	r3, r2
 8004166:	6033      	str	r3, [r6, #0]
 8004168:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800416c:	4607      	mov	r7, r0
 800416e:	460c      	mov	r4, r1
 8004170:	b10a      	cbz	r2, 8004176 <_printf_common+0x26>
 8004172:	3301      	adds	r3, #1
 8004174:	6033      	str	r3, [r6, #0]
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	0699      	lsls	r1, r3, #26
 800417a:	bf42      	ittt	mi
 800417c:	6833      	ldrmi	r3, [r6, #0]
 800417e:	3302      	addmi	r3, #2
 8004180:	6033      	strmi	r3, [r6, #0]
 8004182:	6825      	ldr	r5, [r4, #0]
 8004184:	f015 0506 	ands.w	r5, r5, #6
 8004188:	d106      	bne.n	8004198 <_printf_common+0x48>
 800418a:	f104 0a19 	add.w	sl, r4, #25
 800418e:	68e3      	ldr	r3, [r4, #12]
 8004190:	6832      	ldr	r2, [r6, #0]
 8004192:	1a9b      	subs	r3, r3, r2
 8004194:	42ab      	cmp	r3, r5
 8004196:	dc26      	bgt.n	80041e6 <_printf_common+0x96>
 8004198:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800419c:	1e13      	subs	r3, r2, #0
 800419e:	6822      	ldr	r2, [r4, #0]
 80041a0:	bf18      	it	ne
 80041a2:	2301      	movne	r3, #1
 80041a4:	0692      	lsls	r2, r2, #26
 80041a6:	d42b      	bmi.n	8004200 <_printf_common+0xb0>
 80041a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041ac:	4649      	mov	r1, r9
 80041ae:	4638      	mov	r0, r7
 80041b0:	47c0      	blx	r8
 80041b2:	3001      	adds	r0, #1
 80041b4:	d01e      	beq.n	80041f4 <_printf_common+0xa4>
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	68e5      	ldr	r5, [r4, #12]
 80041ba:	6832      	ldr	r2, [r6, #0]
 80041bc:	f003 0306 	and.w	r3, r3, #6
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	bf08      	it	eq
 80041c4:	1aad      	subeq	r5, r5, r2
 80041c6:	68a3      	ldr	r3, [r4, #8]
 80041c8:	6922      	ldr	r2, [r4, #16]
 80041ca:	bf0c      	ite	eq
 80041cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041d0:	2500      	movne	r5, #0
 80041d2:	4293      	cmp	r3, r2
 80041d4:	bfc4      	itt	gt
 80041d6:	1a9b      	subgt	r3, r3, r2
 80041d8:	18ed      	addgt	r5, r5, r3
 80041da:	2600      	movs	r6, #0
 80041dc:	341a      	adds	r4, #26
 80041de:	42b5      	cmp	r5, r6
 80041e0:	d11a      	bne.n	8004218 <_printf_common+0xc8>
 80041e2:	2000      	movs	r0, #0
 80041e4:	e008      	b.n	80041f8 <_printf_common+0xa8>
 80041e6:	2301      	movs	r3, #1
 80041e8:	4652      	mov	r2, sl
 80041ea:	4649      	mov	r1, r9
 80041ec:	4638      	mov	r0, r7
 80041ee:	47c0      	blx	r8
 80041f0:	3001      	adds	r0, #1
 80041f2:	d103      	bne.n	80041fc <_printf_common+0xac>
 80041f4:	f04f 30ff 	mov.w	r0, #4294967295
 80041f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041fc:	3501      	adds	r5, #1
 80041fe:	e7c6      	b.n	800418e <_printf_common+0x3e>
 8004200:	18e1      	adds	r1, r4, r3
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	2030      	movs	r0, #48	; 0x30
 8004206:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800420a:	4422      	add	r2, r4
 800420c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004210:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004214:	3302      	adds	r3, #2
 8004216:	e7c7      	b.n	80041a8 <_printf_common+0x58>
 8004218:	2301      	movs	r3, #1
 800421a:	4622      	mov	r2, r4
 800421c:	4649      	mov	r1, r9
 800421e:	4638      	mov	r0, r7
 8004220:	47c0      	blx	r8
 8004222:	3001      	adds	r0, #1
 8004224:	d0e6      	beq.n	80041f4 <_printf_common+0xa4>
 8004226:	3601      	adds	r6, #1
 8004228:	e7d9      	b.n	80041de <_printf_common+0x8e>
	...

0800422c <_printf_i>:
 800422c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004230:	460c      	mov	r4, r1
 8004232:	4691      	mov	r9, r2
 8004234:	7e27      	ldrb	r7, [r4, #24]
 8004236:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004238:	2f78      	cmp	r7, #120	; 0x78
 800423a:	4680      	mov	r8, r0
 800423c:	469a      	mov	sl, r3
 800423e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004242:	d807      	bhi.n	8004254 <_printf_i+0x28>
 8004244:	2f62      	cmp	r7, #98	; 0x62
 8004246:	d80a      	bhi.n	800425e <_printf_i+0x32>
 8004248:	2f00      	cmp	r7, #0
 800424a:	f000 80d8 	beq.w	80043fe <_printf_i+0x1d2>
 800424e:	2f58      	cmp	r7, #88	; 0x58
 8004250:	f000 80a3 	beq.w	800439a <_printf_i+0x16e>
 8004254:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800425c:	e03a      	b.n	80042d4 <_printf_i+0xa8>
 800425e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004262:	2b15      	cmp	r3, #21
 8004264:	d8f6      	bhi.n	8004254 <_printf_i+0x28>
 8004266:	a001      	add	r0, pc, #4	; (adr r0, 800426c <_printf_i+0x40>)
 8004268:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800426c:	080042c5 	.word	0x080042c5
 8004270:	080042d9 	.word	0x080042d9
 8004274:	08004255 	.word	0x08004255
 8004278:	08004255 	.word	0x08004255
 800427c:	08004255 	.word	0x08004255
 8004280:	08004255 	.word	0x08004255
 8004284:	080042d9 	.word	0x080042d9
 8004288:	08004255 	.word	0x08004255
 800428c:	08004255 	.word	0x08004255
 8004290:	08004255 	.word	0x08004255
 8004294:	08004255 	.word	0x08004255
 8004298:	080043e5 	.word	0x080043e5
 800429c:	08004309 	.word	0x08004309
 80042a0:	080043c7 	.word	0x080043c7
 80042a4:	08004255 	.word	0x08004255
 80042a8:	08004255 	.word	0x08004255
 80042ac:	08004407 	.word	0x08004407
 80042b0:	08004255 	.word	0x08004255
 80042b4:	08004309 	.word	0x08004309
 80042b8:	08004255 	.word	0x08004255
 80042bc:	08004255 	.word	0x08004255
 80042c0:	080043cf 	.word	0x080043cf
 80042c4:	680b      	ldr	r3, [r1, #0]
 80042c6:	1d1a      	adds	r2, r3, #4
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	600a      	str	r2, [r1, #0]
 80042cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042d4:	2301      	movs	r3, #1
 80042d6:	e0a3      	b.n	8004420 <_printf_i+0x1f4>
 80042d8:	6825      	ldr	r5, [r4, #0]
 80042da:	6808      	ldr	r0, [r1, #0]
 80042dc:	062e      	lsls	r6, r5, #24
 80042de:	f100 0304 	add.w	r3, r0, #4
 80042e2:	d50a      	bpl.n	80042fa <_printf_i+0xce>
 80042e4:	6805      	ldr	r5, [r0, #0]
 80042e6:	600b      	str	r3, [r1, #0]
 80042e8:	2d00      	cmp	r5, #0
 80042ea:	da03      	bge.n	80042f4 <_printf_i+0xc8>
 80042ec:	232d      	movs	r3, #45	; 0x2d
 80042ee:	426d      	negs	r5, r5
 80042f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042f4:	485e      	ldr	r0, [pc, #376]	; (8004470 <_printf_i+0x244>)
 80042f6:	230a      	movs	r3, #10
 80042f8:	e019      	b.n	800432e <_printf_i+0x102>
 80042fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80042fe:	6805      	ldr	r5, [r0, #0]
 8004300:	600b      	str	r3, [r1, #0]
 8004302:	bf18      	it	ne
 8004304:	b22d      	sxthne	r5, r5
 8004306:	e7ef      	b.n	80042e8 <_printf_i+0xbc>
 8004308:	680b      	ldr	r3, [r1, #0]
 800430a:	6825      	ldr	r5, [r4, #0]
 800430c:	1d18      	adds	r0, r3, #4
 800430e:	6008      	str	r0, [r1, #0]
 8004310:	0628      	lsls	r0, r5, #24
 8004312:	d501      	bpl.n	8004318 <_printf_i+0xec>
 8004314:	681d      	ldr	r5, [r3, #0]
 8004316:	e002      	b.n	800431e <_printf_i+0xf2>
 8004318:	0669      	lsls	r1, r5, #25
 800431a:	d5fb      	bpl.n	8004314 <_printf_i+0xe8>
 800431c:	881d      	ldrh	r5, [r3, #0]
 800431e:	4854      	ldr	r0, [pc, #336]	; (8004470 <_printf_i+0x244>)
 8004320:	2f6f      	cmp	r7, #111	; 0x6f
 8004322:	bf0c      	ite	eq
 8004324:	2308      	moveq	r3, #8
 8004326:	230a      	movne	r3, #10
 8004328:	2100      	movs	r1, #0
 800432a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800432e:	6866      	ldr	r6, [r4, #4]
 8004330:	60a6      	str	r6, [r4, #8]
 8004332:	2e00      	cmp	r6, #0
 8004334:	bfa2      	ittt	ge
 8004336:	6821      	ldrge	r1, [r4, #0]
 8004338:	f021 0104 	bicge.w	r1, r1, #4
 800433c:	6021      	strge	r1, [r4, #0]
 800433e:	b90d      	cbnz	r5, 8004344 <_printf_i+0x118>
 8004340:	2e00      	cmp	r6, #0
 8004342:	d04d      	beq.n	80043e0 <_printf_i+0x1b4>
 8004344:	4616      	mov	r6, r2
 8004346:	fbb5 f1f3 	udiv	r1, r5, r3
 800434a:	fb03 5711 	mls	r7, r3, r1, r5
 800434e:	5dc7      	ldrb	r7, [r0, r7]
 8004350:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004354:	462f      	mov	r7, r5
 8004356:	42bb      	cmp	r3, r7
 8004358:	460d      	mov	r5, r1
 800435a:	d9f4      	bls.n	8004346 <_printf_i+0x11a>
 800435c:	2b08      	cmp	r3, #8
 800435e:	d10b      	bne.n	8004378 <_printf_i+0x14c>
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	07df      	lsls	r7, r3, #31
 8004364:	d508      	bpl.n	8004378 <_printf_i+0x14c>
 8004366:	6923      	ldr	r3, [r4, #16]
 8004368:	6861      	ldr	r1, [r4, #4]
 800436a:	4299      	cmp	r1, r3
 800436c:	bfde      	ittt	le
 800436e:	2330      	movle	r3, #48	; 0x30
 8004370:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004374:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004378:	1b92      	subs	r2, r2, r6
 800437a:	6122      	str	r2, [r4, #16]
 800437c:	f8cd a000 	str.w	sl, [sp]
 8004380:	464b      	mov	r3, r9
 8004382:	aa03      	add	r2, sp, #12
 8004384:	4621      	mov	r1, r4
 8004386:	4640      	mov	r0, r8
 8004388:	f7ff fee2 	bl	8004150 <_printf_common>
 800438c:	3001      	adds	r0, #1
 800438e:	d14c      	bne.n	800442a <_printf_i+0x1fe>
 8004390:	f04f 30ff 	mov.w	r0, #4294967295
 8004394:	b004      	add	sp, #16
 8004396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800439a:	4835      	ldr	r0, [pc, #212]	; (8004470 <_printf_i+0x244>)
 800439c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	680e      	ldr	r6, [r1, #0]
 80043a4:	061f      	lsls	r7, r3, #24
 80043a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80043aa:	600e      	str	r6, [r1, #0]
 80043ac:	d514      	bpl.n	80043d8 <_printf_i+0x1ac>
 80043ae:	07d9      	lsls	r1, r3, #31
 80043b0:	bf44      	itt	mi
 80043b2:	f043 0320 	orrmi.w	r3, r3, #32
 80043b6:	6023      	strmi	r3, [r4, #0]
 80043b8:	b91d      	cbnz	r5, 80043c2 <_printf_i+0x196>
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	f023 0320 	bic.w	r3, r3, #32
 80043c0:	6023      	str	r3, [r4, #0]
 80043c2:	2310      	movs	r3, #16
 80043c4:	e7b0      	b.n	8004328 <_printf_i+0xfc>
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	f043 0320 	orr.w	r3, r3, #32
 80043cc:	6023      	str	r3, [r4, #0]
 80043ce:	2378      	movs	r3, #120	; 0x78
 80043d0:	4828      	ldr	r0, [pc, #160]	; (8004474 <_printf_i+0x248>)
 80043d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043d6:	e7e3      	b.n	80043a0 <_printf_i+0x174>
 80043d8:	065e      	lsls	r6, r3, #25
 80043da:	bf48      	it	mi
 80043dc:	b2ad      	uxthmi	r5, r5
 80043de:	e7e6      	b.n	80043ae <_printf_i+0x182>
 80043e0:	4616      	mov	r6, r2
 80043e2:	e7bb      	b.n	800435c <_printf_i+0x130>
 80043e4:	680b      	ldr	r3, [r1, #0]
 80043e6:	6826      	ldr	r6, [r4, #0]
 80043e8:	6960      	ldr	r0, [r4, #20]
 80043ea:	1d1d      	adds	r5, r3, #4
 80043ec:	600d      	str	r5, [r1, #0]
 80043ee:	0635      	lsls	r5, r6, #24
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	d501      	bpl.n	80043f8 <_printf_i+0x1cc>
 80043f4:	6018      	str	r0, [r3, #0]
 80043f6:	e002      	b.n	80043fe <_printf_i+0x1d2>
 80043f8:	0671      	lsls	r1, r6, #25
 80043fa:	d5fb      	bpl.n	80043f4 <_printf_i+0x1c8>
 80043fc:	8018      	strh	r0, [r3, #0]
 80043fe:	2300      	movs	r3, #0
 8004400:	6123      	str	r3, [r4, #16]
 8004402:	4616      	mov	r6, r2
 8004404:	e7ba      	b.n	800437c <_printf_i+0x150>
 8004406:	680b      	ldr	r3, [r1, #0]
 8004408:	1d1a      	adds	r2, r3, #4
 800440a:	600a      	str	r2, [r1, #0]
 800440c:	681e      	ldr	r6, [r3, #0]
 800440e:	6862      	ldr	r2, [r4, #4]
 8004410:	2100      	movs	r1, #0
 8004412:	4630      	mov	r0, r6
 8004414:	f7fb feec 	bl	80001f0 <memchr>
 8004418:	b108      	cbz	r0, 800441e <_printf_i+0x1f2>
 800441a:	1b80      	subs	r0, r0, r6
 800441c:	6060      	str	r0, [r4, #4]
 800441e:	6863      	ldr	r3, [r4, #4]
 8004420:	6123      	str	r3, [r4, #16]
 8004422:	2300      	movs	r3, #0
 8004424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004428:	e7a8      	b.n	800437c <_printf_i+0x150>
 800442a:	6923      	ldr	r3, [r4, #16]
 800442c:	4632      	mov	r2, r6
 800442e:	4649      	mov	r1, r9
 8004430:	4640      	mov	r0, r8
 8004432:	47d0      	blx	sl
 8004434:	3001      	adds	r0, #1
 8004436:	d0ab      	beq.n	8004390 <_printf_i+0x164>
 8004438:	6823      	ldr	r3, [r4, #0]
 800443a:	079b      	lsls	r3, r3, #30
 800443c:	d413      	bmi.n	8004466 <_printf_i+0x23a>
 800443e:	68e0      	ldr	r0, [r4, #12]
 8004440:	9b03      	ldr	r3, [sp, #12]
 8004442:	4298      	cmp	r0, r3
 8004444:	bfb8      	it	lt
 8004446:	4618      	movlt	r0, r3
 8004448:	e7a4      	b.n	8004394 <_printf_i+0x168>
 800444a:	2301      	movs	r3, #1
 800444c:	4632      	mov	r2, r6
 800444e:	4649      	mov	r1, r9
 8004450:	4640      	mov	r0, r8
 8004452:	47d0      	blx	sl
 8004454:	3001      	adds	r0, #1
 8004456:	d09b      	beq.n	8004390 <_printf_i+0x164>
 8004458:	3501      	adds	r5, #1
 800445a:	68e3      	ldr	r3, [r4, #12]
 800445c:	9903      	ldr	r1, [sp, #12]
 800445e:	1a5b      	subs	r3, r3, r1
 8004460:	42ab      	cmp	r3, r5
 8004462:	dcf2      	bgt.n	800444a <_printf_i+0x21e>
 8004464:	e7eb      	b.n	800443e <_printf_i+0x212>
 8004466:	2500      	movs	r5, #0
 8004468:	f104 0619 	add.w	r6, r4, #25
 800446c:	e7f5      	b.n	800445a <_printf_i+0x22e>
 800446e:	bf00      	nop
 8004470:	08004885 	.word	0x08004885
 8004474:	08004896 	.word	0x08004896

08004478 <memcpy>:
 8004478:	440a      	add	r2, r1
 800447a:	4291      	cmp	r1, r2
 800447c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004480:	d100      	bne.n	8004484 <memcpy+0xc>
 8004482:	4770      	bx	lr
 8004484:	b510      	push	{r4, lr}
 8004486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800448a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800448e:	4291      	cmp	r1, r2
 8004490:	d1f9      	bne.n	8004486 <memcpy+0xe>
 8004492:	bd10      	pop	{r4, pc}

08004494 <memmove>:
 8004494:	4288      	cmp	r0, r1
 8004496:	b510      	push	{r4, lr}
 8004498:	eb01 0402 	add.w	r4, r1, r2
 800449c:	d902      	bls.n	80044a4 <memmove+0x10>
 800449e:	4284      	cmp	r4, r0
 80044a0:	4623      	mov	r3, r4
 80044a2:	d807      	bhi.n	80044b4 <memmove+0x20>
 80044a4:	1e43      	subs	r3, r0, #1
 80044a6:	42a1      	cmp	r1, r4
 80044a8:	d008      	beq.n	80044bc <memmove+0x28>
 80044aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044b2:	e7f8      	b.n	80044a6 <memmove+0x12>
 80044b4:	4402      	add	r2, r0
 80044b6:	4601      	mov	r1, r0
 80044b8:	428a      	cmp	r2, r1
 80044ba:	d100      	bne.n	80044be <memmove+0x2a>
 80044bc:	bd10      	pop	{r4, pc}
 80044be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044c6:	e7f7      	b.n	80044b8 <memmove+0x24>

080044c8 <_free_r>:
 80044c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044ca:	2900      	cmp	r1, #0
 80044cc:	d048      	beq.n	8004560 <_free_r+0x98>
 80044ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044d2:	9001      	str	r0, [sp, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f1a1 0404 	sub.w	r4, r1, #4
 80044da:	bfb8      	it	lt
 80044dc:	18e4      	addlt	r4, r4, r3
 80044de:	f000 f8d3 	bl	8004688 <__malloc_lock>
 80044e2:	4a20      	ldr	r2, [pc, #128]	; (8004564 <_free_r+0x9c>)
 80044e4:	9801      	ldr	r0, [sp, #4]
 80044e6:	6813      	ldr	r3, [r2, #0]
 80044e8:	4615      	mov	r5, r2
 80044ea:	b933      	cbnz	r3, 80044fa <_free_r+0x32>
 80044ec:	6063      	str	r3, [r4, #4]
 80044ee:	6014      	str	r4, [r2, #0]
 80044f0:	b003      	add	sp, #12
 80044f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044f6:	f000 b8cd 	b.w	8004694 <__malloc_unlock>
 80044fa:	42a3      	cmp	r3, r4
 80044fc:	d90b      	bls.n	8004516 <_free_r+0x4e>
 80044fe:	6821      	ldr	r1, [r4, #0]
 8004500:	1862      	adds	r2, r4, r1
 8004502:	4293      	cmp	r3, r2
 8004504:	bf04      	itt	eq
 8004506:	681a      	ldreq	r2, [r3, #0]
 8004508:	685b      	ldreq	r3, [r3, #4]
 800450a:	6063      	str	r3, [r4, #4]
 800450c:	bf04      	itt	eq
 800450e:	1852      	addeq	r2, r2, r1
 8004510:	6022      	streq	r2, [r4, #0]
 8004512:	602c      	str	r4, [r5, #0]
 8004514:	e7ec      	b.n	80044f0 <_free_r+0x28>
 8004516:	461a      	mov	r2, r3
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	b10b      	cbz	r3, 8004520 <_free_r+0x58>
 800451c:	42a3      	cmp	r3, r4
 800451e:	d9fa      	bls.n	8004516 <_free_r+0x4e>
 8004520:	6811      	ldr	r1, [r2, #0]
 8004522:	1855      	adds	r5, r2, r1
 8004524:	42a5      	cmp	r5, r4
 8004526:	d10b      	bne.n	8004540 <_free_r+0x78>
 8004528:	6824      	ldr	r4, [r4, #0]
 800452a:	4421      	add	r1, r4
 800452c:	1854      	adds	r4, r2, r1
 800452e:	42a3      	cmp	r3, r4
 8004530:	6011      	str	r1, [r2, #0]
 8004532:	d1dd      	bne.n	80044f0 <_free_r+0x28>
 8004534:	681c      	ldr	r4, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	6053      	str	r3, [r2, #4]
 800453a:	4421      	add	r1, r4
 800453c:	6011      	str	r1, [r2, #0]
 800453e:	e7d7      	b.n	80044f0 <_free_r+0x28>
 8004540:	d902      	bls.n	8004548 <_free_r+0x80>
 8004542:	230c      	movs	r3, #12
 8004544:	6003      	str	r3, [r0, #0]
 8004546:	e7d3      	b.n	80044f0 <_free_r+0x28>
 8004548:	6825      	ldr	r5, [r4, #0]
 800454a:	1961      	adds	r1, r4, r5
 800454c:	428b      	cmp	r3, r1
 800454e:	bf04      	itt	eq
 8004550:	6819      	ldreq	r1, [r3, #0]
 8004552:	685b      	ldreq	r3, [r3, #4]
 8004554:	6063      	str	r3, [r4, #4]
 8004556:	bf04      	itt	eq
 8004558:	1949      	addeq	r1, r1, r5
 800455a:	6021      	streq	r1, [r4, #0]
 800455c:	6054      	str	r4, [r2, #4]
 800455e:	e7c7      	b.n	80044f0 <_free_r+0x28>
 8004560:	b003      	add	sp, #12
 8004562:	bd30      	pop	{r4, r5, pc}
 8004564:	20000094 	.word	0x20000094

08004568 <_malloc_r>:
 8004568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456a:	1ccd      	adds	r5, r1, #3
 800456c:	f025 0503 	bic.w	r5, r5, #3
 8004570:	3508      	adds	r5, #8
 8004572:	2d0c      	cmp	r5, #12
 8004574:	bf38      	it	cc
 8004576:	250c      	movcc	r5, #12
 8004578:	2d00      	cmp	r5, #0
 800457a:	4606      	mov	r6, r0
 800457c:	db01      	blt.n	8004582 <_malloc_r+0x1a>
 800457e:	42a9      	cmp	r1, r5
 8004580:	d903      	bls.n	800458a <_malloc_r+0x22>
 8004582:	230c      	movs	r3, #12
 8004584:	6033      	str	r3, [r6, #0]
 8004586:	2000      	movs	r0, #0
 8004588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800458a:	f000 f87d 	bl	8004688 <__malloc_lock>
 800458e:	4921      	ldr	r1, [pc, #132]	; (8004614 <_malloc_r+0xac>)
 8004590:	680a      	ldr	r2, [r1, #0]
 8004592:	4614      	mov	r4, r2
 8004594:	b99c      	cbnz	r4, 80045be <_malloc_r+0x56>
 8004596:	4f20      	ldr	r7, [pc, #128]	; (8004618 <_malloc_r+0xb0>)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	b923      	cbnz	r3, 80045a6 <_malloc_r+0x3e>
 800459c:	4621      	mov	r1, r4
 800459e:	4630      	mov	r0, r6
 80045a0:	f000 f862 	bl	8004668 <_sbrk_r>
 80045a4:	6038      	str	r0, [r7, #0]
 80045a6:	4629      	mov	r1, r5
 80045a8:	4630      	mov	r0, r6
 80045aa:	f000 f85d 	bl	8004668 <_sbrk_r>
 80045ae:	1c43      	adds	r3, r0, #1
 80045b0:	d123      	bne.n	80045fa <_malloc_r+0x92>
 80045b2:	230c      	movs	r3, #12
 80045b4:	6033      	str	r3, [r6, #0]
 80045b6:	4630      	mov	r0, r6
 80045b8:	f000 f86c 	bl	8004694 <__malloc_unlock>
 80045bc:	e7e3      	b.n	8004586 <_malloc_r+0x1e>
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	1b5b      	subs	r3, r3, r5
 80045c2:	d417      	bmi.n	80045f4 <_malloc_r+0x8c>
 80045c4:	2b0b      	cmp	r3, #11
 80045c6:	d903      	bls.n	80045d0 <_malloc_r+0x68>
 80045c8:	6023      	str	r3, [r4, #0]
 80045ca:	441c      	add	r4, r3
 80045cc:	6025      	str	r5, [r4, #0]
 80045ce:	e004      	b.n	80045da <_malloc_r+0x72>
 80045d0:	6863      	ldr	r3, [r4, #4]
 80045d2:	42a2      	cmp	r2, r4
 80045d4:	bf0c      	ite	eq
 80045d6:	600b      	streq	r3, [r1, #0]
 80045d8:	6053      	strne	r3, [r2, #4]
 80045da:	4630      	mov	r0, r6
 80045dc:	f000 f85a 	bl	8004694 <__malloc_unlock>
 80045e0:	f104 000b 	add.w	r0, r4, #11
 80045e4:	1d23      	adds	r3, r4, #4
 80045e6:	f020 0007 	bic.w	r0, r0, #7
 80045ea:	1ac2      	subs	r2, r0, r3
 80045ec:	d0cc      	beq.n	8004588 <_malloc_r+0x20>
 80045ee:	1a1b      	subs	r3, r3, r0
 80045f0:	50a3      	str	r3, [r4, r2]
 80045f2:	e7c9      	b.n	8004588 <_malloc_r+0x20>
 80045f4:	4622      	mov	r2, r4
 80045f6:	6864      	ldr	r4, [r4, #4]
 80045f8:	e7cc      	b.n	8004594 <_malloc_r+0x2c>
 80045fa:	1cc4      	adds	r4, r0, #3
 80045fc:	f024 0403 	bic.w	r4, r4, #3
 8004600:	42a0      	cmp	r0, r4
 8004602:	d0e3      	beq.n	80045cc <_malloc_r+0x64>
 8004604:	1a21      	subs	r1, r4, r0
 8004606:	4630      	mov	r0, r6
 8004608:	f000 f82e 	bl	8004668 <_sbrk_r>
 800460c:	3001      	adds	r0, #1
 800460e:	d1dd      	bne.n	80045cc <_malloc_r+0x64>
 8004610:	e7cf      	b.n	80045b2 <_malloc_r+0x4a>
 8004612:	bf00      	nop
 8004614:	20000094 	.word	0x20000094
 8004618:	20000098 	.word	0x20000098

0800461c <_realloc_r>:
 800461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461e:	4607      	mov	r7, r0
 8004620:	4614      	mov	r4, r2
 8004622:	460e      	mov	r6, r1
 8004624:	b921      	cbnz	r1, 8004630 <_realloc_r+0x14>
 8004626:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800462a:	4611      	mov	r1, r2
 800462c:	f7ff bf9c 	b.w	8004568 <_malloc_r>
 8004630:	b922      	cbnz	r2, 800463c <_realloc_r+0x20>
 8004632:	f7ff ff49 	bl	80044c8 <_free_r>
 8004636:	4625      	mov	r5, r4
 8004638:	4628      	mov	r0, r5
 800463a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800463c:	f000 f830 	bl	80046a0 <_malloc_usable_size_r>
 8004640:	42a0      	cmp	r0, r4
 8004642:	d20f      	bcs.n	8004664 <_realloc_r+0x48>
 8004644:	4621      	mov	r1, r4
 8004646:	4638      	mov	r0, r7
 8004648:	f7ff ff8e 	bl	8004568 <_malloc_r>
 800464c:	4605      	mov	r5, r0
 800464e:	2800      	cmp	r0, #0
 8004650:	d0f2      	beq.n	8004638 <_realloc_r+0x1c>
 8004652:	4631      	mov	r1, r6
 8004654:	4622      	mov	r2, r4
 8004656:	f7ff ff0f 	bl	8004478 <memcpy>
 800465a:	4631      	mov	r1, r6
 800465c:	4638      	mov	r0, r7
 800465e:	f7ff ff33 	bl	80044c8 <_free_r>
 8004662:	e7e9      	b.n	8004638 <_realloc_r+0x1c>
 8004664:	4635      	mov	r5, r6
 8004666:	e7e7      	b.n	8004638 <_realloc_r+0x1c>

08004668 <_sbrk_r>:
 8004668:	b538      	push	{r3, r4, r5, lr}
 800466a:	4d06      	ldr	r5, [pc, #24]	; (8004684 <_sbrk_r+0x1c>)
 800466c:	2300      	movs	r3, #0
 800466e:	4604      	mov	r4, r0
 8004670:	4608      	mov	r0, r1
 8004672:	602b      	str	r3, [r5, #0]
 8004674:	f7fc fac0 	bl	8000bf8 <_sbrk>
 8004678:	1c43      	adds	r3, r0, #1
 800467a:	d102      	bne.n	8004682 <_sbrk_r+0x1a>
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	b103      	cbz	r3, 8004682 <_sbrk_r+0x1a>
 8004680:	6023      	str	r3, [r4, #0]
 8004682:	bd38      	pop	{r3, r4, r5, pc}
 8004684:	20000210 	.word	0x20000210

08004688 <__malloc_lock>:
 8004688:	4801      	ldr	r0, [pc, #4]	; (8004690 <__malloc_lock+0x8>)
 800468a:	f000 b811 	b.w	80046b0 <__retarget_lock_acquire_recursive>
 800468e:	bf00      	nop
 8004690:	20000218 	.word	0x20000218

08004694 <__malloc_unlock>:
 8004694:	4801      	ldr	r0, [pc, #4]	; (800469c <__malloc_unlock+0x8>)
 8004696:	f000 b80c 	b.w	80046b2 <__retarget_lock_release_recursive>
 800469a:	bf00      	nop
 800469c:	20000218 	.word	0x20000218

080046a0 <_malloc_usable_size_r>:
 80046a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046a4:	1f18      	subs	r0, r3, #4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	bfbc      	itt	lt
 80046aa:	580b      	ldrlt	r3, [r1, r0]
 80046ac:	18c0      	addlt	r0, r0, r3
 80046ae:	4770      	bx	lr

080046b0 <__retarget_lock_acquire_recursive>:
 80046b0:	4770      	bx	lr

080046b2 <__retarget_lock_release_recursive>:
 80046b2:	4770      	bx	lr

080046b4 <_init>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	bf00      	nop
 80046b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ba:	bc08      	pop	{r3}
 80046bc:	469e      	mov	lr, r3
 80046be:	4770      	bx	lr

080046c0 <_fini>:
 80046c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c2:	bf00      	nop
 80046c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c6:	bc08      	pop	{r3}
 80046c8:	469e      	mov	lr, r3
 80046ca:	4770      	bx	lr
